<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clayster.Library.Math</name>
    </assembly>
    <members>
        <member name="T:Clayster.Library.Math.Attributes.ReferenceExtensionAttribute">
            <summary>
            This attribute flags the extension method to be a reference method, i.e.
            it returns a new object that should replace the old object in future references.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Attributes.ReferenceExtensionAttribute.#ctor">
            <summary>
            This attribute flags the extension method to be a reference method, i.e.
            it returns a new object that should replace the old object in future references.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.CanvasGraph">
            <summary>
            Defines a canvas graph, i.e. a graph that can be drawn by script directly.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Graph">
            <summary>
            Base class for all graph classes.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IMultiplication">
            <summary>
            Base interface of objects that support multiplication.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)">
            <summary>
            Performs right multiplication. If able to perform the multiplication, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Element to be multiplied to the right of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)">
            <summary>
            Performs left multiplication. If able to perform the multiplication, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Element to be multiplied to the left of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)">
            <summary>
            Performs element-wise right multiplication. If able to perform the multiplication, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Element to be multiplied to the right of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)">
            <summary>
            Performs element-wise left multiplication. If able to perform the multiplication, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Element to be multiplied to the left of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative">
            <summary>
            If addition is commutative.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IDivision">
            <summary>
            Base interface of objects that support division.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)">
            <summary>
            Performs right division. If able to perform the division, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Divisor.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)">
            <summary>
            Performs left division. If able to perform the division, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Numerator.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideRight(System.Object)">
            <summary>
            Performs element-wise right division. If able to perform the division, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Divisor.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)">
            <summary>
            Performs element-wise left division. If able to perform the division, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Numerator.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IAddition">
            <summary>
            Base interface of objects that support addition.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)">
            <summary>
            Performs right addition. If able to perform the addition, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Element to be added to the right of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)">
            <summary>
            Performs left addition. If able to perform the addition, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Element to be added to the left of the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative">
            <summary>
            If addition is commutative.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.ISubtraction">
            <summary>
            Base interface of objects that support subtraction.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)">
            <summary>
            Performs right subtraction. If able to perform the subtraction, the result is returned. If not able, null is returned.
            </summary>
            <param name="RightElement">Element to be subtracted from the current element.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)">
            <summary>
            Performs left subtraction. If able to perform the subtraction, the result is returned. If not able, null is returned.
            </summary>
            <param name="LeftElement">Element from which the current element is to be subtracted.</param>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="F:Clayster.Library.Math.Graph.DefaultImageWidth">
            <summary>
            Default Image Width
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph.DefaultImageHeight">
            <summary>
            Default Image Height
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all graph classes.
            </summary>
            <param name="ExpressionNode">Expression node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.BeforeRender(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Rases the <see cref="E:Clayster.Library.Math.Graph.OnBeforeRender"/> event.
            </summary>
            <param name="Canvas">Drawing canvas.</param>
            <param name="Width">Width of bitmap.</param>
            <param name="Height">Height of bitmap.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.BeforeRenderGraphArea(System.Drawing.Graphics,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rases the <see cref="E:Clayster.Library.Math.Graph.OnBeforeRenderGraphArea"/> event.
            </summary>
            <param name="Canvas">Drawing canvas.</param>
            <param name="Width">Width of bitmap.</param>
            <param name="Height">Height of bitmap.</param>
            <param name="X1">X1</param>
            <param name="Y1">y1</param>
            <param name="X2">X2</param>
            <param name="Y2">Y2</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetDefaultImage(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets a default image of the graph.
            </summary>
            <returns>Default image.</returns>
            <param name="Background">Background color to use.</param>
            <param name="Axes">Axes color to use.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetDefaultImage(System.Drawing.Color)">
            <summary>
            Gets a default image of the graph.
            </summary>
            <returns>Default image.</returns>
            <param name="Background">Background color to use.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetDefaultImage">
            <summary>
            Gets a default image of the graph.
            </summary>
            <returns>Default image.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImage(System.Int32,System.Int32)">
            <summary>
            Gets an image of the graph.
            </summary>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImage(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an image of the graph.
            </summary>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImage(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Object@)">
            <summary>
            Gets an image of the graph.
            </summary>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="GraphImageStates">Graph Image States.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImage(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets an image of the graph.
            </summary>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="Background">Background color.</param>
            <param name="Axes">Color of axes.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImage(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            Gets an image of the graph.
            </summary>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="Background">Background color.</param>
            <param name="Axes">Color of axes.</param>
            <param name="GraphImageStates">Graph Image States.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            Draws the graph on a bitmap image
            </summary>
            <param name="Canvas">Canvas to draw on.</param>
            <param name="Width">Width of the image in pixels.</param>
            <param name="Height">Height of the image in pixels.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="Background">Background color.</param>
            <param name="Axes">Color of axes.</param>
            <param name="GraphImageStates">Graph Image States.</param>
            <returns>Image of graph.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.DragEvent(System.Double,System.Double,System.Object)">
            <summary>
            Is called when the graph is dragged.
            </summary>
            <param name="Dx">Delta-x</param>
            <param name="Dy">Delay-y</param>
            <param name="GraphImageStates">Graph state object</param>
            <returns>If the graph needs to be redrawn.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.WheelEvent(System.Int32,System.Object)">
            <summary>
            Is called when the mouse wheel is moved inside a graph that supports drag animation.
            </summary>
            <param name="Delta">Mouse wheel delta.</param>
            <param name="GraphImageStates">Graph state object</param>
            <returns>If the graph needs to be redrawn.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            Gets script to display when clicking the image.
            </summary>
            <param name="X">Image X-coordinate.</param>
            <param name="Y">Image Y-coordinate.</param>
            <param name="GraphImageStates">Graph state object</param>
            <returns>Script to display, or the empty string if none.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetMouseOverStatus(System.Double,System.Double,System.Object)">
            <summary>
            Gets a status message to display, when the mouse moves over the image.
            </summary>
            <param name="X">Image X-coordinate.</param>
            <param name="Y">Image Y-coordinate.</param>
            <param name="GraphImageStates">Graph state object</param>
            <returns>Status message to display, or the empty string if none.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetStepSize(System.Double)">
            <summary>
            Gets a step size to use for an axis of a given magnitude (i.e. span).
            </summary>
            <param name="Magnitude">Magnitude or span of axis.</param>
            <returns>Step size to use for drawing axes.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetStepSize(System.Double,System.Boolean)">
            <summary>
            Gets a step size to use for an axis of a given magnitude (i.e. span).
            </summary>
            <param name="Magnitude">Magnitude or span of axis.</param>
            <param name="Double">If twice the number of labels should be used.</param>
            <returns>Step size to use for drawing axes.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.AdjustMinMaxToStepSize(System.Double,System.Double@,System.Double@)">
            <summary>
            Adjust minimum and maximum values to proper values in relation to a given step size.
            </summary>
            <param name="StepSize">Step size</param>
            <param name="Min">Minimum value.</param>
            <param name="Max">Maximum value.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetLabels(System.DateTime@,System.DateTime@)">
            <summary>
            Calculates DateTime labels for use in graphs.
            </summary>
            <param name="Min">Minimum DateTime.</param>
            <param name="Max">Maximum DateTime.</param>
            <returns>Array of labels to use.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetLabels(System.DateTime@,System.DateTime@,System.Boolean)">
            <summary>
            Calculates DateTime labels for use in graphs.
            </summary>
            <param name="Min">Minimum DateTime.</param>
            <param name="Max">Maximum DateTime.</param>
            <param name="Double">If twice the number of labels are desired.</param>
            <returns>Array of labels to use.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ToString(System.Double)">
            <summary>
            Converts a double value to a string suitable for charts.
            </summary>
            <param name="v">Value</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ToString(System.Double,System.Double)">
            <summary>
            Converts a double value to a string suitable for charts.
            </summary>
            <param name="v">Value</param>
            <param name="StepSize">Step Size</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimepoints(System.DateTime[],System.Int32)">
            <summary>
            Gets a list of equally spaced timepoints.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrTimepoints">Number of timepoints to get.</param>
            <returns>Equally spaced timepoints.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimepoints(System.Collections.Generic.List{System.DateTime[]},System.Int32)">
            <summary>
            Gets a list of equally spaced timepoints.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrTimepoints">Number of timepoints to get.</param>
            <returns>Equally spaced timepoints.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimepoints(System.Collections.Generic.List{System.DateTime[]},System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets a list of equally spaced timepoints.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrTimepoints">Number of timepoints to get.</param>
            <param name="StartTimepoint">Starting timepoint</param>
            <param name="EndTimepoint">Ending timepoint</param>
            <returns>Equally spaced timepoints.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimeLabels(System.DateTime[],System.Int32)">
            <summary>
            Gets a list of equally spaced time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <returns>Labels of equally spaced times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimeLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32)">
            <summary>
            Gets a list of equally spaced time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <returns>Labels of equally spaced times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedTimeLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets a list of equally spaced time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <param name="StartTimepoint">Starting timepoint</param>
            <param name="EndTimepoint">Ending timepoint</param>
            <returns>Labels of equally spaced times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateLabels(System.DateTime[],System.Int32)">
            <summary>
            Gets a list of equally spaced date labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <returns>Labels of equally spaced dates.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32)">
            <summary>
            Gets a list of equally spaced date labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <returns>Labels of equally spaced dates.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Gets a list of equally spaced date labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <param name="StartTimepoint">Starting timepoint</param>
            <param name="EndTimepoint">Ending timepoint</param>
            <returns>Labels of equally spaced dates.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateTimeLabels(System.DateTime[],System.Int32,System.String)">
            <summary>
            Gets a list of equally spaced date and time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <param name="Format">Forma string to use to format the labels.</param>
            <returns>Labels of equally spaced dates and times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateTimeLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32,System.String)">
            <summary>
            Gets a list of equally spaced date and time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <param name="Format">Forma string to use to format the labels.</param>
            <returns>Labels of equally spaced dates and times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.GetEquallySpacedDateTimeLabels(System.Collections.Generic.List{System.DateTime[]},System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            Gets a list of equally spaced date and time labels.
            </summary>
            <param name="Timepoints">Timepoints.</param>
            <param name="NrLabels">Number of labels to get.</param>
            <param name="StartTimepoint">Starting timepoint</param>
            <param name="EndTimepoint">Ending timepoint</param>
            <param name="Format">Forma string to use to format the labels.</param>
            <returns>Labels of equally spaced dates and times.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Graph.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.DivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph.OnBeforeRender">
            <summary>
            Event raised before rendering the graph.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph.OnBeforeRenderGraphArea">
            <summary>
            Event raised before rendering the actual graph, but after calculating the size of the graph.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.ExpressionNode">
            <summary>
            ExpressionNode used to produce graph.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.DefaultBackgroundColor">
            <summary>
            Default background color.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.DefaultColor">
            <summary>
            Default background color.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.SupportsDragAnimation">
            <summary>
            If the graph type supports drag animation.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.RecommendedSize">
            <summary>
            Returns the recommended size of the graph, if any. If none, null is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Drawing.Color,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Defines a canvas graph, i.e. a graph that can be drawn by script directly.
            </summary>
            <param name="Width">Width of bitmap, in pixels.</param>
            <param name="Height">Height of bitmap, in pixels.</param>
            <param name="PixelFormat">Pixel format.</param>
            <param name="BackgroundColor">Background Color</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.#ctor(System.Drawing.Bitmap,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Defines a canvas graph, i.e. a graph that can be drawn by script directly.
            </summary>
            <param name="Bitmap">Bitmap</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Convert(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Converts a <see cref="T:System.Drawing.Drawing2D.Matrix"/> to a <see cref="T:Clayster.Library.Math.Matrices.RealMatrix"/>
            </summary>
            <param name="M">Matrix</param>
            <returns>Conveted matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Convert(Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            Converts a <see cref="T:Clayster.Library.Math.Matrices.RealMatrix"/> to a <see cref="T:System.Drawing.Drawing2D.Matrix"/>
            </summary>
            <param name="M">Matrix</param>
            <returns>Conveted matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.BeginContainer">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Clear(System.Drawing.Color)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Double,System.Double,System.Double,System.Double,System.Drawing.Size)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.CopyFromScreen(System.Double,System.Double,System.Double,System.Double,System.Drawing.Size,System.Drawing.CopyPixelOperation)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawArc(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBezier(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawBeziers(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Double,System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Double,System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawClosedCurve(System.Drawing.Pen,System.Object[],System.Double,System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Object[],System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Object[],System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawCurve(System.Drawing.Pen,System.Object[],System.Int32,System.Int32,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawEllipse(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Double,System.Double,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Object[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Double,System.Double,System.Double,System.Double,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Double,System.Double,System.Double,System.Double,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Double,System.Double,System.Double,System.Double,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Double,System.Double,System.Double,System.Double,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLine(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLines(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawLines(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPie(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawPolygon(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangle(System.Drawing.Pen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawRectangles(System.Drawing.Pen,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Double,System.Double,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ExcludeClip(System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ExcludeClip(System.Drawing.Region)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Object[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillClosedCurve(System.Drawing.Brush,System.Object[],System.Drawing.Drawing2D.FillMode,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillEllipse(System.Drawing.Brush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPie(System.Drawing.Brush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillPolygon(System.Drawing.Brush,System.Object[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangle(System.Drawing.Brush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRectangles(System.Drawing.Brush,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.FillRegion(System.Drawing.Brush,System.Drawing.Region)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Flush">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Flush(System.Drawing.Drawing2D.FlushIntention)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.GetNearestColor(System.Drawing.Color)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IntersectClip(System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IntersectClip(System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IntersectClip(System.Drawing.Region)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Drawing.Point)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Drawing.PointF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MultiplyTransform(Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.MultiplyTransform(Clayster.Library.Math.Matrices.RealMatrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ResetClip">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ResetTransform">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Restore(System.Drawing.Drawing2D.GraphicsState)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.RotateTransform(System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.RotateTransform(System.Double,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.Save">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ScaleTransform(System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.ScaleTransform(System.Double,System.Double,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Rectangle)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.RectangleF)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Object[])">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TranslateClip(System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TranslateClip(System.Int32,System.Int32)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TranslateTransform(System.Double,System.Double)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.CanvasGraph.TranslateTransform(System.Double,System.Double,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.DefaultBackgroundColor">
            <summary>
            <see cref="P:Clayster.Library.Math.Graph.DefaultBackgroundColor"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.RecommendedSize">
            <summary>
            <see cref="P:Clayster.Library.Math.Graph.RecommendedSize"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.Width">
            <summary>
            Width of bitmap
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.Height">
            <summary>
            Height of bitmap
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.Clip">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.ClipBounds">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.CompositingMode">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.CompositingQuality">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.DpiX">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.DpiY">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.InterpolationMode">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.IsClipEmpty">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.IsVisibleClipEmpty">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.PageScale">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.PageUnit">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.PixelOffsetMode">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.RenderingOrigin">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.SmoothingMode">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.TextContrast">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.TextRenderingHint">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.Transform">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.CanvasGraph.VisibleClipBounds">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Complex.ComplexNumber">
            <summary>
            Contains a complex number.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.INegation">
            <summary>
            Base interface of objects that support negation.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.INegation.Negate">
            <summary>
            Negates the element. If able to perform the subtraction, the result is returned. If not able, null is returned.
            </summary>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IInversion">
            <summary>
            Base interface of objects that support inversion.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IInversion.Invert">
            <summary>
            Inverts the element. If able to perform the subtraction, the result is returned. If not able, null is returned.
            </summary>
            <returns>Result, if possible, null if not.</returns>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.ILayoutEngine">
            <summary>
            Interface of objects that can export a layout.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)">
            <summary>
            How well the layout engine supports a given object.
            </summary>
            <param name="Object">Object to layout.</param>
            <returns>Support grade</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)">
            <summary>
            Gets the priority of an object.
            </summary>
            <param name="Object">Object to layout.</param>
            <returns>Priority of <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            Exports the object to XML.
            </summary>
            <param name="Object">Object to export.</param>
            <param name="w">XML Destination</param>
            <param name="ParentType">Type of the parent layout xml element.</param>
            <param name="AppendDelimiter">If a sequence delimiter should be appended at the end.</param>
            <param name="Tag">Tag to apply to the exported XML.</param>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.#ctor(System.Double,System.Double)">
            <summary>
            Contains a complex number.
            </summary>
            <param name="Re">Real part.</param>
            <param name="Im">Imaginary part.</param>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.#ctor(System.Double)">
            <summary>
            Contains a complex number.
            </summary>
            <param name="Re">Real part.</param>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Equals(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Checks if the complex number is equal to another complex number.
            </summary>
            <param name="z">Complex number to compare against.</param>
            <returns>If equal</returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Equals(System.Double)">
            <summary>
            Checks if the complex number is equal to another real number.
            </summary>
            <param name="r">Real number to compare against.</param>
            <returns>If equal</returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Addition(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Addition(System.Double,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Addition(Clayster.Library.Math.Complex.ComplexNumber,System.Double)">
            <summary>
            Complex addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Subtraction(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Subtraction(System.Double,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Subtraction(Clayster.Library.Math.Complex.ComplexNumber,System.Double)">
            <summary>
            Complex subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Multiply(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Multiply(System.Double,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Multiply(Clayster.Library.Math.Complex.ComplexNumber,System.Double)">
            <summary>
            Complex multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Division(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Division(System.Double,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_Division(Clayster.Library.Math.Complex.ComplexNumber,System.Double)">
            <summary>
            Complex division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.DivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.op_UnaryNegation(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Negation operator.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IInversion.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.InvertZ">
            <summary>
            Same as <see cref="M:Clayster.Library.Math.Interfaces.IInversion.Invert"/>, but the return value is type cast correctly.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.NegateZ">
            <summary>
            Same as <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>, but the return value is type cast correctly.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Arg">
            <summary>
            Argument of z
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Modulus">
            <summary>
            Modulus of z.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ManhattanModulus">
            <summary>
            Returns |Re|+|Im|.
            </summary>
            <returns>|Re|+|Im|</returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Exp">
            <summary>
            e^z
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Ln">
            <summary>
            ln(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Log">
            <summary>
            log(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Log2">
            <summary>
            log2(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Sqrt">
            <summary>
            sqrt(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Cos">
            <summary>
            cos(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.CosH">
            <summary>
            cosh(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Sin">
            <summary>
            sin(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.SinH">
            <summary>
            sinh(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Tan">
            <summary>
            tan(z)=sin(z)/cos(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.TanH">
            <summary>
            tanh(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.TimesI">
            <summary>
            i*z
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.TimesMinusI">
            <summary>
            -i*z
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.TimesHalfI">
            <summary>
            i*z/2
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Sqr">
            <summary>
            z^2
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Cube">
            <summary>
            z^3
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ACos">
            <summary>
            ACos(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ASin">
            <summary>
            ASin(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ATan">
            <summary>
            atan(z)
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Pow(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Complex power: z^<paramref name="Exponent"/>
            </summary>
            <param name="Exponent">Exponent</param>
            <returns>z^<paramref name="Exponent"/></returns>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.Conjugate">
            <summary>
            Conjugate of z
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Complex.ComplexNumber.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.Zero">
            <summary>
            0+0i
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.One">
            <summary>
            1+0i
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.Re">
            <summary>
            Real part
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.Im">
            <summary>
            Imaginary part.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsReal">
            <summary>
            If the complex number is real (i.e. has an imaginary part of 0).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsZero">
            <summary>
            If the complex number is equal to zero.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsInfinity">
            <summary>
            If the value is infinite.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Complex.ComplexNumber.IsNaN">
            <summary>
            If the value is undefined (Not a Number).
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Complex.RealValueBehaviour">
            <summary>
            Behaviour of the function for real-valued parameters.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Complex.RealValueBehaviour.RealInR">
            <summary>
            Real in whole of R.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Complex.RealValueBehaviour.RealInRPlus">
            <summary>
            Real in R+
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Complex.RealValueBehaviour.RealInInterval">
            <summary>
            Real in a specific interval of R.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Complex.RealValueBehaviour.Complex">
            <summary>
            Can be complex everywhere.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd">
            <summary>
            Maintains a context for script execution of sum and product loops.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContext">
            <summary>
            Maintains a context for script execution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Maintains a context for script execution.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            Executes the current node, stepping over internal nodes.
            </summary>
            <param name="Environment">Execution environment.</param>
            <param name="Result">Intermediate result</param>
            <param name="Stack">Execution context stack.</param>
            <returns>If done, null is returned. If next step is made from the same context, this is returned.
            If stepping into a node, a new context is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            Steps into the current node.
            </summary>
            <param name="Environment">Execution environment.</param>
            <param name="Result">Intermediate result</param>
            <param name="Stack">Execution context stack.</param>
            <returns>Execution context of next step, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            Is called when stepping out from the execution of an inner subtree.
            </summary>
            <param name="Environment">Execution environment.</param>
            <param name="Result">Return value</param>
            <returns>Execution context of next step, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            If the context catches the exception.
            </summary>
            <param name="Environment">Execution environment.</param>
            <param name="Exception">Exception object.</param>
            <returns>If the context catches the exception.</returns>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.Node">
            <summary>
            Defining Node
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.Tag">
            <summary>
            Tag value, the caller can use to tag information to a given execution context.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode">
            <summary>
            returns the next pending node.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.#ctor(Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2)">
            <summary>
            Maintains a context for script execution of sum and product loops.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.#ctor(Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2)">
            <summary>
            Maintains a context for script execution of sum and product loops.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextSumProd.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec">
            <summary>
            Maintains a context for script execution of the pre/post increment/decrement operators.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,System.String,System.Boolean,System.Boolean)">
            <summary>
            Maintains a context for script execution of the pre/post increment/decrement operators.
            </summary>
            <param name="Node">Operator node</param>
            <param name="Name">Variable name</param>
            <param name="PostOperator">true=Post operator, false=pre operator</param>
            <param name="IncOperator">true=increment operator, false=decrement operator</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextIncDec.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries">
            <summary>
            Maintains a context for script execution of series defined using a loop variable.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries.#ctor(Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series)">
            <summary>
            Maintains a context for script execution of series defined using a loop variable.
            </summary>
            <param name="Series">Looped series</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextSeries.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment">
            <summary>
            Maintains a context for script execution of binary operator assignments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator,Clayster.Library.Math.ExpressionNodes.Operators.Period)">
            <summary>
            Maintains a context for script execution of binary operator assignments.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Property">Property definition</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectPropertyAssignment.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty">
            <summary>
            Maintains a context for script execution of the indexed object property operator.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.Period,Clayster.Library.Math.ExpressionNodes.Operators.Index)">
            <summary>
            Maintains a context for script execution of the indexed object property operator.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Index">Indexed property definition.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectIndexedProperty.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod">
            <summary>
            Maintains a context for script execution of the object method operator.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.Period,Clayster.Library.Math.ExpressionNodes.ExternalFunction)">
            <summary>
            Maintains a context for script execution of the object method operator.
            </summary>
            <param name="Node">Expression node</param>
            <param name="ExternalFunction">Method definition.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectMethod.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty">
            <summary>
            Maintains a context for script execution of the object property operator.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.Period,Clayster.Library.Math.ExpressionNodes.VariableReference)">
            <summary>
            Maintains a context for script execution of the object property operator.
            </summary>
            <param name="Node">Expression node</param>
            <param name="VariableReference">Variable reference.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextObjectProperty.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextIsDefined">
            <summary>
            Maintains a context for script execution of the IsDefined() function.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction">
            <summary>
            Maintains a context for script execution of functions.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.#ctor(Clayster.Library.Math.ExpressionNodes.Functions.Function,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of functions.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Parameters">Function parameters.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.SetExceptionValue(System.Object)">
            <summary>
            Returns an exception value in the next step.
            </summary>
            <param name="Value">Exception value.</param>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextFunction.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIsDefined.#ctor(Clayster.Library.Math.ExpressionNodes.Functions.Function,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of the IsDefined() function.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Parameters">Function parameters.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIsDefined.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextTry">
            <summary>
            Maintains a context for script execution of try-catch-finally statements.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.#ctor(Clayster.Library.Math.ExpressionNodes.Try)">
            <summary>
            Maintains a context for script execution of try-catch-finally statements.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextTry.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextFor">
            <summary>
            Maintains a context for script execution of for loops.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFor.#ctor(Clayster.Library.Math.ExpressionNodes.For)">
            <summary>
            Maintains a context for script execution of binary operators.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFor.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFor.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextFor.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextFor.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach">
            <summary>
            Maintains a context for script execution of for-each loops.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach.#ctor(Clayster.Library.Math.ExpressionNodes.ForEachNode,System.Boolean)">
            <summary>
            Maintains a context for script execution of binary operators.
            </summary>
            <param name="Node">Expression node</param>
            <param name="ReturnSeries">If a series is to be returned (true), or only the last value (false).</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextForEach.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile">
            <summary>
            Maintains a context for script execution of while loops.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile.#ctor(Clayster.Library.Math.ExpressionNodes.While)">
            <summary>
            Maintains a context for script execution of binary operators.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextWhile.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextIf">
            <summary>
            Maintains a context for script execution of conditional statements.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIf.#ctor(Clayster.Library.Math.ExpressionNodes.If)">
            <summary>
            Maintains a context for script execution of conditional statements.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIf.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIf.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextIf.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextIf.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction">
            <summary>
            Maintains a context for script execution of external function evaluation.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.#ctor(Clayster.Library.Math.ExpressionNodes.ExternalFunction,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of external function evaluation.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Parameters">Function parameters.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextExternalFunction.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction">
            <summary>
            Maintains a context for script execution of dynamic function evaluation.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of dynamic function evaluation.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Parameters">Function parameters.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.Catches(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextDynamicFunction.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower">
            <summary>
            Maintains a context for script execution of the lambda power operator.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower)">
            <summary>
            Maintains a context for script execution of the lambda power operator.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Power">Power node.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextLambdaPower.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment">
            <summary>
            Maintains a context for script execution of binary operator assignments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator,Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator)">
            <summary>
            Maintains a context for script execution of binary operator assignments.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Index">Index.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperatorAssignment.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode">
            <summary>
            Maintains a context for script execution of multi-nodes.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of multi-nodes.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Parameters">Function parameters.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextMultiNode.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator">
            <summary>
            Maintains a context for script execution of binary operators.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator)">
            <summary>
            Maintains a context for script execution of binary operators.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextBinaryOperator.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator">
            <summary>
            Maintains a context for script execution of unary operators.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator)">
            <summary>
            Maintains a context for script execution of unary operators.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextUnaryOperator.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence">
            <summary>
            Maintains a context for script execution of sequences of nodes.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Maintains a context for script execution of sequences of nodes.
            </summary>
            <param name="Node">Expression node</param>
            <param name="Sequence">Sequence of expression nodes.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextSequence.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode">
            <summary>
            Maintains a context for script execution of leaf nodes.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Maintains a context for script execution of leaf nodes.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode.StepOver(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.StepInto(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object@,System.Collections.Generic.LinkedList{Clayster.Library.Math.ExecutionControl.ExecutionContext})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExecutionControl.ExecutionContext.ReturnFrom(Clayster.Library.Math.ExecutionControl.ExecutionEnvironment,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionContextLeafNode.PendingNode">
            <summary>
            <see cref="P:Clayster.Library.Math.ExecutionControl.ExecutionContext.PendingNode"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment">
            <summary>
            Maintains an environment for script execution and control.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.#ctor(Clayster.Library.Math.Expression,Clayster.Library.Math.Variables)">
            <summary>
            Maintains an environment for script execution and control.
            </summary>
            <param name="Expression">Expression</param>
            <param name="Variables">Variables</param>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepOver">
            <summary>
            Executes the current node, stepping over internal nodes.
            </summary>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepOver(System.Boolean)">
            <summary>
            Executes the current node, stepping over internal nodes.
            </summary>
            <param name="Timed">If the operation should be timed.</param>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepInto">
            <summary>
            Steps into the current node.
            </summary>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepInto(System.Boolean)">
            <summary>
            Steps into the current node.
            </summary>
            <param name="Timed">If the operation should be timed.</param>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepOut">
            <summary>
            Steps out of the current context, i.e. executes script until it returns to the current caller.
            </summary>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StepOut(System.Boolean)">
            <summary>
            Steps out of the current context, i.e. executes script until it returns to the current caller.
            </summary>
            <param name="Timed">If the operation should be timed.</param>
            <returns>If execution was performed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.GetStack">
            <summary>
            Stack of execution contexts. The first item in the list, is the topmost, the last is the current context.
            </summary>
            <returns>Array of execution contexts</returns>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.Done">
            <summary>
            If execution is done.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.Variables">
            <summary>
            Variables
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.IntermediateResult">
            <summary>
            Intermediate result.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.CurrentContext">
            <summary>
            Current context.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StackDepth">
            <summary>
            Stack depth
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExecutionControl.ExecutionEnvironment.StackEmpty">
            <summary>
            If the stack is empty.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.VariablesConstant">
            <summary>
            Handles the variables constant. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant">
            <summary>
            Handles named constants. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.VariableReference">
            <summary>
            Contains a reference to a variable.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ExpressionNode">
            <summary>
            Base class of all expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.ILayout">
            <summary>
            Interface of objects that can export a layout.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILayout.ExportLayoutXml(System.String,System.Double,System.Drawing.Color)">
            <summary>
            Exports the layout of the object to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontName">Default Font name</param>
            <param name="FontSize">Default Font size</param>
            <param name="FontColor">Default Font color</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Expression">Parent expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.#ctor(Clayster.Library.Math.Expression,System.Int32)">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Expression">Parent expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Expression">Parent expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the node.
            </summary>
            <param name="Variables">Variables to use for evaluation.</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the node could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            Performs symbolic differentiation.
            </summary>
            <param name="VariableName">Differentiation variable.</param>
            <param name="Variables">Collection of variables.</param>
            <returns>Symbolic differentiation</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If differentiation not defined.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants">
            <summary>
            Evaluates any value type constants.
            </summary>
            <returns>Expression Node with possible operations on possible value type constants already evaluated.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy">
            <summary>
            Creates a copy of the expression node.
            </summary>
            <returns>Copy of the expression node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            Iterates through all sub-nodes of the expression node.
            </summary>
            <param name="Method">Method to call for each node.</param>
            <param name="DepthFirst">If the method should iterate through children first (Depth first) or not.</param>
            <param name="Parameter">Parameter to pass on to <paramref name="Method"/>.</param>
            <returns>true if process completed successfully, or false if it was aborted.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Print(System.String,Clayster.Library.Math.Variables)">
            <summary>
            Prints some text to the curently selected print output, or the console output if none.
            </summary>
            <param name="s">String to print.</param>
            <param name="Variables">Current variables collection.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Preview(System.Object)">
            <summary>
            Previews the value on any preview recipients.
            </summary>
            <param name="Value">Value to preview</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.StatusMessage(System.String)">
            <summary>
            Previews the value on any preview recipients.
            </summary>
            <param name="StatusMessage">Status message</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToDouble(System.Object,System.Boolean)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1.0 and false-&gt;0.0).</param>
            <returns>double</returns>
            <exception cref="T:System.Exception">If not convertible to a double value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToDouble(System.Object)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object</param>
            <returns>double</returns>
            <exception cref="T:System.Exception">If not convertible to a double value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToDouble(System.Object,System.Boolean,System.Double@)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1.0 and false-&gt;0.0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a double value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToDouble(System.Object,System.Double@)">
            <summary>
            Converts an object to a double value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a double value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToSingle(System.Object,System.Boolean)">
            <summary>
            Converts an object to a float value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1.0 and false-&gt;0.0).</param>
            <returns>float</returns>
            <exception cref="T:System.Exception">If not convertible to a float value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToSingle(System.Object)">
            <summary>
            Converts an object to a float value.
            </summary>
            <param name="Object">Object</param>
            <returns>float</returns>
            <exception cref="T:System.Exception">If not convertible to a float value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToSingle(System.Object,System.Boolean,System.Single@)">
            <summary>
            Converts an object to a float value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1.0 and false-&gt;0.0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a float value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToSingle(System.Object,System.Single@)">
            <summary>
            Converts an object to a float value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a float value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToDecimal(System.Object,System.Boolean)">
            <summary>
            Converts an object to a decimal value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <returns>decimal</returns>
            <exception cref="T:System.Exception">If not convertible to a decimal value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToDecimal(System.Object)">
            <summary>
            Converts an object to a decimal value.
            </summary>
            <param name="Object">Object</param>
            <returns>decimal</returns>
            <exception cref="T:System.Exception">If not convertible to a decimal value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToDecimal(System.Object,System.Boolean,System.Decimal@)">
            <summary>
            Converts an object to a decimal value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a decimal value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToDecimal(System.Object,System.Decimal@)">
            <summary>
            Converts an object to a decimal value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a decimal value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToComplex(System.Object)">
            <summary>
            Converts an object to a complex value.
            </summary>
            <param name="Object">Object</param>
            <returns><see cref="T:Clayster.Library.Math.Complex.ComplexNumber"/></returns>
            <exception cref="T:System.Exception">If not convertible to a complex value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToComplex(System.Object,Clayster.Library.Math.Complex.ComplexNumber@)">
            <summary>
            Converts an object to a complex value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a complex value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToBoolean(System.Object)">
            <summary>
            Converts an object to a boolean value.
            </summary>
            <param name="Object">Object</param>
            <returns>boolean</returns>
            <exception cref="T:System.Exception">If not convertible to a boolean value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToBoolean(System.Object,System.Boolean@)">
            <summary>
            Converts an object to a boolean value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a boolean value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt64(System.Object,System.Boolean)">
            <summary>
            Converts an object to a long integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <returns>Int64</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt64(System.Object)">
            <summary>
            Converts an object to a long integer value.
            </summary>
            <param name="Object">Object</param>
            <returns>Int64</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt64(System.Object,System.Boolean,System.Int64@)">
            <summary>
            Converts an object to a long integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt64(System.Object,System.Int64@)">
            <summary>
            Converts an object to a long integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt64InclEnum(System.Object,System.Boolean)">
            <summary>
            Converts an object to a long integer value, including enum values.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <returns>Int64InclEnum</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt64InclEnum(System.Object)">
            <summary>
            Converts an object to a long integer value.
            </summary>
            <param name="Object">Object</param>
            <returns>Int64InclEnum</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt64InclEnum(System.Object,System.Boolean,System.Int64@)">
            <summary>
            Converts an object to a long integer value, including enum values.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt64InclEnum(System.Object,System.Int64@)">
            <summary>
            Converts an object to a long integer value, including enum values.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to a long integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt32(System.Object,System.Boolean)">
            <summary>
            Converts an object to an integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <returns>Int32</returns>
            <exception cref="T:System.Exception">If not convertible to an integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToInt32(System.Object)">
            <summary>
            Converts an object to an integer value.
            </summary>
            <param name="Object">Object</param>
            <returns>Int32</returns>
            <exception cref="T:System.Exception">If not convertible to an integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt32(System.Object,System.Boolean,System.Int32@)">
            <summary>
            Converts an object to an integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="AllowBoolConversion">If boolean values can be converted (true-&gt;1 and false-&gt;0).</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to an integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToInt32(System.Object,System.Int32@)">
            <summary>
            Converts an object to an integer value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Result, if return value is true.</param>
            <returns>If the conversion was successful or not.</returns>
            <exception cref="T:System.Exception">If not convertible to an integer value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToColor(System.Object)">
            <summary>
            Converts an object to a color value.
            </summary>
            <param name="Object">Object</param>
            <returns>Color</returns>
            <exception cref="T:System.Exception">If not convertible to a color value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.TryToColor(System.Object,System.Drawing.Color@)">
            <summary>
            Tries to convert an object to a color value.
            </summary>
            <param name="Object">Object</param>
            <param name="Result">Color</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToComplex(System.Double[])">
            <summary>
            Converts a real vector to a complex vector.
            </summary>
            <param name="R">Real vector.</param>
            <returns>Complex vector.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ToRealMatrix(System.Object)">
            <summary>
            Converts an object to a real-valued matrix.
            </summary>
            <param name="Object">Object</param>
            <returns>Real-valued matrix.</returns>
            <exception cref="T:System.Exception">If not convertible to a real-valued matrix.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.CheckRealOrComplexArray(System.Object,System.Double[]@,Clayster.Library.Math.Complex.ComplexNumber[]@)">
            <summary>
            Makes sure a parameter is either a double or complex array, or convertible to one of those.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Real">If a double array, this parameter will contain the corresponding value.</param>
            <param name="Complex">If a complex array, this parameter will contain the corresponding value.</param>
            <returns>If one of the corresponding array types are found or created.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetOptimizedMatrix(System.Int32,System.Int32,System.Array)">
            <summary>
            Creates a matrix of the most efficient type, given its untyped elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of the elements of the matrix.</param>
            <returns>Matrix</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="Elements"/> does not contain
            <paramref name="Width"/>*<paramref name="Height"/> number of elements.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.CheckOptimizedVectorOrMatrix(System.Object[],System.Boolean)">
            <summary>
            Checks for optimized vector and matrix return types.
            </summary>
            <param name="Vector">Newly formed vector.</param>
            <param name="DefaultTransposed">If resulting matrices should be transposed by default.</param>
            <returns>Most suitable object type.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildMultiplication(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds a multiplication node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> or <paramref name="Right"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/> is returned. Or if <paramref name="Left"/> or <paramref name="Right"/>
            is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.One"/>, the other is returned.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the multiplication of <paramref name="Left"/> and <paramref name="Right"/>, if necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildElementMultiplication(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds an element multiplication node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> or <paramref name="Right"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/> is returned. Or if <paramref name="Left"/> or <paramref name="Right"/>
            is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.One"/>, the other is returned.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the element multiplication of <paramref name="Left"/> and <paramref name="Right"/>, if necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildDivision(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds a division node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/> is returned. Or if <paramref name="Right"/>
            is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.One"/>, the <paramref name="Left"/> is returned.
            If <paramref name="Left"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.One"/>, <paramref name="Right"/>
            is returned inverted.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the division of <paramref name="Left"/> and <paramref name="Right"/>, as necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildElementDivision(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds a element division node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/> is returned. Or if <paramref name="Right"/>
            is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.One"/>, the <paramref name="Left"/> is returned.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the element division of <paramref name="Left"/> and <paramref name="Right"/>, as necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildAddition(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds an addition node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> or <paramref name="Right"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            the other node i returned.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the addition of <paramref name="Left"/> and <paramref name="Right"/>, if necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BuildSubtraction(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Builds a subtraction node of <paramref name="Left"/> and <paramref name="Right"/>. However if
            <paramref name="Left"/> is equal to <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, 
            <paramref name="Right"/> is returned negated, and if <paramref name="Right"/> is equal to
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero"/>, <paramref name="Left"/> is returned as is.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Expression.</param>
            <returns>Node containg the subtraction of <paramref name="Left"/> and <paramref name="Right"/>, as necessary.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the node and its children to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportXml">
            <summary>
            Exports the expression to XML.
            </summary>
            <returns>XML String.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="AppendDelimiter">If a semicolon (sequence) delimiter should be appended at the end of the instruction or not.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayoutTag(System.Xml.XmlWriter)">
            <summary>
            Adds a tag attribute to the current XML element being exported to the XML Layout.
            </summary>
            <param name="w">XML Output</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayoutXml(System.String,System.Double,System.Drawing.Color)">
            <summary>
            Exports the sub-expression layout to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontName">Font name</param>
            <param name="FontSize">Font size</param>
            <param name="FontColor">Font color</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportSubIndex(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Exports a layout for a subindex to the currently exported node.
            </summary>
            <param name="w">Layout output.</param>
            <param name="Index">Indices to layout</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportPower(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Exports a layout for power to the currently exported node.
            </summary>
            <param name="w">Layout output.</param>
            <param name="Index">Index to layout</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.BeginPower(System.Xml.XmlWriter)">
            <summary>
            Writes an opening of a power layout construct.
            </summary>
            <param name="w">Layout XML output</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EndPower(System.Xml.XmlWriter)">
            <summary>
            Writes a closing of a power layout construct.
            </summary>
            <param name="w">Layout XML output</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetVariables">
            <summary>
            Extracts available variables from the expression.
            </summary>
            <returns>Array (possible empty) of variables found in the expression.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Searches the sub-tree for solutions that would evaluate to the provided <paramref name="Value"/>.
            </summary>
            <param name="Value">Value</param>
            <param name="Variables">Current variable collection.</param>
            <returns>Solutions, if found, or null if none found.</returns>
            <exception cref="T:System.Exception">If the sub-tree could not solve the problem.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.JoinSolutionsAnd(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Joins two solution sets using the AND operator, removing conflicting solutions.
            </summary>
            <param name="Solutions">Previous solution set. May be null during the first call.</param>
            <param name="NewSolutions">New solution set. null=no solutions found.</param>
            <returns>Joined solution set. null=no common solutions found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.JoinSolutionsOr(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}}@,System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Joins two solution sets using the OR operator.
            </summary>
            <param name="Solutions">Previous solution set. (May be null.) Will be updated with new solutions.</param>
            <param name="NewSolutions">New solution set. null=no solutions found.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext">
            <summary>
            Gets an execution context for the node. The execution context allows the caller to control
            execution of the node.
            </summary>
            <returns>Execution context.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Substitute(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            Performs a substitution operation on the node.
            </summary>
            <param name="Values">Contains values to substitute, if found.</param>
            <returns>The substitution.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Substitute(Clayster.Library.Math.Variables,System.Boolean)">
            <summary>
            Performs a substitution operation on the node.
            </summary>
            <param name="Values">Contains values to substitute, if found.</param>
            <param name="ExcludeGlobal">If global variables are to be excluded.</param>
            <returns>The substitution.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Substitute(Clayster.Library.Math.Variables,System.Int32)">
            <summary>
            Performs a substitution operation on the node.
            </summary>
            <param name="Values">Contains values to substitute, if found.</param>
            <param name="OnlyFromStackDepth">If only variables from a given stack depth are to be substituted. -1 = include global values.</param>
            <returns>The substitution.</returns>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Expression">
            <summary>
            Parent expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.StartPosition">
            <summary>
            Start position of the node as sub expression of the parent expression. If no start position
            is defined for the node, this property will be equal to <see cref="F:System.Int32.MinValue"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.StopPosition">
            <summary>
            Stop position of the node as sub expression of the parent expression. If no stop position
            is defined for the node, this property will be equal to <see cref="F:System.Int32.MinValue"/>.
            The stop position is exclusive, i.e. <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.StopPosition"/>-<see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.StartPosition"/>
            equals the length of the sub expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.SubExpression">
            <summary>
            Sub expression of the node, if available. If not defined, null is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.SubExpressionDefined">
            <summary>
            If a sub expression for this node is defined or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.LayoutTag">
            <summary>
            Layout Tag.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority">
            <summary>
            Expression Node priority. A higher priority operator is parsed before a lower priority operator.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnLeftSide">
            <summary>
            Priority of the node, when situated at the left side of a binary operator. By default, it returns the
            same value as <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide">
            <summary>
            Priority of the node, when situated at the right side of a binary operator. By default, it returns the
            same value as <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren">
            <summary>
            If the node has children or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children">
            <summary>
            An array of child nodes available on the node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence">
            <summary>
            If the expression node should be treated as a sequence, in controlled execution.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains a reference to a variable.
            </summary>
            <param name="Name">Variable name</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.#ctor(System.String,Clayster.Library.Math.Expression)">
            <summary>
            Contains a reference to a variable.
            </summary>
            <param name="Name">Variable name</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.VariableReference.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.VariableReference.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.VariableReference.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.VariableReference.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.VariableReference.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.#ctor(System.String,System.Object,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles named constants. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <param name="Name">Name of constant</param>
            <param name="Value">Value</param>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.#ctor(System.String,System.Double,Clayster.Library.Math.Expression)">
            <summary>
            Handles named constants. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <param name="Name">Name of constant</param>
            <param name="Value">Value</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamedConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VariablesConstant.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles the variables constant. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <param name="Name">Name of constant</param>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VariablesConstant.#ctor(System.String,Clayster.Library.Math.Expression)">
            <summary>
            Handles the variables constant. If there's a variable in the variable collection with the same name,
            that variable takes precedence.
            </summary>
            <param name="Name">Name of constant</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VariablesConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VariablesConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode">
            <summary>
            Base class of expression nodes with multiple child nodes.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class of expression nodes with multiple child nodes.
            </summary>
            <param name="Expression">Parent expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.#ctor(Clayster.Library.Math.Expression,System.Int32)">
            <summary>
            Base class of expression nodes with multiple child nodes.
            </summary>
            <param name="Expression">Parent expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class of expression nodes with multiple child nodes.
            </summary>
            <param name="Expression">Parent expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Children">Child nodes</param>
            <param name="Expression">Parent expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
            <returns>New instance of the node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous">
            <summary>
            Allows script to be executed asynchronously, if executed in a context allowing asynchronous operations,
            i.e. the expression owner implements <see cref="T:Clayster.Library.Math.Interfaces.IAsynchronousContext"/>.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters">
            <summary>
            Base class for all multiple scalar variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Function">
            <summary>
            Base class for all functions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class for all functions.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all functions.
            </summary>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses the expression from the given position.
            </summary>
            <param name="Exp">Expression being parsed.</param>
            <param name="Pos">Parsing should start at this postion.</param>
            <param name="Len">Length of the string to parse.</param>
            <param name="Start">Start of the sub-expression.</param>
            <returns>Parsed expression node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.ExportFunctionName(System.Xml.XmlWriter)">
            <summary>
            Exports the function name.
            </summary>
            <param name="w">XML output</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            Checks if the number of parameters is correct.
            </summary>
            <param name="ParameterCount">Number of parameters parsed.</param>
            <returns>true if the number of parameters is correct.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            Creates an instance of the function.
            </summary>
            <param name="Arguments">Arguments.</param>
            <param name="Expression">Expression</param>
            <returns>New instance of the function.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName">
            <summary>
            Name of function
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms">
            <summary>
            Array of synonymuous names for the function. All synonyms can be used in expressions and
            detected when parsing string based expressions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters">
            <summary>
            Default number of parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters">
            <summary>
            Returns an array of parameter nodes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.#ctor(Clayster.Library.Math.Expression,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Base class for all multiple scalar variable functions.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="Parameters">Parameters</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Adds a parameter to the function.
            </summary>
            <param name="Parameter">Parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            If the function evaluation logic can handle arrays at a given parameter position. Default value is false.
            </summary>
            <param name="ParameterPosition">Zero-based parameter index.</param>
            <param name="ParameterCount">Total number of parameters.</param>
            <returns>true if the function evaluation logic can handle arrays at the given parameter index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateCanonicalProtected(Clayster.Library.Math.Expression,System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Expression">Expression</param>
            <param name="Parameters">Parameters</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given its parameters.
            </summary>
            <param name="Parameters">The parameters to use when evaluateing function.</param>
            <param name="Variables">Available variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <returns>New object instance of the function node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Item(System.Int32)">
            <summary>
            Returns the parameter with the given index.
            </summary>
            <param name="Index">Zero-based index of parameter.</param>
            <returns>Paramter with the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If Index is negative, or greater than or equal to
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.ParameterCount"/>.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Allows script to be executed asynchronously, if executed in a context allowing asynchronous operations,
            i.e. the expression owner implements <see cref="T:Clayster.Library.Math.Interfaces.IAsynchronousContext"/>.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Asynchronous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults">
            <summary>
            Clears any asynchronous results forcing recalculations of existing ones.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters">
            <summary>
            Base class for all functions without parameters.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class for all functions without parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses the expression from the given position.
            </summary>
            <param name="Exp">Expression being parsed.</param>
            <param name="Pos">Parsing should start at this postion.</param>
            <param name="Len">Length of the string to parse.</param>
            <param name="Start">Start position in the expression.</param>
            <returns>Parsed expression node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Clears any asynchronous results forcing recalculations of existing ones.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.ClearAsynchronousResults.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status">
            <summary>
            Sends a status message to any status recipitens.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter">
            <summary>
            Base class for all single scalar variable functions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single scalar variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all single scalar variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="Parameter">Parameter to use when evaluating function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="M">Matrix Parameter to use when evaluating function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="M">Matrix Parameter to use when evaluating function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="M">Matrix Parameter to use when evaluating function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="Vector">Vector Parameter to use when evaluating function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter">Parameter</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.Parameter">
            <summary>
            Function parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Sends a status message to any status recipitens.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Status.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend">
            <summary>
            Creates a new color by blending two existing colors.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new color by blending two existing colors.
            </summary>
            <param name="Color1">Color 1</param>
            <param name="Color2">Color 2</param>
            <param name="P">Interpolation factor. 0=<paramref name="Color1"/>, 1=<paramref name="Color2"/>.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a new color by blending two existing colors.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.Evaluate(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Blends two colors.
            </summary>
            <param name="Color1">Color 1</param>
            <param name="Color2">Color 2</param>
            <param name="p">Interpolation constant (0-1).</param>
            <returns>Blended color. 0=Color 1, 1=Color2.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.Evaluate(System.Drawing.Image,System.Drawing.Color,System.Double)">
            <summary>
            Blends an image with a specified color.
            </summary>
            <param name="Source">Source image.</param>
            <param name="BlendColor">Blend with this color.</param>
            <param name="p">Blend intensity. 0=No blending, 1=Only Blend Color.</param>
            <returns>Blended image.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.Evaluate(System.Drawing.Image,System.Drawing.Image,System.Double)">
            <summary>
            Blends an image with another.
            </summary>
            <param name="Image1">First image.</param>
            <param name="Image2">Second image.</param>
            <param name="p">Blend intensity. 0=Image1, 1=Image2.</param>
            <returns>Blended image.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Blend.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart">
            <summary>
            Creates a pie chart.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Labels">Labels</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Labels">Labels</param>
            <param name="Offsets">Offsets of individual pieces, in pixels.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Labels">Labels</param>
            <param name="Offsets">Offsets of individual pieces, in pixels.</param>
            <param name="AngleOffset">Rotational offset of pie chart.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Labels">Labels</param>
            <param name="Offsets">Offsets of individual pieces, in pixels.</param>
            <param name="AngleOffset">Rotational offset of pie chart.</param>
            <param name="StartRel">Relative start of pieces. 0=centerpoint, 1=border.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
            <param name="Data">Data points</param>
            <param name="Colors">Colors</param>
            <param name="Labels">Labels</param>
            <param name="Offsets">Offsets of individual pieces, in pixels.</param>
            <param name="AngleOffset">Rotational offset of pie chart.</param>
            <param name="StartRel">Relative start of pieces. 0=centerpoint, 1=border.</param>
            <param name="EndRel">Relative end of pieces. 0=centerpoint, 1=border.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a pie chart.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.PieChart.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute">
            <summary>
            Performs an image convolution operation.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters">
            <summary>
            Base class for all two scalar variable functions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all two scalar variable functions.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function given two parameters.
            </summary>
            <param name="Parameter1">The first parameter to use when evaluateing function.</param>
            <param name="Parameter2">The second parameter to use when evaluateing function.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Parameter1">
            <summary>
            First parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Parameter2">
            <summary>
            Second parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsMatrices">
            <summary>
            If the function evaluation supports handling of matrices.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter">
            <summary>
            If the function also supports having only one parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Performs an image convolution operation.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.SupportsMatrices">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsMatrices"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.Convolute.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.BlueComponent">
            <summary>
            Returns a real-valued matrix containing the blue component of an image.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.BlueComponent.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a real-valued matrix containing the blue component of an image.
            </summary>
            <param name="Parameter">Image</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.BlueComponent.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.BlueComponent.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.BlueComponent.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.AlphaComponent">
            <summary>
            Returns a real-valued matrix containing the red component of an image.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.AlphaComponent.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a real-valued matrix containing the red component of an image.
            </summary>
            <param name="Parameter">Image</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.AlphaComponent.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.AlphaComponent.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.AlphaComponent.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage">
            <summary>
            Creates an image of real-value matrix components
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates an image of real-value matrix components
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.ToImage.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.GreenComponent">
            <summary>
            Returns a real-valued matrix containing the green component of an image.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.GreenComponent.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a real-valued matrix containing the green component of an image.
            </summary>
            <param name="Parameter">Image</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.GreenComponent.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.GreenComponent.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.GreenComponent.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.RedComponent">
            <summary>
            Returns a real-valued matrix containing the red component of an image.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.RedComponent.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a real-valued matrix containing the red component of an image.
            </summary>
            <param name="Parameter">Image</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.RedComponent.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.RedComponent.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.RedComponent.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend">
            <summary>
            Creates a graph legend.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a graph legend.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Legend.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512">
            <summary>
            Calculates the SHA512 Hash value of its parameter. 
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the SHA512 Hash value of its parameter. 
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.CalcHashBinary(System.String)">
            <summary>
            Computes an SHA512 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="s">String to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.CalcHashBinary(System.Byte[])">
            <summary>
            Computes an SHA512 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.CalcHash(System.String)">
            <summary>
            Computes an SHA512 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="s">String to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA512.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384">
            <summary>
            Calculates the SHA384 Hash value of its parameter. 
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the SHA384 Hash value of its parameter. 
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.CalcHashBinary(System.String)">
            <summary>
            Computes an SHA384 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="s">String to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.CalcHashBinary(System.Byte[])">
            <summary>
            Computes an SHA384 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.CalcHash(System.String)">
            <summary>
            Computes an SHA384 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="s">String to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA384.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256">
            <summary>
            Calculates the SHA256 Hash value of its parameter. 
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the SHA256 Hash value of its parameter. 
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.CalcHashBinary(System.String)">
            <summary>
            Computes an SHA256 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="s">String to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.CalcHashBinary(System.Byte[])">
            <summary>
            Computes an SHA256 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.CalcHash(System.String)">
            <summary>
            Computes an SHA256 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="s">String to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA256.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1">
            <summary>
            Calculates the SHA1 Hash value of its parameter. 
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the SHA1 Hash value of its parameter. 
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.CalcHashBinary(System.String)">
            <summary>
            Computes an SHA1 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="s">String to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.CalcHashBinary(System.Byte[])">
            <summary>
            Computes an SHA1 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.CalcHash(System.String)">
            <summary>
            Computes an SHA1 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="s">String to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Security.SHA1.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta">
            <summary>
            Computes Β(p,q).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Β(x,y).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Beta.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistribution">
            <summary>
            Returns a lambda expression of the distribution function of a distribution modelled using line segments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters">
            <summary>
            Base class for all two vector variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all two vector variable functions.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Current variable collection.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)">
            <summary>
            Evaluates the function given two parameters.
            </summary>
            <param name="Parameter1">The first parameter to use when evaluateing function.</param>
            <param name="Parameter2">The second parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Parameter1">
            <summary>
            First parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Parameter2">
            <summary>
            Second parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of a distribution modelled using line segments.
            </summary>
            <param name="Parameter1">Mean</param>
            <param name="Parameter2">Standard deviation</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistribution.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistributionLambda">
            <summary>
            Distribution function of a distribution modelled using line segments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda">
            <summary>
            Base class for Probability density functions.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.ILambdaExpression">
            <summary>
            Interface for lambda expressions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates the lambda expression.
            
            NOTE: Callers should trap <see cref="T:Clayster.Library.Math.MathReturnValue"/> exceptions when calling this method, as return values
            can be returned in this manner as well.
            </summary>
            <param name="Parameters">Parameters</param>
            <param name="Variables">Variables</param>
            <param name="ExpressionNode">Node being evaluated.</param>
            <returns>Result of the lambda expression.</returns>
            <exception cref="T:Clayster.Library.Math.MathReturnValue">This exception can be used as an alternative way to return a return value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates the internal definition. It assumes variables are already set. This method leaves
            the responsibility to the caller to call <see cref="M:Clayster.Library.Math.Variables.Push"/> and <see cref="M:Clayster.Library.Math.Variables.Pop"/>,
            as well as setting local variables before calling this method. This method is available
            for increasing performance in batch operations.
            
            NOTE: Callers should trap <see cref="T:Clayster.Library.Math.MathReturnValue"/> exceptions when calling this method, as return values
            can be returned in this manner as well.
            </summary>
            <param name="Variables">Variables collection.</param>
            <param name="ExpressionNode">Node being evaluated.</param>
            <returns>Result</returns>
            <exception cref="T:Clayster.Library.Math.MathReturnValue">This exception can be used as an alternative way to return a return value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            Differentiantes the lambda expression.
            </summary>
            <param name="VariableName">Variable to differentiate on.</param>
            <param name="Variables">Current variables.</param>
            <returns>Differentiation</returns>
            <exception cref="T:System.Exception">If unable to perform differentiation.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy">
            <summary>
            Copies the lambda expression.
            </summary>
            <returns>Copy of the lambda expression.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext">
            <summary>
            Gets an execution context for the node. The execution context allows the caller to control
            execution of the node.
            
            If no execution context exists, null is returned. In this case, stepping into the expression
            will not be possible.
            </summary>
            <returns>Execution context.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames">
            <summary>
            Parameter names
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes">
            <summary>
            Parameter types
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.#ctor">
            <summary>
            Base class for Probability density functions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)">
            <summary>
            Evaluates the probability density function for a given value <paramref name="x"/>.
            </summary>
            <param name="x">Value</param>
            <returns>f(x)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistributionLambda.#ctor(System.Double[],System.Double[])">
            <summary>
            Distribution function of a distribution modelled using line segments.
            </summary>
            <param name="X">Points along the X-axis.</param>
            <param name="Y">Weights for the corresponding points in <paramref name="X"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDFLambda">
            <summary>
            Probability density function of the probability density function of a distribution modelled using line segments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDFLambda.#ctor(System.Double[],System.Double[])">
            <summary>
            Probability density function of the probability density function of a distribution modelled using line segments.
            </summary>
            <param name="X">Points along the X-axis.</param>
            <param name="Y">Weights for the corresponding points in <paramref name="X"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDF">
            <summary>
            Returns a lambda expression of the probability density function of a distribution modelled using line segments.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of a distribution modelled using line segments.
            </summary>
            <param name="Parameter1">Mean</param>
            <param name="Parameter2">Standard deviation</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDF.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LineSegmentsPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix">
            <summary>
            Computes the correlation matrix for a sequence of variates of the same length.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters">
            <summary>
            Base class for all multiple vector variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.#ctor(Clayster.Library.Math.Expression,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Base class for all multiple vector variable functions.
            </summary>
            <param name="Parameters">Parameters</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Adds a parameter to the function.
            </summary>
            <param name="Parameter">Parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.EvaluateFunction(System.Array[])">
            <summary>
            Evaluates the function given its parameters.
            </summary>
            <param name="Parameters">The parameters to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <returns>New object instance of the function node.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Item(System.Int32)">
            <summary>
            Returns the parameter with the given index.
            </summary>
            <param name="Index">Zero-based index of parameter.</param>
            <returns>Paramter with the specified index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If Index is negative, or greater than or equal to
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.ParameterCount"/>.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes the correlation matrix for a sequence of variates of the same length.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.EvaluateFunction(System.Array[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.EvaluateFunction(System.Array[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CorrelationMatrix.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix">
            <summary>
            Computes the covariance matrix for a sequence of variates of the same length.
            http://mathworld.wolfram.com/CovarianceMatrix.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes the covariance matrix for a sequence of variates of the same length.
            http://mathworld.wolfram.com/CovarianceMatrix.html
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.EvaluateFunction(System.Array[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.EvaluateFunction(System.Array[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.CovarianceMatrix.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation">
            <summary>
            Computes cor(X,Y).
            http://mathworld.wolfram.com/StatisticalCorrelation.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes cor(X,Y).
            http://mathworld.wolfram.com/StatisticalCorrelation.html
            </summary>
            <param name="Parameter1">X</param>
            <param name="Parameter2">Y</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.Calculate(System.Array,System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the correlation of two vectors of the same length.
            http://mathworld.wolfram.com/StatisticalCorrelation.html
            </summary>
            <param name="X">Variate X</param>
            <param name="Y">Variate Y</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.Calculate(System.Double[],System.Double[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the correlation of two vectors of the same length.
            http://mathworld.wolfram.com/StatisticalCorrelation.html
            </summary>
            <param name="X">Variate X</param>
            <param name="Y">Variate Y</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Correlation.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance">
            <summary>
            Computes cov(X,Y).
            http://mathworld.wolfram.com/Covariance.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes cov(X,Y).
            http://mathworld.wolfram.com/Covariance.html
            </summary>
            <param name="Parameter1">X</param>
            <param name="Parameter2">Y</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.Calculate(System.Array,System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the covariance of two vectors of the same length.
            http://mathworld.wolfram.com/Covariance.html
            </summary>
            <param name="X">Variate X</param>
            <param name="Y">Variate Y</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.Calculate(System.Double[],System.Double[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the covariance of two vectors of the same length.
            http://mathworld.wolfram.com/Covariance.html
            </summary>
            <param name="X">Variate X</param>
            <param name="Y">Variate Y</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Covariance.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistribution">
            <summary>
            Returns a lambda expression of the distribution function of a logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of a logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <param name="Parameter1">x1</param>
            <param name="Parameter2">x2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistribution.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistributionLambda">
            <summary>
            Distribution function of the logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistributionLambda.#ctor(System.Double,System.Double)">
            <summary>
            Distribution function of the logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <param name="X1">x1</param>
            <param name="X2">x2</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDF">
            <summary>
            Returns a lambda expression of the probability density function of a logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of a logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <param name="Parameter1">x1</param>
            <param name="Parameter2">x2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDFLambda">
            <summary>
            Probability density function of the logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDFLambda.#ctor(System.Double,System.Double)">
            <summary>
            Probability density function of the logarithmic distribution.
            http://mathworld.wolfram.com/LogarithmicDistribution.html
            </summary>
            <param name="X1">x1</param>
            <param name="X2">x2</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LogarithmicPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution">
            <summary>
            Returns a lambda expression of the distribution function of an gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of an gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <param name="Parameter1">Alpha</param>
            <param name="Parameter2">Beta</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistribution.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistributionLambda">
            <summary>
            Distribution function of the gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistributionLambda.#ctor(System.Double,System.Double)">
            <summary>
            Distribution function of the gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <param name="Alpha">Alpha</param>
            <param name="Theta">Theta</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF">
            <summary>
            Returns a lambda expression of the probability density function of an gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of an gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <param name="Parameter1">Alpha</param>
            <param name="Parameter2">Theta</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDF.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDFLambda">
            <summary>
            Probability density function of the gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDFLambda.#ctor(System.Double,System.Double)">
            <summary>
            Probability density function of the gamma distribution.
            http://mathworld.wolfram.com/GammaDistribution.html
            </summary>
            <param name="Alpha">Alpha</param>
            <param name="Theta">Theta</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL">
            <summary>
            Computes the upper incomplete Gamma Function γ(a,z).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the upper incomplete Gamma Function γ(a,z).
            </summary>
            <param name="Parameter1">a</param>
            <param name="Parameter2">z</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.Calculate(System.Double,System.Double,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates U(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>U(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.Calculate(System.Double,Clayster.Library.Math.Complex.ComplexNumber,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates U(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>U(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaL.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU">
            <summary>
            Computes the upper incomplete Gamma Function Γ(a,z).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the upper incomplete Gamma Function Γ(a,z).
            </summary>
            <param name="Parameter1">a</param>
            <param name="Parameter2">z</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.Calculate(System.Double,System.Double,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates U(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>U(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.Calculate(System.Double,Clayster.Library.Math.Complex.ComplexNumber,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates U(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>U(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaU.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ">
            <summary>
            Computes the regularized Gamma Function Q(a,z).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the regularized Gamma Function Q(a,z).
            </summary>
            <param name="Parameter1">a</param>
            <param name="Parameter2">z</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.Calculate(System.Double,System.Double,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates Q(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>Q(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.Calculate(System.Double,Clayster.Library.Math.Complex.ComplexNumber,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates Q(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>Q(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaQ.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP">
            <summary>
            Computes the regularized Gamma Function P(a,z).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the regularized Gamma Function P(a,z).
            </summary>
            <param name="Parameter1">a</param>
            <param name="Parameter2">z</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.Calculate(System.Double,System.Double,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates P(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>P(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.Calculate(System.Double,Clayster.Library.Math.Complex.ComplexNumber,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates P(<paramref name="a"/>,<paramref name="z"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="a">a</param>
            <param name="z">z</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>P(<paramref name="a"/>,<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GammaP.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution">
            <summary>
            Returns a lambda expression of the distribution function of a triangular distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of a triangular distribution.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistributionLambda">
            <summary>
            Distribution function of the triangular distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistributionLambda.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Distribution function of the triangular distribution.
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <param name="c">c</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF">
            <summary>
            Returns a lambda expression of the probability density function of a triangular distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of a triangular distribution.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDFLambda">
            <summary>
            Probability density function of the triangular distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDFLambda.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Probability density function of the triangular distribution.
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <param name="c">c</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.TriangularPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistribution">
            <summary>
            Returns a lambda expression of the distribution function of an exponential distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of an exponential distribution.
            </summary>
            <param name="Parameter">Lambda</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistribution.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistributionLambda">
            <summary>
            Distribution function of the exponential distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistributionLambda.#ctor(System.Double)">
            <summary>
            Distribution function of the exponential distribution.
            </summary>
            <param name="Lambda">Lambda</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDF">
            <summary>
            Returns a lambda expression of the probability density function of an exponential distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of an exponential distribution.
            </summary>
            <param name="Parameter">Lambda</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDF.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDFLambda">
            <summary>
            Probability density function of the exponential distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDFLambda.#ctor(System.Double)">
            <summary>
            Probability density function of the exponential distribution.
            </summary>
            <param name="Lambda">Lambda</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.ExponentialPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistribution">
            <summary>
            Returns a lambda expression of the distribution function of a uniform distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of a uniform distribution.
            </summary>
            <param name="Parameter1">x1</param>
            <param name="Parameter2">x2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistribution.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistributionLambda">
            <summary>
            Distribution function of the uniform distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistributionLambda.#ctor(System.Double,System.Double)">
            <summary>
            Distribution function of the uniform distribution.
            </summary>
            <param name="X1">x1</param>
            <param name="X2">x2</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDF">
            <summary>
            Returns a lambda expression of the probability density function of a uniform distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of a uniform distribution.
            </summary>
            <param name="Parameter1">x1</param>
            <param name="Parameter2">x2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDFLambda">
            <summary>
            Probability density function of the uniform distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDFLambda.#ctor(System.Double,System.Double)">
            <summary>
            Probability density function of the uniform distribution.
            </summary>
            <param name="X1">x1</param>
            <param name="X2">x2</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.UniformPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistributionLambda">
            <summary>
            Distribution function of the normal distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistributionLambda.#ctor(System.Double,System.Double)">
            <summary>
            Distribution function of the normal distribution.
            </summary>
            <param name="Mean">Mean</param>
            <param name="StdDev">Standard deviation</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistributionLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistributionLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistribution">
            <summary>
            Returns a lambda expression of the distribution function of a normal distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistribution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the distribution function of a normal distribution.
            </summary>
            <param name="Parameter1">Mean</param>
            <param name="Parameter2">Standard deviation</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistribution.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistribution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalDistribution.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDFLambda">
            <summary>
            Probability density function of the normal distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDFLambda.#ctor(System.Double,System.Double)">
            <summary>
            Probability density function of the normal distribution.
            </summary>
            <param name="Mean">Mean</param>
            <param name="StdDev">Standard deviation</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDFLambda.Evaluate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Evaluate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDFLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.PDFLambda.Copy"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDF">
            <summary>
            Returns a lambda expression of the probability density function of a normal distribution.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression of the probability density function of a normal distribution.
            </summary>
            <param name="Parameter1">Mean</param>
            <param name="Parameter2">Standard deviation</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.NormalPDF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc">
            <summary>
            Computes erfc(x).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.AnalyticFunction">
            <summary>
            Base class for all analytic functions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter">
            <summary>
            Base class for all single complex variable functions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter">
            <summary>
            Base class for all single real variable functions.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single real variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all single real variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="Parameter">Parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single complex variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all single complex variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="z">Parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour">
            <summary>
            Behaviour of the function for real-valued parameters. It's used to optimize performance, by calling
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/> instead of 
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/> when possible.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMin">
            <summary>
            Smallest real value in the real-valued interval. Should be overridden if <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/> returns
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>.RealInInterval.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMax">
            <summary>
            Largest real value in the real-valued interval. Should be overridden if <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/> returns
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>.RealInInterval.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.AnalyticFunction.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all analytic functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.AnalyticFunction.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all analytic functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.AnalyticFunction.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes erfc(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erfc.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta">
            <summary>
            Computes ln(Β(p,q)).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes ln(Β(x,y)).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnBeta.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma">
            <summary>
            Computes ln(Γ(x)).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes ln(Γ(x)).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.Calculate(System.Double)">
            <summary>
            Computes ln(Γ(z))
            </summary>
            <param name="z">Real number</param>
            <returns>Γ(z)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.Calculate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Computes Γ(z)
            </summary>
            <param name="z">Complex number</param>
            <returns>Γ(z)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.LnGamma.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma">
            <summary>
            Computes Γ(x).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Γ(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.Calculate(System.Double)">
            <summary>
            Computes Γ(z)
            </summary>
            <param name="z">Real number</param>
            <returns>Γ(z)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.Calculate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Computes Γ(z)
            </summary>
            <param name="z">Complex number</param>
            <returns>Γ(z)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Gamma.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime">
            <summary>
            DateTime function
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            DateTime function
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.DateTime.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan">
            <summary>
            TimeSpan function
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            TimeSpan function
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.TimeSpan.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf">
            <summary>
            Computes erf(x).
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes erf(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.Calculate(System.Double,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates erf(<paramref name="Parameter"/>) up to a precision of <paramref name="Precision"/>.
            </summary>
            <param name="Parameter">Value</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>erf(<paramref name="Parameter"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.Calculate(Clayster.Library.Math.Complex.ComplexNumber,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates erf(<paramref name="z"/>) up to a precision of <paramref name="z"/>.
            </summary>
            <param name="z">Value</param>
            <param name="Precision">Precision</param>
            <param name="ExpressionNode">Node calculating the value. Can be null.</param>
            <returns>erf(<paramref name="z"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Erf.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean">
            <summary>
            Computes the geometric mean of a an array.
            http://mathworld.wolfram.com/GeometricMean.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter">
            <summary>
            Base class for all single real-valued vector variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter">
            <summary>
            Base class for all single vector variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single vector variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions of sets.
            </summary>
            <param name="Set">Set value.</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)">
            <summary>
            Evaluates the function given a vector.
            </summary>
            <param name="Vector">Vector to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter">Parameter</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.Parameter">
            <summary>
            Function parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single real-valued vector variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Performs canonical evaluation of the function.
            </summary>
            <param name="v">Parameter</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])">
            <summary>
            Evaluates the function given a vector.
            </summary>
            <param name="Vector">Vector to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the geometric mean of a an array.
            http://mathworld.wolfram.com/GeometricMean.html
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.Calculate(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the geometric mean of all elements in the array.
            http://mathworld.wolfram.com/GeometricMean.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.Calculate(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the geometric mean of all elements in the set.
            http://mathworld.wolfram.com/GeometricMean.html
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.Calculate(System.Double[])">
            <summary>
            Calculates the average of all elements in the array.
            http://mathworld.wolfram.com/GeometricMean.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.GeometricMean.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean">
            <summary>
            Computes the harmonic mean of a an array.
            http://mathworld.wolfram.com/HarmonicMean.html
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the harmonic mean of a an array.
            http://mathworld.wolfram.com/HarmonicMean.html
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.Calculate(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the harmonic mean of all elements in the array.
            http://mathworld.wolfram.com/HarmonicMean.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.Calculate(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the harmonic mean of all elements in the set.
            http://mathworld.wolfram.com/HarmonicMean.html
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.Calculate(System.Double[])">
            <summary>
            Calculates the average of all elements in the array.
            http://mathworld.wolfram.com/HarmonicMean.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.HarmonicMean.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator">
            <summary>
            Base class for assignable binary operators.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator">
            <summary>
            Base class for all binary operators.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Binary operator constructor.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.PrecalcResult(System.Boolean)">
            <summary>
            Checks if the result can be precalculated when knowing only the left operand.
            </summary>
            <param name="Left">Left operand.</param>
            <returns>null if not able to precalculate result, precalculated result otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <param name="Variables">Current set of variables.</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)">
            <summary>
            If the operator supports right Vector arithmetics.
            </summary>
            <param name="LeftOperand">Left operand.</param>
            <param name="RightOperand">Right operand vector.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsLeftVectorArithmetics(System.Collections.ICollection,System.Object)">
            <summary>
            If the operator supports left Vector arithmetics.
            </summary>
            <param name="LeftOperand">Left operand vector.</param>
            <param name="RightOperand">Right operand.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Operand1">Left Operand</param>
            <param name="Operand2">Right Operand</param>
            <returns>New instance of operator.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.GetExecutionContext">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand1">
            <summary>
            Left operand, or operand 1.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2">
            <summary>
            Right operand, or operand 2.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol">
            <summary>
            Symbol of operator
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand1EqualPriorityNeedsParenthesis">
            <summary>
            If the left operand has the same priority as the current operand, this property
            decides if a parenthesis is needed or not, when exporting a layout.
            
            Default is false.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            If the right operand has the same priority as the current operand, this property
            decides if a parenthesis is needed or not, when exporting a layout.
            
            Default is false.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Binary operator constructor.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Assigns a value to the element defined by the node.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Operands">Operands, in the same order and count as those returned by <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>.</param>
            <returns>New instance of operator.</returns>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator">
            <summary>
            Base class for unary assignment operators.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator">
            <summary>
            Base class for all unary operators.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Unary operator constructor.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value 1</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Operates on one operand.
            </summary>
            <param name="Operand">Operand</param>
            <param name="Variables">Current variable set.</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operand.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Operand">Operand</param>
            <returns>New instance of operator.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.GetExecutionContext">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operand">
            <summary>
            Operand
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol">
            <summary>
            Symbol of operator
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator">
            <summary>
            If the operator is a postfix operator (true) or prefix operator (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for unary assignment operators.
            </summary>
            <param name="Index">Index</param>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="Index">Index</param>
            <param name="Operand">Operand</param>
            <returns>New instance of operator.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.Index">
            <summary>
            Index operator.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment">
            <summary>
            Handles pattern assignment.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Constructor of the pattern assignment operator.
            </summary>
            <param name="Pattern">Pattern to assign.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.PatternAssignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ParametrizedSet">
            <summary>
            Contains a parametrized set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains a parametrized set.
            </summary>
            <param name="VariableName">Variable name used in definition.</param>
            <param name="Condition">Condition</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains a parametrized set.
            </summary>
            <param name="VariableName">Variable name used in definition.</param>
            <param name="Set">Set restriction.</param>
            <param name="Condition">Condition</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains a parametrized set.
            </summary>
            <param name="Pattern">Pattern</param>
            <param name="Condition">Condition</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains a parametrized set.
            </summary>
            <param name="Pattern">Pattern</param>
            <param name="Set">Set restriction.</param>
            <param name="Condition">Condition</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ParametrizedSet.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter">
            <summary>
            Base class for all single set variable functions.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single matrix variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.EvaluateFunction(Clayster.Library.Math.Sets.Set)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="Parameter">Parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter">Parameter</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.Parameter">
            <summary>
            Function parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleSetParameter.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader">
            <summary>
            Creates a Phong Shader
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a Phong Shader
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.PhongShader.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial">
            <summary>
            Creates a Surface Material
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a Surface Material
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.SurfaceMaterial.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource">
            <summary>
            Creates a Light Source
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a Light Source
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.LightSource.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet">
            <summary>
            Transforms a vector to a set by creating a set of the elements of the vector.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Transforms a vector to a set by creating a set of the elements of the vector.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Sets.ToSet.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.EndsWith">
            <summary>
            Computes EndsWith(s,Value).
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.EndsWith.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes EndsWith(s,Value).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.EndsWith.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.EndsWith.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.EndsWith.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.StartsWith">
            <summary>
            Computes StartsWith(s,Value).
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.StartsWith.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes StartsWith(s,Value).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.StartsWith.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.StartsWith.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.StartsWith.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Length">
            <summary>
            Calculates the length of a string.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Length.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the length of a string.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Length.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Length.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Length.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet">
            <summary>
            Makes sure the result is a set. If the operand is a set, the operand is returned as is.
            If it is an array (vector) it's converted to a set by iterating through its elements.
            If the operand is a matrix, a set of its row vectors is returned.
            If not, a set of a single element (the operand) is returned.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Makes sure the result is a set. If the operand is a set, the operand is returned as is.
            If it is an array (vector) it's converted to a set by iterating through its elements.
            If the operand is a matrix, a set of its row vectors is returned.
            If not, a set of a single element (the operand) is returned.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeSet.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator">
            <summary>
            Base class for all set-valued binary operators.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all set-valued binary operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.Operate(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <param name="Variables">Variables</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn">
            <summary>
            Checks if an element is not a memeber of a set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ComparisonOperator">
            <summary>
            Base class for all comparison operators.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ComparisonOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all comparison operators.
            </summary>
            <param name="Op">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ComparisonOperator.MakeSameType(System.Object@,System.Object@)">
            <summary>
            Tries to make two objects the same type so they can be compared.
            </summary>
            <param name="Object1">Object 1</param>
            <param name="Object2">Object 2</param>
            <returns>If one of the objects was converted to the other.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Checks if an element is not a memeber of a set.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.NotIn.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection">
            <summary>
            Compares the intersection of two sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares the intersection of two sets.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Compares the intersection of two sets.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.Operate(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.Operate(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Intersection.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In">
            <summary>
            Checks if an element is a memeber of a set.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Checks if an element is a memeber of a set.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.In.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union">
            <summary>
            Compares the union of two sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares the union of two sets.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Compares the union of two sets.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.Operate(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.SetBinaryOperator.Operate(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Sets.Union.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IScriptProfiler">
            <summary>
            Script profiling interface.
            </summary>
            <remarks>
            © Clayster, 2013-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IScriptProfiler.ScriptExecuted(Clayster.Library.Math.Expression,Clayster.Library.Math.Variables,System.Double,System.Object)">
            <summary>
            Method called by the script engine, to report the successful evaluation of an expression.
            </summary>
            <param name="Expression">Expression</param>
            <param name="Variables">Variables at the end of execution.</param>
            <param name="Milliseconds">Time used to evaluate the script, in milliseconds.</param>
            <param name="Result">Evaluated result.</param>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IScriptProfiler.ScriptFailed(Clayster.Library.Math.Expression,Clayster.Library.Math.Variables,System.Double,System.Exception)">
            <summary>
            Method called by the script engine, to report the unsuccessful evaluation of an expression.
            </summary>
            <param name="Expression">Expression</param>
            <param name="Variables">Variables at the end of execution.</param>
            <param name="Milliseconds">Time used to evaluate the script, in milliseconds.</param>
            <param name="Exception">Exception caught.</param>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IScriptProfiler.Print(System.String)">
            <summary>
            String printed from script.
            </summary>
            <param name="s">String.</param>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IAsynchronousContext">
            <summary>
            Base interface of objects that support addition.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IAsynchronousContext.TryGetAsynchronousResult(System.String,System.Object@)">
            <summary>
            Checks if an asynchronous result is ready.
            </summary>
            <param name="Script">Sub script to evaluate asynchronously.</param>
            <param name="Result">Any result, if set.</param>
            <returns>true, if result found.
            
            NOTE: After the first call, and a result is not found, it is expected that null is set automatically, so successive calls to this function returns true with at least the null value as a result.
            If returning false, it is assumed that the caller starts the asynchronous evaluation.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IAsynchronousContext.SetAsynchronousResult(System.String,System.Object,System.Boolean)">
            <summary>
            Sets an asynchronous result value. This function can be called several times during the evaluation of the script.
            </summary>
            <param name="Script">Sub script to evaluate asynchronously.</param>
            <param name="Result">The value to return in successive calls to <see cref="M:Clayster.Library.Math.Interfaces.IAsynchronousContext.TryGetAsynchronousResult(System.String,System.Object@)"/>.</param>
            <param name="CalculationDone">If the calculation has been completed (true), or if the value is a intermediate value (false).</param>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IAsynchronousContext.ClearAsynchronousResults">
            <summary>
            Clears any asynchronous results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.IAsynchronousContext.SynchronizationHandle">
            <summary>
            Optional synchronization Handle. If null, the asynchronous operation is started at once.
            If provided, the asynchronous operation starts when the handle is set.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Interfaces.IAsynchronousContext.CancellationHandle">
            <summary>
            Optional cancellation Handle. If null, the asynchronous operation continues until completed or timed out.
            If provided, the asynchronous operation can be aborted by setting this handle.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IFunctionAccess">
            <summary>
            Interface used to limit access to different functions.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IFunctionAccess.CanAccess(Clayster.Library.Math.ExpressionNodes.Functions.Function)">
            <summary>
            Checks if a function can be used in the current context.
            </summary>
            <param name="Function">Function to check.</param>
            <returns>If the function can be used.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IFunctionAccess.CanAccess(System.Type)">
            <summary>
            Checks if a type can be used (created or static interface accessed) in the current context.
            </summary>
            <param name="Type">Type to check</param>
            <returns>If the type can be used.</returns>
        </member>
        <member name="T:Clayster.Library.Math.LayoutEngines.SetLayoutEngine">
            <summary>
            Handles the layout of sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.SetLayoutEngine.#ctor">
            <summary>
            Handles the layout of sets.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.SetLayoutEngine.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.SetLayoutEngine.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.SetLayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Legend">
            <summary>
            Draws a legend
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Legend.#ctor(System.Collections.Generic.KeyValuePair{System.Drawing.Color,System.String}[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Draws a legend
            </summary>
            <param name="Legend">Legend</param>
            <param name="ExpressionNode">Expression Node creating the legend.</param>
        </member>
        <member name="M:Clayster.Library.Math.Legend.#ctor(System.Collections.Generic.KeyValuePair{System.Drawing.Color,System.String}[],System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Draws a legend
            </summary>
            <param name="Legend">Legend</param>
            <param name="Columns">Number of columns in the legend.</param>
            <param name="ExpressionNode">Expression Node creating the legend.</param>
        </member>
        <member name="M:Clayster.Library.Math.Legend.#ctor(System.Collections.Generic.KeyValuePair{System.Drawing.Color,System.String}[],System.Nullable{System.Int32},System.Nullable{System.Int32},Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Draws a legend
            </summary>
            <param name="Legend">Legend</param>
            <param name="Columns">Optional number of columns in the legend.</param>
            <param name="Rows">Optional number of rows in the legend.</param>
            <param name="ExpressionNode">Expression Node creating the legend.</param>
        </member>
        <member name="M:Clayster.Library.Math.Legend.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Legend.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Legend.Columns">
            <summary>
            Number of columns.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Legend.Rows">
            <summary>
            Number of rows.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.RealValuedFunction">
            <summary>
            Real-valued integrand.
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="T:Clayster.Library.Math.ComplexValuedFunction">
            <summary>
            Complex-valued integrand.
            </summary>
            <param name="x">x</param>
            <returns>f(x)</returns>
        </member>
        <member name="T:Clayster.Library.Math.RealValuedSequence">
            <summary>
            Real-valued zero-based sequence.
            </summary>
            <param name="n">Index</param>
            <returns>nth item in the sequence.</returns>
        </member>
        <member name="T:Clayster.Library.Math.ComplexValuedSequence">
            <summary>
            Complexl-valued zero-based sequence.
            </summary>
            <param name="n">Index</param>
            <returns>nth item in the sequence.</returns>
        </member>
        <member name="T:Clayster.Library.Math.NumericalMethods">
            <summary>
            Class providing numerical methods.
            </summary>
            <remarks>
            © Clayster, 2012-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.NumericalMethods.Integrate(System.Double,System.Double,Clayster.Library.Math.RealValuedFunction,System.Double)">
            <summary>
            Calculates the integral Integral(From,To,f,ε) using the Romberg's method.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="f">Integrand</param>
            <param name="ε">Accuracy</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.NumericalMethods.Integrate(System.Double,System.Double,Clayster.Library.Math.ComplexValuedFunction,System.Double)">
            <summary>
            Calculates the integral Integral(From,To,f,ε) using the Romberg's method.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="f">Integrand</param>
            <param name="ε">Accuracy</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.NumericalMethods.ContinuedFraction(Clayster.Library.Math.RealValuedSequence,Clayster.Library.Math.RealValuedSequence,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates a continued fraction according to recurrence lations described here:
            http://mathworld.wolfram.com/ContinuedFraction.html
            </summary>
            <param name="a">a0, a1, a2, ....</param>
            <param name="b">b1, b2, ....</param>
            <param name="ε">Accuracy</param>
            <param name="ExpressionNode">Node performing the calculation. Can be null.</param>
            <returns>a0+b1/(a1+b2/(a2....))</returns>
        </member>
        <member name="M:Clayster.Library.Math.NumericalMethods.ContinuedFraction(Clayster.Library.Math.ComplexValuedSequence,Clayster.Library.Math.ComplexValuedSequence,System.Double,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates a continued fraction according to recurrence lations described here:
            http://mathworld.wolfram.com/ContinuedFraction.html
            </summary>
            <param name="a">a0, a1, a2, ....</param>
            <param name="b">b1, b2, ....</param>
            <param name="ε">Accuracy</param>
            <param name="ExpressionNode">Node performing the calculation. Can be null.</param>
            <returns>a0+b1/(a1+b2/(a2....))</returns>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.AbelianGroup">
            <summary>
            Base class for all abelian groups.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.Group">
            <summary>
            Base class for all groups.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.SemiGroup">
            <summary>
            Base class for all semi-groups.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Set">
            <summary>
            Abstract base class for all sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.ToSet(System.Object)">
            <summary>
            Checks if a value is a set or not. If not, creates a set with the value as a single element.
            </summary>
            <returns>Set</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.FromArray(System.Array)">
            <summary>
            Returns a set containing the elements in an array.
            </summary>
            <param name="Items">Array</param>
            <returns>Set</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Checks if an item is a member of the set or not.
            </summary>
            <param name="Item">Item</param>
            <param name="Variables">Current variables collection.</param>
            <returns>If the Item is a member of the set.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            Exports the object to XML.
            </summary>
            <param name="w">XML Destination</param>
            <param name="ParentType">Type of the parent layout xml element.</param>
            <param name="AppendDelimiter">If a sequence delimiter should be appended at the end.</param>
            <param name="Tag">Tag to apply to the exported XML.</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            Calculates the union of the current set with another set.
            </summary>
            <param name="With">Set to calculate union with.</param>
            <param name="Variables">Current variable collection.</param>
            <returns>Union</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            Calculates the intersection of the current set with another set.
            </summary>
            <param name="With">Set to calculate intersection with.</param>
            <param name="Variables">Current variable collection.</param>
            <returns>Intersection</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.CalculateComplement(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            Calculates the complement of the current set with another set.
            </summary>
            <param name="With">Set to calculate complement from.</param>
            <param name="Variables">Current variable collection.</param>
            <returns>Complement</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            Calculates the cartesian product of the current set with another set.
            </summary>
            <param name="With">Set to calculate cartesian product with.</param>
            <param name="Variables">Current variable collection.</param>
            <returns>CartesianProduct</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Set.AreEqual(System.Object,System.Object)">
            <summary>
            Checks if two elements are equal.
            </summary>
            <param name="Element1">Element 1</param>
            <param name="Element2">Element 2</param>
            <returns>If the elements are equal</returns>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Set.IsInfinite">
            <summary>
            If the set is infinite. null means that the property cannot be determined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Set.IsCountable">
            <summary>
            If the set if countable. (Infinite sets may still be countable.) null means that the property cannot be determined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Set.LayoutPriority">
            <summary>
            Layout priority
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.SemiGroup.#ctor">
            <summary>
            Base class for all semi-groups.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.Addition">
            <summary>
            Addition operator of the semi-group. Returns a lambda expression of two parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.AdditionCommutative">
            <summary>
            If addition is commutative or not.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Group.#ctor">
            <summary>
            Base class for all groups.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Group.Negation">
            <summary>
            Negation operator of the group. Returns a lambda expression of one parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Group.Zero">
            <summary>
            Zero element of the group.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Group.Subtraction">
            <summary>
            Subtraction operator of the semi-group. Returns a lambda expression of two parameters.
            By default, this is lambda expression sub:=(x,y)->x+(-y);
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda">
            <summary>
            Base class for binary operators defined as lambda expressions.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.#ctor">
            <summary>
            Base class for binary operators defined as lambda expressions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.BinaryOperatorLambda.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.AbelianGroup.#ctor">
            <summary>
            Base class for all abelian groups.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.AbelianGroup.AdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.AdditionCommutative"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.CommutativeRing">
            <summary>
            Base class for all commutative rings.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.Ring">
            <summary>
            Base class for all rings.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Ring.#ctor">
            <summary>
            Base class for all rings.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Ring.HasInverse(System.Object)">
            <summary>
            Checks if a member element has an inverse or not.
            </summary>
            <param name="Element">Element to check</param>
            <returns>If the element has an inverse in the ring or not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Ring.IsZeroDivisor(System.Object)">
            <summary>
            Checks if a member element is a zero divisor.
            </summary>
            <param name="Element">Element to check</param>
            <returns>If the element is a zero divisor in the ring or not.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Ring.Multiplication">
            <summary>
            Multiplication operator of the ring. Returns a lambda expression of two parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Ring.MultiplicationCommutative">
            <summary>
            If multiplication is commutative or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Ring.Inversion">
            <summary>
            Inversion operator of the ring. Returns a lambda expression of one parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Ring.Division">
            <summary>
            Division operator of the ring. Returns a lambda expression of two parameters.
            By default, this is lambda expression div:=(x,y)->x*inv(y); if defined.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.CommutativeRing.#ctor">
            <summary>
            Base class for all commutative rings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.CommutativeRing.MultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.MultiplicationCommutative"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda">
            <summary>
            Base class for unary operators defined as lambda expressions.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.#ctor">
            <summary>
            Base class for unary operators defined as lambda expressions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.UnaryOperatorLambda.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.Field">
            <summary>
            Base class for all fields.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.EuclideanDomain">
            <summary>
            Base class for all Euclidean domains.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.UniqueFactorizationDomain">
            <summary>
            Base class for all unique factorization domains.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Abstract.IntegralDomain">
            <summary>
            Base class for all integral domains.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.IntegralDomain.#ctor">
            <summary>
            Base class for all integral domains.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.IntegralDomain.IsZeroDivisor(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Abstract.Ring.IsZeroDivisor(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.IntegralDomain.One">
            <summary>
            Identity element of the ring.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UniqueFactorizationDomain.#ctor">
            <summary>
            Base class for all unique factorization domains.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.UniqueFactorizationDomain.Factorize(System.Object)">
            <summary>
            Performs the unique factorization (up to order and unit factors) of <paramref name="Element"/>.
            </summary>
            <param name="Element">Element to factorize.</param>
            <returns>Factorization</returns>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.#ctor">
            <summary>
            Base class for all Euclidean domains.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.HasInverse(System.Object)">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.DivisionAlgorithm">
            <summary>
            Division algorithm of the Euclidean domain. Returns a lambda expression of two parameters.
            This lambda expression should return an array of two elements, the first being the quotient (q), the
            second the residue (r):
            
            1) If b|a: phi(b)&lt;=phi(a)
            2) a,b in E, b!=0, there exists q and r in E: a=b*q+r, phi(r)&lt;phi(b).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.Division">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Field.#ctor">
            <summary>
            Base class for all fields.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Field.HasInverse(System.Object)">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Abstract.Field.Factorize(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Abstract.UniqueFactorizationDomain.Factorize(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Field.DivisionAlgorithm">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.DivisionAlgorithm"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Abstract.Field.Division">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Numbers.C">
            <summary>
            Represents the set of complex numbers.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.#ctor">
            <summacy>
            Represents the set of complex numbers.
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summacy>
            <see ccef="Set.IsMember"/>
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summacy>
            <see ccef="Set.ExportLayout"/>
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.ToString">
            <summacy>
            <see ccef="Object.ToString()"/>
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.Equals(System.Object)">
            <summacy>
            <see ccef="Object.Equals(object)"/>
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.GetHashCode">
            <summacy>
            <see ccef="Object.GetHashCode"/>
            </summacy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.C.AreEqual(System.Object,System.Object)">
            <summacy>
            <see ccef="Set.AreEqual"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Value">
            <summacy>
            Represents the set of complex numbers.
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.IsInfinite">
            <summacy>
            <see ccef="Set.IsInfinite"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.IsCountable">
            <summacy>
            <see ccef="Set.IsCountable"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.LayoutPriority">
            <summacy>
            <see ccef="Set.LayoutPriority"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Zero">
            <summacy>
            <see ccef="Gcoup.Zero"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.One">
            <summacy>
            <see ccef="IntegcalDomain.One"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Addition">
            <summacy>
            <see ccef="SemiGcoup.Addition"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Subtraction">
            <summacy>
            <see ccef="Gcoup.Subtraction"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Negation">
            <summacy>
            <see ccef="Gcoup.Negation"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Multiplication">
            <summacy>
            <see ccef="Cing.Multiplication"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Division">
            <summacy>
            <see ccef="Cing.Division"/>
            </summacy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.C.Inversion">
            <summacy>
            <see ccef="Cing.Inversion"/>
            </summacy>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Numbers.N">
            <summary>
            Represents the set of natural numbers.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.#ctor">
            <summary>
            Represents the set of natural numbers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.N.AreEqual(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.AreEqual(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.Value">
            <summary>
            Represents the set of natural numbers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.Addition">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.Addition"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.N.AdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.AdditionCommutative"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Numbers.Q">
            <summary>
            Represents the set of rational numbers.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.#ctor">
            <summaqy>
            Represents the set of rational numbers.
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summaqy>
            <see cqef="Set.IsMember"/>
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summaqy>
            <see cqef="Set.ExportLayout"/>
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.ToString">
            <summaqy>
            <see cqef="Object.ToString()"/>
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.Equals(System.Object)">
            <summaqy>
            <see cqef="Object.Equals(object)"/>
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.GetHashCode">
            <summaqy>
            <see cqef="Object.GetHashCode"/>
            </summaqy>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Q.AreEqual(System.Object,System.Object)">
            <summaqy>
            <see cqef="Set.AreEqual"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Value">
            <summaqy>
            Represents the set of rational numbers.
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.IsInfinite">
            <summaqy>
            <see cqef="Set.IsInfinite"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.IsCountable">
            <summaqy>
            <see cqef="Set.IsCountable"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.LayoutPriority">
            <summaqy>
            <see cqef="Set.LayoutPriority"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Zero">
            <summaqy>
            <see cqef="Gqoup.Zero"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.One">
            <summaqy>
            <see cqef="IntegqalDomain.One"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Addition">
            <summaqy>
            <see cqef="SemiGqoup.Addition"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Subtraction">
            <summaqy>
            <see cqef="Gqoup.Subtraction"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Negation">
            <summaqy>
            <see cqef="Gqoup.Negation"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Multiplication">
            <summaqy>
            <see cqef="Qing.Multiplication"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Division">
            <summaqy>
            <see cqef="Qing.Division"/>
            </summaqy>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Q.Inversion">
            <summaqy>
            <see cqef="Qing.Inversion"/>
            </summaqy>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Numbers.R">
            <summary>
            Represents the set of real numbers.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.#ctor">
            <summary>
            Represents the set of real numbers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.R.AreEqual(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.AreEqual(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Value">
            <summary>
            Represents the set of real numbers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Zero">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Zero"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.One">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.IntegralDomain.One"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Addition">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.Addition"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Subtraction">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Subtraction"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Negation">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Negation"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Multiplication">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Multiplication"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Division">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.R.Inversion">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Inversion"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Numbers.Z">
            <summary>
            Represents the set of integers.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.#ctor">
            <summary>
            Represents the set of integers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.Factorize(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Abstract.UniqueFactorizationDomain.Factorize(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Numbers.Z.AreEqual(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.AreEqual(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Value">
            <summary>
            The set of integers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Zero">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Zero"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.One">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.IntegralDomain.One"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Addition">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.SemiGroup.Addition"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Subtraction">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Subtraction"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Negation">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Group.Negation"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.DivisionAlgorithm">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.EuclideanDomain.DivisionAlgorithm"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Multiplication">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Multiplication"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Division">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Division"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Numbers.Z.Inversion">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Abstract.Ring.Inversion"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Complement">
            <summary>
            Represents the complement of a set in another.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.#ctor(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Sets.Set[])">
            <summary>
            Represents the complement of a set in another.
            </summary>
            <param name="ComplementIn">Complement calculated in this set.</param>
            <param name="ComplementOf">Complement of these sets.</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.CalculateComplement(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateComplement(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Complement.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Complement.ComplementIn">
            <summary>
            Complement calculated in this set.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Complement.ComplementOf">
            <summary>
            Complement of these sets in <see cref="P:Clayster.Library.Math.Sets.Complement.ComplementIn"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Complement.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Complement.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Complement.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.CartesianProduct">
            <summary>
            Represents the cartesian product of sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.#ctor(Clayster.Library.Math.Sets.Set[])">
            <summary>
            Represents the cartesian product of sets.
            </summary>
            <param name="Sets">Sets in the cartesian product.</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.CartesianProduct.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.CartesianProduct.Sets">
            <summary>
            Sets in the cartesian product.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.CartesianProduct.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.CartesianProduct.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.CartesianProduct.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.FiniteSet">
            <summary>
            Represents a finite set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.#ctor(System.Object[])">
            <summary>
            Represents a finite set.
            </summary>
            <param name="Items">Items</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.#ctor(System.Array)">
            <summary>
            Represents a finite set.
            </summary>
            <param name="Items">Items</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.CalculateComplement(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.AreEqual(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.AreEqual(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.FiniteSet.CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.Count">
            <summary>
            <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.IsSynchronized">
            <summary>
            <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.FiniteSet.SyncRoot">
            <summary>
            <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.EmptySet">
            <summary>
            Represents the empty set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.#ctor">
            <summary>
            Represents the empty set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.CalculateComplement(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateCartesianProduct(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.EmptySet.CopyTo(System.Array,System.Int32)">
            <summary>
            <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.Value">
            <summary>
            An instance of the empty set.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.Count">
            <summary>
            <see cref="P:System.Collections.ICollection.Count"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.IsSynchronized">
            <summary>
            <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.EmptySet.SyncRoot">
            <summary>
            <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Intersection">
            <summary>
            Represents the intersection of sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.#ctor(Clayster.Library.Math.Sets.Set[])">
            <summary>
            Represents the intersection of sets.
            </summary>
            <param name="Sets">Sets in the intersection.</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Intersection.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Intersection.Sets">
            <summary>
            Sets in the intersection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Intersection.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Intersection.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Intersection.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet">
            <summary>
            Pattern typed parametrized set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet">
            <summary>
            Pattern parametrized set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Pattern parametrized set.
            </summary>
            <param name="Pattern">Pattern</param>
            <param name="Condition">Condition</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternConditionalSet.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Sets.Set)">
            <summary>
            Pattern typed parametrized set.
            </summary>
            <param name="Pattern">Pattern</param>
            <param name="Condition">Condition</param>
            <param name="Set">Set restriction</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.Set">
            <summary>
            Set restriction
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.PatternTypedConditionalSet.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet">
            <summary>
            Simple type parametrized set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet">
            <summary>
            Simple parametrized set.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Simple parametrized set.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Condition">Condition</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.VariableName">
            <summary>
            Variable Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleConditionalSet.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Sets.Set)">
            <summary>
            Simple type parametrized set.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Condition">Condition</param>
            <param name="Set">Set restriction</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.Set">
            <summary>
            Set restriction
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Parametrized.SimpleTypedConditionalSet.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Sets.Union">
            <summary>
            Represents the union of sets.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.#ctor(Clayster.Library.Math.Sets.Set[])">
            <summary>
            Represents the union of sets.
            </summary>
            <param name="Sets">Sets in the union.</param>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateUnion(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Sets.Union.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Union.Sets">
            <summary>
            Sets in the union.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Union.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Union.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Sets.Union.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.SurfaceMaterial">
            <summary>
            Surface Material, for use in 3D rendering.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.SurfaceMaterial.#ctor(System.Drawing.Color,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Surface Material, for use in 3D rendering.
            </summary>
            <param name="Color">Color of material</param>
            <param name="TwoSided">If the material is twosided or not.</param>
            <param name="DiffuseReflectionConstant">Diffuse reflection constant</param>
            <param name="SpecularReflectionConstant">Specular reflection constant</param>
            <param name="Shininess">Shininess</param>
        </member>
        <member name="M:Clayster.Library.Math.SurfaceMaterial.#ctor(System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Surface Material, for use in 3D rendering.
            </summary>
            <param name="Color">Color of material</param>
            <param name="DiffuseReflectionConstant">Diffuse reflection constant</param>
            <param name="SpecularReflectionConstant">Specular reflection constant</param>
            <param name="Shininess">Shininess</param>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D">
            <summary>
            Creates a 3D Canvas Graph that can be used by script to freely draw on.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3D Canvas Graph that can be used by script to freely draw on.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs3D.Canvas3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D">
            <summary>
            Creates a three dimensional culled facets graph.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph">
            <summary>
            Base class of all surface graphs.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.DefaultColor">
            <summary>
            Default graph color
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class of all surface graphs.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class of all surface graphs.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class of all surface graphs.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class of all surface graphs.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class of all surface graphs.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.NegateSurfaceNormalParameter">
            <summary>
            If a parameter for the negation of surface normals is to be included.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.AcceptsPhongShader">
            <summary>
            If the graph type accepts a Phong Shader object as a parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.GraphType">
            <summary>
            Graph Type
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.GraphType">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.GraphType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.NegateSurfaceNormalParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.NegateSurfaceNormalParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.AcceptsPhongShader">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.AcceptsPhongShader"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.FacetsCulled3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D">
            <summary>
            Creates a three dimensional facets graph.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional facets graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.GraphType">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.GraphType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.AcceptsPhongShader">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.AcceptsPhongShader"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Facets3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D">
            <summary>
            Creates a three dimensional culled wireframe graph.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional culled wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.GraphType">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.GraphType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.NegateSurfaceNormalParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.NegateSurfaceNormalParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.WireframeCulled3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D">
            <summary>
            Creates a three dimensional wireframe graph.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional wireframe graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XMatrix">X Matrix</param>
            <param name="YMatrix">Y Matrix</param>
            <param name="ZMatrix">Z Matrix</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.GraphType">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.SurfaceGraph.GraphType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Wireframe3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="ZVector">Z Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="ZVector">Z Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="ZVector">Z Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="ZVector">Z Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a three dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous">
            <summary>
            Creates a 3-dimensional homogeneous scaling matrix.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional homogeneous scaling matrix.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.ScaleMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Creates a homogeneous scaling matrix.
            </summary>
            <param name="Sx">Scale factor along the x-axis.</param>
            <param name="Sy">Scale factor along the y-axis.</param>
            <param name="Sz">Scale factor along the z-axis.</param>
            <returns>Scaling matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3DHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D">
            <summary>
            Creates a 3-dimensional scaling matrix.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional scaling matrix.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.ScaleMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="Sx">Scale factor along the x-axis.</param>
            <param name="Sy">Scale factor along the y-axis.</param>
            <param name="Sz">Scale factor along the z-axis.</param>
            <returns>Scaling matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D">
            <summary>
            Creates a homogeneous 3-dimensional projection matrix.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a homogeneous 3-dimensional projection matrix.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.ProjectionMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Creates a projection matrix.
            </summary>
            <param name="Ex">X-coordinate relative to the camera centerpoint, looking along the negative z-axis.</param>
            <param name="Ey">Y-coordinate relative to the camera centerpoint, looking along the negative z-axis.</param>
            <param name="Ez">Z-coordinate relative to the camera centerpoint, looking along the negative z-axis.</param>
            <returns>Projection matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Project3D.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous">
            <summary>
            Creates a 3-dimensional homogeneous rotation matrix, that rotates points around the x-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the x-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DXHomogeneous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous">
            <summary>
            Creates a 3-dimensional homogeneous rotation matrix, that rotates points around the x-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the x-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DYHomogeneous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous">
            <summary>
            Creates a 3-dimensional homogeneous rotation matrix, that rotates points around the x-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the x-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZHomogeneous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the x-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the x-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DX.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the y-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the y-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DY.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the z-axis.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 3-dimensional rotation matrix, that rotates points around the z-axis.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate3DZ.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D">
            <summary>
            Creates a homogeneous 3-dimensional translation matrix.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a homogeneous 3-dimensional translation matrix.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.TranslationMatrix(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="Tx">X-translation</param>
            <param name="Ty">Y-translation</param>
            <param name="Tz">Z-translation</param>
            <returns>Translation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate3D.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph3DType">
            <summary>
            Type of 3D Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.Line">
            <summary>
            Line Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.Curve">
            <summary>
            Curve Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.Wireframe">
            <summary>
            Wireframe graph.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.WireframeCulled">
            <summary>
            Culled Wireframe graph (i.e. one-sided).
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.Facets">
            <summary>
            Facets graph.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.FacetsCulled">
            <summary>
            Culled Facets graph (i.e. one-sided).
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.Phong">
            <summary>
            Phong shaded graph.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3DType.PhongCulled">
            <summary>
            Culled Phong shaded graph.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph3D">
            <summary>
            Base class for all three dimensional graphs.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.Graph3D.DefaultYAngle">
            <summary>
            Default Y-angle.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph3D.DefaultElevationAngle">
            <summary>
            Default Elevation Angle.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],Clayster.Library.Math.PhongShader,Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.String,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all three dimensional graphs.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="Shader">Optional Phong shader. May be null.</param>
            <param name="SurfaceMaterial">Surface Material of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.#ctor(System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,Clayster.Library.Math.PhongShader,Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.String,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all three dimensional graphs.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="ZAxisType">Type of values along the Z-axis.</param>
            <param name="Shader">Optional Phong shader. May be null.</param>
            <param name="SurfaceMaterial">Surface Material of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],Clayster.Library.Math.PhongShader,Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.String,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all three dimensional graphs.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="Shader">Optional Phong shader. May be null.</param>
            <param name="SurfaceMaterial">Surface Material of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.#ctor(System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,Clayster.Library.Math.PhongShader,Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.String,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all three dimensional graphs.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="ZAxisType">Type of values along the Z-axis.</param>
            <param name="Shader">Optional Phong shader. May be null.</param>
            <param name="SurfaceMaterial">Surface Material of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ZAxis">Name of the Z-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.XAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph3D.OnXAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.YAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph3D.OnYAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.ZAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph3D.OnZAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.Add(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="SurfaceMaterial">Surface Material</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.Add(System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,System.Double[0:,0:],Clayster.Library.Math.AxisType,Clayster.Library.Math.SurfaceMaterial,Clayster.Library.Math.Graph3DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Matrix of X values.</param>
            <param name="XType">X-Axis Type.</param>
            <param name="Y">Matrix of Y values.</param>
            <param name="YType">Y-Axis Type.</param>
            <param name="Z">Matrix of Z values.</param>
            <param name="ZType">Z-Axis Type.</param>
            <param name="SurfaceMaterial">Surface Material</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.GetMouseOverStatus(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetMouseOverStatus(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.DragEvent(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DragEvent(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph3D.WheelEvent(System.Int32,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.WheelEvent(System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.YAngle">
            <summary>
            Camera angle, around the Y-axis going through the center of the data.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.ElevationAngle">
            <summary>
            Camera elevation angle.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.CameraDistance">
            <summary>
            Optional camera distance
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.EyeDistance">
            <summary>
            Optional eye distance
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.ViewAtX">
            <summary>
            Optional X-coordinate the camera is looking at.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.ViewAtY">
            <summary>
            Optional Y-coordinate the camera is looking at.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.ViewAtZ">
            <summary>
            Optional Z-coordinate the camera is looking at.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph3D.OnXAxisCalculated">
            <summary>
            Event raised when the X axis has been computed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph3D.OnYAxisCalculated">
            <summary>
            Event raised when the Y axis has been computed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph3D.OnZAxisCalculated">
            <summary>
            Event raised when the Z axis has been computed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MinX">
            <summary>
            Smallest X-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MaxX">
            <summary>
            Largest X-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MinY">
            <summary>
            Smallest Y-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MaxY">
            <summary>
            Largest Y-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MinZ">
            <summary>
            Smallest Z-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.MaxZ">
            <summary>
            Largest Z-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.XAxisType">
            <summary>
            X-Axis Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.YAxisType">
            <summary>
            Y-Axis Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.ZAxisType">
            <summary>
            Z-Axis Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph3D.SupportsDragAnimation">
            <summary>
            <see cref="P:Clayster.Library.Math.Graph.SupportsDragAnimation"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole">
            <summary>
            Boole(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Booles method, using N segments.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.IntegralAlgorithm">
            <summary>
            Base class for integral algorithms.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.IntegralAlgorithm.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Base class for integral algorithms.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.IntegralAlgorithm.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.IntegralAlgorithm.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Boole(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Booles method, using N segments.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Boole.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg">
            <summary>
            Romberg(a,b,f,ε) calculates an approximation of an integral ∫[a]^b(f(x))dx, using the Rombergs method. It continues to divide the
            interval into more segments, and increasing the level of approximation polynomials, until the desired accuracy is achieved (ε).
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Romberg(a,b,f,ε) calculates an approximation of an integral ∫[a]^b(f(x))dx, using the Rombergs method. It continues to divide the
            interval into more segments, and increasing the level of approximation polynomials, until the desired accuracy is achieved (ε).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.Calculate(System.Double,System.Double,Clayster.Library.Math.RealValuedFunction,System.Double)">
            <summary>
            Calculates the integral Integral(From,To,f,ε) using the Romberg's method.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="f">Integrand</param>
            <param name="ε">Accuracy</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.Calculate(System.Double,System.Double,Clayster.Library.Math.ComplexValuedFunction,System.Double)">
            <summary>
            Calculates the integral Integral(From,To,f,ε) using the Romberg's method.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="f">Integrand</param>
            <param name="ε">Accuracy</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Romberg.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson">
            <summary>
            Simpson(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Simpsons method, using N segments.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Simpson(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Simpsons method, using N segments.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Simpson.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid">
            <summary>
            Trapezoid(a,b,f,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Trapezoids method, using N segments.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Trapezoid(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Trapezoids method, using N segments.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Trapezoid.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann">
            <summary>
            Riemann(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Riemanns method, using N segments.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Riemann(a,b,λ,N) calculates an approximation of an integral ∫[a]^b(λ(x))dx, using the Riemanns method, using N segments.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.Riemann.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Implements">
            <summary>
            Checks which types are available, that implements a specific interface.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Implements.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks which types are available, that implements a specific interface.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Implements.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Implements.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Implements.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2">
            <summary>
            Calculates a product by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.MaxIterations">
            <summary>
            Maximum number of iterations allowed by the Series() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates a product by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
            <param name="From">From Value</param>
            <param name="To">To Value</param>
            <param name="StepSize">Step Size</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Calculates a product by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.DoProduct(System.Object,System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Perform a constant product.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="StepSize">Step Size</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Product.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product2.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2">
            <summary>
            Calculates a sum by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.MaxIterations">
            <summary>
            Maximum number of iterations allowed by the Series() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates a sum by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
            <param name="From">From Value</param>
            <param name="To">To Value</param>
            <param name="StepSize">Step Size</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Calculates a sum by creating a sequence of numbers, using the same syntax as the Series function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.DoSum(System.Object,System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Perform a constant summation.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="StepSize">Step Size</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Summation.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum2.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.LayoutEngines.ArrayLayoutEngine">
            <summary>
            Handles the layout of generic vectors.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ArrayLayoutEngine.#ctor">
            <summary>
            Handles the layout of generic vectors.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ArrayLayoutEngine.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ArrayLayoutEngine.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ArrayLayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.LayoutEngines.ComplexArrayLayoutEngine">
            <summary>
            Handles the layout of complex vectors.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ComplexArrayLayoutEngine.#ctor">
            <summary>
            Handles the layout of complex vectors.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ComplexArrayLayoutEngine.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ComplexArrayLayoutEngine.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.ComplexArrayLayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.LayoutEngines.DoubleArrayLayoutEngine">
            <summary>
            Handles the layout of real vectors.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DoubleArrayLayoutEngine.#ctor">
            <summary>
            Handles the layout of real vectors.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DoubleArrayLayoutEngine.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DoubleArrayLayoutEngine.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DoubleArrayLayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.LayoutEngines.DefaultLayoutEngine">
            <summary>
            Handles a default layout of objects, when a specific layout engine is not found.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DefaultLayoutEngine.#ctor">
            <summary>
            Handles a default layout of objects, when a specific layout engine is not found.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DefaultLayoutEngine.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DefaultLayoutEngine.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.LayoutEngines.DefaultLayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Infinity">
            <summary>
            Corresponds to infinity. Used in symbolic calculations.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.ValueTypeConstant">
            <summary>
            Base class for all value-type constants.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Constant">
            <summary>
            Base class for all constants.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Constant.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all constants.
            </summary>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Constant.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Constant.CreateExpressionNode(System.Object,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Creates the corresponding expression node to host a given constant.
            </summary>
            <param name="Constant">Constant</param>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start Position</param>
            <param name="StopPosition">Stop Position</param>
            <returns>Expression Node</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Constant.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.IsValueType">
            <summary>
            If the constant is of value type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ValueTypeConstant.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all value-type constants.
            </summary>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position in the expression, if defined.</param>
            <param name="StopPosition">Stop position in the expression, if defined.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ValueTypeConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ValueTypeConstant.IsValueType">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.IsValueType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ValueTypeConstant.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single double-valued constant. Used in symbolic differentiation.
            </summary>
            <param name="Expression">Expression</param>
            <param name="StartPosition">Start position</param>
            <param name="StopPosition">Stop position</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Infinity.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant">
            <summary>
            Handles a single enumeration valued constant.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.#ctor(System.Enum,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single enumeration valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.EnumConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant">
            <summary>
            Handles a single namespace-valued constant.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.#ctor(Clayster.Library.Math.Namespace,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single namespace-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.NamespaceConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant">
            <summary>
            Handles a single type-valued constant.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.#ctor(System.Type,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single type-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.TypeConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSVA">
            <summary>
            Returns an HSVA vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSVA.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an HSVA vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSVA.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSVA.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSVA.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSV">
            <summary>
            Returns an HSV vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSV.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an HSV vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSV.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSV.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSV.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSLA">
            <summary>
            Returns an HSLA vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSLA.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an HSLA vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSLA.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSLA.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSLA.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSL">
            <summary>
            Returns an HSL vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSL.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an HSL vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSL.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSL.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToHSL.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGBA">
            <summary>
            Returns an RGB vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGBA.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an RGB vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGBA.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGBA.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGBA.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGB">
            <summary>
            Returns an RGB vector from a color.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGB.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an RGB vector from a color.
            </summary>
            <param name="Parameter">Color</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGB.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGB.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ToRGB.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis">
            <summary>
            Adjusts an axis given a step size.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Adjusts an axis given a step size.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.AdjustAxis.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis">
            <summary>
            Recommends an axis, given a minimum and maximum value.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Recommends an axis, given a minimum and maximum value.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.RecommendAxis.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize">
            <summary>
            Returns a recommended step size (for chart presentation), given a magnitude.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a recommended step size (for chart presentation), given a magnitude.
            </summary>
            <param name="Parameter1">Magnitude</param>
            <param name="Parameter2">Double</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Scaling.StepSize.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp">
            <summary>
            Looks up values in a Matrix.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Looks up values in a Matrix.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.LookUp.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression">
            <summary>
            Performs a regression analysis on two-dimensional data.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Performs a regression analysis on two-dimensional data.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.Evaluate(System.Double[],System.Double[],System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Performs a regression analysis on real-valued data.
            </summary>
            <param name="XR">X</param>
            <param name="YR">Y</param>
            <param name="N">N</param>
            <param name="Node">Expression Node performing the evaluation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.Evaluate(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber[],System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Performs a regression analysis on complex-valued data.
            </summary>
            <param name="XC">X</param>
            <param name="YC">Y</param>
            <param name="N">N</param>
            <param name="Node">Expression Node performing the evaluation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Regression.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Slope">
            <summary>
            Calculates the slope of an array representing the values of a sequence of evenly spaced points.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Slope.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the slope of an array representing the values of a sequence of evenly spaced points.
            </summary>
            <param name="Parameter">Vector parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Slope.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Slope.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Slope.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh">
            <summary>
            Computes Asinh(x).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Asinh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asinh.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh">
            <summary>
            Computes Acosh(x).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Acosh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.RealValuedIntervalMin">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMin"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.RealValuedIntervalMax">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMax"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acosh.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh">
            <summary>
            Computes Atanh(x).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Atanh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.RealValuedIntervalMin">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMin"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.RealValuedIntervalMax">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMax"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atanh.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression">
            <summary>
            Explicitly converts a value to a string, using <see cref="M:Clayster.Library.Math.Expression.ToString(System.Object,System.Boolean)"/>.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToExpression.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString">
            <summary>
            Explicitly converts a value to a string, using <see cref="M:Clayster.Library.Math.Expression.ToString(System.Object,System.Boolean)"/>.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.ToString.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2">
            <summary>
            Computes Log2(x). (NOTE: base 2)
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Log2(x). (NOTE: base 2)
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.ExportFunctionName(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.ExportFunctionName(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor">
            <summary>
            Computes Nor(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter">
            <summary>
            Base class for all single real-valued vector variable functions.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single real-valued vector variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateFunction(System.Boolean[])">
            <summary>
            Evaluates the function given a vector.
            </summary>
            <param name="Vector">Vector to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Nor(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.CalcAnd(System.Boolean[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NOR of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Nor of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.CalcNor(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NOR of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Nor of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.CalcNor(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NOR of all elements in the array.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>And of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.EvaluateFunction(System.Boolean[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateFunction(System.Boolean[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nor.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand">
            <summary>
            Computes Nand(x).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Nand(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.CalcNand(System.Boolean[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NAND of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Nand of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.CalcNand(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NAND of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>Nand of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.CalcNand(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates NAND of all elements in the array.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>And of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.EvaluateFunction(System.Boolean[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateFunction(System.Boolean[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Nand.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement">
            <summary>
            Decrements a variable.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decrements a variable.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="Post">If the operator is a pre (false) or post (true) operator.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Decrement.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment">
            <summary>
            Increments a variable.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Increments a variable.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="Post">If the operator is a pre (false) or post (true) operator.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Increment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand">
            <summary>
            Computes the logical or binary nand (not and) of two elements.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator">
            <summary>
            Base class for all boolean-valued binary operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all boolean-valued binary operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the logical or binary nand (not and) of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nand.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor">
            <summary>
            Computes the logical or binary nor (not or) of two elements.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the logical or binary nor (not or) of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Nor.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix">
            <summary>
            Makes sure the result is a matrix. If the operand is a matrix, the operand is returned as is.
            If a vector or set, it is returned as a matrix of height 1. If a scalar, a 1x1 matrix is returned.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Makes sure the result is a matrix. If the operand is a matrix, the operand is returned as is.
            If a vector or set, it is returned as a matrix of height 1. If a scalar, a 1x1 matrix is returned.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeMatrix.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Names.As">
            <summary>
            Makes sure an object is of a specified type/namespace, otherwise null is returned.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Makes sure an object is of a specified type/namespace, otherwise null is returned.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Names.As.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is">
            <summary>
            Compares a type or object with another type or object. Iff the leftmost operand (1) can be assigned
            to variables of the type specified in the rightmost operand 2, the operator returns true.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares a type or object with another type or object. Iff the leftmost operand (1) can be assigned
            to variables of the type specified in the rightmost operand 2, the operator returns true.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Names.Is.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude">
            <summary>
            Converts a number to a physical magnitude, or converts a physical magnitude to a given unit.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Converts a number to a physical magnitude, or converts a physical magnitude to a given unit.
            </summary>
            <param name="Unit">Unit</param>
            <param name="Expression">Expression</param>
            <param name="Operand">Operand</param>
            <param name="StartPosition">Start position of sub-expression.</param>
            <param name="StopPosition">Stop position of sub-expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.ToPhysicalMagnitude.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Try">
            <summary>
            Handles a try...catch...finally statement.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a try...catch...finally statement.
            </summary>
            <param name="Statement">Statement to execute.</param>
            <param name="ExceptionStatement">Optional statement to use if catching exceptions.</param>
            <param name="FinallyStatement">Optional statement that will always be executed.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Try.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.Statement">
            <summary>
            Statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.ExceptionStatement">
            <summary>
            Optional Exception statement.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.FinallyStatement">
            <summary>
            Optional Finally statement.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Try.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy">
            <summary>
            Destroys the value passed to it. If a variable reference is passed to the function, the variable is removed
            from the variable collection. If the value of the variable inherts the <see cref="T:System.IDisposable"/> interface,
            the <see cref="M:System.IDisposable.Dispose"/> method is called on the value.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Destroys the value passed to it. If a variable reference is passed to the function, the variable is removed
            from the variable collection. If the value of the variable inherts the <see cref="T:System.IDisposable"/> interface,
            the <see cref="M:System.IDisposable.Dispose"/> method is called on the value.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Destroy.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.RootNamespaces">
            <summary>
            Returns an array of available root namespaces.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.RootNamespaces.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available root namespaces.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.RootNamespaces.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.RootNamespaces.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.RootNamespaces.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression">
            <summary>
            Parses an expression string, and returns the expression object.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses an expression string, and returns the expression object.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.ParseExpression.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower">
            <summary>
            Returns a lambda expression g(...) = f^N(...), the composite exponent of another lambda expression f(...).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.#ctor(Clayster.Library.Math.Interfaces.ILambdaExpression,System.Int32,Clayster.Library.Math.Expression)">
            <summary>
            Returns a lambda expression g(...) = f^N(...), the composite exponent of another lambda expression f(...).
            </summary>
            <param name="Lambda">Lambda expression f(...)</param>
            <param name="Exponent">Exponent N. Must be a positive integer.</param>
            <param name="Expression">Expression creating the object.</param>
            <exception cref="T:System.Exception">If <paramref name="Exponent"/> is zero or negative.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.Lambda">
            <summary>
            Lambda expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.Exponent">
            <summary>
            Exponent
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LambdaPower.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.SupportGrade">
            <summary>
            How well an item is supported.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Interfaces.SupportGrade.NotAtAll">
            <summary>
            The item is not supported at all.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Interfaces.SupportGrade.Barely">
            <summary>
            The item is only barely supported.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Interfaces.SupportGrade.Ok">
            <summary>
            The item is supported.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Interfaces.SupportGrade.Well">
            <summary>
            The item is well supported.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Interfaces.SupportGrade.Perfect">
            <summary>
            The item is perfectly supported.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Interfaces.IUnitConverter">
            <summary>
            Interface used by the script engine to handle units and unit conversions.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IUnitConverter.ContainsUnit(System.String)">
            <summary>
            If a unit is available in the unit database.
            </summary>
            <param name="Unit">Name of the unit.</param>
            <returns>true iff the unit is available.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Interfaces.IUnitConverter.Convert(System.Double@,System.Int32@,System.String,System.String)">
            <summary>
            Tries to convert a value of one unit to another unit.
            </summary>
            <param name="Value">Value to convert.</param>
            <param name="NrDecimals">Number of decimals of the value.</param>
            <param name="FromUnit">Convert from this unit.</param>
            <param name="ToUnit">Convert to this unit.</param>
            <returns>true iff the value could be converted.</returns>
        </member>
        <member name="T:Clayster.Library.Math.LightSource">
            <summary>
            Light Source, for use in 3D rendering.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.LightSource.#ctor(System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Light Source, for use in 3D rendering.
            </summary>
            <param name="X">X-coordinate of light source</param>
            <param name="Y">Y-coordinate of light source</param>
            <param name="Z">Z-coordinate of light source</param>
            <param name="Intensity">Intensity of light</param>
            <param name="Color">Color of light</param>
        </member>
        <member name="T:Clayster.Library.Math.Namespace">
            <summary>
            Contains a reference to a namespace.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.#ctor(System.String,System.String)">
            <summary>
            Contains a reference to a namespace.
            </summary>
            <param name="LocalName">Local Name</param>
            <param name="FullName">Full Name</param>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.GetChildNamespaces">
            <summary>
            Returns an array of child namespaces.
            </summary>
            <returns>Array of child namespaces.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.GetTypes">
            <summary>
            Returns an array of types in the namespace.
            </summary>
            <returns>Array of types in the namespace.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.GetNamespace(System.String)">
            <summary>
            Gets a Namespace object given its local name.
            </summary>
            <param name="LocalName">Local Name of namespace.</param>
            <returns>Namespace object.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.TryGetNamespace(System.String,Clayster.Library.Math.Namespace@)">
            <summary>
            Tries to get a child namespace object given its local name.
            </summary>
            <param name="LocalName">Local Name of namespace.</param>
            <param name="Namespace">Namespace object if found, or null otherwise.</param>
            <returns>If Namespace found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.GetType(System.String)">
            <summary>
            Gets a Type given its local name.
            </summary>
            <param name="LocalName">Local Name of type.</param>
            <returns>Type</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.TryGetType(System.String,System.Type@)">
            <summary>
            Tries to get a Type given its local name.
            </summary>
            <param name="LocalName">Local Name of type.</param>
            <param name="Type">Type if found, or null otherwise.</param>
            <returns>If Type found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.IsMember(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.IsMember(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Namespace.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Sets.Set.CalculateIntersection(Clayster.Library.Math.Sets.Set,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.LocalName">
            <summary>
            Local name of namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.FullName">
            <summary>
            Full name of namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.Item(System.String)">
            <summary>
            Returns a child namespace or type having a specific local name.
            
            There are two special (case insensitive) local names that are available with special meaning, if
            no corresponding subnamespace or type is found with the same name:
            
            Namespaces = Returns an array of available namespaces
            Types = Returns an array of available types.
            </summary>
            <param name="LocalName">Local Name.</param>
            <returns>Name space or type</returns>
            <exception cref="T:System.IndexOutOfRangeException">If Local Name not recognized.</exception>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.IsInfinite">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsInfinite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.IsCountable">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.IsCountable"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Namespace.LayoutPriority">
            <summary>
            <see cref="P:Clayster.Library.Math.Sets.Set.LayoutPriority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant">
            <summary>
            Handles a single complex-valued constant.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.#ctor(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single complex-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.#ctor(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Expression)">
            <summary>
            Handles a single complex-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.GetPriority(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Gets the expression node priority corresponding to the layout of a complex number <paramref name="z"/>.
            </summary>
            <param name="z">Complex number.</param>
            <returns>Corresponding <see cref="T:Clayster.Library.Math.ExpressionNodes.ExpressionNode"/> prioerity.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.ExportLayout(Clayster.Library.Math.Complex.ComplexNumber,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            Layouts a complex number.
            </summary>
            <param name="z">Complex number</param>
            <param name="w">XML Output</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="AppendDelimiter">If a semicolon (sequence) delimiter should be appended at the end of the instruction or not.</param>
            <param name="Tag">Tag to apply to the exported XML.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant">
            <summary>
            Handles a single vector-valued constant of double values.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single vector-valued constant of double values.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Value">
            <summary>
            Cloned Vector value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexVectorConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant">
            <summary>
            Handles a single matrix-valued constant containing only complex values elements (of 1 level only).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.#ctor(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single matrix-valued constant containing only complex values elements (of 1 level only).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.Value">
            <summary>
            Matrix value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ComplexMatrixConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Undefined">
            <summary>
            undefined "constant".
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            undefined "constant".
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Value">
            <summary>
            Constant undefined value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Undefined.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Zero">
            <summary>
            Corresponds to zero. Used in symbolic differentiation.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Handles a single double-valued constant. Used in symbolic differentiation.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Zero.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Zero.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Zero.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Zero.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.One">
            <summary>
            Corresponds to unity. Used in symbolic differentiation.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Handles a single double-valued constant. Used in symbolic differentiation.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single double-valued constant. Used in symbolic differentiation.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.One.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.One.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.One.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.One.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant">
            <summary>
            Handles a single object-valued constant.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.#ctor(System.Object,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single object-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.#ctor(System.Object,Clayster.Library.Math.Expression)">
            <summary>
            Handles a single object-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.ObjectConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant">
            <summary>
            Handles a single matrix-valued constant containing only double values elements (of 1 level only).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.#ctor(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single matrix-valued constant containing only double values elements (of 1 level only).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.Value">
            <summary>
            Matrix value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleMatrixConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant">
            <summary>
            Handles a single matrix-valued constant (of 1 level only).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.#ctor(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single vector-valued constant (of 1 level only).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.Value">
            <summary>
            Matrix value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.MatrixConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant">
            <summary>
            Handles a single vector-valued constant of double values.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.#ctor(System.Double[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single vector-valued constant of double values.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Value">
            <summary>
            Cloned Vector value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleVectorConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant">
            <summary>
            Handles a single vector-valued constant (of 1 level only).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.#ctor(System.Object[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single vector-valued constant (of 1 level only).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Dimension">
            <summary>
            Dimension of vector.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Value">
            <summary>
            Cloned Vector value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.VectorConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Null">
            <summary>
            Null "constant".
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Null "constant".
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Null.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Null.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Null.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Null.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionsFull">
            <summary>
            Returns an array of available functions, using full function names.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionsFull.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available functions, using full function names.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionsFull.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionsFull.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionsFull.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Functions">
            <summary>
            Returns an array of available functions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Functions.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available functions.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Functions.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Functions.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Functions.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionFullNames">
            <summary>
            Returns an array of available full function names.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionFullNames.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available full function names.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionFullNames.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionFullNames.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionFullNames.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionNames">
            <summary>
            Returns an array of available function names.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionNames.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available function names.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionNames.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionNames.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.FunctionNames.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableValues">
            <summary>
            Returns an array of available variables and their values.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableValues.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available variables and their values.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableValues.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableValues.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableValues.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableNames">
            <summary>
            Returns an array of available variable names.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableNames.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of available variable names.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableNames.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableNames.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.VariableNames.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Explicitly converts a value to a number.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Number.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo">
            <summary>
            Creates an object without a prototype (ex nihilo = from nothing).
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.#ctor(System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode},Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Members">Members</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position.</param>
            <param name="StopPosition">Stop position.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Count">
            <summary>
            Member count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ObjectExNihilo.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Complex">
            <summary>
            Creates a complex number.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Complex.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a complex number.
            </summary>
            <param name="Parameter1">Re</param>
            <param name="Parameter2">Im</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Complex.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Complex.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Complex.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ComplexPolar">
            <summary>
            Creates a complex number using polar coordinates.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ComplexPolar.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a complex number using polar coordinates.
            </summary>
            <param name="Parameter1">r</param>
            <param name="Parameter2">phi</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ComplexPolar.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ComplexPolar.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ComplexPolar.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument">
            <summary>
            arg(z)
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            arg(z)
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Argument.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate">
            <summary>
            Conjugates z
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Conjugates z
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Conjugate.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart">
            <summary>
            im(z)
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            im(z)
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.ImaginaryPart.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart">
            <summary>
            re(z)
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            re(z)
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.RealPart.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus">
            <summary>
            |z|
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            |z|
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Complex.Modulus.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley">
            <summary>
            Creates a lambda expression evaluating Halley's algorithm
            for root finding.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a lambda expression evaluating Halley's algorithm
            for root finding.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Halley.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.CanPreview">
            <summary>
            If any preview recipients are listening for preview values.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.CanPreview.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            If any preview recipients are listening for preview values.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.CanPreview.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.CanPreview.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.CanPreview.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return">
            <summary>
            Stops execution of the function and returns a value.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Prints the value to Console.Out
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Prints the value to Console.Out
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position</param>
            <param name="StopPosition">Stop position</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Return.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create">
            <summary>
            Creates a new object.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a new object.
            </summary>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Create.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect">
            <summary>
            Analyzes the object using reflection and returns a matrix with type and value information.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Analyzes the object using reflection and returns a matrix with type and value information.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Reflect.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing">
            <summary>
            Returns the time elapsed is milliseconds to compute its subexpression.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns the time elapsed is milliseconds to compute its subexpression.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Timing.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview">
            <summary>
            Previews the value to any preview recipitens.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Previews the value to any preview recipitens.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Preview.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL">
            <summary>
            Returns a color value from a (H,S,L) triplet.
            
            Given a color defined by (H, S, L) values in HSL space, with H in the semi-open interval [0, 360), 
            indicating the angle, in degrees of the hue, and with S and L in the range [0, 1], representing the 
            saturation and lightness, respectively.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a color value from a (H,S,L) triplet.
            
            Given a color defined by (H, S, L) values in HSL space, with H in the semi-open interval [0, 360), 
            indicating the angle, in degrees of the hue, and with S and L in the range [0, 1], representing the 
            saturation and lightness, respectively.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.HslToRgb(System.Double,System.Double,System.Double,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts a color from HSL space to RGB space.
            </summary>
            <param name="H">Hue [0-360)</param>
            <param name="S">Saturation [0-1]</param>
            <param name="L">Lightness [0-1]</param>
            <param name="R">Red</param>
            <param name="G">Green</param>
            <param name="B">Blue</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSL.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV">
            <summary>
            Returns a color value from a (H,S,V) triplet.
            
            Given a color defined by (H, S, V) values in HSV space, with H in the semi-open interval [0, 360), 
            indicating the angle, in degrees of the hue, and with S and V in the range [0, 1], representing the 
            saturation and value, respectively.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a color value from a (H,S,V) triplet.
            
            Given a color defined by (H, S, V) values in HSV space, with H in the semi-open interval [0, 360), 
            indicating the angle, in degrees of the hue, and with S and V in the range [0, 1], representing the 
            saturation and value, respectively.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.HsvToRgb(System.Double,System.Double,System.Double,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts a color from HSV space to RGB space.
            </summary>
            <param name="H">Hue [0-360)</param>
            <param name="S">Saturation [0-1]</param>
            <param name="V">Value [0-1]</param>
            <param name="R">Red</param>
            <param name="G">Green</param>
            <param name="B">Blue</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.ColorHSV.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Grayscale">
            <summary>
            Returns a grayscale color
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Grayscale.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a grayscale color
            </summary>
            <param name="Parameter">Intensity 0-1, or a System.Drawing.Color value.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Grayscale.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Grayscale.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Grayscale.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage">
            <summary>
            Performs a non-linear transformation of an image.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Performs a non-linear transformation of an image.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage.SupportsMatrices">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsMatrices"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Imaging.TransformImage.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid">
            <summary>
            Plots a two-dimensional grid.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Plots a two-dimensional grid.
            </summary>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotGrid.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage">
            <summary>
            Plots an image inside a two-dimensional graph.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Plots an image inside a two-dimensional graph.
            </summary>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.PlotImage.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev">
            <summary>
            Creates a Chebyshev polynomial series lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <example>
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </example>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a Chebyshev polynomial series lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2">
            <summary>
            Creates a Chebyshev polynomial series of the second kind lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <example>
            Chebyshev(a)    = x->a[0]U0(x)+a[1]U1(x)+a[2]U2(x)+....a[N]UN(x)
            Chebyshev(a,x0) = x->a[0]U0(x-x0)+a[1]U1(x-x0)+a[2]U2(x-x0)+....a[N]UN(x-x0)
            </example>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a Chebyshev polynomial series of the second kind lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Chebyshev2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase">
            <summary>
            Abstract base class for Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.secondKind">
            <summary>
            If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.length">
            <summary>
            Number of coefficients
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.isOffset">
            <summary>
            If the polynomial is offset.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.#ctor(Clayster.Library.Math.Expression,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Abstract base class for Chebyshev polynomials.
            </summary>
            <param name="Expression">Expression</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="IsOffset">If the polynomial is offset or not.</param>
            <param name="Length">Number of coefficients.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ToPolynomial">
            <summary>
            Converts the Chebyshev series to a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            Exports the coefficient of index <paramref name="Index"/>.
            </summary>
            <param name="w">Layout XML Output</param>
            <param name="Index">Zero-based Index</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="MinPriority">Smallest priority allowed for the exported layout xml.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.GetCoefficientType(System.Int32)">
            <summary>
            Returns the type of coefficient available at index <paramref name="Index"/>.
            </summary>
            <param name="Index">Zero-based Index</param>
            <returns>Type of index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            Exports a coefficient layout.
            </summary>
            <param name="w">Layout XML Output.</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="MinPriority">Smallest priority allowed for the exported layout xml.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            Exports a multiplication operator.
            </summary>
            <param name="w">Layout output.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName">
            <summary>
            Variable name to use in lambda expression.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev">
            <summary>
            Complex-valued (element-based) polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexElementChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev">
            <summary>
            General (element-based) polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.#ctor(System.Array,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            General (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.#ctor(System.Array,System.Object,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            General (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralElementChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev">
            <summary>
            Real-valued (element-based) polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.#ctor(System.Double[],System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.#ctor(System.Double[],System.Double,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued (element-based) polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealElementChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2">
            <summary>
            Creates an element-based Chebyshev polynomial series of the second kind lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <example>
            Chebyshev(a)    = x->a[0]U0(x)+a[1]U1(x)+a[2]U2(x)+....a[N]UN(x)
            Chebyshev(a,x0) = x->a[0]U0(x-x0)+a[1]U1(x-x0)+a[2]U2(x-x0)+....a[N]UN(x-x0)
            </example>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates an element-based Chebyshev polynomial series of the second kind lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev">
            <summary>
            Creates an element-based Chebyshev polynomial series lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <example>
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </example>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates an element-based Chebyshev polynomial series lambda expression.
            
            http://en.wikipedia.org/wiki/Chebyshev_polynomials
            http://en.wikipedia.org/wiki/Clenshaw_algorithm
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementChebyshev.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial">
            <summary>
            Complex-valued polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase">
            <summary>
            Abstract base class for Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.length">
            <summary>
            Number of coefficients
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.isOffset">
            <summary>
            If the polynomial is offset.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.#ctor(Clayster.Library.Math.Expression,System.Boolean,System.Int32)">
            <summary>
            Abstract base class for polynomials.
            </summary>
            <param name="Expression">Expression</param>
            <param name="IsOffset">If the polynomial is offset or not.</param>
            <param name="Length">Number of coefficients.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            Exports the coefficient of index <paramref name="Index"/>.
            </summary>
            <param name="w">Layout XML Output</param>
            <param name="Index">Zero-based Index</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="MinPriority">Smallest priority allowed for the exported layout xml.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)">
            <summary>
            Returns the type of coefficient available at index <paramref name="Index"/>.
            </summary>
            <param name="Index">Zero-based Index</param>
            <returns>Type of index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            Exports a coefficient layout.
            </summary>
            <param name="w">Layout XML Output.</param>
            <param name="ParentType">Type of current parent node in the layout export.</param>
            <param name="MinPriority">Smallest priority allowed for the exported layout xml.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            Exports a multiplication operator.
            </summary>
            <param name="w">Layout output.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName">
            <summary>
            Variable name to use in lambda expression.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ToGeneral">
            <summary>
            Converts the real-valued polynomial into a general-valued polynomial.
            </summary>
            <returns>General valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev">
            <summary>
            Complex-valued polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ComplexChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial">
            <summary>
            Complex-valued (element-based) polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued (element-based) polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.#ctor(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Expression)">
            <summary>
            Complex-valued polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ToGeneral">
            <summary>
            Converts the real-valued polynomial into a general-valued polynomial.
            </summary>
            <returns>General valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.ComplexElementPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial">
            <summary>
            General (element-based) polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.#ctor(System.Array,Clayster.Library.Math.Expression)">
            <summary>
            General (element-based) Polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x.^2+....a[N]x.^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.#ctor(System.Array,System.Object,Clayster.Library.Math.Expression)">
            <summary>
            General (element-based) Polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0).^2+....a[N](x-x0).^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralElementPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial">
             <summary>
             Creates a element-based polynomial lambda expression.
             </summary>
             <example>
             For scalars:
             
             ElementPolynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
             ElementPolynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            
             For matrices:
             
             ElementPolynomial(a) = x->a[0]+a[1]x+a[2]x.^2+....a[N]x.^N
             ElementPolynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0).^2+....a[N](x-x0).^N
             </example>
             <remarks>
             © Clayster, 2010-2014
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a element-based polynomial lambda expression.
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ElementPolynomial.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType">
            <summary>
            Type of coefficient.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.Zero">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.One">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.MinusOne">
            <summary>
            -1
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.Positive">
            <summary>
            &gt;0, but not 1
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.Negative">
            <summary>
            &lt;0, but not -1
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.CoefficientType.Other">
            <summary>
            Other type
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial">
            <summary>
            Real-valued (element-based) polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.#ctor(System.Double[],Clayster.Library.Math.Expression)">
            <summary>
            Real-valued (element-based) polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.#ctor(System.Double[],System.Double,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ToComplex">
            <summary>
            Converts the real-valued polynomial into a complex-valued polynomial.
            </summary>
            <returns>Complex valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ToGeneral">
            <summary>
            Converts the real-valued polynomial into a general-valued polynomial.
            </summary>
            <returns>General valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealElementPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev">
            <summary>
            General polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.#ctor(System.Array,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            General polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.#ctor(System.Array,System.Object,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            General polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.GeneralChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson">
            <summary>
            Creates a lambda expression evaluating the Newton-Raphson algorithm
            for root finding.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a lambda expression evaluating the Newton-Raphson algorithm
            for root finding.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.NewtonRaphson.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev">
            <summary>
            Real-valued polynomial of Chebyshev polynomials.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.#ctor(System.Double[],System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.#ctor(System.Double[],System.Double,System.Boolean,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued polynomial of Chebyshev polynomials.
            
            Chebyshev(a)    = x->a[0]T0(x)+a[1]T1(x)+a[2]T2(x)+....a[N]TN(x)
            Chebyshev(a,x0) = x->a[0]T0(x-x0)+a[1]T1(x-x0)+a[2]T2(x-x0)+....a[N]TN(x-x0)
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="SecondKind">If Chebychef polynomials of the second kind (true) or the first kind (false) is to be used.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ToPolynomial">
            <summary>
            Converts the Chebyshev polynomial series into a polynomial.
            </summary>
            <returns>Polynomial</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.ChebyshevBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.ChebyshevPolynomials.RealChebyshev.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix">
            <summary>
            Creates a 2-dimensional matrix containing calculated values.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional matrix containing calculated values.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Matrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight">
            <summary>
            Flips a matrix right to left.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter">
            <summary>
            Base class for all single matrix variable functions.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all single matrix variable functions.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateCanonicalProtected(System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Evaluates the function given a parameter.
            </summary>
            <param name="Parameter">Parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a new instance of the function.
            </summary>
            <param name="Parameter">Parameter</param>
            <returns>New object instance of the function node.</returns>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parse(Clayster.Library.Math.Expression,System.Int32@,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.Parameter">
            <summary>
            Function parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.Parameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Flips a matrix right to left.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipLeftRight.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown">
            <summary>
            Flips a matrix upside down.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Flips a matrix upside down.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.FlipUpDown.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D">
            <summary>
            Creates a homogeneous 2-dimensional translation matrix.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a homogeneous 2-dimensional translation matrix.
            </summary>
            <param name="Parameter1">X-translation</param>
            <param name="Parameter2">Y-translation</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.TranslationMatrix(System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="Tx">X-translation</param>
            <param name="Ty">Y-translation</param>
            <returns>Translation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Translate2D.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps">
            <summary>
            Computes the smallest number that can be added to a given number, and the result being a new number.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the smallest number that can be added to a given number, and the result being a new number.
            </summary>
            <param name="Parameter">Number</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.CalulateEps(System.Double)">
            <summary>
            Calculates the smallest number addable to <paramref name="Parameter"/> that is not
            lost in the addition.
            </summary>
            <param name="Parameter">Number.</param>
            <returns>Eps(Number)</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Eps.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator">
            <summary>
            Base class for all complex-valued unary operators.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator">
            <summary>
            Base class for all real-valued unary operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all real-valued unary operators.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)">
            <summary>
            Operates on a real-valued operand.
            </summary>
            <param name="Operand">Operand</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operand.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all complex-valued unary operators.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.EvaluateCanonicalProtected(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Operates on a complex-valued operand.
            </summary>
            <param name="z">Operand</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operand.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour">
            <summary>
            Behaviour of the function for real-valued parameters. It's used to optimize performance, by calling
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/> instead of 
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/> when possible.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValuedIntervalMin">
            <summary>
            Smallest real value in the real-valued interval. Should be overridden if <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/> returns
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>.RealInInterval.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValuedIntervalMax">
            <summary>
            Largest real value in the real-valued interval. Should be overridden if <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/> returns
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>.RealInInterval.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator">
            <summary>
            Base class for all complex-valued binary operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator">
            <summary>
            Base class for all real-valued binary operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all real-valued binary operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all complex-valued binary operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.EvaluateCanonicalProtected(System.Double[],System.Double,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="a1">Value 1</param>
            <param name="d2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.EvaluateCanonicalProtected(System.Double,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="d1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="z1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose">
            <summary>
            Transposes and conjugates a matrix
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Transposes and conjugates a matrix
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.CalculateHermitianTranspose(System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the Hermitian transpose.
            </summary>
            <param name="Value">Value</param>
            <param name="ExpressionNode">Expression node</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.HermitianTranspose.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType">
            <summary>
            Compares two elements with respect to value and type.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator">
            <summary>
            Base class for all real-valued comparison operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all real-valued comparison operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons">
            <summary>
            If the comparison operator supports matrix comparisons.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements with respect to value and type.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.SupportsMatrixComparisons">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.EqualityAndType.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray">
            <summary>
            Makes sure the result is an array. If the operand is an array, the operand is returned as is.
            If the operand is a set, a vector of its elements is returned.
            If the operand is a matrix, an array of its row vectors is returned.
            If not, an array of a single element (the operand) is returned.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Makes sure the result is an array. If the operand is an array, the operand is returned as is.
            If the operand is a set, a vector of its elements is returned.
            If the operand is a matrix, an array of its row vectors is returned.
            If not, an array of a single element (the operand) is returned.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MakeArray.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation">
            <summary>
            Dynamic function evaluation.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DynamicFunctionEvaluation.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative">
            <summary>
            Returns the default derivative of a lambda expression.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.#ctor(System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Returns the default derivative of a lambda expression.
            </summary>
            <param name="NrDerivatives">Number of consecutive differentiations to perform.</param>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.NrDeriviatives">
            <summary>
            Number of derivatives.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.DefaultDerivative.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial">
            <summary>
            General polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.#ctor(System.Array,Clayster.Library.Math.Expression)">
            <summary>
            Polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.#ctor(System.Array,System.Object,Clayster.Library.Math.Expression)">
            <summary>
            Polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.GeneralPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial">
             <summary>
             Creates a polynomial lambda expression.
             </summary>
             <example>
             For scalars:
             
             Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
             Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            
             For matrices:
             
             Polynomial(a) = x->a[0]*I+a[1]x+a[2]x^2+....a[N]x^N
             Polynomial(a,x0) = x->a[0]*I+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
             </example>
             <remarks>
             © Clayster, 2010-2014
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a polynomial lambda expression.
            </summary>
            <param name="Parameter1">Scalar containing coefficients.</param>
            <param name="Parameter2">Optional variable offset.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.EvaluateCanonicalProtected(System.Double[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.EvaluateCanonicalProtected(Clayster.Library.Math.Complex.ComplexNumber[],System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Coefficients">Coefficients</param>
            <param name="Offset">Offset</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomial.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial">
            <summary>
            Real-valued polynomial.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.#ctor(System.Double[],Clayster.Library.Math.Expression)">
            <summary>
            Real-valued polynomial.
            
            Polynomial(a) = x->a[0]+a[1]x+a[2]x^2+....a[N]x^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.#ctor(System.Double[],System.Double,Clayster.Library.Math.Expression)">
            <summary>
            Real-valued polynomial.
            
            Polynomial(a,x0) = x->a[0]+a[1](x-x0)+a[2](x-x0)^2+....a[N](x-x0)^N
            </summary>
            <param name="Coefficients">Coefficients.</param>
            <param name="Offset">Offset.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ToComplex">
            <summary>
            Converts the real-valued polynomial into a complex-valued polynomial.
            </summary>
            <returns>Complex valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ToGeneral">
            <summary>
            Converts the real-valued polynomial into a general-valued polynomial.
            </summary>
            <returns>General valued polynomial.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportCoefficientLayout(System.Xml.XmlWriter,System.Int32,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportOffsetLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,Clayster.Library.Math.ExpressionNodePriority)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ExportMultiplicationOperator(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.ExportMultiplicationOperator(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.GetCoefficientType(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.GetCoefficientType(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Coefficients">
            <summary>
            Coefficient array of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Offset">
            <summary>
            Offset (or origo) of polynomial.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.VariableName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.PolynomialBase.VariableName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.Polynomials.RealPolynomial.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression">
            <summary>
            Evaluation of an implcit lambda expression.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitLambdaExpression.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction">
            <summary>
            Differentiates an expression
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Differentiates an expression
            </summary>
            <param name="Parameter1">Variable reference.</param>
            <param name="Parameter2">Subexpression to differentiate.</param>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Differentiation.DifferentiateFunction.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D">
            <summary>
            Creates a two dimensional line graph.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional line graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional line graph.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Line2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional line plot chart.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Line1D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas">
            <summary>
            Creates a Canvas (GDI+) Graph that can be used by script to freely draw on.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a Canvas (GDI+) Graph that can be used by script to freely draw on.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Canvas.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CombineMode">
            <summary>
            Creates a System.Drawing.Drawing2D.CombineMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CombineMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.CombineMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CombineMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CombineMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CombineMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingMode">
            <summary>
            Creates a System.Drawing.Drawing2D.CompositingMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.CompositingMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingQuality">
            <summary>
            Creates a System.Drawing.Drawing2D.CompositingQuality from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingQuality.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.CompositingQuality from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingQuality.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingQuality.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CompositingQuality.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CoordinateSpace">
            <summary>
            Creates a System.Drawing.Drawing2D.CoordinateSpace from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CoordinateSpace.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.CoordinateSpace from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CoordinateSpace.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CoordinateSpace.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CoordinateSpace.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF">
            <summary>
            Creates a System.Drawing.SizeF.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.SizeF.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SizeF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF">
            <summary>
            Creates a System.Drawing.RectangleF.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.RectangleF.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.RectangleF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle">
            <summary>
            Creates a System.Drawing.Rectangle.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Rectangle.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Rectangle.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PointF">
            <summary>
            Creates a System.Drawing.PointF.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PointF.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.PointF.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PointF.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PointF.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PointF.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Point">
            <summary>
            Creates a System.Drawing.Point.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Point.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Point.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Point.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Point.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Point.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size">
            <summary>
            Creates a System.Drawing.Size.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Size.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Size.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font">
            <summary>
            Creates a System.Drawing.Font.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Font.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Font.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FontStyle">
            <summary>
            Creates a System.Drawing.FontStyle from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FontStyle.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.FontStyle from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FontStyle.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FontStyle.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FontStyle.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen">
            <summary>
            Creates a System.Drawing.Pen.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Pen.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.Pen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SolidBrush">
            <summary>
            Creates a System.Drawing.SolidBrush.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SolidBrush.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.SolidBrush.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SolidBrush.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SolidBrush.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SolidBrush.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.TextRenderingHint">
            <summary>
            Creates a System.Drawing.Text.TextRenderingHint from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.TextRenderingHint.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Text.TextRenderingHint from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.TextRenderingHint.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.TextRenderingHint.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.TextRenderingHint.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.StringFormat">
            <summary>
            Creates a System.Drawing.StringFormat from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.StringFormat.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.StringFormat from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.StringFormat.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.StringFormat.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.StringFormat.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SmoothingMode">
            <summary>
            Creates a System.Drawing.Drawing2D.SmoothingMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SmoothingMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.SmoothingMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SmoothingMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SmoothingMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.SmoothingMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PixelOffsetMode">
            <summary>
            Creates a System.Drawing.Drawing2D.PixelOffsetMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PixelOffsetMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.PixelOffsetMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PixelOffsetMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PixelOffsetMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.PixelOffsetMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.MatrixOrder">
            <summary>
            Creates a System.Drawing.Drawing2D.MatrixOrder from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.MatrixOrder.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.MatrixOrder from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.MatrixOrder.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.MatrixOrder.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.MatrixOrder.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.InterpolationMode">
            <summary>
            Creates a System.Drawing.Drawing2D.InterpolationMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.InterpolationMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.InterpolationMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.InterpolationMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.InterpolationMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.InterpolationMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.GraphicsUnit">
            <summary>
            Creates a System.Drawing.GraphicsUnit from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.GraphicsUnit.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.GraphicsUnit from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.GraphicsUnit.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.GraphicsUnit.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.GraphicsUnit.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FlushIntention">
            <summary>
            Creates a System.Drawing.Drawing2D.FlushIntention from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FlushIntention.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.FlushIntention from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FlushIntention.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FlushIntention.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FlushIntention.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FillMode">
            <summary>
            Creates a System.Drawing.Drawing2D.FillMode from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FillMode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.Drawing2D.FillMode from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FillMode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FillMode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.FillMode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CopyPixelOperation">
            <summary>
            Creates a System.Drawing.CopyPixelOperation from a string.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CopyPixelOperation.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a System.Drawing.CopyPixelOperation from a string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CopyPixelOperation.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CopyPixelOperation.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Gdi.CopyPixelOperation.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda">
            <summary>
            Makes sure its parameter is a lambda expression.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Makes sure its parameter is a lambda expression.
            </summary>
            <param name="Parameter1">Expression to check</param>
            <param name="Parameter2">Optional number of parameters (can be null).</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.AssertLambda.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda">
            <summary>
            Checks if its parameter is a lambda expression or not.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if its parameter is a lambda expression or not.
            </summary>
            <param name="Parameter1">Expression to check</param>
            <param name="Parameter2">Optional number of parameters (can be null).</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Lambda.IsLambda.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns">
            <summary>
            Returns an array containing the column vectors of a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an array containing the column vectors of a matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Columns.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Trace">
            <summary>
            Calulates the trace of a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Trace.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calulates the trace of a matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Trace.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Trace.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Trace.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant">
            <summary>
            Calulates the determinant of a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calulates the determinant of a matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Determinant.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows">
            <summary>
            Returns an array containing the row vectors of a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an array containing the row vectors of a matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rows.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones">
            <summary>
            Creates a 2-dimensional matrix of only ones.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional matrix of only ones.
            </summary>
            <param name="Parameter1">X-scaling factor</param>
            <param name="Parameter2">Y-scaling factor</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Ones.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix">
            <summary>
            Creates a Hilbert matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a Hilbert matrix.
            </summary>
            <param name="Parameter">Dimension</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.HilbertMatrix.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rank">
            <summary>
            Calulates the rank of a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rank.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calulates the rank of a matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rank.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rank.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rank.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate">
            <summary>
            Reduces a matrix using pivoted Gauss-Jordan elimination. The matrix is reduced to
            its Reduced Row Echelon Form (RREF).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Reduces a matrix using pivoted Gauss-Jordan elimination.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Eliminate.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce">
            <summary>
            Reduces a matrix using pivoted Gaussian elimination.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Reduces a matrix using pivoted Gaussian elimination.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Reduce.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous">
            <summary>
            Creates a homogeneous 2-dimensional scaling matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a homogeneous 2-dimensional scaling matrix.
            </summary>
            <param name="Parameter1">X-scaling factor</param>
            <param name="Parameter2">Y-scaling factor</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.ScaleMatrix(System.Double,System.Double)">
            <summary>
            Creates a homogeneous scaling matrix.
            </summary>
            <param name="Sx">Scaling along x-axis.</param>
            <param name="Sy">Scaling along y-axis.</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2DHomogeneous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D">
            <summary>
            Creates a 2-dimensional scaling matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional scaling matrix.
            </summary>
            <param name="Parameter1">X-scaling factor</param>
            <param name="Parameter2">Y-scaling factor</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D.ScaleMatrix(System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="Sx">Scaling along x-axis.</param>
            <param name="Sy">Scaling along y-axis.</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Scale2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous">
            <summary>
            Creates a 2-dimensional homogeneous rotation matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional homogeneous rotation matrix.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.RotationMatrix(System.Double)">
            <summary>
            Returns a rotation matrix
            </summary>
            <param name="Angle">Angle</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2DHomogeneous.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D">
            <summary>
            Creates a 2-dimensional rotation matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional rotation matrix.
            </summary>
            <param name="Parameter">Angle</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.RotationMatrix(System.Double)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="Angle">Radians</param>
            <returns>Rotation matrix</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Rotate2D.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsNullMatrix">
            <summary>
            Checks if a matrix is a null matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsNullMatrix.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if a matrix is a null matrix.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsNullMatrix.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsNullMatrix.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsNullMatrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsLowerTriangular">
            <summary>
            Checks if a matrix is lower triangular.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsLowerTriangular.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if a matrix is lower triangular.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsLowerTriangular.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsLowerTriangular.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsLowerTriangular.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsUpperTriangular">
            <summary>
            Checks if a matrix is upper triangular.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsUpperTriangular.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if a matrix is upper triangular.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsUpperTriangular.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsUpperTriangular.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsUpperTriangular.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsDiagonal">
            <summary>
            Checks if a matrix is diagonal.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsDiagonal.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if a matrix is diagonal.
            </summary>
            <param name="Parameter">Matrix</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsDiagonal.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.EvaluateFunction(Clayster.Library.Math.Matrices.Matrix)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsDiagonal.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleMatrixParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.IsDiagonal.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal">
            <summary>
            Creates a diagonal matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a diagonal matrix.
            </summary>
            <param name="Parameter">Dimension</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(System.Double[])">
            <summary>
            Creates a real diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal elements.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(Clayster.Library.Math.Complex.ComplexNumber[])">
            <summary>
            Creates a complex diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal elements.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(System.Double,System.Int32)">
            <summary>
            Creates a real diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal element.</param>
            <param name="Size">Size of the matrix.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(Clayster.Library.Math.Complex.ComplexNumber,System.Int32)">
            <summary>
            Creates a complex diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal element.</param>
            <param name="Size">Size of the matrix.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(System.Array)">
            <summary>
            Creates a diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal elements.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.CreateDiagonalMatrix(System.Object,System.Int32)">
            <summary>
            Creates a diagonal matrix.
            </summary>
            <param name="Diagonal">Diagonal element.</param>
            <param name="Size">Size of the matrix.</param>
            <returns>Diagonal matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Diagonal.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero">
            <summary>
            Creates a 2-dimensional matrix of only zeroes.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a 2-dimensional matrix of only zeroes.
            </summary>
            <param name="Parameter1">X-scaling factor</param>
            <param name="Parameter2">Y-scaling factor</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.CreateZeroMatrix(System.Int32,System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates a zero matrix.
            </summary>
            <param name="Width">Width</param>
            <param name="Height">Height</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Zero matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Zero.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity">
            <summary>
            Creates an identity matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="Parameter">Dimension</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity.IdentityMatrix(System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates an identity matrix.
            </summary>
            <param name="n">Dimensions</param>
            <param name="ExpressionNode">Expression node performing the calculation.</param>
            <returns>Identity matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.LinearAlgebra.Identity.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error">
            <summary>
            Throws an exception.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Throws an exception.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Error.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert">
            <summary>
            Computes Invert(x).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Invert(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(Clayster.Library.Math.Matrices.GeneralMatrix,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Invert.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize">
            <summary>
            Normalizes a vector (i.e. making it unit length).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Normalizes a vector (i.e. making it unit length).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Normalize.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset">
            <summary>
            Extract elements from an array.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Extract elements from an array.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Subset.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ImplicitFunction">
            <summary>
            Evaluation of an implcit function.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ImplicitFunction.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Matrix">
            <summary>
            Contains a two dimensional array of expression nodes, forming a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],System.Int32,System.Int32,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Array">Array of expression nodes.</param>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Matrix.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.Width">
            <summary>
            Width of matrix.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.Height">
            <summary>
            Height of matrix.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Matrix element.
            </summary>
            <param name="Column">Zero-based column index.</param>
            <param name="Row">Zero-based row index.</param>
            <returns></returns>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Matrix.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ForEachNode">
            <summary>
            Handles loop evaluation using for each.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles loop evaluation using for each.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.Evaluate(Clayster.Library.Math.Variables,System.Boolean)">
            <summary>
            Evaluates the for-each statement.
            </summary>
            <param name="Variables">Current variables collection.</param>
            <param name="ReturnSeries">If a series with all intermediate results should be returned (true), or if only
            the last value should be returned (false).</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ForEachNode.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.Statement">
            <summary>
            Statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.LoopVariable">
            <summary>
            Loop Variable Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ForEachNode.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.For">
            <summary>
            Handles loop evaluation using for.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles loop evaluation using for.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.For.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.Initialization">
            <summary>
            Initialization expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.To">
            <summary>
            To expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.StepExpression">
            <summary>
            Step expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.Statement">
            <summary>
            Loop Statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.LoopVariable">
            <summary>
            Loop variable name;
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.For.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters">
            <summary>
            Base class for all two real variable functions.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Base class for all two real variable functions.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.EvaluateFunction(System.Double,System.Double)">
            <summary>
            Evaluates the function given two parameters.
            </summary>
            <param name="Parameter1">The first parameter to use when evaluateing function.</param>
            <param name="Parameter2">The second parameter to use when evaluateing function.</param>
            <returns>Function evaluation.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be evaluated.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional scatter diagram.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Scatter1D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional plot (curve/line) chart.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.Plot1D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional horizontal bar chart.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.HorizontalBars.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
            <param name="ValueVector">Value Vector</param>
            <param name="LabelVector">Label Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a one dimensional vertical bar chart.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs1D.VerticalBars.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined">
            <summary>
            Returns the first well defined value in a sequence of expressions
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns the first well defined value in a sequence of expressions
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.FirstDefined.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5">
            <summary>
            Calculates the MD5 Hash value of its parameter. 
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Calculates the MD5 Hash value of its parameter. 
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.CalcHashBinary(System.String)">
            <summary>
            Computes an MD5 Hash of the string, and returns the hash as binary data.
            </summary>
            <param name="s">String to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.CalcHashBinary(System.Byte[])">
            <summary>
            Computes an MD5 Hash of some binary data, and returns the hash as binary data.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>Hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.Join(System.Byte[][])">
            <summary>
            Joins a set of binary data blocks into one block.
            </summary>
            <param name="Data">Data blocks.</param>
            <returns>Joined data blocks.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.CalcHash(System.String)">
            <summary>
            Computes an MD5 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="s">String to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.CalcHash(System.Byte[])">
            <summary>
            Computes an MD5 Hash of the string, and returns a string containing the hex dump of the hash.
            </summary>
            <param name="Data">Data to hash.</param>
            <returns>String containing hex dump of the hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.HashToString(System.Byte[])">
            <summary>
            Converts a binary hash value to a hexidecimal string using lower case characters.
            </summary>
            <param name="Hash">Binary Hash</param>
            <returns>Hexadecimal string representation of hash.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Security.MD5.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order">
            <summary>
            Orders elements in an array
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Orders elements in an array
            </summary>
            <param name="Array">Array to be ordered</param>
            <param name="Variable1">Name of first comparison variable.</param>
            <param name="Variable2">Name of second comparison variable.</param>
            <param name="Comparison">Comparison of <paramref name="Variable1"/> and <paramref name="Variable2"/>.</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Orders elements in an array
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Order.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse">
            <summary>
            Computes Reverse(x).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Reverse(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse.CalcReverse(System.Array)">
            <summary>
            Calculates the reverse order of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Reverses the order of the elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Reverse.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower">
            <summary>
            Computes (element-wise) power of two elements.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the (element-wise) multiplication of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the (element-wise) multiplication of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementPower.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision">
            <summary>
            Computes (element-wise) division of two elements.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes (element-wise) division of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Divide(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Multiplies two elements.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Product of the operands.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.SupportsLeftVectorArithmetics(System.Collections.ICollection,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementDivision.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication">
            <summary>
            Computes (element-wise) multiplication of two elements.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes (element-wise) multiplication of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Multiply(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Multiplies two elements.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Product of the operands.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.SupportsLeftVectorArithmetics(System.Collections.ICollection,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.ElementMultiplication.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition">
            <summary>
            Defines a lambda expression.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.#ctor(System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Math.ExpressionNodes.ParameterType}[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Defines a lambda expression.
            </summary>
            <param name="ParameterNames">Parameter names.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.#ctor(System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Math.ExpressionNodes.ParameterType}[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Defines a lambda expression.
            </summary>
            <param name="ParameterNames">Parameter names.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.#ctor(System.String[],Clayster.Library.Math.ExpressionNodes.ParameterType[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Defines a lambda expression.
            </summary>
            <param name="ParameterNames">Parameter names.</param>
            <param name="ParameterTypes">Parameter types. Must be of the same length as <paramref name="ParameterNames"/>.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <exception cref="T:System.ArgumentException">if <paramref name="ParameterTypes"/> is not of the same length as
            <paramref name="ParameterNames"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.#ctor(System.String[],Clayster.Library.Math.ExpressionNodes.ParameterType[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Defines a lambda expression.
            </summary>
            <param name="ParameterNames">Parameter names.</param>
            <param name="ParameterTypes">Parameter types. Must be of the same length as <paramref name="ParameterNames"/>.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <exception cref="T:System.ArgumentException">if <paramref name="ParameterTypes"/> is not of the same length as
            <paramref name="ParameterNames"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates the lambda expression.
            </summary>
            <param name="Parameters">Parameters</param>
            <param name="Variables">Variables</param>
            <param name="ExpressionNode">Expression Node being evaluated.</param>
            <returns>Result of the lambda expression.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ToString(Clayster.Library.Math.Interfaces.ILambdaExpression)">
            <summary>
            Creates a lambda expression string, for example "λ(x,y)".
            </summary>
            <param name="Lambda">Lambda expression.</param>
            <returns>Lambda exprssion string.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Clayster#Library#Math#Interfaces#ILambdaExpression#Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ExportParametersLayoutInBaseline(System.String[],Clayster.Library.Math.ExpressionNodes.ParameterType[],System.Boolean,System.Xml.XmlWriter)">
            <summary>
            Exports a parameter set layout. It is assumed that the export takes place within a Baseline construct.
            </summary>
            <param name="ParameterNames">Parameter Names</param>
            <param name="ParameterTypes">Parameter types.</param>
            <param name="ForceParenthesis">If a parenthesis should always surround the parameter definition.</param>
            <param name="w">Destination</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ParameterNames">
            <summary>
            Parameter names
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ParameterTypes">
            <summary>
            Parameter types of <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.ParameterCount">
            <summary>
            Number of parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LambdaDefinition.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementInequality">
            <summary>
            Compares two elements (element-wise).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.AreUnequal(System.Object,System.Object)">
            <summary>
            Checks if <paramref name="Operand1"/> is unequal to <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <returns>Iff they are unequal.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.SupportsMatrixComparisons">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Inequality.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementInequality.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements (element-wise).
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementInequality.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementInequality.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementInequality.SupportsMatrixComparisons">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementEquality">
            <summary>
            Compares two elements (element-wise).
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.AreEqual(System.Object,System.Object)">
            <summary>
            Checks if <paramref name="Operand1"/> is equal to <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <returns>Iff they are equal.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.SupportsMatrixComparisons">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equality.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementEquality.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements (element-wise).
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementEquality.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementEquality.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.ElementEquality.SupportsMatrixComparisons">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.SupportsMatrixComparisons"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment">
            <summary>
            Handles property and field assignment.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles property and field assignment.
            </summary>
            <param name="MatrixRow">MatrixRow node.</param>
            <param name="Operand">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRowAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment">
            <summary>
            Handles matrix column assignment.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles matrix column assignment.
            </summary>
            <param name="MatrixColumn">MatrixColumn node.</param>
            <param name="Operand">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumnAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment">
            <summary>
            Handles matrix element assignment.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles matrix element assignment.
            </summary>
            <param name="MatrixIndex">MatrixIndex node.</param>
            <param name="Operand">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndexAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment">
            <summary>
            Handles index assignment.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.Index,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles index assignment.
            </summary>
            <param name="Index">Index node.</param>
            <param name="Operand">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.IndexAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow">
            <summary>
            Extracts a row from a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Extracts a row from a matrix.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.EvaluateCanonicalProtected(System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.EvaluateCanonicalProtected(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.EvaluateCanonicalProtected(System.Collections.ICollection,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Sets a specific row in a matrix.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixRow.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn">
            <summary>
            Extracts a column from a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Extracts a column from a matrix.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.EvaluateCanonicalProtected(System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.EvaluateCanonicalProtected(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.EvaluateCanonicalProtected(System.Collections.ICollection,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Sets a specific column in a matrix.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixColumn.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex">
            <summary>
            Extracts an element from a matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Extracts an element from a matrix.
            </summary>
            <param name="Matrix">Matrix</param>
            <param name="ColumnIndex">Zero-based column index.</param>
            <param name="RowIndex">Zero-based row index.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.EvaluateCanonicalProtected(System.Object,System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="Column">Column index</param>
            <param name="Row">Row index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.EvaluateCanonicalProtected(Clayster.Library.Math.Matrices.Matrix,System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="Column">Column index</param>
            <param name="Row">Row index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.EvaluateCanonicalProtected(System.Collections.ICollection,System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="Column">Column index</param>
            <param name="Row">Row index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Sets a specific element in a matrix.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.RowIndex">
            <summary>
            Row Index Expression Node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.MatrixIndex.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution">
            <summary>
            Computes the linear solution of the equation A*x=b, where A is a matrix, and b a vector.
            The operation is written A\b. (Quicker than computing x=Inv(A)*b.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the linear solution of the equation A*x=b, where A is a matrix, and b a vector.
            The operation is written A\b. (Quicker than computing x=Inv(A)*b.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.CalcLinearSolution(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Variables)">
            <summary>
            Computes the linear solution of the equation A*x=b, where A is a matrix, and b a vector.
            The operation is written A\b. (Quicker than computing x=Inv(A)*b.
            </summary>
            <param name="A">A, in the equation A*x=b</param>
            <param name="b">b, in the equation A*x=b</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <param name="Variables">Current variable collection.</param>
            <returns>x, in the equation A*x=b</returns>
            <exception cref="T:System.Exception">If a solution is not found.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.LinearSolution.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition">
            <summary>
            Variable definition, as defined by ECMA
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.#ctor(Clayster.Library.Math.Expression,System.String,System.Int32,System.Int32)">
            <summary>
            Variable definition, as defined by ECMA
            </summary>
            <param name="Expression">Expression</param>
            <param name="VariableName">Name of variable</param>
            <param name="StartPosition">Start position</param>
            <param name="StopPosition">Stop position</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.VariableName">
            <summary>
            Variable name to be defined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.VariableDefinition.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ScriptBinder">
            <summary>
            Custom Binder class, for matching script parameter values to CLR members.
            
            For more information on the Binder base class, see:
            http://msdn.microsoft.com/en-us/library/system.reflection.binder.aspx
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.#ctor(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Custom Binder class, for matching script parameter values to CLR members.
            
            For more information on the Binder base class, see:
            http://msdn.microsoft.com/en-us/library/system.reflection.binder.aspx
            </summary>
            <param name="Variables">Current Variables collection</param>
            <param name="ExpressionNode">Current Expression Node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.#ctor(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Custom Binder class, for matching script parameter values to CLR members.
            
            For more information on the Binder base class, see:
            http://msdn.microsoft.com/en-us/library/system.reflection.binder.aspx
            </summary>
            <param name="MethodParameters">Used to help type conversions of array parameters in calls to methods.</param>
            <param name="Variables">Current Variables collection</param>
            <param name="ExpressionNode">Current Expression Node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            <see cref="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
            <summary>
            <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.ChangeTypes(System.Object[],System.Type[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Changes a sequence of parameters to the desired parameter types.
            </summary>
            <param name="Values">Array of parameters</param>
            <param name="ToTypes">Desired types.</param>
            <param name="Source">Source of conversion.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.ChangeToLastMethodParameterTypes(System.Object[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Converts any parameter types if needed. Parameter types are taken from the last call to
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])"/>.
            </summary>
            <param name="Values"></param>
            <param name="Source">Source of conversion.</param>
            <returns>If the method call has reference types.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            <see cref="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.ReorderArgumentArray(System.Object[]@,System.Object)">
            <summary>
            <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            <see cref="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.SelectExtensionMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            Selects an extension method.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
            <summary>
            <see cref="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ScriptBinder.CanConvertFrom(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Checks if a type can be converted from one type to another, using the ScriptBinder class.
            </summary>
            <param name="FromValue">Optional value to convert from.</param>
            <param name="From">Type to convert from.</param>
            <param name="To">Type to convert to.</param>
            <param name="Lax">If lax type checking is to be performed. (First pass=false, Second pass=true).</param>
            <param name="HasParameterValues">If method parameter values are available.</param>
            <returns>If the type can be converted or not.</returns>
        </member>
        <member name="T:Clayster.Library.Math.ImageTransforms">
            <summary>
            Graph containing a sequence of linearly transformed images.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.#ctor(System.Drawing.Drawing2D.Matrix,System.Drawing.Image,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Graph containing a sequence of linearly transformed images.
            </summary>
            <param name="M">Transformation</param>
            <param name="Img">Image</param>
            <param name="ExpressionNode">Expression Node performing the evaluation.</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.#ctor(Clayster.Library.Math.Matrices.RealMatrix,System.Drawing.Image,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Graph containing a sequence of linearly transformed images.
            </summary>
            <param name="M">Transformation</param>
            <param name="Img">Image</param>
            <param name="ExpressionNode">Expression Node performing the evaluation.</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.#ctor(System.Drawing.Drawing2D.Matrix,Clayster.Library.Math.Graph,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Graph containing a sequence of linearly transformed images.
            </summary>
            <param name="M">Transformation</param>
            <param name="Graph">Graph</param>
            <param name="ExpressionNode">Expression Node performing the evaluation.</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.#ctor(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Graph,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Graph containing a sequence of linearly transformed images.
            </summary>
            <param name="M">Transformation</param>
            <param name="Graph">Graph</param>
            <param name="ExpressionNode">Expression Node performing the evaluation.</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.Add(System.Drawing.Drawing2D.Matrix,System.Drawing.Image)">
            <summary>
            Adds an image to the graph.
            </summary>
            <param name="M">Transform</param>
            <param name="Img">Image</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.Add(System.Drawing.Drawing2D.Matrix,Clayster.Library.Math.Graph,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Adds an image to the graph.
            </summary>
            <param name="M">Transform</param>
            <param name="Graph">Graph</param>
            <param name="Width">Width of graph.</param>
            <param name="Height">Height of graph.</param>
            <param name="AdjustXAxis">If the X-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="AdjustYAxis">If the Y-axis is to be adjusted according to the step size of the axis values.</param>
            <param name="Background">Background color.</param>
            <param name="Axes">Color of axes.</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.Add(Clayster.Library.Math.ImageReference[])">
            <summary>
            Adds a set of images to the graph.
            </summary>
            <param name="Images">Images</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.Add(System.Collections.Generic.LinkedList{Clayster.Library.Math.ImageReference})">
            <summary>
            Adds a set of images to the graph.
            </summary>
            <param name="Images">Images</param>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.CalculateExtent">
            <summary>
            Calculates the extent of the set of transformed images.
            </summary>
            <returns>Extent of the union of all transformed images.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ImageTransforms.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ImageTransforms.RecommendedSize">
            <summary>
            <see cref="P:Clayster.Library.Math.Graph.RecommendedSize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion">
            <summary>
            Inverts an element.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Inverts an element.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Inverts an element.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Invert(System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Inverts a value
            </summary>
            <param name="Value">Value to invert</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Inverted value.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If unable to invert the value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Inversion.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator">
            <summary>
            Base class for all boolean-valued comparison operators.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Base class for all boolean-valued comparison operators.
            </summary>
            <param name="Op1">Left operand, or operand 1.</param>
            <param name="Op2">Right operand, or operand 2.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 2</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.Operate(System.Boolean,System.Boolean)">
            <summary>
            Operates on two operands.
            </summary>
            <param name="Operand1">Operand 1 (left operand).</param>
            <param name="Operand2">Operand 2 (right operand).</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If not able to operate on the given operands.</exception>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition">
            <summary>
            Handles definition of a function.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Math.ExpressionNodes.ParameterType}[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Defines a function.
            </summary>
            <param name="FunctionName">Name of function</param>
            <param name="ParameterNames">Name of function parameters</param>
            <param name="FunctionBody">Function body</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Evaluate(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the function definition.
            </summary>
            <param name="Parameters">Substitution parameters.</param>
            <param name="Variables">Variables.</param>
            <returns>Function evaluation.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.CanonicalParameterSplit(System.Object[],System.String[],Clayster.Library.Math.ExpressionNodes.ParameterType[],Clayster.Library.Math.Variables,System.Boolean,Clayster.Library.Math.ExpressionNodes.ExpressionNode,System.Collections.Generic.List{System.Object[]},System.Object@)">
            <summary>
            Splits function parameters into a sequence of parameter sets and a result structure.
            </summary>
            <param name="Parameters">Parameters</param>
            <param name="ParameterNames">Parameter names</param>
            <param name="ParameterTypes">Parameter types</param>
            <param name="Variables">Variables</param>
            <param name="AllNormal">If all parameters are normal (pass through) parameters, with no canonical extension needed.</param>
            <param name="ExecutingNode">Node executing the function evaluation.</param>
            <param name="CanonicalSplit">Parameter split canonically</param>
            <param name="ResultStructure">Structure of the result of the canonical extension. Contains scalars, arrays or matrices of zero-based indices
            into <paramref name="CanonicalSplit"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Evaluate(Clayster.Library.Math.ExpressionNodes.ExpressionNode,System.Object[],System.String[],Clayster.Library.Math.ExpressionNodes.ParameterType[],Clayster.Library.Math.Variables,System.Boolean,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates, and possibly extends canonically, a function definition based on an expression node.
            </summary>
            <param name="Operand">Operand to evaluate</param>
            <param name="Parameters">Parameter values</param>
            <param name="ParameterNames">Parameter names</param>
            <param name="ParameterTypes">Parameter types</param>
            <param name="Variables">Variables</param>
            <param name="AllNormal">If all parameters are normal (pass through) parameters, with no canonical extension needed.</param>
            <param name="ExecutingNode">Node executing the function evaluation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Evaluate(Clayster.Library.Math.Interfaces.ILambdaExpression,System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Evaluates, and possibly extends canonically, a function definition based on a lambda expression.
            </summary>
            <param name="Lambda">Lambda expression to evaluate</param>
            <param name="Parameters">Parameter values</param>
            <param name="Variables">Variables</param>
            <param name="ExecutingNode">Node executing the function evaluation.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.FunctionName">
            <summary>
            Function name
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.ParameterNames">
            <summary>
            Parameter names
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.ParameterTypes">
            <summary>
            Parameter types of <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.AllNormal">
            <summary>
            If all parameters are <see cref="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Normal"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.FunctionDefinition.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg">
            <summary>
            Compares two elements using regular expressions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements using regular expressions.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLikeReg.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg">
            <summary>
            Compares two elements using regular expressions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements using regular expressions.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LikeReg.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph1DType">
            <summary>
            Type of 1D Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.HorizontalBars">
            <summary>
            Horizontal Bars
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.VerticalBars">
            <summary>
            Vertical Bars
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.Curve">
            <summary>
            Curve graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.Scatter">
            <summary>
            Scatter graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.Line">
            <summary>
            Line graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph1DType.PieChart">
            <summary>
            Pie chart
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph1D">
            <summary>
            Base class for all one-dimensional graphs.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all one dimensional graphs.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="ValueAxis">Name of the Value-Axis</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="LabelAxis">Name of the Label-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.ValueAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph1D.OnValueAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.Add(System.Double[],System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.Add(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color,Clayster.Library.Math.Graph1DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.Add(System.Double[],System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.Add(System.Double[],Clayster.Library.Math.AxisType,System.String[],System.Drawing.Color[],Clayster.Library.Math.Graph1DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="Values">Array of values.</param>
            <param name="ValueAxisType">Value axis type.</param>
            <param name="Labels">Array of labels.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph1D.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph1D.OnValueAxisCalculated">
            <summary>
            Event raised when the value axis has been computed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph1D.MinValue">
            <summary>
            Smallest value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph1D.MaxValue">
            <summary>
            Largest value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph1D.Labels">
            <summary>
            Labels
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color">
            <summary>
            Returns a color value from a color name or (R,G,B) triplet.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a color value from a color name or (R,G,B) triplet.
            </summary>
            <param name="Alpha">Alpha component</param>
            <param name="Red">Red component</param>
            <param name="Green">Green component</param>
            <param name="Blue">Blue component</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a color value from a color name or (R,G,B) triplet.
            </summary>
            <param name="Red">Red component</param>
            <param name="Green">Green component</param>
            <param name="Blue">Blue component</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a color value from a color name or (R,G,B) triplet.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.FromName(System.String)">
            <summary>
            Converts a name to a color. It also supports the #RRGGBB and #RRGGBBAA formats, where RR, GG, BB and AA are 2 digit hexadecimal numbers.
            </summary>
            <param name="s">String</param>
            <returns>Color value corresponding to <paramref name="s"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Colors.Color.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="DotRadius">Radius of the scattered dots, in pixels.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="DotRadius">Radius of the scattered dots, in pixels.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="DotRadius">Radius of the scattered dots, in pixels.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="DotRadius">Radius of the scattered dots, in pixels.</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional scatter diagram.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Scatter2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional filled polygon.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Polygon2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate">
            <summary>
            Computes Calculate(s), i.e. it evaluates the string s as an expression.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Calculate(s), i.e. it evaluates the string s as an expression.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Calculate.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform">
            <summary>
            Computes Transform(s, leftDelimiter, rightDelimiter), i.e. it transforms the string s evaluating
            subexpressions in it found using the left and right delimiters provided.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Transform(s, leftDelimiter, rightDelimiter), i.e. it transforms the string s evaluating
            subexpressions in it found using the left and right delimiters provided.
            </summary>
            <param name="String">String parameter to be transformed.</param>
            <param name="LeftDelimiter">Left delimiter</param>
            <param name="RightDelimiter">Right delimiter</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes Transform(s, leftDelimiter, rightDelimiter), i.e. it transforms the string s evaluating
            subexpressions in it found using the left and right delimiters provided.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Transform.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice">
            <summary>
            Returns the N number of elements from a vector, starting at a specific (zero-based) index.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns the N number of elements from a vector, starting at a specific (zero-based) index.
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns the N number of elements from a vector, starting at a specific (zero-based) index.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Index">Starting index.</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.CalcSlice(System.Array,System.Int32,System.Int32,Clayster.Library.Math.Expression)">
            <summary>
            Returns the first N number of elements from a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Index">Starting index.</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <returns>Slice with corresponding index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.EvaluateFunction(System.Array[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.EvaluateFunction(System.Array[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Slice.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last">
            <summary>
            Returns the last N number of elements from a vector.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns the last N number of elements from a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last.CalcLast(System.Array,System.Int32,Clayster.Library.Math.Expression)">
            <summary>
            Returns the last N number of elements from a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <returns>Last with corresponding index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Last.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First">
            <summary>
            Returns the first N number of elements from a vector.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns the first N number of elements from a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First.CalcFirst(System.Array,System.Int32,Clayster.Library.Math.Expression)">
            <summary>
            Returns the first N number of elements from a vector.
            </summary>
            <param name="Vector">Vector</param>
            <param name="Count">Number of elements to return</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <returns>First with corresponding index.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.First.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate">
            <summary>
            Permutates a vector
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Permutates a vector
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate.CalcPermutate(System.Array)">
            <summary>
            Returns a permutated array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Permutation of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be permutated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Permutate.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf">
            <summary>
            Computes IndexOf(Element, Vector).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes IndexOf(Element, Vector).
            </summary>
            <param name="Element">Element</param>
            <param name="Vector">Vector of elements.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf.CalcIndexOf(System.Object,System.Array)">
            <summary>
            Computes IndexOf(Element, Vector).
            </summary>
            <param name="Element">Element</param>
            <param name="Vector">Vector of elements.</param>
            <returns>IndexOf with corresponding index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the IndexOf index is not available in second level arrays.</exception>
            <exception cref="T:Clayster.Library.Math.MathException">If <paramref name="Vector"/> does not include second level arrays in all positions.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.IndexOf.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty">
            <summary>
            Computes n!!
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes n!!
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.SemiFaculty.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty">
            <summary>
            Computes n!
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes n!
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Faculty.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose">
            <summary>
            Transposes a matrix
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Transposes a matrix
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="T:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.LinearAlgebra.Transpose.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph2DType">
            <summary>
            Type of 2D Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Line">
            <summary>
            Line Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Curve">
            <summary>
            Curve Graph
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Polygon">
            <summary>
            Filled polygon.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Scatter">
            <summary>
            Scatter diagram.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Graph2DType.Grid">
            <summary>
            Complex Grid.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Graph2D">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],System.Double[],System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="Y">Array of Y values.</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],System.Double[],System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],System.Double[],System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.String,System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="Y">Array of Y values.</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],System.Double[],System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.#ctor(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.String,System.String,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all two dimensional graphs.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color of the graph.</param>
            <param name="Type">Type of graph.</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="XAxisType">Type of values along the X-axis.</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="YAxisType">Type of values along the Y-axis.</param>
            <param name="Parameter">Graph-specific parameter.</param>
            <param name="ExpressionNode">Expression Node creating the graph.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.XAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph2D.OnXAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.YAxisCalculated(System.Double,System.Double)">
            <summary>
            Raises the <see cref="E:Clayster.Library.Math.Graph2D.OnYAxisCalculated"/> event.
            </summary>
            <param name="Min">Smallest value on axis.</param>
            <param name="Max">Largest value on axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.Add(System.Double[],System.Double[],System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.Add(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color,Clayster.Library.Math.Graph2DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="XType">X-Axis Type.</param>
            <param name="Y">Array of Y values.</param>
            <param name="YType">Y-Axis Type.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.Add(System.Double[],System.Double[],System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="Y">Array of Y values.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.Add(System.Double[],Clayster.Library.Math.AxisType,System.Double[],Clayster.Library.Math.AxisType,System.Drawing.Color[],Clayster.Library.Math.Graph2DType,System.Object)">
            <summary>
            Adds a series to the graph.
            </summary>
            <param name="X">Array of X values.</param>
            <param name="XType">X-Axis Type.</param>
            <param name="Y">Array of Y values.</param>
            <param name="YType">Y-Axis Type.</param>
            <param name="Color">Color</param>
            <param name="Type">Type of graph.</param>
            <param name="Parameter">Graph-specific parameter</param>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.DrawImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Object@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.GetImageClickScript(System.Double,System.Double,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Graph.GetImageClickScript(System.Double,System.Double,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Graph2D.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph2D.OnXAxisCalculated">
            <summary>
            Event raised when the X axis has been computed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Graph2D.OnYAxisCalculated">
            <summary>
            Event raised when the Y axis has been computed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.MinX">
            <summary>
            Smallest X-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.MaxX">
            <summary>
            Largest X-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.MinY">
            <summary>
            Smallest Y-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.MaxY">
            <summary>
            Largest Y-value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.XAxisType">
            <summary>
            X-Axis Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Graph2D.YAxisType">
            <summary>
            Y-Axis Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ScriptCompatibilityMode">
            <summary>
            Script compatibility mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ScriptCompatibilityMode.Clayster">
            <summary>
            Clayster script. This is the default script compatibility mode.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ScriptCompatibilityMode.Ecma">
            <summary>
            ECMA-compatible script. Makes constructs ECMA-compatible. This means:
            * Assignments are done using the normal equality operator =
            * Equality is done using the double equality operator ==
            * Variables must be declared using the var statement.
            
            For a specification of ECMA script, see:
            http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodePriority">
            <summary>
            Expression Node priorities. A higher priority operator is parsed before a lower priority operator.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Unary">
            <summary>
            Unary operators, constants, items, etc.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.FunctionEvaluationAndIndicesAndPeriods">
            <summary>
            Function evaluation, indices, periods.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Interval">
            <summary>
            Interval operator.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Powers">
            <summary>
            Powers
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Factors">
            <summary>
            Factors
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Terms">
            <summary>
            Terms
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Intersections">
            <summary>
            Intersections and complements.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Unions">
            <summary>
            Unions
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Comparisons">
            <summary>
            Comparisons
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.IsAsIn">
            <summary>
            Is, As, In
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Ands">
            <summary>
            And
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Ors">
            <summary>
            Or
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Equivalence">
            <summary>
            Equivalence
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Lambda">
            <summary>
            Lambda
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Assignment">
            <summary>
            Assignment
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Statement">
            <summary>
            Statement
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodePriority.Sequence">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.PreviewDelegate">
            <summary>
            Preview callback method delegate.
            </summary>
            <param name="Expression">Expression being evaluated.</param>
            <param name="PreviewValue">Preview value.</param>
        </member>
        <member name="T:Clayster.Library.Math.StatusDelegate">
            <summary>
            Status callback method delegate.
            </summary>
            <param name="Expression">Expression being evaluated.</param>
            <param name="Status">Status message. The empty string clears or removes the previous status message.</param>
        </member>
        <member name="T:Clayster.Library.Math.Expression">
            <summary>
            Class handling parsing and evaluation of string expressions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.Expression.ExpressionNamespace">
            <summary>
            Math Expression Namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Expression.LayoutNamespace">
            <summary>
            Layout Namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Expression.DefaultFontName">
            <summary>
            Default Font Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Expression.DefaultFontSize">
            <summary>
            Default Font Size
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Expression.DefaultFontColor">
            <summary>
            Default Font Color
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Expression.RegisterUnitConverter(Clayster.Library.Math.Interfaces.IUnitConverter)">
            <summary>
            Registers a unit converter.
            </summary>
            <param name="UnitConverter">Unit Converter</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.CallShutdownEventHandlers">
            <summary>
            Calls any shutdown event event handlers registered on <see cref="E:Clayster.Library.Math.Expression.OnShutdown"/>, and then removes them from the event handler.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Unload">
            <summary>
            Unloads all functions. If new expressions are parsed, the current application domain will be scanned again for
            available expression nodes. Call this method after dynamically loading assemblies into the application domain.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetFunctionsNames(System.Boolean)">
            <summary>
            Gets loaded function names.
            </summary>
            <param name="IncludeClassFullNames">If full class names of functions should be included.</param>
            <returns>Array of functions available to the script engine.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetFunctionsNames(System.Boolean,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Gets loaded function names that can be accessed according to <paramref name="FunctionAccess"/>.
            </summary>
            <param name="IncludeClassFullNames">If full class names of functions should be included.</param>
            <param name="FunctionAccess">Interface determining which functions can be accessed.</param>
            <returns>Array of functions available to the script engine.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetTypesImplementingInterface(System.Type)">
            <summary>
            Returns an array of types in the system, implementing a specific interface.
            </summary>
            <param name="Interface">Interface</param>
            <returns>Array of types implementing <paramref name="Interface"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetTypesImplementingInterface(System.String)">
            <summary>
            Returns an array of types in the system, implementing a specific interface.
            </summary>
            <param name="InterfaceFullName">Full name of interface.</param>
            <returns>Array of types implementing the interface with the given full name.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.CanAccess(Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Checks if the expression can be accessed by the caller, given a function access interface.
            </summary>
            <param name="FunctionAccess">Function Access interface.</param>
            <returns>If the expression can be used.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.CanAccess(Clayster.Library.Math.Interfaces.IFunctionAccess,Clayster.Library.Math.ExpressionNodes.Functions.Function@)">
            <summary>
            Checks if the expression can be accessed by the caller, given a function access interface.
            </summary>
            <param name="FunctionAccess">Function Access interface.</param>
            <param name="FirstFailure">If access is denied, this parameter will contain the first function where access was deined.</param>
            <returns>If the expression can be used.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.AssertAccess(Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Makes sure access to all functions in the expression is granted.
            </summary>
            <param name="FunctionAccess">Function access interface.</param>
            <exception cref="T:Clayster.Library.Math.MathException">If access to a function is not granted.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.#ctor(System.String)">
            <summary>
            Creates a new Expression by parsing a string.
            </summary>
            <param name="Expression">String expression to parse.</param>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.#ctor(System.String,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Creates a new Expression by parsing a string.
            </summary>
            <param name="Expression">String expression to parse.</param>
            <param name="Mode">Script compatibility mode.</param>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Preview(System.Object)">
            <summary>
            Previews a value on listening preview recipients.
            </summary>
            <param name="PreviewValue">Preview value.</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.StatusMessage(System.String)">
            <summary>
            Sends a status message to listening status recipients.
            </summary>
            <param name="StatusMessage">Status message.</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Parse(System.String)">
            <summary>
            Parses a string expresion and returns an object of type Expression if successful.
            No cached results are returned. The string is parsed each time this method is called.
            <seealso cref="M:Clayster.Library.Math.Expression.ParseCached(System.String)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Parse(System.String,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Parses a string expresion and returns an object of type Expression if successful.
            No cached results are returned. The string is parsed each time this method is called.
            <seealso cref="M:Clayster.Library.Math.Expression.ParseCached(System.String,Clayster.Library.Math.ScriptCompatibilityMode)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="Mode">Script compatibility mode.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ParseCached(System.String)">
            <summary>
            Checks if the string has been parsed earlier. If so, returns the earlier parsed expression.
            If not, parses the string, adds it to the cache and returnes the parsed expression.
            <seealso cref="M:Clayster.Library.Math.Expression.Parse(System.String)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ParseCached(System.String,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Checks if the string has been parsed earlier. If so, returns the earlier parsed expression.
            If not, parses the string, adds it to the cache and returnes the parsed expression.
            <seealso cref="M:Clayster.Library.Math.Expression.Parse(System.String,Clayster.Library.Math.ScriptCompatibilityMode)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="Mode">Script compatibility mode.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Parse(System.String,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Parses a string expresion and returns an object of type Expression if successful.
            No cached results are returned. The string is parsed each time this method is called.
            <seealso cref="M:Clayster.Library.Math.Expression.ParseCached(System.String)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="FunctionAccess">Interface used to assert script privileges.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Parse(System.String,Clayster.Library.Math.ScriptCompatibilityMode,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Parses a string expresion and returns an object of type Expression if successful.
            No cached results are returned. The string is parsed each time this method is called.
            <seealso cref="M:Clayster.Library.Math.Expression.ParseCached(System.String,Clayster.Library.Math.ScriptCompatibilityMode)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="Mode">Script compatibility mode.</param>
            <param name="FunctionAccess">Interface used to assert script privileges.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ParseCached(System.String,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Checks if the string has been parsed earlier. If so, returns the earlier parsed expression.
            If not, parses the string, adds it to the cache and returnes the parsed expression.
            <seealso cref="M:Clayster.Library.Math.Expression.Parse(System.String)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="FunctionAccess">Interface used to assert script privileges.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ParseCached(System.String,Clayster.Library.Math.ScriptCompatibilityMode,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Checks if the string has been parsed earlier. If so, returns the earlier parsed expression.
            If not, parses the string, adds it to the cache and returnes the parsed expression.
            <seealso cref="M:Clayster.Library.Math.Expression.Parse(System.String,Clayster.Library.Math.ScriptCompatibilityMode)"/>
            </summary>
            <param name="Expression">Expression to parse.</param>
            <param name="Mode">Script compatibility mode.</param>
            <param name="FunctionAccess">Interface used to assert script privileges.</param>
            <returns>Parsed expression</returns>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If unable to parse the expression.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.TryGetFunction(System.String,System.Int32,Clayster.Library.Math.ExpressionNodes.Functions.Function@)">
            <summary>
            Gets a function object given its name and a number of parameters.
            </summary>
            <param name="FunctionName">Function Name (case insensitive).</param>
            <param name="NrParameters">Number of parameters.</param>
            <param name="Function">The function object will be stored here if found.</param>
            <returns>If a unique script extension was found with the given name and number of parameters.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ToString">
            <summary>
            Returns a string representing the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ToString(System.Object)">
            <summary>
            Creates a string representation of <paramref name="Object"/>. Handles nested arrays of objects.
            </summary>
            <param name="Object">Object to convert to a string.</param>
            <returns>String representation of <paramref name="Object"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ToString(System.Object,System.Boolean)">
            <summary>
            Creates a string representation of <paramref name="Object"/>. Handles nested arrays of objects.
            </summary>
            <param name="Object">Object to convert to a string.</param>
            <param name="ExpressionOutput">If output strings should be formatted so they can be parsed as expression.
            false gives somewhat more readable output, but the output cannot be parsed as expressions again.</param>
            <returns>String representation of <paramref name="Object"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            Evaluates the expression based on a specific set of variables.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="Variables">Variables used to evaluate the expression</param>
            <returns>Evaluated value</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the expression could not be evaluated with the provided set
            of variables.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Evaluate(Clayster.Library.Math.Variables,System.Int32)">
            <summary>
            Evaluates the expression based on a specific set of variables.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="Variables">Variables used to evaluate the expression</param>
            <param name="Timeout">Timeout in milliseconds.</param>
            <returns>Evaluated value</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the expression could not be evaluated with the provided set
            of variables.</exception>
            <exception cref="T:System.TimeoutException">If the expression did not evaluate in the set time frame.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.Char,System.Char,Clayster.Library.Math.Variables)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter,System.String)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="DecimalSeparator">Optional decimal separator.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.Char,System.Char,Clayster.Library.Math.Variables,System.IO.TextWriter,System.String,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="DecimalSeparator">Optional decimal separator.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.String,System.String,Clayster.Library.Math.Variables)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter,System.String)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <param name="DecimalSeparator">Optional decimal separator.</param>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.String,System.String,Clayster.Library.Math.Variables,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Transform(Clayster.Library.Math.ScriptCompatibilityMode,System.String,System.String,System.String,Clayster.Library.Math.Variables,System.IO.TextWriter,System.String,Clayster.Library.Math.Interfaces.IFunctionAccess)">
            <summary>
            Transforms a string with embedded expressions inside.
            <seealso cref="T:Clayster.Library.Math.Variables"/>
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="Mode">Script mode.</param>
            <param name="s">String to transform.</param>
            <param name="StartDelimiter">Start delimiting character of expressions.</param>
            <param name="EndDelimiter">End delimiting character of expressions.</param>
            <param name="Variables">Set of variables used to evaluate embedded expression inside the string.</param>
            <param name="PrintOutput">Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.</param>
            <returns>Transformed string, where expressions between delimiters have been evaluated and replaced with the
            resulting values, and the delimiters removed.</returns>
            <param name="DecimalSeparator">Optional decimal separator.</param>
            <param name="FunctionAccess">Interface checking what functions can be accessed.</param>
            <exception cref="T:Clayster.Library.Math.MathException">If any of the expressions could not be evaluated.</exception>
            <exception cref="T:Clayster.Library.Math.MathSyntaxErrorException">If any of the expressions could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            Iterates through all nodes in the expression.
            </summary>
            <param name="Method">Method to call for each node.</param>
            <param name="DepthFirst">If the method should iterate through children first (Depth first) or not.</param>
            <param name="Parameter">Parameter to pass on to <paramref name="Method"/>.</param>
            <returns>true if process completed successfully, or false if it was aborted.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Substitute(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            Substitutes variable references found in the expression with values found in <paramref name="Values"/>.
            </summary>
            <param name="Values">Values</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Substitute(Clayster.Library.Math.Variables,System.Boolean)">
            <summary>
            Performs a substitution operation on the node.
            </summary>
            <param name="Values">Contains values to substitute, if found.</param>
            <param name="ExcludeGlobal">If global variables are to be excluded.</param>
            <returns>The substitution.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Substitute(Clayster.Library.Math.Variables,System.Int32)">
            <summary>
            Substitutes variable references found in the expression with values found in <paramref name="Values"/>.
            </summary>
            <param name="Values">Values</param>
            <param name="OnlyFromStackDepth">If only variables from a given stack depth are to be substituted.</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetVariables">
            <summary>
            Extracts available variables from the expression.
            </summary>
            <returns>Array (possible empty) of variables found in the expression.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.FindExpressionNode(System.Int32)">
            <summary>
            Finds the <see cref="T:Clayster.Library.Math.ExpressionNodes.ExpressionNode"/> defined at the string position <paramref name="Position"/>.
            </summary>
            <param name="Position">Zero-based string position.</param>
            <returns>Node, if found, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.TryGetRootNamespace(System.String,Clayster.Library.Math.Namespace@)">
            <summary>
            Tries to get a root namespace given its name.
            </summary>
            <param name="LocalRootName">Name of root name space.</param>
            <param name="Namespace">Name space object, if found, or null otherwise.</param>
            <returns>If a root namespace with the given name was found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.TryGetStaticMethod(System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            tries to get a access to a public static method, given its full name and parameter types.
            </summary>
            <param name="FullName">Full name of method. (Namespace.ClassName.MethodName)</param>
            <param name="ParameterTypes">Array of type objects, representing the types of the corresponding parameters.</param>
            <param name="Method">Resulting method object, if found.</param>
            <returns>If a public static method was found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.TryGetType(System.String,System.Type@)">
            <summary>
            Tries to get a type object, given its full name.
            </summary>
            <param name="FullName">Full name of type.</param>
            <param name="Type">Resulting type object, if found.</param>
            <returns>If a type with the given name was found.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the expression to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportXml">
            <summary>
            Exports the expression to XML.
            </summary>
            <returns>XML String.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayout(System.Xml.XmlWriter)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayout(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
            <param name="FontName">Font name</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayout(System.Xml.XmlWriter,System.Double)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
            <param name="FontSize">Font size</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayout(System.Xml.XmlWriter,System.String,System.Double)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
            <param name="FontName">Font name</param>
            <param name="FontSize">Font size</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayout(System.Xml.XmlWriter,System.String,System.Double,System.Drawing.Color)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <param name="w">XML Writer</param>
            <param name="FontName">Font name</param>
            <param name="FontSize">Font size</param>
            <param name="FontColor">Font color</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportObjectLayout(System.Xml.XmlWriter,System.Object,Clayster.Library.Math.Interfaces.ILayoutEngine,System.String,System.Double,System.Drawing.Color)">
            <summary>
            Exports an object layout, using a layout engine.
            </summary>
            <param name="w">XML Output</param>
            <param name="Object">Object to export.</param>
            <param name="LayoutEngine">Layout engine that can export <paramref name="Object"/>.</param>
            <param name="FontName">Font Name</param>
            <param name="FontSize">Font Size</param>
            <param name="FontColor">Font Color</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayoutXml">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <returns>XML String.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayoutXml(System.Double)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontSize">Font size</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayoutXml(System.String)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontName">Font name</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayoutXml(System.String,System.Double)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontName">Font name</param>
            <param name="FontSize">Font size</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.ExportLayoutXml(System.String,System.Double,System.Drawing.Color)">
            <summary>
            Exports the expression layout to XML.
            </summary>
            <returns>XML String.</returns>
            <param name="FontName">Font name</param>
            <param name="FontSize">Font size</param>
            <param name="FontColor">Font color</param>
        </member>
        <member name="M:Clayster.Library.Math.Expression.RegisterLayoutEngine(Clayster.Library.Math.Interfaces.ILayoutEngine)">
            <summary>
            Register a new layout engine. Only one engine of each type can be registered.
            </summary>
            <param name="LayoutEngine">Layout engine</param>
            <returns>If the layout engine was accepted and registed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Expression.GetLayoutEngine(System.Object)">
            <summary>
            Gets a layout engine for an object.
            </summary>
            <param name="Object">Object to layout.</param>
            <returns>Layout engine handling the object.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Expression.UnitConverter">
            <summary>
            Returns the currently registered unit converter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.FunctionAccess">
            <summary>
            If a function access interface is available to restrict access to script extensions.
            Is set by calls to <see cref="M:Clayster.Library.Math.Expression.CanAccess(Clayster.Library.Math.Interfaces.IFunctionAccess)"/> (or polymorphic versions) or <see cref="M:Clayster.Library.Math.Expression.AssertAccess(Clayster.Library.Math.Interfaces.IFunctionAccess)"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Expression.OnShutdown">
            <summary>
            Event raised when system is being shut down. Destructors can be added here, to make sure system resources
            are returned properly on system shutdown.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.PrintOutput">
            <summary>
            Output through the print() function will be directed to this TextWriter object. If equal to
            null, the text will be written to Console.Out.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Expression.OnPreview">
            <summary>
            Event raised when values are previewed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Math.Expression.OnStatusMessage">
            <summary>
            Event raised when status messages are posted. For long running tasks, status messages can be posted.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.CanPreview">
            <summary>
            If there are any preview recipients listening or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.ListensToStatusMessage">
            <summary>
            If there are any listeners for status messages.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.State">
            <summary>
            State property that can be used by clients to attach data to the expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.Mode">
            <summary>
            Script compatibility mode.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.NamedConstants">
            <summary>
            Recognized named constants.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.ExpressionString">
            <summary>
            The original unparsed expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.Root">
            <summary>
            The root node in the expression tree.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.Owner">
            <summary>
            Owner of expression. null by default. Must be set explicitly.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Expression.RootNamespaces">
            <summary>
            Returns an array of available root namespaces.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="XAxis">Name of the X-Axis</param>
            <param name="YAxis">Name of the Y-Axis</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <param name="XVector">X Vector</param>
            <param name="YVector">Y Vector</param>
            <param name="Color">Color</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates a two dimensional graph.
            </summary>
            <param name="Expression">Expression.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Graphs.Graphs2D.Plot2D.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And">
            <summary>
            Computes And(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes And(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.CalcAnd(System.Boolean[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates AND of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>And of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.CalcAnd(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates AND of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>And of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.CalcAnd(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates AND of all elements in the array.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>And of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.EvaluateFunction(System.Boolean[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateFunction(System.Boolean[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.And.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct">
            <summary>
            Computes CartesianProduct(Left, Right).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes CartesianProduct(Left, Right).
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateCanonicalProtected(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.CalcCartesianProduct(System.Array,System.Array)">
            <summary>
            Calculates the cartesian product of two vectors.
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <returns>Cartesian product of <paramref name="Vector1"/> and <paramref name="Vector2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.CalcCartesianProduct(System.Double[],System.Double[])">
            <summary>
            Calculates the cartesian product of two vectors.
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <returns>Cartesian product of <paramref name="Vector1"/> and <paramref name="Vector2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CartesianProduct.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis">
            <summary>
            Computes Axis(Vector, Index).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Axis(Vector, Index).
            </summary>
            <param name="Vector">Vector of vectors (or cartesian product)</param>
            <param name="Index">Index</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis.CalcAxis(System.Array,System.Int32,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Computes Axis(Vector, Index).
            </summary>
            <param name="Vector">Vector of vectors</param>
            <param name="Index">Zero based axis index.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Axis with corresponding index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the Axis index is not available in second level arrays.</exception>
            <exception cref="T:Clayster.Library.Math.MathException">If <paramref name="Vector"/> does not include second level arrays in all positions.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Axis.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct">
            <summary>
            Computes CrossProduct(Left, Right).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes CrossProduct(Left, Right).
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.CalcCrossProduct(System.Array,System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Cross product of <paramref name="Vector1"/> and <paramref name="Vector2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.CrossProduct.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join">
            <summary>
            Joins arrays into a larger array.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.#ctor(Clayster.Library.Math.Expression,Clayster.Library.Math.ExpressionNodes.ExpressionNode[])">
            <summary>
            Joins arrays into a larger array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Joins arrays into a larger array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.EvaluateFunction(System.Array[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.EvaluateFunction(System.Array[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleVectorParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Join.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm">
            <summary>
            Computes Norm(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Norm(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.CalcNorm(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the norm of the vector.
            </summary>
            <param name="Vector">Vector.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Norm of the vector</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the norm cannot be calculated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.CalcNorm(System.Double[])">
            <summary>
            Calculates the norm of the vector.
            </summary>
            <param name="Vector">Vector.</param>
            <returns>Norm of the vector</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Norm.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct">
            <summary>
            Computes DotProduct(Left, Right).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes DotProduct(Left, Right).
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.CalcDotProduct(System.Array,System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Dot product of <paramref name="Vector1"/> and <paramref name="Vector2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.CalcDotProduct(System.Double[],System.Double[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="Vector1">Vector 1</param>
            <param name="Vector2">Vector 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Dot product of <paramref name="Vector1"/> and <paramref name="Vector2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.EvaluateFunction(System.Array,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.EvaluateFunction(System.Array,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoVectorParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.DotProduct.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or">
            <summary>
            Computes Or(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Or(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.CalcAnd(System.Boolean[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates OR of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Or of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.CalcOr(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates OR of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Or of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.CalcOr(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates OR of all elements in the array.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Where the calculation is performed.</param>
            <returns>And of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.EvaluateFunction(System.Boolean[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleBooleanVectorParameter.EvaluateFunction(System.Boolean[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Or.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition">
            <summary>
            Compares the sum of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares the sum of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Compares the sum of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Add(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Adds two objects
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Result</returns>
            <exception cref="T:Clayster.Library.Math.MathException">Is thrown if the operands cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Addition.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Index">
            <summary>
            Extracts a value from an array.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Extracts a value from an array.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.EvaluateCanonicalProtected(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="M">Matrix</param>
            <param name="i">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.EvaluateCanonicalProtected(System.Array,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="a">Array</param>
            <param name="Index">Index</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.IndexProperty(Clayster.Library.Math.Variables,System.Object,Clayster.Library.Math.Expression)">
            <summary>
            Performs an external function evaluation.
            </summary>
            <param name="Variables">Variable collection to use when performing the function evaluation.</param>
            <param name="Object">Object acting as host or object in the external function call (i.e. method call).</param>
            <param name="Expression">Expression performing the evaluation.</param>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Assigns the left operator variable . right operator property/field with a specific
            value.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Index.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Index.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Index.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And">
            <summary>
            Compares the logical or binary and of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares the logical or binary and of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.PrecalcResult(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.PrecalcResult(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Intersect(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Intersects <paramref name="Operand1"/> and <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns><paramref name="Operand1"/> AND <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.And.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Assignment">
            <summary>
            Handles variable assignment.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Constructor of the assignment operator.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Operand">Operand.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.VariableName">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Assignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant">
            <summary>
            Handles a single boolean-valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.#ctor(System.Boolean,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single boolean-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.BooleanConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print">
            <summary>
            Prints the value to Console.Out
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Prints the value to Console.Out
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Feedback.Print.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal">
            <summary>
            Computes Normal(mean,stddev), Normal(mean,stddev,n) and Normal(mean,stddev,n,m).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes Normal(mean,stddev), Normal(mean,stddev,n) and Normal(mean,stddev,n,m).
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Normal.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform">
            <summary>
            Computes Uniform(min,max), Uniform(min,max,n) and Uniform(min,max,n,m).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes Uniform(min,max), Uniform(min,max,n) and Uniform(min,max,n,m).
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Uniform.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average">
            <summary>
            Computes Average(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Average(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.CalcAverage(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the average of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.CalcAverage(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the average of all elements in a set.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.CalcAverage(System.Double[])">
            <summary>
            Calculates the average of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Average of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Average.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation">
            <summary>
            Computes StdDev(x), bias-corrected.
            http://mathworld.wolfram.com/StandardDeviation.html
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes StandardDeviation(x), bias-corrected.
            http://mathworld.wolfram.com/StandardDeviation.html
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.CalcStandardDeviation(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the bias-corrected standard deviation of all elements in the array.
            http://mathworld.wolfram.com/StandardDeviation.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>StandardDeviation of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.CalcStandardDeviation(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the bias-corrected standard deviation of all elements in the set.
            http://mathworld.wolfram.com/StandardDeviation.html
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>StandardDeviation of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.CalcStandardDeviation(System.Double[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the bias-corrected standard deviation of all elements in the vector.
            http://mathworld.wolfram.com/StandardDeviation.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>StandardDeviation of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.StandardDeviation.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance">
            <summary>
            Computes Variance(x), the bias-corrected sample variance.
            http://mathworld.wolfram.com/Variance.html
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Variance(x), the bias-corrected sample variance.
            http://mathworld.wolfram.com/Variance.html
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.CalcVariance(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the bias-corrected sample variance of all elements in the array.
            http://mathworld.wolfram.com/Variance.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.CalcVariance(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the bias-corrected sample variance of all elements in the array.
            http://mathworld.wolfram.com/Variance.html
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Variance of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.CalcVariance(System.Double[])">
            <summary>
            Calculates the bias-corrected sample variance of all elements in the array.
            http://mathworld.wolfram.com/Variance.html
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Variance of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Variance.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram">
            <summary>
            Creates a histogram from values in an array.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a histogram from values in an array.
            </summary>
            <param name="Array">Array of compute histogram from.</param>
            <param name="From">From Value</param>
            <param name="To">To Value</param>
            <param name="Segments">Number of segments in histogram.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates an array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Histogram.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series">
            <summary>
            Creates an array.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.MaxIterations">
            <summary>
            Maximum number of iterations allowed by the Series() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates an array.
            </summary>
            <param name="From">From Value</param>
            <param name="To">To Value</param>
            <param name="StepSize">Step Size</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Creates an array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.CreateSeries(System.Object,System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Creates a series.
            </summary>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="StepSize">Step Size</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Series.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Series.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort">
            <summary>
            Computes Sort(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Computes Sort(x), or Sort(x,lambda).
            </summary>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.CalcSort(System.Array)">
            <summary>
            Calculates the sort of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Sort of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be sorted.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.CalcSort(System.Double[])">
            <summary>
            Calculates the sort of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Sort of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.DefaultNumberOfParameters">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.DefaultNumberOfParameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sort.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median">
            <summary>
            Computes Median(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Median(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.CalcMedian(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the median of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Median of elements</returns>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be sorted, or an empty vector is passed as argument.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.CalcMedian(System.Double[],Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the median of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Median of elements</returns>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <exception cref="T:Clayster.Library.Math.MathException">If an empty vector is passed as argument.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Statistics.Median.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product">
            <summary>
            Computes Product(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Product(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.CalcProduct(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the product of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Product of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.CalcProduct(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the product of all elements in a set.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Sum of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be multiplied.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.CalcProduct(System.Double[])">
            <summary>
            Calculates the product of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Product of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Product.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count">
            <summary>
            Computes Count(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Count(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Count.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum">
            <summary>
            Computes Sum(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.LayoutFontSizeMuliplier">
            <summary>
            Font Size Multiplier of the summation character when exporting an expression to a layout.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Sum(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.CalcSum(System.Array,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the sum of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Sum of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.CalcSum(System.Collections.ICollection,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Calculates the sum of all elements in a set.
            </summary>
            <param name="Set">Set of elements.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Sum of elements</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the elements cannot be added.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.CalcSum(System.Double[])">
            <summary>
            Calculates the sum of all elements in the array.
            </summary>
            <param name="Vector">Array of elements.</param>
            <returns>Sum of elements</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.EvaluateFunction(System.Double[])">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealVectorParameter.EvaluateFunction(System.Double[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateCanonicalProtected(System.Collections.ICollection,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Vector.Sum.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.NotLike.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Matches(System.String,System.String)">
            <summary>
            Searches for <paramref name="SearchFor"/> in <paramref name="SearchIn"/>. 
            <paramref name="SearchFor"/> may contain wildcards in the form of asterisks (*).
            </summary>
            <param name="SearchIn">Search for occurrences of <paramref name="SearchFor"/> in this string.</param>
            <param name="SearchFor">Search for this string. May contain wildcards in the form of asterisks (*).</param>
            <returns>true if <paramref name="SearchFor"/> is found in <paramref name="SearchIn"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age">
            <summary>
            Computes Age(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Age(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Age.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years">
            <summary>
            Computes Years(x,y).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Years(x,y).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.CalcYears(System.DateTime,System.DateTime)">
            <summary>
            Calculates the number of whole years that have passed between <paramref name="dt1"/>
            and <paramref name="dt2"/>.
            </summary>
            <param name="dt1">First timepoint.</param>
            <param name="dt2">Second timepoint.</param>
            <returns>Whole years between <paramref name="dt1"/> and <paramref name="dt2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Years.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.Now">
            <summary>
            Now "constant".
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.#ctor(Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Now "constant".
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.Now.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Now.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Now.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.Now.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees">
            <summary>
            Converts a value in degrees to radians.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Coefficient">
            <summary>
            Multiplicative coefficient converting degrees to radians (pi/180).
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Converts a value in degrees to radians.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Degrees.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube">
            <summary>
            Cubes an element
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Cubes an element
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Cube.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg">
            <summary>
            Computes degrees from radians: Deg(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes degrees from radians: Deg(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Deg.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad">
            <summary>
            Computes radians from degrees: Rad(x).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes radians from degrees: Rad(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Rad.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square">
            <summary>
            Squares an element
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Squares an element
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Squares an element
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Square.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent">
            <summary>
            Multiplies an element by 1/100.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Multiplies an element by 1/100.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Percent.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Right">
            <summary>
            Computes Right(s,Len).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Right.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Right(s,Len).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Right.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Right.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Right.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Left">
            <summary>
            Computes Left(s,Len).
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Left.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Left(s,Len).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Left.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Left.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Left.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment">
            <summary>
            Handles property and field assignment.
            </summary>
            <remarks>
            © Clayster, 2008-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.#ctor(Clayster.Library.Math.ExpressionNodes.Operators.Period,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles property and field assignment.
            </summary>
            <param name="Period">Period node.</param>
            <param name="Operand">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.AssignmentUnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.Operators.AssignableBinaryOperator,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.PeriodAssignment.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division">
            <summary>
            Computes the division between two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the division between two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the division between two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Divide(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Performs a division
            </summary>
            <param name="Numerator">Numerator</param>
            <param name="Divisor">Divisor</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Division <paramref name="Numerator"/>/<paramref name="Divisor"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Division.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant">
            <summary>
            Handles a single double-valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.#ctor(System.Double,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single double-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.#ctor(System.Double,Clayster.Library.Math.Expression)">
            <summary>
            Handles a single double-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.DoubleConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence">
            <summary>
            Checks the equivalence of two boolean expressions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Checks the equivalence of two boolean expressions.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Equivalence.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ForEachMethod">
            <summary>
            For Each Method Handler for Expression Nodes.
            <seealso cref="T:Clayster.Library.Math.ExpressionNodes.ExpressionNode"/>
            </summary>
            <param name="Node">Expression Node</param>
            <param name="Parameter">Parameter passed on to the method from the original
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/> method call.</param>
            <returns>true to continue, false to abort process.</returns>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType">
            <summary>
            Type of current parent node in a layout export.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType.Baseline">
            <summary>
            Baseline element.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType.TopDown">
            <summary>
            TopDown element.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType.Parenthesis">
            <summary>
            Parenthesis element.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType.Other">
            <summary>
            Other type of element.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ParameterType">
            <summary>
            Type of parameter used in function definition.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Normal">
            <summary>
            Normal parameter
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Scalar">
            <summary>
            Scalar parameter
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Vector">
            <summary>
            Vector parameter
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Set">
            <summary>
            Set parameter
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.ExpressionNodes.ParameterType.Matrix">
            <summary>
            Matrix parameter
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.ExternalFunction">
            <summary>
            External (possibly) multivariate function.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            External (possibly) multivariate function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.AddParameter(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Adds a parameter node to the list of parameter nodes.
            </summary>
            <param name="Node">Expression node</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.EvaluateCanonicalProtected(Clayster.Library.Math.Expression,System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Expression">Expression</param>
            <param name="Parameters">Parameters</param>
            <param name="Variables">Variables</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.MethodCall(Clayster.Library.Math.Variables,System.Object,Clayster.Library.Math.ExpressionNodes.VariableReference,Clayster.Library.Math.Expression)">
            <summary>
            Performs an external function evaluation.
            </summary>
            <param name="Variables">Variable collection to use when performing the function evaluation.</param>
            <param name="Object">Object acting as host or object in the external function call (i.e. method call).</param>
            <param name="ObjectReference">Object variable reference, if any, or null if none.</param>
            <param name="Expression">Expression performing the evaluation.</param>
            <returns>Result of method call.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.ExternalFunction.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.ParameterCount">
            <summary>
            Number of parameters used by the function.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.PolymorphicName">
            <summary>
            Polymorphic name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.ExternalFunction.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs">
            <summary>
            Computes Abs(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Abs(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Abs.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos">
            <summary>
            Computes Acos(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Acos(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.RealValuedIntervalMin">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMin"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.RealValuedIntervalMax">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMax"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Acos.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin">
            <summary>
            Computes Asin(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Asin(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.RealValuedIntervalMin">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMin"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.RealValuedIntervalMax">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValuedIntervalMax"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Asin.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan">
            <summary>
            Computes Atan(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Atan(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2">
            <summary>
            Computes Atan2(x,y).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Atan2(x,y).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.EvaluateFunction(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.EvaluateFunction(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Atan2.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling">
            <summary>
            Computes Ceiling(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Ceiling(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ceiling.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos">
            <summary>
            Computes Cos(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Cos(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cos.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh">
            <summary>
            Computes Cosh(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Cosh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Cosh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Empty">
            <summary>
            Checks if the expression within parenthesis returns a string that is empty.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Empty.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if the expression within parenthesis returns a string that is empty.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Empty.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Empty.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.Empty.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp">
            <summary>
            Computes Exp(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Exp(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Exp.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor">
            <summary>
            Computes Floor(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Floor(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Floor.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined">
            <summary>
            Checks if the expression within parenthesis is defined or not.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if the expression within parenthesis is defined or not.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.IsDefined.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln">
            <summary>
            Computes Log(x). NOTE: base e (natural logarithm).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Log(x). NOTE: base e (natural logarithm).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Ln.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log">
            <summary>
            Computes Log10(x). (NOTE: base 10)
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Log10(x). (NOTE: base 10)
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Log.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max">
            <summary>
            Computes Max(x,y).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Max(x,y).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.EvaluateFunction(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.EvaluateFunction(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.EvaluateCanonicalProtected(System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Max.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min">
            <summary>
            Computes Min(x,y).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Min(x,y).
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.EvaluateFunction(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoRealParameters.EvaluateFunction(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.EvaluateCanonicalProtected(System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="v">Value</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.SupportsOneParameter">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.SupportsOneParameter"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Min.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Strings.NotEmpty">
            <summary>
            Checks if the expression within parenthesis returns a string that is not empty.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.NotEmpty.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if the expression within parenthesis returns a string that is not empty.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.NotEmpty.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Strings.NotEmpty.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Strings.NotEmpty.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round">
            <summary>
            Computes Round(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Round(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Round.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign">
            <summary>
            Computes Sign(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Sign(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sign.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin">
            <summary>
            Computes Sin(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Sin(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sin.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh">
            <summary>
            Computes Sinh(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Sinh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sinh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt">
            <summary>
            Computes Sqrt(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Sqrt(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes Sqrt(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Sqrt.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan">
            <summary>
            Computes Tan(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Tan(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tan.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh">
            <summary>
            Computes Tanh(x).
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes Tanh(x).
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.EvaluateFunction(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleRealParameter.EvaluateFunction(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.EvaluateFunction(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleComplexParameter.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Functions.Scalar.Tanh.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.IsGreaterThan(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Checks if <paramref name="Operand1"/> is greater than <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Iff <paramref name="Operand1"/> &gt; <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThan.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.IsGreaterThanOrEqualTo(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Checks if <paramref name="Operand1"/> is greater than or equal to <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Iff <paramref name="Operand1"/> &gt;= <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.GreaterThanOrEqualTo.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.If">
            <summary>
            Handles conditional evaluation.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles conditional evaluation.
            </summary>
            <param name="Condition">Condition</param>
            <param name="IfTrue">Statement to execute if condition is true.</param>
            <param name="IfFalse">Optional statement to execute if condition is false.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.EvaluateCanonicalProtected(System.Collections.ICollection,System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Condition">Condition</param>
            <param name="IfTrue">If True statement</param>
            <param name="IfFalse">If False statement</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.EvaluateCanonicalProtected(Clayster.Library.Math.Matrices.Matrix,System.Object,System.Object)">
            <summary>
            Protected method evaluating canonical extensions.
            </summary>
            <param name="Condition">Condition</param>
            <param name="IfTrue">If True statement</param>
            <param name="IfFalse">If False statement</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.If.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.Condition">
            <summary>
            Condition node
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.IfTrue">
            <summary>
            True statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.IfFalse">
            <summary>
            False statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.If.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication">
            <summary>
            Checks the implication of one boolean expressions to another.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Checks the implication of one boolean expressions to another.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.BooleanComparisonOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.PrecalcResult(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.PrecalcResult(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Implication.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.IsLesserThan(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Checks if <paramref name="Operand1"/> is lesser than <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Iff <paramref name="Operand1"/> &lt; <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThan.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo">
            <summary>
            Compares two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.RealComparisonOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.IsLesserThanOrEqualTo(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Checks if <paramref name="Operand1"/> is lesser than or equal to <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Iff <paramref name="Operand1"/> &lt;= <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.LesserThanOrEqualTo.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus">
            <summary>
            Computes the remainder of the division of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the remainder of the division of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Modulus.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication">
            <summary>
            Computes the multiplication of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the multiplication of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the multiplication of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Multiply(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Multiplies two elements.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Product of the operands.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.SupportsLeftVectorArithmetics(System.Collections.ICollection,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.SupportsRightVectorArithmetics(System.Object,System.Collections.ICollection)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Multiplication.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation">
            <summary>
            Negates an element.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Negates an element.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Negates an element.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Operate(Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Negate(System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Negates an object.
            </summary>
            <param name="Value">Value to negate.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Negated value.</returns>
            <exception cref="T:System.Exception">If unable to negate value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.RealValueBehaviour">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.ComplexUnaryOperator.RealValueBehaviour"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Negation.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not">
            <summary>
            Logically negates an element.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Logically negates an element.
            </summary>
            <param name="Op">Operand</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.Operate(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Operate(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.LogicalNegation(System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Negates an object logically.
            </summary>
            <param name="Operand">Value to negate logically.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Logically negated value.</returns>
            <exception cref="T:System.Exception">If unable to logically negate value.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Not.PostfixOperator">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.UnaryOperator.PostfixOperator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or">
            <summary>
            Computes the logical or binary or of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the logical or binary or of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.PrecalcResult(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.PrecalcResult(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Union(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Unifies <paramref name="Operand1"/> and <paramref name="Operand2"/>.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns><paramref name="Operand1"/> OR <paramref name="Operand2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Or.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Period">
            <summary>
            Computes a power of an element given another.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Computes a power of an element given another.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="AssertExists">If true, an exception will be thrown if a member is not found. If false, null
            will be returned if a member is not found.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.Assign(Clayster.Library.Math.Variables,Clayster.Library.Math.Expression,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Assigns the left operator variable . right operator property/field with a specific
            value.
            </summary>
            <param name="Variables">Variable collection to use when evaluating the assignment.</param>
            <param name="Expression">Expression performing the assignment.</param>
            <param name="Value">Value to assign.</param>
            <param name="Caller">Expression Node performing the assignment.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Period.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Period.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Period.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power">
            <summary>
            Computes a power of an element given another.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes a power of an element given another.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes a power of an element given another.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.CalcPower(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Computes <paramref name="Base"/>^<paramref name="Exponent"/>. If <paramref name="Base"/> does not
            support power calculations, but multiplicative ones and <paramref name="Exponent"/> is a positive integer,
            the power is computed in the canonical way. If <paramref name="Exponent"/> is a negative integer, and
            <paramref name="Base"/> supports inversion, the power is also computed in the canonical way.
            </summary>
            <param name="Base">Base</param>
            <param name="Exponent">Exponent</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns><paramref name="Base"/>^<paramref name="Exponent"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Power.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Sequence">
            <summary>
            Handles a sequence of expressions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a sequence of expressions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.Add(Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Adds a node to the sequence.
            </summary>
            <param name="Node">Node to add.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Sequence.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Sequence.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Sequence.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Sequence.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Sequence.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant">
            <summary>
            Handles a single string-valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.#ctor(System.String,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles a single string-valued constant.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.Value">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Constants.Constant.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Constants.StringConstant.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction">
            <summary>
            Computes the difference between two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the difference between two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Computes the difference between two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Subtract(System.Object,System.Object,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Subtracts the right operand from the left.
            </summary>
            <param name="Left">Left operand.</param>
            <param name="Right">Right operand.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>Result</returns>
            <exception cref="T:Clayster.Library.Math.MathException">Is thrown if the right operand cannot be subtracted from the left.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.RealBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.ComplexBinaryOperator.Operate(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Complex.ComplexNumber)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Arithmetic.Subtraction.Operand2EqualPriorityNeedsParenthesis">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operand2EqualPriorityNeedsParenthesis"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Vector">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Array">Array of expression nodes.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="CheckMatrices">If a check for matrix contruction is to be performed.</param>
            <param name="ReturnSet">If a set should be returned instead of a vector.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Array">Array of expression nodes.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="CheckMatrices">If a check for matrix contruction is to be performed.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Boolean)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Array">Array of expression nodes.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="CheckMatrices">If a check for matrix contruction is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Boolean,System.Boolean)">
            <summary>
            Contains an array of expression nodes, forming a vector.
            </summary>
            <param name="Array">Array of expression nodes.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="CheckMatrices">If a check for matrix contruction is to be performed.</param>
            <param name="ReturnSet">If a set should be returned instead of a vector.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.GetSolutions(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetSolutions(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Vector.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionMultiNode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode[],Clayster.Library.Math.Expression,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Vector.Item(System.Int32)">
            <summary>
            Gets an element from the vector.
            </summary>
            <param name="Index">Zero-based vector index.</param>
            <returns>Element</returns>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Vector.Dimension">
            <summary>
            Dimension of the vector.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Vector.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Vector.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Vector.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.While">
            <summary>
            Handles loop evaluation using while.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Handles loop evaluation using while.
            </summary>
            <param name="Condition">Condition.</param>
            <param name="Statement">Statement to execute while the condition evaluates to true.</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ForEach(Clayster.Library.Math.ExpressionNodes.ForEachMethod,System.Boolean,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.EvaluateValueTypeConstants">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.EvaluateValueTypeConstants"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.Export(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Export(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.ExportLayout(System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.While.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.Statement">
            <summary>
            Statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.PriorityOnRightSide">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.PriorityOnRightSide"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.HasChildren">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.HasChildren"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.Children">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Children"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.While.IsSequence">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.IsSequence"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor">
            <summary>
            Computes the logical or binary exclusive or of two elements.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression,System.Int32,System.Int32)">
            <summary>
            Computes the logical or binary exclusive or of two elements.
            </summary>
            <param name="Op">Operand 1 (left operand).</param>
            <param name="Op2">Operand 2 (right operand).</param>
            <param name="Expression">Base expression of which the expression node is part.</param>
            <param name="StartPosition">Start position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
            <param name="StopPosition">Stop position in the expression, if defined. 
            If not defined, <see cref="F:System.Int32.MinValue"/> should be used.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BooleanBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Operate(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.Symbol">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Operators.BinaryOperator.Symbol"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Xor.Priority">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Priority"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ExternalFunctionHandler">
            <summary>
            External function handler. Delegate for calls to external functions.
            <seealso cref="T:Clayster.Library.Math.ExternalFunctions"/>
            </summary>
            <param name="FunctionParameters">Array of function parameters.</param>
            <param name="ModelParameters">Array of model parameters.</param>
            <param name="Variables">Current variables.</param>
            <param name="ExpressionNode">Expression Node being evaluated.</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:System.Exception">If the function could not be evaluated.</exception>
        </member>
        <member name="T:Clayster.Library.Math.ExternalFunctions">
            <summary>
            Class maintaining references to functions defined outside of the expression library.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.#ctor">
            <summary>
            Creates a collection of external function without model parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.#ctor(System.Object[])">
            <summary>
            Creates a collection of external function with a set of model parameters. These model parameters
            can be accessed by external functions when evaluated within the context of this collection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.SetModelParameters(System.Object[])">
            <summary>
            Sets a set of model parameters. These model parameters
            can be accessed by external functions when evaluated within the context of this collection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.AddModelParameter(System.Object)">
            <summary>
            Adds a model parameter to the collection of model parameters.
            </summary>
            <param name="ModelParameter">Model parameter.</param>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.GetModelParameter(System.Int32)">
            <summary>
            Gets a model parameter, if available, null otherwise.
            </summary>
            <param name="ModelParameterIndex">Zero-based model parameter index.</param>
            <returns>Model parameter, if exists, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.Register(System.String,Clayster.Library.Math.ExternalFunctionHandler)">
            <summary>
            Registers an external function.
            <seealso cref="T:Clayster.Library.Math.ExternalFunctionHandler"/>
            </summary>
            <param name="FunctionName">Name of the function</param>
            <param name="f">External function handler</param>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.Register(System.String,Clayster.Library.Math.ExternalFunctionHandler,System.Boolean)">
            <summary>
            Registers an external function.
            <seealso cref="T:Clayster.Library.Math.ExternalFunctionHandler"/>
            </summary>
            <param name="FunctionName">Name of the function</param>
            <param name="f">External function handler</param>
            <param name="SupportsVectorParameters">If the external function handler supports vector parameters.
            (Default value is false.)</param>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.Execute(System.String,System.Object[],Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Variables)">
            <summary>
            Executes an external function, given its name, a set of function parameters, and
            (if available) the set of model parameters assigned to the collection.
            </summary>
            <param name="FunctionName">Name of the function.</param>
            <param name="FunctionParameters">Function parameters.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <param name="Variables">Current variables collection.</param>
            <returns>Evaluated result.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be found.</exception>
            <exception cref="T:System.Exception">If the function could not be evaluated.</exception>
        </member>
        <member name="M:Clayster.Library.Math.ExternalFunctions.SupportsVectorParameters(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Checks if a given external function supports vector parameters.
            </summary>
            <param name="FunctionName">Name of the function.</param>
            <param name="ExpressionNode">Expression Node performing the calculation.</param>
            <returns>If <paramref name="FunctionName"/> supports vectors.</returns>
            <exception cref="T:Clayster.Library.Math.MathException">If the function could not be found.</exception>
        </member>
        <member name="P:Clayster.Library.Math.ExternalFunctions.ModelParameters">
            <summary>
            Model parameters
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.AxisType">
            <summary>
            Type of axis.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.AxisType.Cartesian">
            <summary>
            Numeric axis. Double values represent themselves.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.AxisType.DateTime">
            <summary>
            DateTime axis. Double values represent OA-DateTimes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.GraphEventHandler">
            <summary>
            Graph event handler delegate.
            </summary>
            <param name="Graph">Graph object.</param>
            <param name="Canvas">Drawing canvas.</param>
            <param name="Width">Width of bitmap.</param>
            <param name="Height">Height of bitmap.</param>
        </member>
        <member name="T:Clayster.Library.Math.GraphAreaEventHandler">
            <summary>
            Graph area event handler delegate.
            </summary>
            <param name="Graph">Graph object</param>
            <param name="Canvas">Drawing canvas.</param>
            <param name="Width">Width of bitmap.</param>
            <param name="Height">Height of bitmap.</param>
            <param name="X1">Left coordinate of graph area.</param>
            <param name="Y1">Top coordinate of graph area.</param>
            <param name="X2">Right coordinate of graph area.</param>
            <param name="Y2">Bottom coordinate of graph area.</param>
        </member>
        <member name="T:Clayster.Library.Math.GraphAxisCalculated">
            <summary>
            Event handler delegate for graph axis calculation events.
            </summary>
            <param name="Graph">Graph</param>
            <param name="MinValue">Smallest value on the axis.</param>
            <param name="MaxValue">Largest value on the axis.</param>
        </member>
        <member name="T:Clayster.Library.Math.MathException">
            <summary>
            Base class for all exceptions in Clayster.Library.Math.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.MathException.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Base class for all exceptions in Clayster.Library.Math.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Node">Node reporting the error.</param>
        </member>
        <member name="M:Clayster.Library.Math.MathException.#ctor(System.String,Clayster.Library.Math.ExpressionNodes.ExpressionNode,System.Exception)">
            <summary>
            Base class for all exceptions in Clayster.Library.Math.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Node">Node reporting the error.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="P:Clayster.Library.Math.MathException.Expression">
            <summary>
            Expression throwing the exception.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.MathException.ExpressionNode">
            <summary>
            Optional expression node reporting the error. If not available, null is returned.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.MathExpressionException">
            <summary>
            Base class for all parsing related exceptions.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.MathExpressionException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Base class for all parsing related exceptions.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Expression">Original expression.</param>
            <param name="Pos">Position inside expression where error occurred.</param>
        </member>
        <member name="M:Clayster.Library.Math.MathExpressionException.#ctor(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Base class for all parsing related exceptions.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Expression">Original expression.</param>
            <param name="Pos">Position inside expression where error occurred.</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="P:Clayster.Library.Math.MathExpressionException.Expression">
            <summary>
            Original expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.MathExpressionException.Pos">
            <summary>
            Position where the error occurred.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.MathSyntaxErrorException">
            <summary>
            Syntax Error during parsing.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.MathSyntaxErrorException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Syntax Error during parsing.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Expression">Original expression.</param>
            <param name="Pos">Position inside expression where error occurred.</param>
        </member>
        <member name="M:Clayster.Library.Math.MathSyntaxErrorException.#ctor(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Syntax Error during parsing.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Expression">Original expression.</param>
            <param name="Pos">Position inside expression where error occurred.</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="T:Clayster.Library.Math.MathReturnValue">
            <summary>
            Exception containing a return value.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.MathReturnValue.#ctor(System.Object)">
            <summary>
            Exception containing a return value.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="P:Clayster.Library.Math.MathReturnValue.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.PhongShader">
            <summary>
            Phong Shader.
            
            For more information about Phong shading, see: http://en.wikipedia.org/wiki/Phong_shading
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.PhongShader.DefaultAmbientReflectionConstant">
            <summary>
            Default ambient reflection constant.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.PhongShader.DefaultDiffuseReflectionConstant">
            <summary>
            Default diffuse reflection constant.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.PhongShader.DefaultSpecularReflectionConstant">
            <summary>
            Default specular reflection constant.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.PhongShader.DefaultShininess">
            <summary>
            Default shininess.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.#ctor(System.Double,System.Double,System.Double,Clayster.Library.Math.LightSource[])">
            <summary>
            Phong Shader.
            
            For more information about Phong shading, see: http://en.wikipedia.org/wiki/Phong_shading
            </summary>
            <param name="EyeX">Eye x-coordinate.</param>
            <param name="EyeY">Eye y-coordinate.</param>
            <param name="EyeZ">Eye z-coordinate.</param>
            <param name="Sources">Light sources</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.#ctor(System.Double,System.Double,System.Double,System.Double,Clayster.Library.Math.LightSource[])">
            <summary>
            Phong Shader.
            
            For more information about Phong shading, see: http://en.wikipedia.org/wiki/Phong_shading
            </summary>
            <param name="EyeX">Eye x-coordinate.</param>
            <param name="EyeY">Eye y-coordinate.</param>
            <param name="EyeZ">Eye z-coordinate.</param>
            <param name="AmbientReflectionConstant">Ambient reflection constant.</param>
            <param name="Sources">Light sources</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.Copy">
            <summary>
            Creates a duplicate of the Phong shader.
            </summary>
            <returns>Copy of Phong shader</returns>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetEyeCoordinate(System.Double,System.Double,System.Double)">
            <summary>
            Sets the current eye coordinates.
            </summary>
            <param name="EyeX">X-component of eye coordinate.</param>
            <param name="EyeY">Y-component of eye coordinate.</param>
            <param name="EyeZ">Z-component of eye coordinate.</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.Add(Clayster.Library.Math.LightSource)">
            <summary>
            Adds a light source.
            </summary>
            <param name="Source">Light Source</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.Add(System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Adds a light source.
            </summary>
            <param name="X">X-coordinate of light source</param>
            <param name="Y">Y-coordinate of light source</param>
            <param name="Z">Z-coordinate of light source</param>
            <param name="Intensity">Intensity of light</param>
            <param name="Color">Color of light</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(Clayster.Library.Math.SurfaceMaterial)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Material">Surface material</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(Clayster.Library.Math.SurfaceMaterial,System.Boolean)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Material">Surface material</param>
            <param name="TwoSided">Overrides the same property of <paramref name="Material"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(System.Drawing.Color,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Color">Color of material</param>
            <param name="TwoSided">If the material is twosided or not.</param>
            <param name="DiffuseReflectionConstant">Diffuse reflection constant</param>
            <param name="SpecularReflectionConstant">Specular reflection constant</param>
            <param name="Shininess">Shininess</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(System.Drawing.Color,System.Boolean,System.Double,System.Double)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Color">Color of material</param>
            <param name="TwoSided">If the material is twosided or not.</param>
            <param name="DiffuseReflectionConstant">Diffuse reflection constant</param>
            <param name="SpecularReflectionConstant">Specular reflection constant</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(System.Drawing.Color,System.Boolean,System.Double)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Color">Color of material</param>
            <param name="TwoSided">If the material is twosided or not.</param>
            <param name="DiffuseReflectionConstant">Diffuse reflection constant</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.SetMaterial(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the current surface material.
            </summary>
            <param name="Color">Color of material</param>
            <param name="TwoSided">If the material is twosided or not.</param>
        </member>
        <member name="M:Clayster.Library.Math.PhongShader.GetColor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a shade of the current material.
            </summary>
            <param name="X">X-coordinate of point.</param>
            <param name="Y">Y-coordinate of point.</param>
            <param name="Z">Z-coordinate of point.</param>
            <param name="Nx">X-component of normal vector (not necessarily of unit length).</param>
            <param name="Ny">Y-component of normal vector (not necessarily of unit length).</param>
            <param name="Nz">Z-component of normal vector (not necessarily of unit length).</param>
            <returns>Color shade</returns>
        </member>
        <member name="T:Clayster.Library.Math.PhysicalMagnitude">
            <summary>
            Contains information about a physical magnitude
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.#ctor(System.Double,System.String)">
            <summary>
            Contains information about a physical magnitude
            </summary>
            <param name="Value">Value</param>
            <param name="Unit">Unit of <paramref name="Value"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.GetNrDecimals(System.String)">
            <summary>
            Calculates the number of decimals available in a string.
            </summary>
            <param name="s">String representation of a number.</param>
            <returns>Number of decimals.</returns>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.#ctor(System.Double,System.Int32,System.String)">
            <summary>
            Contains information about a physical magnitude
            </summary>
            <param name="Value">Value</param>
            <param name="NrDecimals">Number of decimals of <paramref name="Value"/>.</param>
            <param name="Unit">Unit of <paramref name="Value"/>.</param>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.TryParse(System.String,Clayster.Library.Math.PhysicalMagnitude@)">
            <summary>
            Tries to parse a string into a physical magnitude.
            </summary>
            <param name="s">String</param>
            <param name="Result">Physical Magnitude, if possible to parse.</param>
            <returns>If the string could be parsed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.GetTypeCode">
            <summary>
            <see cref="M:System.IConvertible.GetTypeCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToBoolean(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToByte(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToChar(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToDateTime(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToDecimal(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToDouble(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToInt16(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToInt32(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToInt64(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToSByte(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToSingle(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToString(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToType(System.Type,System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToUInt16(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToUInt32(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ToUInt64(System.IFormatProvider)">
            <summary>
            <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Addition(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Adds two physical magnitudes together.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Subtraction(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Subtracts one physical magnitude from another.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Multiply(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Multiplies two physical magnitudes together.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Division(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Divides two physical magnitudes together.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_LessThan(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_LessThanOrEqual(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_GreaterThan(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_GreaterThanOrEqual(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Equality(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.op_Inequality(Clayster.Library.Math.PhysicalMagnitude,Clayster.Library.Math.PhysicalMagnitude)">
            <summary>
            Compares two physical magnitudes.
            </summary>
            <param name="Left">Left magnitude</param>
            <param name="Right">Right magnitude</param>
            <returns>Result</returns>
            <exception cref="T:System.Exception">If physical units are not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.DivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IInversion.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.PhysicalMagnitude.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.PhysicalMagnitude.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.PhysicalMagnitude.NrDecimals">
            <summary>
            Number of decimals of <see cref="P:Clayster.Library.Math.PhysicalMagnitude.Value"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.PhysicalMagnitude.Unit">
            <summary>
            Unit of <see cref="P:Clayster.Library.Math.PhysicalMagnitude.Value"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.PhysicalMagnitude.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.PhysicalMagnitude.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Matrices.ComplexMatrix">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Math.Matrices.Matrix">
            <summary>
            Base class of all matrix classes.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetElement(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given position
            </summary>
            <param name="Column">Zero-based column index.</param>
            <param name="Row">Zero-based row index.</param>
            <returns>Element</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SetElement(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets an element at the given position.
            </summary>
            <param name="Column">Zero-based column index.</param>
            <param name="Row">Zero-based row index.</param>
            <param name="Value">Value to set.</param>
            <exception cref="T:System.Exception">If the type of the element is not compatible with the matrix type.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Clone">
            <summary>
            Clones the matrix.
            </summary>
            <returns>Cloned matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ToString(System.Boolean,System.Int32)">
            <summary>
            Converts the matrix to a string.
            </summary>
            <param name="ExpressionOutput">If the output string should be parsable.</param>
            <param name="XOffset">Number of characters to pad to the left for each new line.</param>
            <returns>String representation of matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.DivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IInversion.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Reduce(System.Boolean,System.Int32@)">
            <summary>
            Reduces the matrix.
            </summary>
            <returns>Reduced matrix.</returns>
            <param name="Eliminate">If elimination is to be performed as well. Reduction without elimination
            results in an upper triangular matrix.</param>
            <param name="Rank">Rank of matrix.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Solve(System.Array)">
            <summary>
            Solves the equation A*x=b, where A is the matrix..
            </summary>
            <param name="Vector">b, in the equation A*x=b, where A is the matrix.</param>
            <returns>x, in the equation A*x=b</returns>
            <exception cref="T:System.Exception">If no solution exists.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.CalcDeterminant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>Determinant of the matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.CalcTrace">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>Determinant of the matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetColumn(System.Int32)">
            <summary>
            Gets a vector corresponding to a specific column.
            </summary>
            <param name="ColumnIndex">Zero-based column index.</param>
            <returns>Vector containing the column.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="ColumnIndex"/> is out of range.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SetColumn(System.Int32,System.Array)">
            <summary>
            Sets a specific column.
            </summary>
            <param name="ColumnIndex">Zero-based column index.</param>
            <param name="Column">Column</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetRow(System.Int32)">
            <summary>
            Gets a vector corresponding to a specific row.
            </summary>
            <param name="RowIndex">Zero-based row index.</param>
            <returns>Vector containing the row.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="RowIndex"/> is out of range.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SetRow(System.Int32,System.Array)">
            <summary>
            Sets a specific row.
            </summary>
            <param name="RowIndex">Zero-based row index.</param>
            <param name="Row">Row</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetRowVectors">
            <summary>
            Gets an array containing the row vectors of the matrix.
            </summary>
            <returns>Array containing the row vectors of the matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetColumnVectors">
            <summary>
            Gets an array containing the column vectors of the matrix.
            </summary>
            <returns>Array containing the column vectors of the matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.Copy">
            <summary>
            Creates a copy of the matrix.
            </summary>
            <returns>Copy of the matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.FlipUpDown">
            <summary>
            Flips the matrix upside down.
            </summary>
            <returns>Flipped matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.FlipLeftRight">
            <summary>
            Flips the matrix left to right.
            </summary>
            <returns>Flipped matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ToRealMatrix">
            <summary>
            Tries to convert the matrix to a real-valued matrix.
            </summary>
            <returns>Real-valued matrix</returns>
            <exception cref="T:System.Exception">If unable to perform the conversion.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.LookUp(System.Object,System.Int32,System.Int32)">
            <summary>
            Looks up an element in the matrix, searching through a column specified by <paramref name="LookupCol"/>, 
            returning the corresponding element in column <paramref name="ResultCol"/>. If no element is found
            null is returned.
            </summary>
            <param name="Value">Value to look up.</param>
            <param name="LookupCol">Look in this column (zero based index).</param>
            <param name="ResultCol">Return values from this column (zero based index).</param>
            <returns>Corresponding value if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Addition(Clayster.Library.Math.Matrices.Matrix,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Addition(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Matrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Addition(System.Object,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Subtraction(Clayster.Library.Math.Matrices.Matrix,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Subtraction(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Matrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Subtraction(System.Object,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Multiply(Clayster.Library.Math.Matrices.Matrix,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Multiply(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Multiply(System.Object,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Division(Clayster.Library.Math.Matrices.Matrix,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Division(Clayster.Library.Math.Matrices.Matrix,System.Object)">
            <summary>
            Matrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_Division(System.Object,Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.op_UnaryNegation(Clayster.Library.Math.Matrices.Matrix)">
            <summary>
            Matrix inversion
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.SupportsObject(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.SupportsObject(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.GetPriority(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.GetPriority(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.Matrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILayoutEngine.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.Width">
            <summary>
            Width of the matrix.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.Height">
            <summary>
            Height of the matrix.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets the element at the given position
            </summary>
            <param name="Column">Zero-based column index.</param>
            <param name="Row">Zero-based row index.</param>
            <returns>Element</returns>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.ElementsCanContainNewLine">
            <summary>
            If individual elements can contain new line characters when output.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsDiagonal">
            <summary>
            If the matrix is diagonal
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsUpperTriangular">
            <summary>
            If the matrix is upper triangular
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsLowerTriangular">
            <summary>
            If the matrix is lower triangular
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsNull">
            <summary>
            If the matrix is null
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.Matrix.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(System.Int32,System.Int32,Clayster.Library.Math.Complex.ComplexNumber[])">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ToComplex(System.Double[])">
            <summary>
            Converts a double array to a complex array.
            </summary>
            <param name="Vector">Double array</param>
            <returns>Complex array</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(System.Int32,System.Int32,Clayster.Library.Math.Complex.ComplexNumber[],System.Int32,System.Int32)">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
            <param name="XOffset">X-Offset</param>
            <param name="YOffset">Y-Offset</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(System.Int32,System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
            <param name="XOffset">X-Offset</param>
            <param name="YOffset">Y-Offset</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(Clayster.Library.Math.Complex.ComplexNumber[0:,0:])">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Elements">Elements of the matrix. The first index is the y-axis, the second the x-axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Matrix with complex-valued elements.
            </summary>
            <param name="Elements">Elements of the matrix. The first index is the y-axis, the second the x-axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetElement(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.SetElement(System.Int32,System.Int32,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetElement(System.Int32,System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.LookUp(System.Object,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.LookUp(System.Object,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Transpose">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Transpose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Clone">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Clone"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.MakeRealMatrixIfReal">
            <summary>
            Returns itself if it contains non-real elements. Otherwise the matrix is converted to a
            real matrix.
            </summary>
            <returns>Itself if non-real, or a real matrix if real.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Reduce(System.Boolean,System.Int32@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Reduce(System.Boolean,System.Int32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Solve(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Solve(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetColumn(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumn(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.SetColumn(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetColumn(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetRow(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRow(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.SetRow(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetRow(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetRows">
            <summary>
            Returns the elements of the matrix as an array of row vectors.
            </summary>
            <returns>Array of row vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetColumns">
            <summary>
            Returns the elements of the matrix as an array of column vectors.
            </summary>
            <returns>Array of column vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetRowVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRowVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.GetColumnVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumnVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.CalcDeterminant">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcDeterminant"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.CalcTrace">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcTrace"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.FlipLeftRight">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipLeftRight"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.FlipUpDown">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipUpDown"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Matrices.ComplexMatrix,System.Double)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(System.Double,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Addition(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Matrices.ComplexMatrix,System.Double)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(System.Double,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Subtraction(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Matrices.ComplexMatrix,System.Double)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(System.Double,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Multiply(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Matrices.ComplexMatrix,System.Double)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Matrices.ComplexMatrix,Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(System.Double,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_Division(Clayster.Library.Math.Complex.ComplexNumber,Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.op_UnaryNegation(Clayster.Library.Math.Matrices.ComplexMatrix)">
            <summary>
            ComplexMatrix inversion
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.Transform(Clayster.Library.Math.Complex.ComplexNumber[])">
            <summary>
            Transforms a vector.
            </summary>
            <param name="Vector">Reference to vector.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.ComplexMatrix.ToRealMatrix">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ToRealMatrix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.Width">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Width"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.Height">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Height"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.NrElements">
            <summary>
            Number of elements in matrix (i.e. Width*Height).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.IsReal">
            <summary>
            If the matrix is real-valued.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.IsDiagonal">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsDiagonal"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.IsUpperTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsUpperTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.IsLowerTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsLowerTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.ComplexMatrix.IsNull">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsNull"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Matrices.GeneralMatrix">
            <summary>
            General Matrix.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.#ctor(System.Int32,System.Int32,System.Object[])">
            <summary>
            General Matrix.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.#ctor(System.Int32,System.Int32,System.Object[],System.Int32,System.Int32)">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
            <param name="XOffset">X-Offset</param>
            <param name="YOffset">Y-Offset</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.#ctor(System.Object[0:,0:])">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <param name="Elements">Elements of the matrix. The first index is the y-axis, the second the x-axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetElement(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.SetElement(System.Int32,System.Int32,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetElement(System.Int32,System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.LookUp(System.Object,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.LookUp(System.Object,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Transpose">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Transpose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Clone">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Clone"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ToRealMatrix">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ToRealMatrix"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Reduce(System.Boolean,System.Int32@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Reduce(System.Boolean,System.Int32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Solve(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Solve(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementDivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.CalcDeterminant">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcDeterminant"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.CalcTrace">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcTrace"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetColumn(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumn(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.SetColumn(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetColumn(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetRow(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRow(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.SetRow(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetRow(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetRows">
            <summary>
            Returns the elements of the matrix as an array of row vectors.
            </summary>
            <returns>Array of row vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetColumns">
            <summary>
            Returns the elements of the matrix as an array of column vectors.
            </summary>
            <returns>Array of column vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetRowVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRowVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.GetColumnVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumnVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.FlipLeftRight">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipLeftRight"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.FlipUpDown">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipUpDown"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.GeneralMatrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.Width">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Width"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.Height">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Height"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.IsDiagonal">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsDiagonal"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.IsUpperTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsUpperTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.IsLowerTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsLowerTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.IsNull">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsNull"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.GeneralMatrix.ElementsCanContainNewLine">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.ElementsCanContainNewLine"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Matrices.RealMatrix">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <remarks>
            © Clayster, 2009-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.#ctor(System.Int32,System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <param name="Width">Width of matrix.</param>
            <param name="Height">Height of matrix.</param>
            <param name="Elements">Sequential array of elements in the matrix. They are ordered from left to right, top to bottom.</param>
            <param name="XOffset">X-Offset</param>
            <param name="YOffset">Y-Offset</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Matrix with real-valued elements.
            </summary>
            <param name="Elements">Elements of the matrix. The first index is the y-axis, the second the x-axis.</param>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetElement(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetElement(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.SetElement(System.Int32,System.Int32,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetElement(System.Int32,System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.LookUp(System.Object,System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.LookUp(System.Object,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Transpose">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Transpose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Clone">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Clone"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Reduce(System.Boolean,System.Int32@)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Reduce(System.Boolean,System.Int32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Invert"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Solve(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Solve(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetColumn(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumn(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.SetColumn(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetColumn(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetRow(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRow(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.SetRow(System.Int32,System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.SetRow(System.Int32,System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetRows">
            <summary>
            Returns the elements of the matrix as an array of row vectors.
            </summary>
            <returns>Array of row vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetColumns">
            <summary>
            Returns the elements of the matrix as an array of column vectors.
            </summary>
            <returns>Array of column vectors.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetRowVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetRowVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.GetColumnVectors">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.GetColumnVectors"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.CalcDeterminant">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcDeterminant"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.CalcTrace">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.CalcTrace"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.AllInInterval(System.Double,System.Double)">
            <summary>
            If all elements are within an interval.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.FlipLeftRight">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipLeftRight"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.FlipUpDown">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.FlipUpDown"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Addition(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Addition(Clayster.Library.Math.Matrices.RealMatrix,System.Double)">
            <summary>
            RealMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Addition(System.Double,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix addition
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Subtraction(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Subtraction(Clayster.Library.Math.Matrices.RealMatrix,System.Double)">
            <summary>
            RealMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Subtraction(System.Double,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix subtraction
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Multiply(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Multiply(Clayster.Library.Math.Matrices.RealMatrix,System.Double)">
            <summary>
            RealMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Multiply(System.Double,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix multiplication
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Division(Clayster.Library.Math.Matrices.RealMatrix,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Division(Clayster.Library.Math.Matrices.RealMatrix,System.Double)">
            <summary>
            RealMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_Division(System.Double,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix division
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.op_UnaryNegation(Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            RealMatrix inversion
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ExportLayout(System.Object,System.Xml.XmlWriter,Clayster.Library.Math.ExpressionNodes.ParentLayoutNodeType,System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.Transform(System.Double[])">
            <summary>
            Transforms a vector.
            </summary>
            <param name="Vector">Reference to vector.</param>
            <returns>Transformed vector.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Matrices.RealMatrix.ToRealMatrix">
            <summary>
            <see cref="M:Clayster.Library.Math.Matrices.Matrix.ToRealMatrix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.Width">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Width"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.Height">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.Height"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.NrElements">
            <summary>
            Number of elements in matrix (i.e. Width*Height).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.IsDiagonal">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsDiagonal"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.IsUpperTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsUpperTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.IsLowerTriangular">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsLowerTriangular"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.IsNull">
            <summary>
            <see cref="P:Clayster.Library.Math.Matrices.Matrix.IsNull"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Matrices.RealMatrix.AllNonNegative">
            <summary>
            If all elements are nonnegative.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.ObjectExtensions.ArrayExtensions">
            <summary>
            Static class containing array method extensions.
            </summary>
            <remarks>
            © Clayster, 2010-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.ObjectExtensions.ArrayExtensions.push(System.Object[],System.Object)">
            <summary>
            Adds an item to the array <paramref name="a"/>.
            </summary>
            <param name="a">Array</param>
            <param name="Item">New item</param>
            <returns>Extended array</returns>
        </member>
        <member name="M:Clayster.Library.Math.ObjectExtensions.ArrayExtensions.push(System.Double[],System.Double)">
            <summary>
            Adds an item to the array <paramref name="a"/>.
            </summary>
            <param name="a">Array</param>
            <param name="Item">New item</param>
            <returns>Extended array</returns>
        </member>
        <member name="M:Clayster.Library.Math.ObjectExtensions.ArrayExtensions.push(Clayster.Library.Math.Complex.ComplexNumber[],Clayster.Library.Math.Complex.ComplexNumber)">
            <summary>
            Adds an item to the array <paramref name="a"/>.
            </summary>
            <param name="a">Array</param>
            <param name="Item">New item</param>
            <returns>Extended array</returns>
        </member>
        <member name="T:Clayster.Library.Math.TimedExecution">
            <summary>
            Handles timing of execution of things. It forces the corresponding threads to abort
            when executing for more than a specified amount of time.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.TimedExecution.StartExecution(System.Int32)">
            <summary>
            Starts timed execution in the current thread. Call <see cref="M:Clayster.Library.Math.TimedExecution.EndExecution"/> when the timed execution
            is finished.
            </summary>
            <param name="TimeoutMilliseconds">Time (in milliseconds) to allow the timed execution to take.
            If surpassing this time, a <see cref="T:System.Threading.ThreadAbortException"/> exception will be thrown in the current thread.</param>
        </member>
        <member name="M:Clayster.Library.Math.TimedExecution.EndExecution">
            <summary>
            Ends a timed execution previously started by a call to <see cref="M:Clayster.Library.Math.TimedExecution.StartExecution(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.TimedExecution.Terminate">
            <summary>
            Terminates the execution of timed evaluation.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Variable">
            <summary>
            Class handling the value of a variable.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Variable.#ctor(System.String,System.Object)">
            <summary>
            Class handling the value of a variable.
            </summary>
            <param name="Name">Name of the variable.</param>
            <param name="Value">Value of the variable.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variable.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Class handling the value of a variable.
            </summary>
            <param name="Name">Name of the variable.</param>
            <param name="Value">Value of the variable.</param>
            <param name="StackDepth">The stack depth when created.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variable.Copy">
            <summary>
            Creates a copy of the variable.
            </summary>
            <returns>New object instance representing the same variable name and value.
            The copy is a shallow copy, that is, the value will be the same if they point
            to a reference type object.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variable.ToString">
            <summary>
            Returns a string representation of the variable.
            </summary>
            <returns>String representation of the variable (name and value).</returns>
        </member>
        <member name="P:Clayster.Library.Math.Variable.Name">
            <summary>
            Name of the variable. (Read-only)
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variable.Value">
            <summary>
            Value of the variable. (Read/write)
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variable.StackDepth">
            <summary>
            The stack depth when created.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Variables">
            <summary>
            A thread-safe class handling a set of variables.
            </summary>
            <remarks>
            © Clayster, 2007-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Math.Variables.#ctor">
            <summary>
            A thread-safe class handling a set of variables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Variables.#ctor(Clayster.Library.Math.Variables)">
            <summary>
            A thread-safe class handling a set of variables.
            </summary>
            <param name="Variables">Copy contents of this collection to the newly created collection.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Push">
            <summary>
            Pushes the current state of the variables to the internal stack. This set of values can be
            recovered by calling the Pop() method.
            <seealso cref="M:Clayster.Library.Math.Variables.Pop"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Pop">
            <summary>
            Pops a previous state of the variables collection from the internal stack. The set of variables
            must have been pushed previously using the Push() method.
            <seealso cref="M:Clayster.Library.Math.Variables.Push"/>
            </summary>
            <exception cref="T:System.AccessViolationException">If no set of variables have been pushed previously.</exception>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Contains(System.String)">
            <summary>
            If a variable with a given name exists in the variable collection.
            </summary>
            <param name="VariableName">Name of the variable.</param>
            <returns>true iff a variable with the provided name exists within the collection.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Remove(System.String)">
            <summary>
            Removes the variable (if it exists) with the corresponding name.
            </summary>
            <param name="VariableName">Name of the variable.</param>
            <returns>true iff a variable with the corresponding name was found and removed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value of a variable in the collection. If available, <paramref name="Value"/>
            will contain the value, and the function returns true. If not available, <paramref name="Value"/>
            is set to null, and the function returns false.
            </summary>
            <param name="VariableName">Variable to get.</param>
            <param name="Value">Value, if variable exits, null otherwise.</param>
            <returns>If the function found the variable or not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.TryGetVariable(System.String,System.Int32,Clayster.Library.Math.Variable@)">
            <summary>
            Tries to get a variable in the collection. If available, <paramref name="Variable"/>
            will contain the variable, and the function returns true. If not available, <paramref name="Variable"/>
            is set to null, and the function returns false.
            </summary>
            <param name="VariableName">Variable to get.</param>
            <param name="OnlyFromStackDepth">If only variables from a given stack depth are to be substituted. -1 = include global values.</param>
            <param name="Variable">Variable, if it exits, null otherwise.</param>
            <returns>If the function found the variable or not.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.SetEcmaVariable(System.String,System.Object)">
            <summary>
            Sets a variable value, following ECMA variable scope guidelines.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Value">Value.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Add(System.String,System.Object)">
            <summary>
            Adds a variable with the corresponding name to the collection. If a previous
            variable with the same name exists, it is first removed.
            </summary>
            <param name="VariableName">Variable name.</param>
            <param name="Value">Value of variable.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.GetModelParameter(System.Int32)">
            <summary>
            Gets a model parameter, if available, null otherwise.
            </summary>
            <param name="ModelParameterIndex">Zero-based model parameter index.</param>
            <returns>Model parameter, if exists, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Add(Clayster.Library.Math.Variable)">
            <summary>
            Adds a variable with the corresponding name to the collection. If a previous
            variable with the same name exists, it is first removed.
            </summary>
            <param name="item">Variable to add.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Clear">
            <summary>
            Clears the collection of variables.
            </summary>
            <remarks>This does not affect the state of the internal stack. Only current variables
            are cleared.</remarks>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Contains(Clayster.Library.Math.Variable)">
            <summary>
            If a variable with a given name exists in the variable collection.
            </summary>
            <remarks>A search for variable references is not done here. The search is done for
            variables with similar names.</remarks>
            <param name="item">Variable to search for.</param>
            <returns>true iff a variable with the provided name exists within the collection.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.CopyTo(Clayster.Library.Math.Variable[],System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">Array of variables.</param>
            <param name="arrayIndex">Starting index to copy to.</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.CopyTo(Clayster.Library.Math.Variables)">
            <summary>
            Copies the contents of the collection to another variable collection.
            </summary>
            <param name="Destination">Destination collection to copy to</param>
        </member>
        <member name="M:Clayster.Library.Math.Variables.Remove(Clayster.Library.Math.Variable)">
            <summary>
            Removes a variable from the collection.
            </summary>
            <remarks>The removal of variables is done based on the name provided implicitly
            in the Variable object, not on variable references.</remarks>
            <param name="item">Variable to remove.</param>
            <returns>true iff the variable was found and removed.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.GetEnumerator">
            <summary>
            Returns an enumerator of variables inside the collection.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Clayster.Library.Math.Variables.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator of variables inside the collection.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Clayster.Library.Math.Variables.Previous">
            <summary>
            Previous set of variables. Enables creation of chains of variable sets, where variables are set
            only in the first set, and retrieved in successive order.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.ScriptProfiler">
            <summary>
            Optional script profiler to use when evaluating script using this variables collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.StackDepth">
            <summary>
            Stack Depth
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.Item(System.String)">
            <summary>
            Array index into the variables collection. Provides an easy access to available
            variables. It can also be used to set the values of new, previously undefined variables.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>Value of the variable. null if no variable with the corresponding name is found.</returns>
        </member>
        <member name="P:Clayster.Library.Math.Variables.ExternalFunctions">
            <summary>
            Collectin of External Functions that can be used when evaluating the expression.
            <seealso cref="P:Clayster.Library.Math.Variables.ExternalFunctions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.ModelParameters">
            <summary>
            Model parameters
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.Count">
            <summary>
            Number of variables in the collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.IsReadOnly">
            <summary>
            If the collection is read-only or not (always false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.VariableNames">
            <summary>
            Returns an array of available variable names.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Variables.VariableValues">
            <summary>
            Returns a sorted dictionary of variable values sorted by variable name.
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.TextHorizontalAlignment">
            <summary>
            Text horizontal alignment
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextHorizontalAlignment.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextHorizontalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextHorizontalAlignment.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.TextVerticalAlignment">
            <summary>
            Text vertical alignment
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextVerticalAlignment.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextVerticalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.TextVerticalAlignment.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="T:Clayster.Library.Math.Canvas3D">
            <summary>
            Performs 3D drawing on a canvas. The 3D Canvas maintains a z-buffer making sure only the closest pixels are shown.
            
            Note: Semi-transparent pixels do not write to the z-buffer, and should therefore be draw after all opaque pixels
            have been written.
            </summary>
            <remarks>
            © Clayster, 2011-2014
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Math.Canvas3D.MaxWidth">
            <summary>
            Max Width (in pixels) of canvas.
            </summary>
        </member>
        <member name="F:Clayster.Library.Math.Canvas3D.MaxHeight">
            <summary>
            Max Height (in pixels) of canvas.
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.#ctor(System.Int32,System.Int32)">
            <summary>
            Performs 3D drawing on a canvas. The 3D Canvas maintains a z-buffer making sure only the closest pixels are shown.
            
            Note: Semi-transparent pixels do not write to the z-buffer, and should therefore be draw after all opaque pixels
            have been written.
            </summary>
            <param name="Width">Width in pixels</param>
            <param name="Height">Height in pixels</param>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.SetCamera(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Defines the projection to simulate a camera looking at a specific point (<paramref name="ViewAtX"/>, <paramref name="ViewAtY"/>, <paramref name="ViewAtZ"/>, 
            from an angle <paramref name="YAngle"/> rotated around the Y Axis, at an elevation controlled by the <paramref name="ElevationAngle"/>. The Camera is 
            <paramref name="CameraDistance"/> units away from the point, and the observer is <paramref name="EyeDistance"/> units away from the camera (projection plane).
            </summary>
            <param name="ViewAtX">X-coordinate of point the camera is looking at.</param>
            <param name="ViewAtY">Y-coordinate of point the camera is looking at.</param>
            <param name="ViewAtZ">Z-coordinate of point the camera is looking at.</param>
            <param name="YAngle">The camera is rotated around the y-axis centered at the point (<paramref name="ViewAtX"/>,<paramref name="ViewAtY"/>,
            <paramref name="ViewAtZ"/>) this angle.</param>
            <param name="ElevationAngle">The camera is elevated this angle.</param>
            <param name="CameraDistance">The distance from the point and the camera.</param>
            <param name="EyeDistance">The distance from the camera (projection plane) and the observer.</param>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.GetBitmap(System.Drawing.Color)">
            <summary>
            Gets a bitmap of the current canvas.
            </summary>
            <param name="Background">Background color</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.DrawLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Draws a 3D Line on the canvas.
            </summary>
            <param name="X1">X1</param>
            <param name="Y1">Y1</param>
            <param name="Z1">Z1</param>
            <param name="X2">X2</param>
            <param name="Y2">Y2</param>
            <param name="Z2">Z2</param>
            <param name="Color">Color</param>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.DrawConvexPolygon(System.Double[],System.Double[],System.Double[],System.Drawing.Color)">
            <summary>
            Draws a convex polygon (that is assumed to lie in a plane).
            </summary>
            <param name="X">X coordinates</param>
            <param name="Y">Y coordinates</param>
            <param name="Z">Z coordinates</param>
            <param name="Color">Color</param>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.GetZ(System.Int32,System.Int32)">
            <summary>
            Gets the Z corresponding to a given projected coordinate.
            </summary>
            <param name="Xp">Projected X-coordinate.</param>
            <param name="Yp">Projected Y-coordinate.</param>
            <returns>Corresponding Z.</returns>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.DrawString(System.String,System.Drawing.FontFamily,System.Double,System.Drawing.FontStyle,Clayster.Library.Math.TextHorizontalAlignment,Clayster.Library.Math.TextVerticalAlignment,System.Drawing.Color,Clayster.Library.Math.Matrices.RealMatrix)">
            <summary>
            Draws some text
            </summary>
            <param name="Text">Text to draw.</param>
            <param name="FontFamily">Font Family</param>
            <param name="Size">Size of font.</param>
            <param name="Style">Font Style</param>
            <param name="HorizontalAlignment">Horizontal alignment of text as compared to the coordinate (0,0).</param>
            <param name="VerticalAlignment">Vertical alignment of text as compared to the coordinate (0,0).</param>
            <param name="Color">Color of text.</param>
            <param name="Transform">Transformation of text before being drawn.</param>
        </member>
        <member name="M:Clayster.Library.Math.Canvas3D.DrawGenericPolygon(System.Double[],System.Double[],System.Double[],System.Drawing.Color)">
            <summary>
            Draws a generic polygon. This method is somewhat slower than <see cref="M:Clayster.Library.Math.Canvas3D.DrawConvexPolygon(System.Double[],System.Double[],System.Double[],System.Drawing.Color)"/>,
            since it allows for multiple scan lines to be created for each y.
            </summary>
            <param name="X">X coordinates</param>
            <param name="Y">Y coordinates</param>
            <param name="Z">Z coordinates</param>
            <param name="Color">Color</param>
        </member>
        <member name="P:Clayster.Library.Math.Canvas3D.WorldMatrix">
            <summary>
            Returns a reference to the current world transformation matrix.
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Canvas3D.ProjectionMatrix">
            <summary>
            Returns a reference to the current projection matrix. (This includes the <see cref="P:Clayster.Library.Math.Canvas3D.WorldMatrix"/>.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Canvas3D.Bgra">
            <summary>
            Color information of the canvas. (B, G, R, A)
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Canvas3D.Width">
            <summary>
            Width, in pixels
            </summary>
        </member>
        <member name="P:Clayster.Library.Math.Canvas3D.Height">
            <summary>
            Height, in pixels
            </summary>
        </member>
    </members>
</doc>
