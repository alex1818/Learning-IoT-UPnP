<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clayster.Library.EventLog</name>
    </assembly>
    <members>
        <member name="T:Clayster.Library.EventLog.EventLogPrinter">
            <summary>
            Event log printer. Can be used to direct text output to the event log.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventLogPrinter.#ctor">
            <summary>
            Event log printer. Can be used to direct text output to the event log.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventLogPrinter.#ctor(System.String)">
            <summary>
            Event log printer. Can be used to direct text output to the event log.
            </summary>
            <param name="LogObjectId">Object ID to use when logging.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventLogPrinter.WriteLine(System.String)">
            <summary>
            <see cref="M:System.IO.TextWriter.WriteLine(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventLogPrinter.Encoding">
            <summary>
            <see cref="P:System.IO.TextWriter.Encoding"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog">
            <summary>
            Event Log storing events in a My SQL database.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventSink">
            <summary>
            Base class for all Event Sinks.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.#ctor(System.String)">
            <summary>
            Base class for all Event Sinks.
            </summary>
            <param name="Name">Name of event sink</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Open">
            <summary>
            Opens the event sink for output.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Close">
            <summary>
            Closes the event sink.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)">
            <summary>
            Store event according to rules setup in the event sink.
            </summary>
            <param name="Event">Event to store</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush">
            <summary>
            Flushes any queued events.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle">
            <summary>
            Method called when no events are queued for output.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Queue(Clayster.Library.EventLog.Event,System.Boolean)">
            <summary>
            Method called for queueing an event for output.
            </summary>
            <param name="Event">Event to queue</param>
            <param name="StartIfNotStarted">Start the event sink thread, if not started already.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Queue(Clayster.Library.EventLog.Event)">
            <summary>
            Method called for queueing an event for output.
            </summary>
            <param name="Event">Event to queue</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.QueueFlush">
            <summary>
            Flag queue for flushing.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Terminate">
            <summary>
            Terminate the event sink, and its corresponding threads.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Terminate(System.Boolean)">
            <summary>
            Terminate the event sink, and its corresponding threads.
            </summary>
            <param name="WaitUntilTerminated">If true, the method waits for all threads to terminate
            properly. If false, the method only flags the event sink is terminated, without waiting
            for the corresponding threads to actually terminate.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.WaitUntilTerminated(System.Int32)">
            <summary>
            Waits for all corresponding threads to terminate.
            <seealso cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Terminate(System.Boolean)"/>
            </summary>
            <param name="Timeout">Milliseconds to wait for threads to terminate.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.WaitQueueEmpty(System.Int32)">
            <summary>
            Waits for the queue to become empty. A timeout is specified to define the maximum amount of
            time to wait.
            </summary>
            <param name="Timeout">Timeout in milliseconds.</param>
            <returns>true iff the queue became empty within the timeout period.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.IncrementNrSearches">
            <summary>
            Increments the Search Counter by one.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.IncrementEventsRead(System.Int32)">
            <summary>
            Increments the Events Read Counter by <paramref name="EventsRead"/>.
            </summary>
            <param name="EventsRead">Number of events read.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.GetStatistics(System.Int32@,System.Int64@)">
            <summary>
            Gets event statistics.
            </summary>
            <param name="NrQueued">Number of events currently queued.</param>
            <param name="NrProcessed">Number of events processed.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventSink.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventSink.IsReadable">
            <summary>
            If the event sink is readable or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventSink.Name">
            <summary>
            Name of the event sink.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventSink.IsTerminated">
            <summary>
            True if event sink has been terminated.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventSink.EventsQueued">
            <summary>
            Number of events currently queued.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventSink.EventsProcessed">
            <summary>
            Number of events processed.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.ISearchableEventSink">
            <summary>
            Interface for searchable event sinks.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.LoadEventRecord(System.Int64)">
            <summary>
            Loads an event record from the database.
            </summary>
            <param name="ID">Database ID of the record.</param>
            <returns>Event Record</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching. Will be ignored if null. Only non-empty items will be used to restrict search.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching. Will be ignored if null.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching. Will be ignored if null.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching. Will be ignored if null. Only non-empty items will be used to restrict search.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.GetEventIDs">
            <summary>
            Retrieves the eventid's in the database
            </summary>
            <returns>List of EventIdItem objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.GetEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.DateTime,System.DateTime)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],Clayster.Library.EventLog.EventSinks.EventObject[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="EventObjects">Combination of eventid and objectid to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.GetTypeLevels">
            <summary>
            Retrieves the current typelevels in the database (distinct)
            </summary>
            <returns>List of TypeLevel objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.ISearchableEventSink.DaysToKeepRecord(System.String,Clayster.Library.EventLog.EventType,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Calculates how long an event record of a given type will be stored in the event log.
            </summary>
            <param name="EventID">Event ID, if any, or the empty string if none.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <returns>Days a record of the given type will be stored.</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.ISearchableEventSink.Name">
            <summary>
            Name of the event sink.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.SqlScriptResourceName">
            <summary>
            Resource name to the SQL script used to create the database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.SqlScriptStoreProceduresResourceName">
            <summary>
            Resource prefix for folder containing my sql store procedures definitions.
            Due to bug in My SQL, each store procedure needs to be declared in it´s own script file when created through script and .Net connector for My SQL
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.#ctor(Clayster.Library.Data.IDataLayer)">
            <summary>
            Event Log storing events in a My SQL database.
            </summary>
            <param name="DB">Data layer maintaining connections with the database.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.#ctor(Clayster.Library.Data.IDataLayer,Clayster.Library.EventLog.EventSinks.AutoDeleteRecord[])">
            <summary>
            Event Log storing events in a My SQL database.
            </summary>
            <param name="DB">Data layer maintaining connections with the database.</param>
            <param name="AutoDeleteRecords">Auto-delete records to use.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Log storing events in a My SQL database.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.CreateDatabaseComponents(Clayster.Library.Data.IDataLayer)">
            <summary>
            Create database structure for event log information in database.
            </summary>
            <param name="DB">Data layer maintaining connections with the database.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.QueueAutoDelete">
            <summary>
            Queues a message to the event sink to perform an automatic deletion of old records.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.LoadEventRecord(System.Int64,Clayster.Library.Language.Language)">
            <summary>
            Loads an event record from the database.
            </summary>
            <param name="ID">Database ID of the record.</param>
            <param name="Language">Language to use for localization.</param>
            <returns>Event Record</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.LoadEventRecord(System.Int64)">
            <summary>
            Loads an event record from the database.
            </summary>
            <param name="ID">Database ID of the record.</param>
            <returns>Event Record</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.FindEventRecords(System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="FromDbId">Don't return rows older than this.</param>
            <param name="ToDbId">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.DateTimeToSQL(System.DateTime)">
            <summary>
            Converts a timepoint to s string that can be used in SQL Statements.
            </summary>
            <param name="Timepoint">DateTime value.</param>
            <returns>String to be used in SQL Statements.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.DateTimeToSQL(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Converts a timepoint to s string that can be used in SQL Statements, and
            outputs it to a StringBuilder object.
            </summary>
            <param name="sb">StringBuilder to use for outputting the SQL String representation of
            <paramref name="Timepoint"/>Time point to convert</param>
            <param name="Timepoint">DateTime value.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],Clayster.Library.EventLog.EventSinks.EventObject[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="EventObjects">Combination of eventid and objectid to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.CheckForEventIDs(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Checks for eventids in the the database using certain search criteria.
            </summary>
            <param name="Type">Types to search for.</param>
            <param name="Level">Levels to search for.</param>
            <param name="Marked">Event marks to search for.</param>
            <param name="From">Don't retrieve records older than this.</param>
            <param name="To">Don't retrieve records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>EventIds found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.DateTime,System.DateTime)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetSubEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="EventId">EventId of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <param name="MaxRows">The amount of rows to retrieve</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetTypeLevels">
            <summary>
            Retrieves the current typelevels in the database (distinct)
            </summary>
            <returns>List of TypeLevel objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByMonth(System.Int32)">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByMonth</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByMonth(System.Int32,System.Int32)">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByMonth objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByWeek(System.Int32)">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByWeek(System.Int32,System.Int32)">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByDay(System.Int32)">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventsByDay(System.Int32,System.Int32)">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.DaysToKeepRecord(System.String,Clayster.Library.EventLog.EventType,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Calculates how long an event record of a given type will be stored in the event log.
            </summary>
            <param name="EventID">Event ID, if any, or the empty string if none.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <returns>Days a record of the given type will be stored.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.GetEventIDs">
            <summary>
            Retrieves the eventid's in the database
            </summary>
            <returns>List of EventIdItem objects</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MySql.MySqlEventLog.IsReadable">
            <summary>
            <see cref="P:Clayster.Library.EventLog.EventSinks.EventSink.IsReadable"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.IEventRecord">
            <summary>
            Interface for persisted events.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.IEventRecord.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
        </member>
        <member name="M:Clayster.Library.EventLog.IEventRecord.Export(System.Xml.XmlWriter,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
            <param name="IncludeModule">True if module information should be included in export, false otherwise</param>
            <param name="IncludeParameters">True if parameters information should be included in export, false otherwise</param>
            <param name="IncludeStackTrace">True if stack trace information should be included in export, false otherwise</param>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.DbId">
            <summary>
            ID of the event record in the database
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Timestamp">
            <summary>
            Timepoint when the event was created.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Level">
            <summary>
            Event level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Id">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Message">
            <summary>
            Event message
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Object">
            <summary>
            Event object (acted upon)
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Subject">
            <summary>
            Event subject (acting upon)
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.StackTrace">
            <summary>
            Stack Trace
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.IEventRecord.Parameters">
            <summary>
            Parameters to log with the event.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventCallback">
            <summary>
            Event callback delegate. Event callbacks are called when an event has been processed by an event sink.
            </summary>
            <param name="Event">Event having been processed.</param>
            <param name="EventSink">Event Sink that has processed the event.</param>
            <param name="Ok">If the event could be processed by the event sink (true) or not (false).</param>
            <param name="Parameters">Any parameters passed on to the Event Log together with the event.</param>
        </member>
        <member name="T:Clayster.Library.EventLog.EventLevel">
            <summary>
            Event Level
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventLevel.Minor">
            <summary>
            Minor events. Corresponds to regular events that occur often.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventLevel.Medium">
            <summary>
            Medium events. Corresponds to objects being changed for example.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventLevel.Major">
            <summary>
            Major events. Corresponds to objects being created or deleted for example.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventType">
            <summary>
            Type of event.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventType.Information">
            <summary>
            Informative event. Informative events are events that are not considered exceptions, errors or warnings.
            They simply state that something has happened.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventType.Warning">
            <summary>
            Warning event. Warning events are not exceptions or errors. They are used to convey information about something
            that could become an error, or something that could be performed in a better way.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventType.Error">
            <summary>
            Error event. Errors signify errors in the system as a whole. They are not programmatic errors. They may signify
            resources that are unavailable for example.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventType.Exception">
            <summary>
            Exceptions. Exceptions are unexpected errors, albeit handled ones. They may point to programmatic or 
            algorithmic errors.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.Event">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            processing.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String)">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String)">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String)">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String)">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.#ctor(System.DateTime,System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Event class. This class contains information about an event record, and is passed to event sinks for
            </summary>
            <param name="Timestamp">Timestamp of event.</param>
            <param name="Id">Event ID</param>
            <param name="Level">Event Level</param>
            <param name="Type">Event Type</param>
            <param name="Message">Event Message</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.CheckNull">
            <summary>
            Checks for null strings, replacing them with the empty string.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.CheckObjectName(System.String)">
            <summary>
            Checks if name is suitable for logging used as an Object or Subject name. 
            
            GUIDs will be replaced by "[GUID]"
            Numbers will be replaced by "[NUM]"
            </summary>
            <param name="Name">Name to check</param>
            <returns>Object Name with some restrictions:
            
            GUIDs will be replaced by "[GUID]"
            Numbers will be replaced by "[NUM]"
            </returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.CheckParameterValues(System.String[])">
            <summary>
            Checks if parameter values are suitable for logging. 
            
            GUIDs will be replaced by "[GUID]"
            </summary>
            <param name="Values">Values to check</param>
            <returns>Parameter values with some restrictions:
            
            GUIDs will be replaced by "[GUID]"
            </returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.Avoid(Clayster.Library.EventLog.EventSinks.EventSink)">
            <summary>
            Notifies the event to avoid a specific event sink.
            </summary>
            <param name="Sink">Event sink to avoid.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.CanLogTo(Clayster.Library.EventLog.EventSinks.EventSink)">
            <summary>
            Checks if an event sink can receive the event.
            </summary>
            <param name="Sink">Sink to check</param>
            <returns>true iff the event can be logged to the event sink.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.Export(System.Xml.XmlWriter,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
            <param name="IncludeModule">True if module information should be included in export, false otherwise</param>
            <param name="IncludeParameters">True if parameters information should be included in export, false otherwise</param>
            <param name="IncludeStackTrace">True if stack trace information should be included in export, false otherwise</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Event.Escape(System.String)">
            <summary>
            Replaces invalid XML characters in a string with their valid XML equivalent.
            </summary>
            <param name="Text">The string within which to escape invalid characters.</param>
            <returns>The input string with invalid characters replaced.</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Timestamp">
            <summary>
            Timepoint when the event was created.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Level">
            <summary>
            Event level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Type">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Id">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Message">
            <summary>
            Event message
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Object">
            <summary>
            Event object (acted upon)
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Subject">
            <summary>
            Event subject (acting upon)
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.StackTrace">
            <summary>
            Stack Trace
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Parameters">
            <summary>
            Parameters to log with the event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.Callback">
            <summary>
            Callback method. Is called when the event has been processed by an event sink.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.CallbackParameters">
            <summary>
            Callback method parametrs. These parameters are passed on to the callback method.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.IsTagged">
            <summary>
            If the event is tagged, i.e. having an Event ID and parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.ModuleShort">
            <summary>
            Short (one line) version of the Module String.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Event.MessageShort">
            <summary>
            Short (one line) version of the message text.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog">
            <summary>
            Stores incoming events in ASCII Files.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog">
            <summary>
            Base class for all file based event sinks.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Base class for all file based event sinks.
            </summary>
            <param name="Name">Name of the event sink.</param>
            <param name="BasePath">Base Path of files to create.</param>
            <param name="KeepDays">Keep files this number of days.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog.#ctor(System.String,System.String)">
            <summary>
            Base class for all file based event sinks.
            </summary>
            <param name="Name">Name of the event sink.</param>
            <param name="BasePath">Base Path of files to create.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            Base class for all file based event sinks.
            </summary>
            <param name="Name">Name of the event sink.</param>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog.CheckDeleteOldFiles">
            <summary>
            Checks if there are old log files available that should be deleted. If so, it also deletes them.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Files.FilesEventLog.BasePath">
            <summary>
            Base path for event files.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.#ctor(System.String,System.Boolean)">
            <summary>
            Stores incoming events in ASCII Files..
            </summary>
            <param name="BasePath">Base path where log files are to be stored.</param>
            <param name="SeparateTypes">If true, different types of events wil be logged in different files.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Stores incoming events in ASCII Files..
            </summary>
            <param name="BasePath">Base path where log files are to be stored.</param>
            <param name="KeepDays">Keep log files this number of days.</param>
            <param name="SeparateTypes">If true, different types of events wil be logged in different files.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Stores incoming events in ASCII Files..
            </summary>
            <param name="E">XML Element containing information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.AsciiFilesEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.DeleteEventLevel">
            <summary>
            Event Level for deletion. These can be combined.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventLevel.Minor">
            <summary>
            Minor events
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventLevel.Medium">
            <summary>
            Medium events
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventLevel.Major">
            <summary>
            Major events.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventLevel.All">
            <summary>
            All event levels.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.DeleteEventType">
            <summary>
            Event Type for deletion. These can be combined.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventType.Exception">
            <summary>
            Exceptions.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventType.Error">
            <summary>
            Errors
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventType.Warning">
            <summary>
            Warnings
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventType.Information">
            <summary>
            Informative events
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventType.All">
            <summary>
            All event types.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.DeleteEventMark">
            <summary>
            Event marks for deletion (i.e. with or without Event IDs).
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventMark.WithID">
            <summary>
            Only with Event IDs
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventMark.WithoutID">
            <summary>
            Only without Event IDs
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.DeleteEventMark.All">
            <summary>
            With and without Event IDs.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord">
            <summary>
            SQL Server 2005 Event Log Auto Delete record.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.#ctor(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.Int32)">
            <summary>
            SQL Server 2005 Event Log Auto Delete record.
            </summary>
            <param name="Type">Type of events handled by this auto-delete record.</param>
            <param name="Level">Level of events handled by this auto-delete record.</param>
            <param name="Marked">Mark status of events handled by this auto-delete record.</param>
            <param name="KeepDays">Number of days to keep events as defined by this record.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.#ctor(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.Int32,System.String[])">
            <summary>
            SQL Server 2005 Event Log Auto Delete record.
            </summary>
            <param name="Type">Type of events handled by this auto-delete record.</param>
            <param name="Level">Level of events handled by this auto-delete record.</param>
            <param name="Marked">Mark status of events handled by this auto-delete record.</param>
            <param name="KeepDays">Number of days to keep events as defined by this record.</param>
            <param name="KeepEventIDs">Event IDs to keep</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.DaysToKeepRecord(System.String,Clayster.Library.EventLog.EventType,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Calculates how long an event record of a given type will be stored in the event log.
            </summary>
            <param name="EventID">Event ID, if any, or the empty string if none.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <returns>Days a record of the given type will be stored.</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.KeepEventIDs">
            <summary>
            Event IDs to keep
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.Type">
            <summary>
            Type of events handled by this auto-delete record.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.Level">
            <summary>
            Level of events handled by this auto-delete record.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.Marked">
            <summary>
            Mark status of events handled by this auto-delete record.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.AutoDeleteRecord.KeepDays">
            <summary>
            Number of days to keep events as defined by this record.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog">
            <summary>
            Event Sink that logs incoming events to Console.Out
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Jonas Larsson
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.#ctor">
            <summary>
            Event Sink that logs incoming events to Console.Out
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Sink that logs incoming events to Console.Out
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.#ctor(System.Int32)">
            <summary>
            Event Sink that logs incoming events to Console.Out
            </summary>
            <param name="Width">Console width</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.SynchObject">
            <summary>
            Synchronization object that can be used to synchronize console output if this event log is used.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleOutEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog">
            <summary>
            Event Log storing events in the current Object Database.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.#ctor">
            <summary>
            Event Log storing events in the current Object Database.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.#ctor(Clayster.Library.EventLog.EventSinks.AutoDeleteRecord[])">
            <summary>
            Event Log storing events in the current Object Database.
            </summary>
            <param name="AutoDeleteRecords">Auto-delete records to use.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Log storing events in the current Object Database.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.QueueAutoDelete">
            <summary>
            Queues a message to the event sink to perform an automatic deletion of old records.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.LoadEventRecord(System.Int64)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.ISearchableEventSink.LoadEventRecord(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.FindEventRecords(System.Int32,System.String[],System.Int64,System.Int64,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="FromDbId">Don't return rows older than this (as an Object Database ObjectID).</param>
            <param name="ToDbId">Don't return rows newer than this (as an Object Database ObjectID).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],System.String[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="DeleteEventIDs">Event IDs to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],Clayster.Library.EventLog.EventSinks.EventObject[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="DeleteEventObjectIDs">Event ID - Object ID pairs to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],System.String[],Clayster.Library.EventLog.EventSinks.EventObject[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="DeleteEventIDs">Event IDs to delete.</param>
            <param name="DeleteEventObjectIDs">Event ID - Object ID pairs to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.CheckForEventIDs(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Checks for eventids in the the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to search for.</param>
            <param name="Level">Levels to search for.</param>
            <param name="Marked">Event marks to search for.</param>
            <param name="From">Don't retrieve records older than this.</param>
            <param name="To">Don't retrieve records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>EventIds found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.DateTime,System.DateTime)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetSubEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="EventId">Event ID of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <param name="MaxRows">The amount of rows to retrieve</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetTypeLevels">
            <summary>
            Retrieves the current typelevels in the database (distinct)
            </summary>
            <returns>List of TypeLevel objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByMonth(Clayster.Library.EventLog.EventType)">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByMonth</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByMonth(Clayster.Library.EventLog.EventType,System.Nullable{Clayster.Library.EventLog.EventLevel})">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByMonth objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByWeek(Clayster.Library.EventLog.EventType)">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByWeek(Clayster.Library.EventLog.EventType,System.Nullable{Clayster.Library.EventLog.EventLevel})">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByDay(Clayster.Library.EventLog.EventType)">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventsByDay(Clayster.Library.EventLog.EventType,System.Nullable{Clayster.Library.EventLog.EventLevel})">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.DaysToKeepRecord(System.String,Clayster.Library.EventLog.EventType,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Calculates how long an event record of a given type will be stored in the event log.
            </summary>
            <param name="EventID">Event ID, if any, or the empty string if none.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <returns>Days a record of the given type will be stored.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.GetEventIDs">
            <summary>
            Retrieves the eventid's in the database
            </summary>
            <returns>Array of Event IDs</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDatabaseEventLog.IsReadable">
            <summary>
            <see cref="P:Clayster.Library.EventLog.EventSinks.EventSink.IsReadable"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent">
            <summary>
            Event class, for storage in the object database.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.#ctor">
            <summary>
            Event class, for storage in the object database.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.#ctor(Clayster.Library.EventLog.Event)">
            <summary>
            Event class, for storage in the object database.
            </summary>
            <param name="Event">Event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.ToEvent">
            <summary>
            Converts the record to a normal Event record.
            </summary>
            <returns>Event record.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Export(System.Xml.XmlWriter,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Write event information as XML to writer
            </summary>
            <param name="w">Writer to use</param>
            <param name="Server">Server string to use</param>
            <param name="IncludeModule">True if module information should be included in export, false otherwise</param>
            <param name="IncludeParameters">True if parameters information should be included in export, false otherwise</param>
            <param name="IncludeStackTrace">True if stack trace information should be included in export, false otherwise</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Level">
            <summary>
            Event Level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Type">
            <summary>
            Event Type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Id">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Message">
            <summary>
            Event Message
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Object">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Subject">
            <summary>
            Subject ID
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.StackTrace">
            <summary>
            Stack Trace
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Module">
            <summary>
            Module
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.P1">
            <summary>
            Parameter 1
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.P2">
            <summary>
            Parameter 2
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.P3">
            <summary>
            Parameter 3
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.P4">
            <summary>
            Parameter 4
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.P5">
            <summary>
            Parameter 5
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.DbId">
            <summary>
            <see cref="P:Clayster.Library.EventLog.IEventRecord.DbId"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.Parameters">
            <summary>
            <see cref="P:Clayster.Library.EventLog.IEventRecord.Parameters"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.ModuleShort">
            <summary>
            Short (one line) version of the Module String.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.ObjectDB.ObjectDBEvent.MessageShort">
            <summary>
            Short (one line) version of the message text.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog">
            <summary>
            Syslog Event Sink using the TCP transport protocol.
            
            Messages are delimited using the CRLF sequence.
            
            RFC:
            http://tools.ietf.org/html/rfc3195
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog">
            <summary>
            Base class for all Syslog Event Sinks.
            
            RFC:
            http://tools.ietf.org/html/rfc3164
            http://tools.ietf.org/html/rfc5424
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.#ctor(System.String,System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Base class for all Syslog Event Sinks.
            
            RFC:
            http://tools.ietf.org/html/rfc3164
            http://tools.ietf.org/html/rfc5424
            </summary>
            <param name="Name">Name of event sink.</param>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            Base class for all Syslog Event Sinks.
            
            RFC:
            http://tools.ietf.org/html/rfc3164
            http://tools.ietf.org/html/rfc5424
            </summary>
            <param name="Name">Name of event sink.</param>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogEventLog.PostMessage(System.Byte[])">
            <summary>
            Posts the Syslog message to the server.
            </summary>
            <param name="Msg">Syslog formatted message.</param>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.DefaultPort">
            <summary>
            Default TCP Port (514).
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Syslog Event Sink using the TCP transport protocol.
            
            Messages are delimited using the CRLF sequence.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,System.String,System.Int32,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Syslog Event Sink using the TCP transport protocol.
            
            Messages are delimited using the CRLF sequence.
            </summary>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Address">Host Name or IP-address of destination.</param>
            <param name="Port">Port number to use. Default is 514.</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Syslog Event Sink using the TCP transport protocol.
            
            Messages are delimited using the CRLF sequence.
            </summary>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Address">Host Name or IP-address of destination.</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.PostMessage(System.Byte[])">
            <summary>
            Posts the Syslog message to the server.
            </summary>
            <param name="Msg">Syslog formatted message.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogTcpEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog">
            <summary>
            Syslog Event Sink using the UDP transport protocol.
            
            RFC:
            http://tools.ietf.org/html/rfc5426
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.DefaultPort">
            <summary>
            Default UDP Port (514).
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Syslog Event Sink using the UDP transport protocol.
            
            RFC:
            http://tools.ietf.org/html/rfc5426
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,System.String,System.Int32,System.Int32,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Syslog Event Sink using the UDP transport protocol.
            
            RFC:
            http://tools.ietf.org/html/rfc5426
            </summary>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Address">Host Name or IP-address of destination.</param>
            <param name="Port">Port number to use. Default is 514.</param>
            <param name="MaxDatagramLength">Maximum datagram length (default=65535).</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,System.String,System.Int32,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Syslog Event Sink using the UDP transport protocol.
            
            RFC:
            http://tools.ietf.org/html/rfc5426
            </summary>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Address">Host Name or IP-address of destination.</param>
            <param name="Port">Port number to use. Default is 514.</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility,System.String,Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion)">
            <summary>
            Syslog Event Sink using the UDP transport protocol.
            
            RFC:
            http://tools.ietf.org/html/rfc5426
            </summary>
            <param name="ApplicationName">Application Name (US ASCII characters only.)</param>
            <param name="Facility">Facility code to use when logging events to Syslog.</param>
            <param name="Address">Host Name or IP-address of destination.</param>
            <param name="Version">Syslog message format version</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Syslog.SyslogUdpEventLog.PostMessage(System.Byte[])">
            <summary>
            Posts the Syslog message to the server.
            </summary>
            <param name="Msg">Syslog formatted message.</param>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventByEventId">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Message.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByEventId.EventId">
            <summary>
            EventId
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByEventId.EventName">
            <summary>
            EventName
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByEventId.ObjectId">
            <summary>
            ObjectId
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByEventId.ObjectName">
            <summary>
            ObjectName
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByEventId.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventByMessage">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Message.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByMessage.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByMessage.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByMessage.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventByMessage.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventIdItem">
            <summary>
            Class containing eventid record
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Stellan Bergström, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventIdItem.#ctor(System.Int32,System.String)">
            <summary>
            Class containing eventid record
            </summary>
            <param name="Id">Id</param>
            <param name="Name">Name</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventIdItem.Id">
            <summary>
            Id, if available in event sink.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventIdItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventObject">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Message.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström, Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventObject.EventId">
            <summary>
            EventId
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventObject.ObjectId">
            <summary>
            ObjectId
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility">
            <summary>
            Syslog Message Facilities
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.KernelMessages">
            <summary>
            kernel messages
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.UserLevelMessages">
            <summary>
            user-level messages
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.MailSystem">
            <summary>
            mail system
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.SystemDaemons">
            <summary>
            system daemons
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.SecurityAuthorizationMessages">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.MessagesGeneratedInternallyBySyslogd">
            <summary>
            messages generated internally by syslogd
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LinePrinterSubsystem">
            <summary>
            line printer subsystem
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.NetworkNewsSubsystem">
            <summary>
            network news subsystem
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.UucpSubsystem">
            <summary>
            UUCP subsystem
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.ClockDaemon">
            <summary>
            clock daemon
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.SecurityAuthorizationMessages2">
            <summary>
            security/authorization messages
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.FtpDaemon">
            <summary>
            FTP daemon
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.NtpSubsystem">
            <summary>
            NTP subsystem
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LogAudit">
            <summary>
            log audit
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LogAlert">
            <summary>
            log alert
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.ClockDaemon2">
            <summary>
            clock daemon (note 2)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse0">
            <summary>
            local use 0  (local0)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse1">
            <summary>
            local use 1  (local1)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse2">
            <summary>
            local use 2  (local2)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse3">
            <summary>
            local use 3  (local3)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse4">
            <summary>
            local use 4  (local4)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse5">
            <summary>
            local use 5  (local5)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse6">
            <summary>
            local use 6  (local6)
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogFacility.LocalUse7">
            <summary>
            local use 7  (local7)
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority">
            <summary>
            Syslog message priorities
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Emergency">
            <summary>
            system is unusable
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Alert">
            <summary>
            action must be taken immediately
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Critical">
            <summary>
            critical conditions
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Error">
            <summary>
            error conditions
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Warning">
            <summary>
            warning conditions
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Notice">
            <summary>
            normal but significant condition
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Informational">
            <summary>
            informational messages
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogPriority.Debug">
            <summary>
            debug-level messages
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion">
            <summary>
            Syslog message format version
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion.Rfc3164">
            <summary>
            According to RFC 3164: http://tools.ietf.org/html/rfc3164
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Syslog.SyslogVersion.Rfc5424">
            <summary>
            According to RFC 5424: http://tools.ietf.org/html/rfc5424
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.IEventFilter">
            <summary>
            Interface for event filters.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.IEventFilter.Passes(Clayster.Library.EventLog.Event)">
            <summary>
            If the event passes the filter.
            </summary>
            <param name="Event">Event</param>
            <returns>If the event passes the filter.</returns>
        </member>
        <member name="T:Clayster.Library.EventLog.Monitors.MemoryMonitor">
            <summary>
            Monitor checking available physical memory. Generates warning messages or error messages
            if the available memory goes below certain limiting values.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.EventLog.Monitors.Monitor">
            <summary>
            Base class for all Monitors.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.Monitor.#ctor(System.String)">
            <summary>
            Base class for all Monitors.
            </summary>
            <param name="Name">Name of the monitor</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.Monitor.NextCheck(System.DateTime)">
            <summary>
            Calculates the time of the next time the check is to be performed.
            </summary>
            <param name="LastCheck">Last time the check was performed, or DateTime.MinValue if 
            none has been performed.</param>
            <returns>Timepoint when the next check is to be performed.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.Monitor.PerformCheck">
            <summary>
            Store event according to rules setup in the event sink.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.Monitor.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Monitors.Monitor.Name">
            <summary>
            Name of the event sink.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Monitors.Monitor.Id">
            <summary>
            ID of the event sink. (Unpersisted GUID)
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.MemoryMonitor.#ctor(System.Xml.XmlElement)">
            <summary>
            Monitor checking available physical memory. Generates warning messages or error messages
            if the available memory goes below certain limiting values.
            </summary>
            <param name="E">XML Element containing all inforamtion about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.MemoryMonitor.#ctor(System.Int32,System.Int32)">
            <summary>
            Monitor checking available physical memory. Generates warning messages or error messages
            if the available memory goes below certain limiting values.
            </summary>
            <param name="WarningLevelMBytesFree">Free Memory Limit (MBytes) before a warning state is entered.</param>
            <param name="ErrorLevelMBytesFree">Free Memory Limit (MBytes) before an error state is entered.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.MemoryMonitor.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Monitor checking available physical memory. Generates warning messages or error messages
            if the available memory goes below certain limiting values.
            </summary>
            <param name="WarningLevelMBytesFree">Free Memory Limit (MBytes) before a warning state is entered.</param>
            <param name="ErrorLevelMBytesFree">Free Memory Limit (MBytes) before an error state is entered.</param>
            <param name="Machine">Machine to monitor. "." = local machine.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.MemoryMonitor.NextCheck(System.DateTime)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.NextCheck(System.DateTime)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.MemoryMonitor.PerformCheck">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.PerformCheck"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.Monitors.MonitorState">
            <summary>
            CPU Monitor State.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Monitors.MonitorState.NormalState">
            <summary>
            Normal state.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Monitors.MonitorState.WarningState">
            <summary>
            Warning State.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Monitors.MonitorState.ErrorState">
            <summary>
            Error State.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.Monitors.CpuMonitor">
            <summary>
            Monitor checking CPU performance. Generates warning messages or error messages
            if the CPU usage exceeds certain limiting values during given time periods.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.#ctor(System.Xml.XmlElement)">
            <summary>
            Monitor checking CPU performance. Generates warning messages or error messages
            if the CPU usage exceeds certain limiting values during given time periods.
            </summary>
            <param name="E">XML Element containing all inforamtion about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Monitor checking CPU performance. Generates warning messages or error messages
            if the CPU usage exceeds certain limiting values during given time periods.
            </summary>
            <param name="WarningLevel">CPU Activity (%) limit value for warnings.</param>
            <param name="WarningLevelMinutes">Number of minutes above <paramref name="WarningLevel"/>
            before logging a warning.</param>
            <param name="ErrorLevel">CPU Activity (%) limit value for errors.</param>
            <param name="ErrorLevelMinutes">Number of minutes above <paramref name="ErrorLevel"/>
            before logging an error.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Monitor checking CPU performance. Generates warning messages or error messages
            if the CPU usage exceeds certain limiting values during given time periods.
            </summary>
            <param name="WarningLevel">CPU Activity (%) limit value for warnings.</param>
            <param name="WarningLevelMinutes">Number of minutes above <paramref name="WarningLevel"/>
            before logging a warning.</param>
            <param name="ErrorLevel">CPU Activity (%) limit value for errors.</param>
            <param name="ErrorLevelMinutes">Number of minutes above <paramref name="ErrorLevel"/>
            before logging an error.</param>
            <param name="Machine">Machine to monitor. "." = local machine.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.NextCheck(System.DateTime)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.NextCheck(System.DateTime)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.CpuMonitor.PerformCheck">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.PerformCheck"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.Monitors.HardDriveMonitor">
            <summary>
            Monitor checking Free Space on a Disk Drive. Generates warning messages if the free space 
            goes below a certain limit.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.HardDriveMonitor.#ctor(System.String,System.Int32)">
            <summary>
            Monitor checking Free Space on a Disk Drive. Generates warning messages if the free space 
            goes below a certain limit.
            </summary>
            <param name="Drive">Drive to monitor</param>
            <param name="MinFreeMemGB">Free space threshold</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.HardDriveMonitor.#ctor(System.Xml.XmlElement)">
            <summary>
            Monitor checking Free Space on a Disk Drive. Generates warning messages if the free space 
            goes below a certain limit.
            </summary>
            <param name="E">XML Element containing all inforamtion about the monitor.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.HardDriveMonitor.NextCheck(System.DateTime)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.NextCheck(System.DateTime)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Monitors.HardDriveMonitor.PerformCheck">
            <summary>
            <see cref="M:Clayster.Library.EventLog.Monitors.Monitor.PerformCheck"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog">
            <summary>
            Event Sink saving incoming events to HTML files in a specified folder.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.#ctor(System.String)">
            <summary>
            Event Sink saving incoming events to HTML files in a specified folder.
            </summary>
            <param name="BasePath">Base path of event files.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.#ctor(System.String,System.Int32)">
            <summary>
            Event Sink saving incoming events to HTML files in a specified folder.
            </summary>
            <param name="BasePath">Base path of event files.</param>
            <param name="KeepDays">Keep files this number of days.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Sink saving incoming events to HTML files in a specified folder.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.HtmlFilesEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog">
            <summary>
            An event sink that only stores the Events temporary in memory. It's designed
            to be used for unit tests that needs to verify that no Events have been logged.
            Use HasLoggedErrorOrException to verify if any Error or Exceptions has been thrown
            Use HasLoggedNonInfo to also include warnings.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Christian Falk
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.#ctor">
            <summary>
            An event sink that only stores the Events temporary in memory. It's designed
            to be used for unit tests that needs to verify that no Events have been logged.
            Use HasLoggedErrorOrException to verify if any Error or Exceptions has been thrown
            Use HasLoggedNonInfo to also include warnings.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.#ctor(System.Int32)">
            <summary>
            An event sink that only stores the Events temporary in memory. It's designed
            to be used for unit tests that needs to verify that no Events have been logged.
            Use HasLoggedErrorOrException to verify if any Error or Exceptions has been thrown
            Use HasLoggedNonInfo to also include warnings.
            </summary>
            <param name="MaxCount">Maximum number of events in memory at the same time.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            An event sink that only stores the Events temporary in memory. It's designed
            to be used for unit tests that needs to verify that no Events have been logged.
            Use HasLoggedErrorOrException to verify if any Error or Exceptions has been thrown
            Use HasLoggedNonInfo to also include warnings.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.GetEventList">
            <summary>
            Returns a list of events currently held in memory.
            </summary>
            <returns>List of events.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.Clear">
            <summary>
            Clears the list of in-memory events.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.EventCount">
            <summary>
            Number of events in memory
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.MaxCount">
            <summary>
            Maximum number of events in memory
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.HasLoggedErrorOrException">
            <summary>
            If any errors or exceptions have been logged.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.HasLoggedNonInfo">
            <summary>
            Has caught any non-informative events.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.FirstErrorOrException">
            <summary>
            Gets the first seen event that is error or exception, or null if no such event has been cought.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.MemoryEventLog.FirstNonInfo">
            <summary>
            Gets the first seen event that is not an informative event, or null if no such event has been cought.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog">
            <summary>
            Outputs all event logs to a text writer stream. This might be
            Console.Out or Console.Error.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Christian Falk
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog.#ctor(System.String,System.IO.TextWriter)">
            <summary>
            Outputs all event logs to a text writer stream. This might be
            Console.Out or Console.Error.
            </summary>
            <param name="name">Name of event sink</param>
            <param name="writer">Text Writer object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.TextWriterEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.ConsoleErrorEventLog">
            <summary>
            Outputs all event logs to a text writer stream. This might be
            Console.Out or Console.Error.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Christian Falk, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleErrorEventLog.#ctor">
            <summary>
            Outputs all event logs to a text writer stream. This might be
            Console.Out or Console.Error.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.ConsoleErrorEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Outputs all event logs to a text writer stream. This might be
            Console.Out or Console.Error.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.TypeLevel">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.TypeLevel.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level.
            </summary>
            <param name="Type">Type</param>
            <param name="Level">Level</param>
            <param name="Amount">Amount</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.TypeLevel.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.TypeLevel.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.TypeLevel.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventsByMonth">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year and month.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventsByMonth.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year and month.
            </summary>
            <param name="Month">Month</param>
            <param name="Year">Year</param>
            <param name="Amount">Amount</param>
            <param name="Type">Type</param>
            <param name="Level">Level</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByMonth.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByMonth.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByMonth.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByMonth.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByMonth.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventsByWeek">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year and week.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventsByWeek.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year and week.
            </summary>
            <param name="Week">Week</param>
            <param name="Year">Year</param>
            <param name="Amount">Amount</param>
            <param name="Level">Level</param>
            <param name="Type">Type</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByWeek.Week">
            <summary>
            Weel
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByWeek.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByWeek.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByWeek.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByWeek.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.EventsByDay">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year, month and day.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.EventsByDay.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class containing event log statistics for a combination of Event Type and
            Event Level by year, month and day.
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="Amount">Amount</param>
            <param name="Level">Level</param>
            <param name="Type">Type</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.EventsByDay.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog">
            <summary>
            Event sink that stores incoming events in XML Files.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.#ctor(System.String)">
            <summary>
            Event sink that stores incoming events in XML Files.
            </summary>
            <param name="BasePath">Base path of XML Files.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.#ctor(System.String,System.Int32)">
            <summary>
            Event sink that stores incoming events in XML Files.
            </summary>
            <param name="BasePath">Base path of XML Files.</param>
            <param name="KeepDays">Keep XML Files this number of days.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event sink that stores incoming events in XML Files.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Files.XmlFilesEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord">
            <summary>
            Represents an event read from an event log.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.#ctor(Clayster.Library.Language.Language,System.Int64,System.String,System.DateTime,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventType,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Represents an event read from an event log.
            </summary>
            <param name="Language">Language to use for localization purposes.</param>
            <param name="DbId">Database ID of the record.</param>
            <param name="EventId">Event ID</param>
            <param name="Timestamp">Timestamp of the event.</param>
            <param name="Level">Event level.</param>
            <param name="Type">Event type.</param>
            <param name="Message">Event message.</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            Represents an event read from an event log.
            </summary>
            <param name="E">XML Element containing all information about the record.</param>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.Language">
            <summary>
            Language used for localization purposes.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.DbId">
            <summary>
            Database ID of the event record.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.TypeLocalized">
            <summary>
            A localized string of the event type.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.LevelLocalized">
            <summary>
            Localized string string of the event level.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.DateAndHour">
            <summary>
            Returns a string containing the date and hour of the event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsException">
            <summary>
            True iff the event record is an exception.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsError">
            <summary>
            True iff the event record is an error.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsWarning">
            <summary>
            True iff the event record is a warning.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsInformation">
            <summary>
            True iff the event record is an informative event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsMajor">
            <summary>
            True iff the event record is a major event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsMedium">
            <summary>
            True iff the event record is a medium event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.IsMinor">
            <summary>
            True iff the event record is a minor event.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.EventRecord.MessageFirstRowOnly">
            <summary>
            The first row of the message text.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog">
            <summary>
            Event Log storing events in an SQL Server 2005 (or compatible) database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptLatestResourceName">
            <summary>
            Resource name to the SQL script used to create the latest version of the database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptUpdateV2ResourceName">
            <summary>
            Resource name to the SQL script used to update a v1 database schema to a v2 database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptUpdateV3ResourceName">
            <summary>
            Resource name to the SQL script used to update a v2 database schema to a v3 database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptUpdateV4ResourceName">
            <summary>
            Resource name to the SQL script used to update a v3 database schema to a v4 database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptUpdateV5ResourceName">
            <summary>
            Resource name to the SQL script used to update a v4 database schema to a v5 database schema.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.SqlScriptUpdateV6ResourceName">
            <summary>
            Resource name to the SQL script used to update a v4 database schema to a v6 database schema.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.#ctor(Clayster.Library.Data.IDataLayer)">
            <summary>
            Event Log storing events in an SQL Server 2005 (or compatible) database.
            </summary>
            <param name="DB">Data layer maintaining connections with the database.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.#ctor(Clayster.Library.Data.IDataLayer,Clayster.Library.EventLog.EventSinks.AutoDeleteRecord[])">
            <summary>
            Event Log storing events in an SQL Server 2005 (or compatible) database.
            </summary>
            <param name="DB">Data layer maintaining connections with the database.</param>
            <param name="AutoDeleteRecords">Auto-delete records to use.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Log storing events in an SQL Server 2005 (or compatible) database.
            </summary>
            <param name="E">XML Element containing all information about the event sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.QueueAutoDelete">
            <summary>
            Queues a message to the event sink to perform an automatic deletion of old records.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.LoadEventRecord(System.Int64,Clayster.Library.Language.Language)">
            <summary>
            Loads an event record from the database.
            </summary>
            <param name="ID">Database ID of the record.</param>
            <param name="Language">Language to use for localization.</param>
            <returns>Event Record</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.LoadEventRecord(System.Int64)">
            <summary>
            Loads an event record from the database.
            </summary>
            <param name="ID">Database ID of the record.</param>
            <returns>Event Record</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">EventIDs used for matching.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="IncludeExceptions">If Exceptions should be included (true) or not (false).</param>
            <param name="IncludeErrors">If Errors should be included (true) or not (false).</param>
            <param name="IncludeWarnings">If Warnings should be included (true) or not (false).</param>
            <param name="IncludeInformation">If Inforative events should be included (true) or not (false).</param>
            <param name="IncludeMajor">If Major events should be included (true) or not (false).</param>
            <param name="IncludeMedium">If Medium events should be included (true) or not (false).</param>
            <param name="IncludeMinor">If Minor events should be included (true) or not (false).</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Parameters">Parameters used for matching</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.String[],System.DateTime,System.DateTime,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="From">Don't return rows older than this.</param>
            <param name="To">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.FindEventRecords(System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String,System.String,System.String,Clayster.Library.Language.Language)">
            <summary>
            Searches the database for event records matching certain search criteria.
            </summary>
            <param name="MaxRows">Maximum number of rows to return.</param>
            <param name="EventIDs">Event IDs to search for.</param>
            <param name="FromDbId">Don't return rows older than this.</param>
            <param name="ToDbId">Don't return rows newer than this.</param>
            <param name="MessageMask">A search string used for matching against message texts. Wildcards (*) can be used.</param>
            <param name="ObjectMask">A search string used for matching against objects (acted upon). Wildcards (*) can be used.</param>
            <param name="SubjectMask">A search string used for matching against subjects (acting upon). Wildcards (*) can be used.</param>
            <param name="ModuleMask">A search string used for matching against module texts. Wildcards (*) can be used.</param>
            <param name="Language">Language to use for localization purposes.</param>
            <returns>List of event records found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.DateTimeToSQL(System.DateTime)">
            <summary>
            Converts a timepoint to s string that can be used in SQL Statements.
            </summary>
            <param name="Timepoint">DateTime value.</param>
            <returns>String to be used in SQL Statements.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.DateTimeToSQL(System.Text.StringBuilder,System.DateTime)">
            <summary>
            Converts a timepoint to s string that can be used in SQL Statements, and
            outputs it to a StringBuilder object.
            </summary>
            <param name="sb">StringBuilder to use for outputting the SQL String representation of
            <paramref name="Timepoint"/>Time point to convert</param>
            <param name="Timepoint">DateTime value.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[],Clayster.Library.EventLog.EventSinks.EventObject[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <param name="EventObjects">Combination of eventid and objectid to delete.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.DeleteRecords(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Deletes event records from the detabase using certain search criteria.
            </summary>
            <param name="Type">Types to delete.</param>
            <param name="Level">Levels to delete.</param>
            <param name="Marked">Event marks to delete.</param>
            <param name="From">Don't delete records older than this.</param>
            <param name="To">Don't delete records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>Number of records deleted.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.CheckForEventIDs(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,Clayster.Library.EventLog.EventSinks.DeleteEventMark,System.DateTime,System.DateTime,System.String[])">
            <summary>
            Checks for eventids in the the database using certain search criteria.
            </summary>
            <param name="Type">Types to search for.</param>
            <param name="Level">Levels to search for.</param>
            <param name="Marked">Event marks to search for.</param>
            <param name="From">Don't retrieve records older than this.</param>
            <param name="To">Don't retrieve records newer than this.</param>
            <param name="KeepEventIDs">Event IDs to keep.</param>
            <returns>EventIds found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.DateTime,System.DateTime)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetSubEventsByEventId(Clayster.Library.EventLog.EventSinks.DeleteEventType,Clayster.Library.EventLog.EventSinks.DeleteEventLevel,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves events by type, level and grouped by event id
            </summary>
            <param name="Type">Types of event</param>
            <param name="Level">Levels of event</param>
            <param name="EventId">EventId of event</param>
            <param name="From">Date to delete from</param>
            <param name="To">Date to delete to</param>
            <param name="MaxRows">The amount of rows to retrieve</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetTypeLevels">
            <summary>
            Retrieves the current typelevels in the database (distinct)
            </summary>
            <returns>List of TypeLevel objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByMonth(System.Int32)">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByMonth</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByMonth(System.Int32,System.Int32)">
            <summary>
            Retrieves all events by type and grouped by month
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByMonth objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByWeek(System.Int32)">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByWeek(System.Int32,System.Int32)">
            <summary>
            Retrieves events by type and grouped by week
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByWeek objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByDay(System.Int32)">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventsByDay(System.Int32,System.Int32)">
            <summary>
            Retrieves events by type and grouped by day
            </summary>
            <param name="Type">Type of event</param>
            <param name="Level">Level of event</param>
            <returns>List with EventsByDay objects</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.DaysToKeepRecord(System.String,Clayster.Library.EventLog.EventType,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Calculates how long an event record of a given type will be stored in the event log.
            </summary>
            <param name="EventID">Event ID, if any, or the empty string if none.</param>
            <param name="Type">Event Type.</param>
            <param name="Level">Event Level.</param>
            <returns>Days a record of the given type will be stored.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.GetEventIDs">
            <summary>
            Retrieves the eventid's in the database
            </summary>
            <returns>List of EventIdItem objects</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.MsSqlServer.SqlServer2005EventLog.IsReadable">
            <summary>
            <see cref="P:Clayster.Library.EventLog.EventSinks.EventSink.IsReadable"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel">
            <summary>
            Enumeration specifying from which event level events should be stored in the Windows Event Log.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel.Minor">
            <summary>
            Store Minor, Medium and Major events.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel.Medium">
            <summary>
            Store Medium and Major events.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel.Major">
            <summary>
            Store Major events only.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel.None">
            <summary>
            Do not store any events.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog">
            <summary>
            Event Sink storing incoming events in the Windows Event Log. Before storing the events
            they are filtered according rules set in the object.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.#ctor(System.String,Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel,Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel,Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel,Clayster.Library.EventLog.EventSinks.Misc.FromEventLevel)">
            <summary>
            Event Sink storing incoming events in the Windows Event Log. Before storing the events
            they are filtered according rules set in the object.
            </summary>
            <param name="ApplicationName">Application name.</param>
            <param name="Exceptions">Which events of type Exception that should be stored.</param>
            <param name="Errors">Which events of type Error that should be stored.</param>
            <param name="Warnings">Which events of type Warning that should be stored.</param>
            <param name="Information">Which events of type Informaion that should be stored.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            Event Sink storing incoming events in the Windows Event Log. Before storing the events
            they are filtered according rules set in the object.
            </summary>
            <param name="E">XML Element containing all information.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.EventSinks.Misc.WindowsEventLog.ApplicationName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.QueueType">
            <summary>
            Type of MSMQ Queue
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.QueueType.PublicQueue">
            <summary>
            Public MSMQ Queue
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.QueueType.PrivateQueue">
            <summary>
            Private MSMQ Queue
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.EventSinks.Misc.QueueType.JournalQueue">
            <summary>
            Journal MSMQ Queue
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog">
            <summary>
            <para>Event Sink that stores incoming events as XML messages and sends them
            to an MSMQ Queue.</para>
            <para>Use Clayster.Library.EventLog.MsmqClient.exe (for example) to display such messages on the other machine.</para>
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.#ctor(Clayster.Library.EventLog.EventSinks.Misc.QueueType,System.String,System.String)">
            <summary>
            <para>Event Sink that stores incoming events as XML messages and sends them
            to an MSMQ Queue.</para>
            <para>Use Clayster.Library.EventLog.MsmqClient.exe (for example) to display such messages on the other machine.</para>
            </summary>
            <param name="Type">MSMQ Queue Type</param>
            <param name="QueueName">Name of Queue</param>
            <param name="MachineName">Name of the machine hosting the queue.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.#ctor(Clayster.Library.EventLog.EventSinks.Misc.QueueType,System.String)">
            <summary>
            <para>Event Sink that stores incoming events as XML messages and sends them
            to an MSMQ Queue.</para>
            <para>Use Clayster.Library.EventLog.MsmqClient.exe (for example) to display such messages on the other machine.</para>
            </summary>
            <param name="Type">MSMQ Queue Type</param>
            <param name="QueueName">Name of Queue</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            <para>Event Sink that stores incoming events as XML messages and sends them
            to an MSMQ Queue.</para>
            <para>Use Clayster.Library.EventLog.MsmqClient.exe (for example) to display such messages on the other machine.</para>
            </summary>
            <param name="E">XML Element contining all information about the sink.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlMsmqEventLog.Idle">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Idle"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog">
            <summary>
            <para>Event sink that forms XML messages of incoming events and sends them via TCP Sockets to another
            machine.</para>
            <para>Use Clayster.Library.EventLog.MsmqClient.exe (for example) to display such messages on the other machine.</para>
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.#ctor(System.String,System.Int32)">
            <summary>
            <para>Event sink that forms XML messages of incoming events and sends them via TCP Sockets to another
            machine.</para>
            </summary>
            <param name="Address">IP Addres or host name.</param>
            <param name="Port">Port number</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.#ctor(System.Int32)">
            <summary>
            <para>Event sink that forms XML messages of incoming events and sends them via TCP Sockets to another
            machine.</para>
            The address is assumed to be "127.0.0.1".
            </summary>
            <param name="Port">Port number</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.#ctor(System.Xml.XmlElement)">
            <summary>
            XML Element containing all information about the event sink.
            </summary>
            <param name="E">XML Element</param>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.EventSinks.Misc.XmlTcpEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.Log">
            <summary>
            Static class used for logging events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.SchemaResourceName">
            <summary>
            Schema resource name.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.XmlNamespace">
            <summary>
            XML Namespace
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.DefaultExceptionLevel">
            <summary>
            Default Exception Level. If an Event Level is not provided when logging an exception, this
            event level will be used.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.DefaultErrorLevel">
            <summary>
            Default Error Level. If an Event Level is not provided when logging an error, this
            event level will be used.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.DefaultWarningLevel">
            <summary>
            Default Warning Level. If an Event Level is not provided when logging a warning, this
            event level will be used.
            </summary>
        </member>
        <member name="F:Clayster.Library.EventLog.Log.DefaultInformationLevel">
            <summary>
            Default Information Level. If an Event Level is not provided when logging an informative event, this
            event level will be used.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.RegisterEventFilter(Clayster.Library.EventLog.IEventFilter,System.Boolean)">
            <summary>
            Registers an Event Filter. This interface will be used to filter logged events, to avoid spamming event sinks.
            </summary>
            <param name="EventFilter">Event Filter</param>
            <param name="Lock">If the Event Filter should be locked, and not be able to be changed for the rest of the run-time of the application.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.WillLog(Clayster.Library.EventLog.Event)">
            <summary>
            Checks if an event will be logged to event sinks, and is not filtered away by the global event filter.
            </summary>
            <param name="Event">Event</param>
            <returns>If it will be logged to event sinks, if logged.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Queue(Clayster.Library.EventLog.Event)">
            <summary>
            Queues an event to be logged by registered event sinks.
            </summary>
            <param name="Event">Event to be queued.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Flush">
            <summary>
            Orders all registered event sinks to flush their queues.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Terminate">
            <summary>
            Terminates all event sinks. The method waits for all sinks to terminate
            properly before returning.
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Terminate(System.Boolean)">
            <summary>
            Terminates all event sinks.
            </summary>
            <param name="WaitUntilTerminated">If true, the method waits for all sinks
            to terminate properly. If false it returns before checking that the sinks
            terminate.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.SetInstance(System.String)">
            <summary>
            Sets the server instance. Used by performance counters.
            </summary>
            <param name="ProgramDataFolder">Program Data Folder</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.SetInstance(System.String,System.String)">
            <summary>
            Sets the server instance. Used by performance counters.
            </summary>
            <param name="ProgramDataFolder">Program Data Folder</param>
            <param name="ClusteredServer">Optional parameter representing the name of the current server
            in a cluster. Can be the empty string, if not clustered.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(System.String,System.String,System.String)">
            <summary>
            Registers event sinks with the event log. It does this by loading an XML File
            (of schema namespace http://clayster.com/schema/EventLogs/v1.xsd) containing event sink
            definitions.
            </summary>
            <param name="XmlDefinitionFileName">File name of the XML File to load.</param>
            <param name="ProgramDataFolder">Program Data folder.</param>
            <param name="BasePath">BasePath parameter. All occurrences of %BasePath% in the XML
            File is replaced with this parameter value.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(System.Xml.XmlDocument,System.String)">
            <summary>
            Registers event sinks with the event log. It does this by loading an XML File
            (of schema namespace http://clayster.com/schema/EventLogs/v1.xsd) containing event sink
            definitions.
            </summary>
            <param name="Configuration">XML Document defining which event sinks to register. The
            XML Document should be defined using the Schema namespace http://clayster.com/schema/EventLogs/v1.xsd</param>
            <param name="BasePath">BasePath parameter. All occurrences of %BasePath% in the XML
            File is replaced with this parameter value.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(System.Xml.XmlDocument)">
            <summary>
            Registers event sinks with the event log. It does this by loading an XML File
            (of schema namespace http://clayster.com/schema/EventLogs/v1.xsd) containing event sink
            definitions.
            </summary>
            <param name="Configuration">XML Document defining which event sinks to register. The
            XML Document should be defined using the Schema namespace http://clayster.com/schema/EventLogs/v1.xsd</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(Clayster.Library.EventLog.EventSinks.EventSink)">
            <summary>
            Registers an event sink with the event log. The event sink is logged to level 0
            (the first level).
            </summary>
            <param name="Sink">Event Sink to register.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(Clayster.Library.EventLog.EventSinks.EventSink,System.Int32)">
            <summary>
            Registers an event sink with the event log.
            </summary>
            <param name="Sink">Event Sink to register.</param>
            <param name="Level">Level to log the event sink to. The first level is level 0. If all event sinks fail
            at level 0, events are sent to event sinks of level 1. If all fail on level 1, events are sent to level 2, 
            and so on. Level (N+1) acts as a backup level if level N fails.
            </param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Register(Clayster.Library.EventLog.Monitors.Monitor)">
            <summary>
            Registers a monitor.
            </summary>
            <param name="Monitor">Monitor to register.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.NextExecution(Clayster.Library.EventLog.Monitors.Monitor)">
            <summary>
            Returns the time of next execution of the monitor.
            </summary>
            <param name="Monitor">Monitor to check.</param>
            <returns>Next time of execution, or <see cref="F:System.DateTime.MinValue"/> if none.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Unregister(Clayster.Library.EventLog.EventSinks.EventSink)">
            <summary>
            Unregisters an event sink from the event log.
            </summary>
            <param name="Sink">Sink to remove.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Unregister(Clayster.Library.EventLog.Monitors.Monitor)">
            <summary>
            Unregisters a monitor from the event log.
            </summary>
            <param name="Monitor">Monitor to remove.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.GetExceptionMessage(System.Exception)">
            <summary>
            Creates an exception message from an exception object. The message
            will contain message texts from inner exceptions.
            </summary>
            <param name="ex">Exception object</param>
            <returns>Message text</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.GetExceptionStackTrace(System.Exception)">
            <summary>
            Creates a string containing Stack Traces for an Exception object
            and its inner exceptions.
            </summary>
            <param name="ex">Exception object.</param>
            <returns>Stack Traces of the exception and its inner exceptions.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.GetStackTrace">
            <summary>
            Gets the stack trace of the current call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.CheckObjectName(System.String)">
            <summary>
            Checks if name is suitable for logging used as an Object or Subject name. 
            
            GUIDs will be replaced by "[GUID]"
            Numbers will be replaced by "[NUM]"
            </summary>
            <param name="Name">Name to check</param>
            <returns>Object Name with some restrictions:
            
            GUIDs will be replaced by "[GUID]"
            Numbers will be replaced by "[NUM]"
            </returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.CheckParameterValues(System.String[])">
            <summary>
            Checks if parameter values are suitable for logging. 
            
            GUIDs will be replaced by "[GUID]"
            </summary>
            <param name="Values">Values to check</param>
            <returns>Parameter values with some restrictions:
            
            GUIDs will be replaced by "[GUID]"
            </returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception)">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to store with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.Exception,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="ex">Exception object</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Exception(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an exception
            </summary>
            <param name="Id">Event ID of the event</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to store with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.Exception)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="causingException">Exception causing the error.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.Exception,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="causingException">Exception causing the error.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Error(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Warning(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an warning message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to be logged with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String)">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to log with the event.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.Information(System.String,System.String,Clayster.Library.EventLog.EventLevel,System.String,System.String,System.String,System.String,System.String[],Clayster.Library.EventLog.EventCallback,System.Object[])">
            <summary>
            Logs an informative message
            </summary>
            <param name="Id">Event ID</param>
            <param name="Message">Message text</param>
            <param name="Level">Event Level</param>
            <param name="Object">Object</param>
            <param name="Subject">Subject</param>
            <param name="Module">Module</param>
            <param name="StackTrace">Stack Trace</param>
            <param name="Parameters">Parameters to log with the event.</param>
            <param name="Callback">Callback method. Is called when the event has been processed by an event sink.</param>
            <param name="CallbackParameters">Callback method parametrs. These parameters are passed on to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.GetFirstSearchableEventSink">
            <summary>
            Gets the first searchable event sink registered.
            </summary>
            <returns>Searchable event sink, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.EventLog.Log.GetAllSearchableEventSinks">
            <summary>
            Gets all available searchable event sinks registered.
            </summary>
            <returns>Registered searchable event sinks</returns>
        </member>
        <member name="P:Clayster.Library.EventLog.Log.Instance">
            <summary>
            Server instance.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Log.DefaultSubject">
            <summary>
            Default subject, if none provided.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Log.Sinks">
            <summary>
            Registered event sinks.
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.Log.Monitors">
            <summary>
            Registered monitors.
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.ScriptExtensions.LogInformation">
            <summary>
            Logs an information message.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogInformation.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Logs an information message.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogInformation.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogInformation.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogInformation.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.ScriptExtensions.LogInformation.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.ScriptExtensions.LogWarning">
            <summary>
            Logs a warning message.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogWarning.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogWarning.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogWarning.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogWarning.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.ScriptExtensions.LogWarning.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.ScriptExtensions.LogError">
            <summary>
            Logs an error message.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogError.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Logs an error message.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogError.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogError.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogError.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.ScriptExtensions.LogError.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.EventLog.ScriptExtensions.LogException">
            <summary>
            Logs an exception message.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogException.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Logs an exception message.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogException.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogException.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.EventLog.ScriptExtensions.LogException.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.EventLog.ScriptExtensions.LogException.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
    </members>
</doc>
