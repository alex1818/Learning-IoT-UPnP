<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clayster.Library.Internet</name>
    </assembly>
    <members>
        <member name="T:Clayster.Library.Internet.AsyncSocketClientReceiveBinary">
            <summary>
            Delegate used for events raised when binary data has been received.
            </summary>
            <param name="source">Client receiving data.</param>
            <param name="Buffer">Buffer containing received data.</param>
            <param name="NrRead">Number of bytes received.</param>
        </member>
        <member name="T:Clayster.Library.Internet.AsyncSocketClientClosed">
            <summary>
            Delegate used for events raised when client connections have been closed.
            </summary>
            <param name="source">Client connection being closed.</param>
            <param name="byRemoteHost">If the socket was closed by the remote host or network.</param>
        </member>
        <member name="T:Clayster.Library.Internet.AsyncSocketClient">
            <summary>
            A binary socket client that wraps a network socket. It provides functions to asynchronically 
            send and receive binary data over the network. To send data, use the Send() function. To receive
            data, override the ReceiveBinary() function, or listen to the OnReceiveBinary event. Other crucial functions
            are the Open() and Close() function, the virtual function SocketClosed() and the OnClosed event.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Christian Falk, Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.ILineListenable">
            <summary>
            Interface for classes that can be listened to.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Registers a Line Listener with the object.
            </summary>
            <param name="Listener">Line Listener to register</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Unregisters a Line Listener from the object.
            </summary>
            <param name="Listener">Line Listener to remove</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)">
            <summary>
            Records a message to registered line listeners.
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)">
            <summary>
            Records an error message to registered line listeners.
            </summary>
            <param name="Message">Error message</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)">
            <summary>
            Records a written row to registered line listeners.
            </summary>
            <param name="Id">ID Attached to the row.</param>
            <param name="Row">Text row.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)">
            <summary>
            Records read row to registered line listeners.
            </summary>
            <param name="Id">ID Attached to the row.</param>
            <param name="Row">Text row.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            Records data written to registered line listeners.
            </summary>
            <param name="Id">ID Attached to the data.</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            Records data read to registered line listeners.
            </summary>
            <param name="Id">ID Attached to the data.</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners">
            <summary>
            If line listeners are registered.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new client.
            </summary>
            <param name="Address">Initial address.</param>
            <param name="Port">Initial port.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a new client.
            </summary>
            <param name="Address">Initial address.</param>
            <param name="Port">Initial port.</param>
            <param name="bufferSize">The size of the input buffer. Receive buffer sizes will never be larger than this size. (but might be smaller)</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a new client.
            </summary>
            <param name="Address">Initial address.</param>
            <param name="Port">Initial port.</param>
            <param name="bufferSize">The size of the input buffer. Receive buffer sizes will never be larger than this size. (but might be smaller)</param>
            <param name="Ssl">If SSL/TLS should be used to encrypt channel.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Dispose">
            <summary>
            Dispose the client and disconnect the connection if open.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Register a line listener to the client. Note that only binary data will be recorded, 
            as this client doesn't decode readable data from binary.
            </summary>
            <param name="LineListener">The line listener to start to listen to.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Stop monitor with given line listener.
            </summary>
            <param name="LineListener">The line listener to remove</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.ChangeAddress(System.String,System.Int32)">
            <summary>
            Connect to a new address. If the client is already connected, it will reconnect to
            the given address.
            </summary>
            <param name="Address">The new address</param>
            <param name="Port">The new port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.ChangeAddress(System.String,System.Int32,System.Boolean)">
            <summary>
            Connect to a new address. If the client is already connected, it will reconnect to
            the given address.
            </summary>
            <param name="Address">The new address</param>
            <param name="Port">The new port number.</param>
            <param name="Ssl">If SSL/TLS should be used to encrupt communication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Open">
            <summary>
            Connect to the given address and port.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Close">
            <summary>
            Close the socket immideately in a correct manner.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Close(System.Int32)">
            <summary>
            Closes the socket in a correct manner. To let the last packages
            be sent it's recommended to set a timeout of 30 seconds. But If the 
            socket should be closed immediately set the timeout to 0. 
            </summary>
            <param name="timeout">The time out in seconds to wait for sending the last packages.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerMessage(System.String)">
            <summary>
            Logs a message to registered line listeners.
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerError(System.String)">
            <summary>
            Logs an error message to registered line listeners.
            </summary>
            <param name="Message">Error Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Send(System.Byte[])">
            <summary>
            Send a buffer of data.
            </summary>
            <param name="buffer">The binary data to send</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a port of a buffer.
            </summary>
            <param name="buffer">The buffer to send</param>
            <param name="offset">The index to the first byte to send.</param>
            <param name="size">The length of the buffer to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.LineListenerDataRead(System.String,System.Byte[],System.Int32)">
            <summary>
            Records a block of binary data received by a client to registered line listeners.
            </summary>
            <param name="Id">ID of client.</param>
            <param name="Data">Data buffer containing binary data received.</param>
            <param name="NrRead">Number of bytes received.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.BinarySocketException(System.String,System.Type)">
            <summary>
            Creates an exception object instance of a specific type.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Type">Type of exception object to create.</param>
            <returns>Created Exception object instance.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.ReceiveBinary(System.Byte[],System.Int32)">
            <summary>
            Handle a buffer of data received.
            This function is called every time binary data is received. 
            override this to get async receive. If overriden and not called, 
            binary data line listener and the OnReceiveBinary event are disabled.
            </summary>
            <param name="Buffer">The buffer received</param>
            <param name="NrRead">The length of the buffer that is the data, the rest of the buffer is of no interrest.</param>
        </member>
        <member name="M:Clayster.Library.Internet.AsyncSocketClient.SocketClosed(System.Boolean)">
            <summary>
            Handle a close event. This function is called whenever the socket is closed. Override this
            to handle a close event. If this is overriden and not called, the OnClosed event is disabled.
            </summary>
            <param name="byRemoteHost">False if the closeing was initiated by the client, otherwise (if the socket was closed by the other side or network was broken) true.</param>
        </member>
        <member name="E:Clayster.Library.Internet.AsyncSocketClient.OnReceiveBinary">
            <summary>
            Event raised when data has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.AsyncSocketClient.OnClosed">
            <summary>
            event raised when the client connection has been closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.AsyncSocketClient.Address">
            <summary>
            Get/Set the host name the client is connected to. If it's already connected, it will
            be reconnected to the given new address when changed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.AsyncSocketClient.Port">
            <summary>
            Get/Set the network port the client is connected to. If the client is already connected, it
            will be reconnected when changed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.AsyncSocketClient.Ssl">
            <summary>
            Get/Set the network SSL/TLS option for encruption. If the client is already connected, it
            will be reconnected when changed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.AsyncSocketClient.IsOpen">
            <summary>
            Get the status of the connection. If the connection is open, it will return true, otherwise false.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.AsyncSocketClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement">
            <summary>
            A base class for the containing elements in the Atom Model
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement">
            <summary>
            The base class for all Atom Element Classes
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.#ctor(System.Xml.XmlNode)">
            <summary>
            The base class for all Atom Element Classes
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.#ctor">
            <summary>
            The base class for all Atom Element Classes
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.isOfAtomType``1(Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement)">
            <summary>
            Returns if an AtomElement is of a specific type or not
            </summary>
            <typeparam name="T">A type inherited from AtomElement</typeparam>
            <param name="ae">The element</param>
            <returns>True if the element is an instance of the given type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)">
            <summary>
            Gets the outer Xml of the Atom Element
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml">
            <summary>
            Gets the outer Xml of the Atom Element
            </summary>
            <returns>Xml</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.XmlLang">
            <summary>
            Gets the xml:lang-attribute, if any, in an atom element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.XmlBase">
            <summary>
            Gets the xml:base-attribute, if any, in an atom element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.XmlNode">
            <summary>
            Gets or sets the xml node this element represents
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.atomElements">
            <summary>
            The container of the child elements in a containing element
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.foreignNamespaceElements">
            <summary>
            The container of the foreign (known) elements in a containing element
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.GetSubsetFromAtomElementList``1">
            <summary>
            Get a subset of a specific Atom type from the Atom Element List in the container element
            </summary>
            <typeparam name="T">An type inherited from AtomElement</typeparam>
            <returns>A subset with all Atom Elements of the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.GetUniqueNodeFromAtomElementList``1">
            <summary>
            Gets a specific type of an AtomElement from the elements this container contains.
            </summary>
            <typeparam name="T">Type of the AtomElement</typeparam>
            <returns>The First Atom Element of the given type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.#ctor(System.Xml.XmlNode)">
            <summary>
            A base class for the containing elements in the Atom Model
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.#ctor">
            <summary>
            A base class for the containing elements in the Atom Model
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.Publish(System.String)">
            <summary>
            Publish the atom element
            </summary>
            <param name="feedurl">url</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.Publish(System.String,System.String)">
            <summary>
            Publish the atom element
            </summary>
            <param name="feedurl">url</param>
            <param name="googleAuthString">Google Client Login Authentication String (for google services)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.Publish(System.String,Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            Publish the atom element
            </summary>
            <param name="feedurl">url</param>
            <param name="credentials">Network Credentials</param>
            <param name="googleAuthString">Google Client Login Authentication String (for google services)</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.GetInnerXml(System.Text.StringBuilder)">
            <summary>
            Gets the innerXml of this containing element
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomContainerElement.GetForeignNamespaceElementsOfType``1">
            <summary>
            Gets foreign namespace elements of a specific type
            </summary>
            <typeparam name="T">Type of foreign lements</typeparam>
            <returns>A subset of foreign elements of the given type</returns>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry">
            <summary>
            This is a base class for Entry Elements (version 0.3, and version 1.0)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry">
            <summary>
            Interface to AtomEntries classes (v0.3 and v1.0)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Links">
            <summary>
            Gets the links of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Title">
            <summary>
            Gets the title of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Id">
            <summary>
            Gets the id of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Summary">
            <summary>
            Gets the summary of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Updated">
            <summary>
            Gets the updated date of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Contents">
            <summary>
            Gets the content of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Published">
            <summary>
            Gets the published date of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Categories">
            <summary>
            Gets the categories of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Contributors">
            <summary>
            Gets the contributors of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Rights">
            <summary>
            Gets the rights of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Authors">
            <summary>
            Gets the authors of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.Source">
            <summary>
            Gets the source of the entry, if any, else null
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.ExtendedElements">
            <summary>
            Gets the foreign elements in the Entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomEntry.ForeignNamespaceElements">
            <summary>
            Gets the foreign element of the feed which are supported by the foreign element manager
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.#ctor(System.Xml.XmlNode)">
            <summary>
            This is a base class for Entry Elements (version 0.3, and version 1.0)
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.#ctor">
            <summary>
            This is a base class for Entry Elements (version 0.3, and version 1.0)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Create">
            <summary>
            Create an instance of an AtomEntry object
            </summary>
            <returns>Atom Entry</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.AddAtomElement(Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement)">
            <summary>
            Adds an atom element 
            </summary>
            <param name="ae">Atom Element</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Edit">
            <summary>
            Send an updated version of this entry to a remote address
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Edit(System.String)">
            <summary>
            Send an updated version of this entry to a remote address
            </summary>
            <param name="googleAuthString">Google Client Login Authentication string</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Edit(Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            Send an updated version of this entry to a remote address
            </summary>
            <param name="credentials">Network Credentials</param>
            <param name="googleAuthString">Google Client Login Authentication string</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Delete">
            <summary>
            Deletes this post from a remote address
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Delete(System.String)">
            <summary>
            Deletes this post from a remote address
            </summary>
            <param name="googleAuthString">Google Client Login Authentication string</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Delete(Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            Deletes this post from a remote address
            </summary>
            <param name="credentials">Network Credentials</param>
            <param name="googleAuthString">Google Client Login Authentication string</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.GetLink(System.String)">
            <summary>
            Get the first link of the given rel type
            </summary>
            <param name="rel">rel value</param>
            <returns>An atom link item</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Title">
            <summary>
            Gets the Title of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Links">
            <summary>
            Gets the Links in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Id">
            <summary>
            Gets the id in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Summary">
            <summary>
            Gets the summary in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Updated">
            <summary>
            Gets the updated date in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Contents">
            <summary>
            Gets the content in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Published">
            <summary>
            Get the published date in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Rights">
            <summary>
            Gets the Rights for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Source">
            <summary>
            Gets the Source for the entry, if any
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Contributors">
            <summary>
            Gets the contributors for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Categories">
            <summary>
            Gets the categories for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.Authors">
            <summary>
            Gets the authors for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.ExtendedElements">
            <summary>
            Gets the foreign elements in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.ForeignNamespaceElements">
            <summary>
            Gets the foreign element of the feed which are supported by the foreign element manager
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.AlternateLink">
            <summary>
            Alternate link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.SelfLink">
            <summary>
            Self link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry.MarkForRemoval">
            <summary>
            Gets/Sets if this entry is/should be marked for removal
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03">
            <summary>
            This represents an Entry in a Atom document version 0.3
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.#ctor(System.Xml.XmlNode)">
            <summary>
            The counstructor for an Entry in Atom version 0.3
            </summary>
            <param name="xn">The data containing XmlNode</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Title">
            <summary>
            Gets the title of the Entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Links">
            <summary>
            Gets one or more links for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Authors">
            <summary>
            Gets one or more Authors for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Contributors">
            <summary>
            Gets the contributor(s) for the Entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Id">
            <summary>
            Gets the ID of this entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Updated">
            <summary>
            Get the modified stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Issued">
            <summary>
            Gets the Issued/Published stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Published">
            <summary>
            Gets the Issued/Published stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Created">
            <summary>
            Gets the created stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Summary">
            <summary>
            Gets the summary for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Contents">
            <summary>
            Content element of the feed
            The feed could contain one or more content elements.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Source">
            <summary>
            Gets the source for the entry, if any
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Rights">
            <summary>
            Gets the rights for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.ExtendedElements">
            <summary>
            Gets the foreign elements in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.Categories">
            <summary>
            Gets the categories for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry03.ForeignNamespaceElements">
            <summary>
            Gets the foreign element of the feed which are supported by the foreign element manager
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10">
            <summary>
            Represents an entry for the Atom version 1.0
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.#ctor">
            <summary>
            Represents an entry for the Atom version 1.0
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents an entry for the Atom version 1.0
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Id">
            <summary>
            Gets the Id for the Entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Published">
            <summary>
            Gets the Published stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Rights">
            <summary>
            Gets the rights for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Summary">
            <summary>
            Gets the summary for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Title">
            <summary>
            Gets the title of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.TitleType">
            <summary>
            Gets the type of the title fort the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Updated">
            <summary>
            Gets the updated stamp for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Contents">
            <summary>
            Gets the Content as an array of AtomContent objects (to be compatible with ver0.3)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Content">
            <summary>
            Gets the conent as an AtomContent object
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Authors">
            <summary>
            Gets the author(s) of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Categories">
            <summary>
            Gets categories (or tags) for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Contributors">
            <summary>
            Gets the contributor(s) for the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Links">
            <summary>
            Gets the link(s) in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.Source">
            <summary>
            Gets the original source of the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.ExtendedElements">
            <summary>
            Gets the foreign elements in the entry
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry10.ForeignNamespaceElements">
            <summary>
            Gets the foreign element of the feed which are supported by the foreign element manager
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed">
            <summary>
            This class represents an Atom:Feed element (the master element of an Atom Document)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed">
            <summary>
            Interface to AtomFeed classes (v0.3 and v1.0)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Links">
            <summary>
            Gets the Links of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Entries">
            <summary>
            Gets the Entried of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Authors">
            <summary>
            Gets the Authors of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Categories">
            <summary>
            Gets the Categories for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Contributors">
            <summary>
            Gets the Contributors for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Generator">
            <summary>
            Gets the genretator for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Icon">
            <summary>
            Gets the Icon for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Logo">
            <summary>
            Gets the Logo for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Id">
            <summary>
            Gets the id of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Rights">
            <summary>
            Gets the rights/copyrights for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Subtitle">
            <summary>
            Gets the Subtitle/Tagline for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Title">
            <summary>
            Gets the title for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.Updated">
            <summary>
            Gets the updated time stamp for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.ExtendedElements">
            <summary>
            Gets the foreign element of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.IAtomFeed.ForeignNamespaceElements">
            <summary>
            Gets the foreign element of the feed which are supported by the foreign element manager
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor of AtomFeed
            </summary>
            <param name="xn">The data containing XML node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.RemoveEntry(Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry)">
            <summary>
            Removes an entry
            </summary>
            <param name="entry">The entry to be removed</param>
            <returns>true if the entry really was removed</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.AddElement(Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement)">
            <summary>
            Adds an element to the feed.
            </summary>
            <param name="Element">Element</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.AllElements">
            <summary>
            Gets all Atom Elements in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.XmlNamespace">
            <summary>
            Gets the Xml Namespace
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Links">
            <summary>
            Gets te links in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Entries">
            <summary>
            Gets the entries in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Authors">
            <summary>
            Gets the feeds authors
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Categories">
            <summary>
            Gets the categories for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Contributors">
            <summary>
            Gets the contributors of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Generator">
            <summary>
            Gets the generator of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Icon">
            <summary>
            Gets the icon for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Logo">
            <summary>
            Gets the logo for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Id">
            <summary>
            Gets the id of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Rights">
            <summary>
            Gets the rights for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Subtitle">
            <summary>
            Gets the subtitle/tagline for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Title">
            <summary>
            Gets the title for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.Updated">
            <summary>
            Gets the updated time stamp for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.ExtendedElements">
            <summary>
            Gets the foreign elements in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed.ForeignNamespaceElements">
            <summary>
            Gets the foreign elements, which are supported, in the feed
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03">
            <summary>
            Feed implementation for the Atom version 0.3.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.#ctor(System.Xml.XmlNode)">
            <summary>
            Feed implementation for the Atom version 0.3.
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Categories">
            <summary>
            Gets the Categories for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Logo">
            <summary>
            Gets the logo for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Icon">
            <summary>
            Gets the Icon for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Title">
            <summary>
            Serves the title of the feed
            This is required to be a valid feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Id">
            <summary>
            The feed Id
            This field is optional (in Atom 0.3), but a valid feed can never has more than one Id.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Tagline">
            <summary>
            The tagline of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Subtitle">
            <summary>
            Gets the Subtitle ( which is the same as Tagline in Atom0.3 ) for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Copyright">
            <summary>
            A human readable string with the rights for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Rights">
            <summary>
            Get the rights for the feed (which is the same as Copyright in Atom0.3)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Info">
            <summary>
            Information about the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Modified">
            <summary>
            Last modified date of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Updated">
            <summary>
            Get the update time stamp for the feed (which is the same as Modified for Atom0.3)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Generator">
            <summary>
            The generator of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Links">
            <summary>
            Serves the links in the feed
            There should always be at least one if it is a valid feed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Authors">
            <summary>
            Serves the authors of this feed
            This is required to hold at least one author unless every entry in the feed holds at least one author.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Contributors">
            <summary>
            This serves the contributors of this feed
            This is not a requiered field to be a valid Atom 0.3 feed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.Entries">
            <summary>
            The entries for this feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.ExtendedElements">
            <summary>
            Gets the foreign elements in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed03.ForeignNamespaceElements">
            <summary>
            Gets the foreign elements, which are supported, in the feed
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed10">
            <summary>
            Represents an Atom Feed for Atom version 1.0
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource">
            <summary>
            Represents a Source Element in an Atom Entry Element (this element is only valid for Atom version 1.0)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Id">
            <summary>
            Gets the Id of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Logo">
            <summary>
            Gets Logo url of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Icon">
            <summary>
            Gets the Icon url for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Title">
            <summary>
            Gets the title of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Rights">
            <summary>
            Gets the rights for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Subtitle">
            <summary>
            Gets the subtitle of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Updated">
            <summary>
            Gets the updated stamp for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Generator">
            <summary>
            Gets the generator software data (or similar) of the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Links">
            <summary>
            Gets the link(s) in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Authors">
            <summary>
            Gets the author(s) in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Categories">
            <summary>
            Gets the categories (or tags) for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Contributors">
            <summary>
            Gets the contributor(s) for the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.ExtensionElement">
            <summary>
            Gets the extension elements in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.Entries">
            <summary>
            To be overridden.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.ForeignNamespaceElements">
            <summary>
            Gets the Foreign Namespace elements in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomSource.ExtendedElements">
            <summary>
            Gets the foreign elements in the entry
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed10.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents an Atom Feed for Atom version 1.0
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed10.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomContainerElements.AtomFeed10.Entries">
            <summary>
            Gets the entries in the feed
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomDocument">
             <summary>
             Class containing an Atom Document.
             </summary>
             <remarks>
             © Clayster, 2008-2015
            
             Author: Mikael Borgbrant, Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.Save(System.IO.Stream)">
            <summary>
            Saves the atom document to a stream
            </summary>
            <param name="stream">stream to be used</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.LoadFromFile(System.String)">
            <summary>
            Loads an Atom Document from a file.
            </summary>
            <param name="FileName">File Name of the Atom Document.</param>
            <returns>Atom Document object instance.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.LoadFromHttp(System.String)">
            <summary>
            Loads an Atom Document from an HTTP Server
            </summary>
            <param name="url">Url to the Atom resource</param>
            <returns>Atom Document object instance</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.LoadFromString(System.String)">
            <summary>
            Loads an Atom Document from a string
            </summary>
            <param name="atomxml">atom xml</param>
            <returns>Atom Document object instance</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.LoadFromHttp(System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            Loads an Atom Document from an HTTP Server with credentials
            </summary>
            <param name="url">Url to the Atom resource</param>
            <param name="credentials">Credentials for the http resource</param>
            <returns>Atom document object instance</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Class containing an Atom Document.
            </summary>
            <param name="doc">XML Document containing the Atom document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.GetEntriesFromAuthor(System.String)">
            <summary>
            Get entries which have a specific author
            </summary>
            <param name="authorName">Name of the author</param>
            <returns>Atom entries</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.GetEntriesFromCategory(System.String)">
            <summary>
            Get entries which have the specific category term
            </summary>
            <param name="categoryTerm">category term</param>
            <returns>An array with entries</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.GetEntriesFromCategory(Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory)">
            <summary>
            Get entries which have the specific category term
            </summary>
            <param name="category">category item</param>
            <returns>An array with entries</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.GetLink(System.String)">
            <summary>
            Get the first link of the given rel type
            </summary>
            <param name="rel">rel value</param>
            <returns>An atom link item</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.ConvertToRssDocument">
            <summary>
            A loose conversion to Rss
            </summary>
            <returns>Rss Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.RemoveMarked">
            <summary>
            Removes all entries which are marked for removal
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDocument.GetForeignNamespaceElementsOfType``1">
            <summary>
            Gets foreign namespace elements of a specific type
            </summary>
            <typeparam name="T">Type of foreign lements</typeparam>
            <returns>A subset of foreign elements of the given type</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Version">
            <summary>
            Version of the Atom Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.EntryCount">
            <summary>
            Gets the number of entries in the feed in the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Url">
            <summary>
            URL of resource, if available, otherwise the empty string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.EntryLinks">
            <summary>
            Gets the links in all of the entries in the feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.OuterXml">
            <summary>
            Gets the outerXml of the AtomDocument
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.XmlSource">
            <summary>
            XML Source document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Feed">
            <summary>
            Feed
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Links">
            <summary>
            Gets the links in the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.ForeignNamespaceElements">
            <summary>
            Gets the elements in the feed which is found in the foreign namespaces
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Entries">
            <summary>
            Gets the entries in the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Authors">
            <summary>
            Gets the authors in the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Categories">
            <summary>
            Gets the categories in the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Contributors">
            <summary>
            Gets the contributors of the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Generator">
            <summary>
            Gets the generator of the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Icon">
            <summary>
            Gets the Icon for the document, if any, otherwise null
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Logo">
            <summary>
            Gets the Logo for the document, if any, otherwise null
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Id">
            <summary>
            Gets the id for the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Rights">
            <summary>
            Gets the rights for the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Subtitle">
            <summary>
            Gets the subtitle for the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Title">
            <summary>
            Gets the title of the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.Updated">
            <summary>
            Gets the Updated time stamp of for the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.ExtendedElements">
            <summary>
            Gets the forein elements in the document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.SelfLink">
            <summary>
            Self link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.AlternateLink">
            <summary>
            Alternate link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.PreviousLink">
            <summary>
            Previous link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDocument.NextLink">
            <summary>
            Next link
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomException">
            <summary>
            Base class for all Atom Exceptions
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomException.#ctor(System.Int32,System.String)">
            <summary>
            Base class for all Atom Exceptions
            </summary>
            <param name="StringId">String ID for <paramref name="Message"/> for localization purposes.</param>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor">
            <summary>
            Represents an Author (a person struct) of an Atom Document or an Entry in an Atom Document.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct">
            <summary>
            A Data holding class to represent a Person Struct in the Atom format
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor of the Person Contruct in the Atom format
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct
            </summary>
            <param name="name">Name of the person</param>
            <param name="email">Email to the person</param>
            <param name="uri">Uri to the person</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.Uri">
            <summary>
            Gets the Uri
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPersonConstruct.Email">
            <summary>
            Gets the Email
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents an Author (a person struct) of an Atom Document or an Entry in an Atom Document.
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor.#ctor(System.String)">
            <summary>
            Represents an Author (a person struct) of an Atom Document or an Entry in an Atom Document.
            </summary>
            <param name="name">name of the author</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor.#ctor(System.String,System.String)">
            <summary>
            Represents an Author (a person struct) of an Atom Document or an Entry in an Atom Document.
            </summary>
            <param name="name">name of author</param>
            <param name="email">email to the author</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor.#ctor(System.String,System.String,System.String)">
            <summary>
            Represents an Author (a person struct) of an Atom Document or an Entry in an Atom Document.
            </summary>
            <param name="name">name of the author</param>
            <param name="email">email to the author</param>
            <param name="uri">uri to the the author</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomAuthor.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory">
            <summary>
            Represents a Category (or tag) of an Atom Entry (or feed)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents a Category (or tag) of an Atom Entry (or feed)
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.Term">
            <summary>
            Gets the term attribute of a Category Element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.Scheme">
            <summary>
            Gets the scheme attribute of a Category Element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.Label">
            <summary>
            Gets the label attribute of a Category Element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCategory.Content">
            <summary>
            Gets the content of a category element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent">
            <summary>
            Represents a content element of an Atom Entry
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.#ctor(System.Object,System.String)">
            <summary>
            Represents a content element of an Atom Entry
            </summary>
            <param name="content">The object to be contained in the content element, often a string or html</param>
            <param name="src">The path to the resource, if it's not embedded</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.#ctor(System.Object)">
            <summary>
            Represents a content element of an Atom Entry
            </summary>
            <param name="content">The object containg the content</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.Load">
            <summary>
            Loads the content from url given in the src attribute
            </summary>
            <returns>An object decoded by MIME type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.Type">
            <summary>
            Gets the type of the content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.Src">
            <summary>
            Gets the source url of the content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContent.Content">
            <summary>
            Gets the content
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContributor">
            <summary>
            Represents a Contributor Element (A person struct) in an Atom Element
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContributor.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomContributor.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCopyright">
            <summary>
            A human readable text string with the rights for the Atom Feed (v0.3)
            This is replaced with The Rights element in version 1.0 of Atom
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCopyright.ptext">
            <summary>
            Text field
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCopyright.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCopyright.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCopyright.Text">
            <summary>
            Gets the copyright/rights text
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCreated">
            <summary>
            This Element is deprecated in version Atom 1.0 and should only be used in Atom 0.3
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCreated.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCreated.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomCreated.Date">
            <summary>
            Gets the date for the Created Element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomExtensionElement">
            <summary>
            Represents a foreign element (i.e. not in Atom Sepcification) in an Atom document.
            Atom Specification allow foreign elements to be used in Atom Documents.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomExtensionElement.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomExtensionElement.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomExtensionElement.Xml">
            <summary>
            Gets the xml of the foreign element, as a string
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator">
            <summary>
            Represents a Generator Tag in the Atom Document
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator.Uri">
            <summary>
            The Uri of the generator
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator.Version">
            <summary>
            The version of the generator
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomGenerator.Text">
            <summary>
            The name of the generator
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIcon">
            <summary>
            Represents an Icon Element in an Atom Document
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIcon.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIcon.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIcon.Url">
            <summary>
            Gets the url for the icon which representing the atom document
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomId">
            <summary>
            Represents an ID element in an Atom Feed or an Etom Entry
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomId.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomId.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomId.Text">
            <summary>
            Get the Title Text
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomInfo">
            <summary>
            This element is deprecated in Atom 1.0
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomInfo.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomInfo.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomInfo.Text">
            <summary>
            Gets the info text
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIssued">
            <summary>
            This element is only valid for Atom 0.3, in Atom 1.0 it is replaced by the published element
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIssued.pdate">
            <summary>
            date field
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIssued.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIssued.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomIssued.Date">
            <summary>
            Gets or sets the date of the issued element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink">
            <summary>
            Represents a Link Element in an Atom Document or in an Atom Entry
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents a Link Element in an Atom Document or in an Atom Entry
            </summary>
            <param name="e">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Represents a Link Element in an Atom Document or in an Atom Entry
            </summary>
            <param name="href">Href attribute for the node</param>
            <param name="rel">Rel attribute for the node</param>
            <param name="type">Type attribute for the node</param>
            <param name="hreflang">Hreflang attribute for the node</param>
            <param name="title">Title attribute for the node</param>
            <param name="length">Length attribute for the node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Load">
            <summary>
            Loads the source, from the href attribute, to an object (dependig on MIME type)
            </summary>
            <returns>an object representing the content</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Href">
            <summary>
            Gets the href of the link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Rel">
            <summary>
            Gets the rel property of the link element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Type">
            <summary>
            Get the type of the link element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.HrefLang">
            <summary>
            Get the Hreflang property of the link element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Title">
            <summary>
            Get the title of the link element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLink.Length">
            <summary>
            Get the aprox length of the content of the link
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLogo">
            <summary>
            Represents a Logo Element in an Atom Document
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLogo.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLogo.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomLogo.Url">
            <summary>
            Gets the url for the logo which representing the atom document
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomModified">
            <summary>
            Represents a Modified Element in an Atom Feed or Entry.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomModified.pdate">
            <summary>
            Date field
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomModified.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomModified.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomModified.Date">
            <summary>
            Gets the time and date for the modified element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPublished">
            <summary>
            Represents the Published Element of an Atom version 1.0 document
            (This is the same as AtomIssued in the Atom version 0.3 spec.)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPublished.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomPublished.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomRights">
            <summary>
            Represents an human readable string with the rights for the Atom Document ver 1.0
            (This is the same as the Copyright Element in Atom ver 0.3)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomRights.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomRights.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSubtitle">
            <summary>
            Represents an AtomSubtitle element in an Atom Document version 1.0 
            (is the same as AtomTagLine in Atom version 0.3)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTagline">
            <summary>
            This is for the Atom 0.3 support. In version 1.0 this element is replaced with the element Subtitle.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle">
            <summary>
            Represents a Title Element in an Atom Feed or an Atom Entry
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.ptitle">
            <summary>
            title
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.ptype">
            <summary>
            type
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents a Title Element in an Atom Feed or an Atom Entry
            </summary>
            <param name="xn">The data containing Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.#ctor(System.Object)">
            <summary>
            Represents a Title Element in an Atom Feed or an Atom Entry
            </summary>
            <param name="title">The object to be contained in the title, often a string</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.Title">
            <summary>
            Gets the title text
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTitle.Type">
            <summary>
            Gets the type of the title text
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTagline.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomTagline.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSubtitle.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSubtitle.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSummary">
            <summary>
            Represents an AtomSummary element in an Atom Document
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSummary.#ctor(System.Xml.XmlNode)">
            <summary>
            Represents an AtomSummary element in an Atom Document
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSummary.#ctor(System.String)">
            <summary>
            Represents an AtomSummary element in an Atom Document
            </summary>
            <param name="summary">summary text</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSummary.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomSummary.Text">
            <summary>
            Gets the summary text for the document or entry
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomUpdated">
            <summary>
            Represents an updated element in an Atom Document or an Atom Entry
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomUpdated.#ctor(System.Xml.XmlNode)">
            <summary>
            The constructor
            </summary>
            <param name="xn">The data containing xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomUpdated.GetXml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ATOM.AtomMetadataElements.AtomElement.GetXml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcTitle">
            <summary>
            dc:title
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            
            The title element contains the title of a book as it was published. If a book has a subtitle, 
            it appears as a second title element in the book result's entry.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignElement">
            <summary>
            Base class for foreign schemes element
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Default constructor
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcTitle.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:title
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcTitle.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcSubject">
             <summary>
             dc:subject
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The subject element identifies the topic of the book. Usually this is a Library of Congress Subject Heading (LCSH) 
             or Book Industry Standards and Communications Subject Heading (BISAC).
            
             The subject element can appear only as a child of entry. There may be multiple subject elements per entry.
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcSubject.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:subject
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcSubject.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcPublisher">
             <summary>
             dc:publisher
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The publisher element contains the name of the entity responsible for producing and distributing the volume 
             (usually the specific edition of this book). Examples of a publisher include a person, an organization, or a service.
            
             This element can appear only as a child of entry. If there is more than one publisher, multiple publisher elements may appear.
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcPublisher.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:publisher
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcPublisher.Publisher">
            <summary>
            Publisher
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcIdentifier">
             <summary>
             dc:identifier
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The identifier element provides an unambiguous reference to a particular book.
            
             Every entry contains at least one identifier child.
             
             The first identifier is always the unique string Book Search has assigned to the volume (such as s1gVAAAAYAAJ).
             This is the ID that appears in the book's URL in the Book Search GUI, as well as in the URL of that book's single item feed. 
             
             Many books contain additional identifier elements. These provide alternate, external identifiers to the volume. 
             Such identifiers may include the ISBNs, ISSNs, Library of Congress Control Numbers (LCCNs), and OCLC numbers; 
             they are prepended with a corresponding namespace prefix (such as "ISBN:").
             
             Any identifier can be passed to the Dynamic Links, used to instantiate an Embedded Viewer, or even used to construct 
             static links to Book Search. 
             
             The identifier element can appear only as a child of entry.
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcIdentifier.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:identifier
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcIdentifier.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcFormat">
             <summary>
             dc:format
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The format element describes the physical properties of the volume. Currently, it indicates the number of 
             pages in the book, but more information may be added to this field in the future.
            
             This element can appear only as a child of entry.
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcFormat.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:format
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcFormat.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDescription">
             <summary>
             dc:description
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The description element includes text that describes a book or book result. In a search result feed, this 
             may be a search result "snippet" that contains the words around the user's search term. For a single volume 
             feed, this element may contain a synopsis of the book.
            
             The description element can appear only as a child of entry.
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDescription.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:description
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDescription.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDate">
            <summary>
            dc:date
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            
            The date element indicates the publication date of the specific volume in question. If the book is a reprint, this 
            is the reprint date, not the original publication date. The date is encoded according to the ISO-8601 standard (and 
            more specifically, the W3CDTF profile).
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDate.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:date
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcDate.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcCreator">
             <summary>
             dc:creator
             http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
             
             The creator element identifies an author—or more generally, an entity responsible for creating the volume in question. 
             Examples of a creator include a person, an organization, or a service. In the case of anthologies, proceedings, or other
             edited works, this field may be used to indicate editors or other entities responsible for collecting the volume's contents.
            
             This element appears as a child of entry. If there are multiple authors or contributors to the book, there may be multiple 
             creator elements in the volume entry (one for each creator or contributor).
             </summary>
             <remarks>
             © Clayster, 2010-2015
             
             Author: Peter Waher
             </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcCreator.#ctor(System.Xml.XmlNode)">
            <summary>
            dc:creator
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.DcCreator.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.NamespaceDublinCore">
            <summary>
            An implementation of the Dublin Core namespace, found at 
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#DublinCoreElements
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespace">
            <summary>
            Base class for Foreign Namespaces (in the Atom model)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespace.GetElement(System.String,System.Xml.XmlNode)">
            <summary>
            Gets an element, with the given local name, in the namespace model
            </summary>
            <param name="nodename">local name</param>
            <param name="xn">xml node</param>
            <returns>An Element in this namespace, or null if no one was found</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespace.NamespaceUri">
            <summary>
            Gets the namespace URI for the namespace
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespace.NamespaceClassPrefix">
            <summary>
            Gets the class prefix for the classes which represent elements in the model
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.NamespaceDublinCore.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.DublinCore.NamespaceDublinCore.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager">
            <summary>
            A singleton class to handle the foreign namespace plugins for the Atom Parser
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager.Reload">
            <summary>
            Force a reload of the namespaces in the loaded assemblies
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager.IsNamespaceSupported(System.String)">
            <summary>
            Checks if a namespace has a loaded namespace class
            </summary>
            <param name="namespaceUri">The namespace uri</param>
            <returns>true if the namespace is supported</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager.GetForeignNamespace(System.String)">
            <summary>
            Gets a Foreign Namespace from the loaded namespaces
            If the namespace uri never has been searched before, 
            a scan among loaded assemblies is performed again (it could have been loaded)
            </summary>
            <param name="namespaceUri">Namespace uri</param>
            <returns>The namespcae class representing the given namespace uri, if any, otherwise null</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager.Instance">
            <summary>
            Gets the instance of this singleton object, which is handling the foreign namespace plugins for the Atom Parser
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.ForeignNamespaceManager.ForeginNamespaces">
            <summary>
            Gets a list of the available supported namespaces
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsReview">
            <summary>
            gbs:review
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            
            When present, the review element contains a user-generated review for a given book. This element 
            currently appears only in the user library and user annotation feeds, as a child of entry.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsReview.#ctor(System.Xml.XmlNode)">
            <summary>
            gbs:review
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsReview.Text">
            <summary>
            Text content of the review.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsReview.Type">
            <summary>
            Type of text construct (typically text, html, or xhtml).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsReview.Language">
            <summary>
            Automatically-identified language of the review. May be incorrect.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Embeddability">
            <summary>
            Book embeddability status.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Embeddability.Embeddable">
            <summary>
            The book is available for embedding on third-party sites.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Embeddability.NotEmbeddable">
            <summary>
            The book cannot be embedded on third-party sites. 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsEmbeddability">
            <summary>
            gbs:embeddability
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            
            Many of the books found on Google Book Search can be embedded on third-party sites using the 
            Embedded Viewer. The embeddability element indicates whether a particular book result is available 
            for embedding. By definition, a book that cannot be previewed on Book Search cannot be embedded 
            on third-party sites.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsEmbeddability.#ctor(System.Xml.XmlNode)">
            <summary>
            gbs:embeddability
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsEmbeddability.Embeddability">
            <summary>
            Embeddability
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability">
            <summary>
            Book viewability status.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability.NoView">
            <summary>
            Returns all matching books regardless of viewability
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability.Partial">
            <summary>
            Returning only books that the user can preview or view in their entirety.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability.Full">
            <summary>
            Returns only books that the user can view in their entirety.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsViewability">
            <summary>
            gbs:viewability
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            
            Google Book Search respects the user's local copyright restrictions. As a result, previews or full views of 
            some books are not available in all locations. The viewability element indicates whether a book is fully 
            viewable, can be previewed, or only has "about the book" information. These three "viewability modes" are the 
            same ones returned by the Dynamic Links API.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsViewability.#ctor(System.Xml.XmlNode)">
            <summary>
            gbs:viewability
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.GbsViewability.Viewability">
            <summary>
            Viewability
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.NamespaceGoogleBooks">
            <summary>
            An implementation of the Google Books namespace, found at 
            http://code.google.com/intl/sv/apis/books/docs/gdata/reference.html#BookSearchElements
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.NamespaceGoogleBooks.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.NamespaceGoogleBooks.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating">
            <summary>
            Gd:rating
            http://schemas.google.com/g/2005
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.#ctor(System.Xml.XmlNode)">
            <summary>
            Gd:rating
            http://schemas.google.com/g/2005
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.Rel">
            <summary>
            Gets the Rel attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.Average">
            <summary>
            Avarage
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.Min">
            <summary>
            Minimum
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.Max">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.GdRating.NumRaters">
            <summary>
            Number of raters
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.NamespaceGoogleData">
            <summary>
            An implementation of the Google Data namespace, 
            found at http://schemas.google.com/g/2005
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.NamespaceGoogleData.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleData.NamespaceGoogleData.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchTotalresults">
            <summary>
            OpenSearch:TotalResults
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchTotalresults.#ctor(System.Xml.XmlNode)">
            <summary>
            OpenSearch:TotalResults
            </summary>
            <param name="xn">XML Definition</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchTotalresults.TotalResults">
            <summary>
            Total Results
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchStartindex">
            <summary>
            OpenSearch:StartIndex
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchStartindex.#ctor(System.Xml.XmlNode)">
            <summary>
            OpenSearch:StartIndex
            </summary>
            <param name="xn">XML Definition</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchStartindex.StartIndex">
            <summary>
            Start index.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch11">
            <summary>
            An implementation of the OpenSearch namespace, 
            found at http://a9.com/-/spec/opensearchrss/1.1/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch11.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch11.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch10">
            <summary>
            An implementation of the OpenSearch namespace, 
            found at http://a9.com/-/spec/opensearchrss/1.0/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch10.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.NamespaceOpenSearch10.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchItemsperpage">
            <summary>
            OpenSearch:ItemsPerPage
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchItemsperpage.#ctor(System.Xml.XmlNode)">
            <summary>
            OpenSearch:ItemsPerPage
            </summary>
            <param name="XmlNode">Xml Node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.OpenSearch.OpenSearchItemsperpage.ItemsPerPage">
            <summary>
            Items per page
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCategory">
            <summary>
            Media:Category
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCategory.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Category
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml Node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCategory.Scheme">
            <summary>
            Gets the scheme
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCategory.Category">
            <summary>
            Gets the category
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.Format">
            <summary>
            Stream format
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.Format.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.Format.Rtsp_H263_Arm">
            <summary>
            RTSP with H.263 video and ARM audio
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.Format.Http_Swf">
            <summary>
            HTTP with Flash video (swf)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.Format.Rtsp_MPeg4_Aac">
            <summary>
            RTSP with MPeg4 Video and AAC audio
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent">
            <summary>
            Media:content
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:content
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Filesize">
            <summary>
            Gets the filesize
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Medium">
            <summary>
            Gets the medium
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.IsDefault">
            <summary>
            Gets if this is the default item
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Expression">
            <summary>
            Gets the expression property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.BitRate">
            <summary>
            Gets the bit rate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.FrameRate">
            <summary>
            Gets the frame rate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.SamplingRate">
            <summary>
            Gets the sampling rate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Channels">
            <summary>
            Gets the number of channels
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Duration">
            <summary>
            Gets the duration property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Height">
            <summary>
            Gets the height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Lang">
            <summary>
            Gets the language
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssContent.Format">
            <summary>
            gets the Stream format
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCopyright">
            <summary>
            Media:copyright
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCopyright.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:copyright
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCopyright.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCopyright.Copyright">
            <summary>
            Gets the copyright information
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCredit">
            <summary>
            Media:Credit
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCredit.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Credit
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCredit.Role">
            <summary>
            Get the role property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCredit.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssCredit.Scheme">
            <summary>
            Gets the scheme
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssDescription">
            <summary>
            Media:Description
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssDescription.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Description
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml Element</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssDescription.Type">
            <summary>
            Gets the type, plain or html
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssDescription.Description">
            <summary>
            Gets the description as a string or an html document
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssGroup">
            <summary>
            Media:Group
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssGroup.GetSubsetFromChildList``1">
            <summary>
            Gets a subset of child elements by a specific type
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>A subset of type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssGroup.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Group
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml Node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssGroup.ChildElements">
            <summary>
            Gets the child elements of the group
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssHash">
            <summary>
            Media:hash
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssHash.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:hash
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssHash.Algo">
            <summary>
            Gets the algorithm used
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssHash.Hash">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssKeywords">
            <summary>
            Media:Keywords
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssKeywords.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Keywords
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml Node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssKeywords.Keywords">
            <summary>
            Gets the keywords
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssPlayer">
            <summary>
            Media:Player
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssPlayer.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Player
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml Node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssPlayer.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssPlayer.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssPlayer.Height">
            <summary>
            Gets the height
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRating">
            <summary>
            Media:rating
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRating.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:rating
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRating.Rating">
            <summary>
            Gets the Rating
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRestriction">
            <summary>
            Media:Restriction
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRestriction.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Restriction
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">The data containing XML node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRestriction.Relationship">
            <summary>
             Gets the relationship property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRestriction.Type">
            <summary>
             Gets the type property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssRestriction.Value">
            <summary>
             Gets the innertext of the node
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText">
            <summary>
            Media:Text
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Text
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.Type">
            <summary>
            Gets the type property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.Text">
            <summary>
            Gets the text property, as a string or an html document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.Lang">
            <summary>
            Gets the lang property
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.Start">
            <summary>
            Gets the start time as a NTP time code string
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssText.End">
            <summary>
            Gets the end time as a NTP time code string
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail">
            <summary>
            Media:Thumbnauil
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:Thumbnauil
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail.Url">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail.Width">
            <summary>
            Gets the width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail.Height">
            <summary>
            Get the height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssThumbnail.Time">
            <summary>
            Gets the time as a NTP time string
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssTitle">
            <summary>
            Media:title
            http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssTitle.#ctor(System.Xml.XmlNode)">
            <summary>
            Media:title
            http://search.yahoo.com/mrss/
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.MrssTitle.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.NamespaceYahooMrss">
            <summary>
            An implementation of the YahooMRss namespace, 
            found at http://search.yahoo.com/mrss/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.NamespaceYahooMrss.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YahooMrss.NamespaceYahooMrss.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.NamespaceYoutubeGData">
            <summary>
            An implementation of the Google Youtube Data namespace, 
            found at http://gdata.youtube.com/schemas/2007
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.NamespaceYoutubeGData.NamespaceUri">
            <summary>
            Gets the namespace URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.NamespaceYoutubeGData.NamespaceClassPrefix">
            <summary>
            Gets the prefix for the classes which represent this namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.YtStatistics">
            <summary>
            Yt:Statistics
            http://gdata.youtube.com/schemas/2007
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.YtStatistics.#ctor(System.Xml.XmlNode)">
            <summary>
            Yt:Statistics
            http://gdata.youtube.com/schemas/2007
            </summary>
            <param name="xn">Xml node</param>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.ForeignNamespaces.YoutubeGData.YtStatistics.ViewCount">
            <summary>
            Number of views
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService">
            <summary>
            An enumaration for available services in GoogleDataAPI
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.CalendarDataAPI">
            <summary>
            Google Calender
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.GoogleBaseDataAPI">
            <summary>
            Google Base
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.BloggerDataAPI">
            <summary>
            Blogger
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.ContactsDataAPI">
            <summary>
            Google Contacts
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.DocumentsListDataAPI">
            <summary>
            Google Documents
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.PicasaWebAlbumsDataAPI">
            <summary>
            Picasa
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.GoogleAppsProvisioningAPI">
            <summary>
            Google Apps
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.SpreadsheetsDataAPI">
            <summary>
            Google Spreadsheets
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService.YouTubeDataAPI">
            <summary>
            Youtube
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleClientLoginAuthentication">
            <summary>
            Class for handling Google Client Login Authentication
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleClientLoginAuthentication.GetAuthenticationKey(System.String,System.String,Clayster.Library.Internet.ATOM.GoogleDataAPI.GoogleService)">
            <summary>
            POSTs a request to Google and gets the AuthenticationKey
            </summary>
            <param name="email">email address</param>
            <param name="password">password</param>
            <param name="service">the google service to be used</param>
            <returns>authentication key</returns>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1">
            <summary>
            ATOM Open Search result set
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.#ctor(Clayster.Library.Internet.ATOM.AtomDocument)">
            <summary>
            ATOM Open Search result set
            </summary>
            <param name="Doc">Search result document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.TotalResults">
            <summary>
            Total results
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.StartIndex">
            <summary>
            Start index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.ItemsPerPage">
            <summary>
            Items per page
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.OpenSearchResultSet`1.Item(System.Int32)">
            <summary>
            Zero-based index into the current result set.
            </summary>
            <param name="Index">Zero-based index.</param>
            <returns>Item</returns>
        </member>
        <member name="T:Clayster.Library.Internet.BinaryCommandEventArgs">
            <summary>
            Binary Command Event Arguments
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.BinaryCommandIncoming">
            <summary>
            Binary Command Incoming Data
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandIncoming.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Binary Command Incoming Data
            </summary>
            <param name="Command">Command number</param>
            <param name="SequenceNr">Sequence number</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandIncoming.#ctor(System.Int32,System.Int32,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Binary Command Incoming Data
            </summary>
            <param name="Command">Command number</param>
            <param name="SequenceNr">Sequence number</param>
            <param name="Data">Binary data</param>
            <param name="LineListener">If line listening should be active or not.</param>
            <param name="UseBinaryMarshallingOfFloats">True if float values should be marshalled through binary format, false if string representation should be used. 
            Note: Use string representation to be backward compatable, if both receiving and sending party is in agreement to use binary marshalling set this parameter to true.</param>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.Command">
            <summary>
            Command Nr. (0=Response)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.SequenceNr">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.LineListener">
            <summary>
            If line listening is active or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.HasMore">
            <summary>
            If more data is available in the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.UseBinaryMarshallingOfFloats">
            <summary>
            True if float values should be marshalled through binary format, false if string representation should be used. 
            Note: Use string representation to be backward compatable, if both receiving and sending party is in agreement to use binary marshalling set this parameter to true.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.LineListenerData">
            <summary>
            If line listening is enabled, this property contains a string representation of all
            parameters read.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextByte">
            <summary>
            Gets the next byte from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextBoolean">
            <summary>
            Gets the next boolean value from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextInt16">
            <summary>
            Gets the next integer from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextInt32">
            <summary>
            Gets the next integer from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextInt64">
            <summary>
            Gets the next integer from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextBinaryData">
            <summary>
            Gets the next block of binary data from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextString">
            <summary>
            Gets the next string from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextDouble">
            <summary>
            Gets the next double from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextStringArray">
            <summary>
            Gets the next string array from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextDateTime">
            <summary>
            Gets the next Date &amp; Time value from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextTimeSpan">
            <summary>
            Gets the next Time Span value from the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandIncoming.NextColor">
            <summary>
            Gets the next color from the response.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandEventArgs.Respond(Clayster.Library.Internet.BinaryCommandOutgoing)">
            <summary>
            Sends a response to the client.
            </summary>
            <param name="Response">Response to send back to the client.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandEventArgs.RespondSynchronous(Clayster.Library.Internet.BinaryCommandOutgoing,System.Boolean)">
            <summary>
            Sends a response to the client in a synchronous manner.
            </summary>
            <param name="Response">Response to send back to the client.</param>
            <param name="SilenceMode">If the server should enter silence mode for the particular client.
            This means that all events are queued, and sent to the client when silence mode is ended.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandEventArgs.Flush">
            <summary>
            Causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandEventArgs.EndSilence">
            <summary>
            Ends silence mode for the particular client.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandEventArgs.Server">
            <summary>
            Binary Command Server
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandEventArgs.ClientSocket">
            <summary>
            Client socket that has sent the command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandEventArgs.Stream">
            <summary>
            Client socket network stream.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandEventArgs.SslStream">
            <summary>
            Encrypted network stream (only available of TLS Negotiation has been performed).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandEventArgs.State">
            <summary>
            Client state.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.BinarySocketClient">
            <summary>
            Class managing a binary client socket.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.BinarySocketClient.socket">
            <summary>
            Client socket.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.BinarySocketClient.stream">
            <summary>
            Network stream
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.BinarySocketClient.sslStream">
            <summary>
            Encrypted network stream. Only available if TLS has been negotiated.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.BinarySocketClient.negotiateStream">
            <summary>
            Negotiate network stream to use for client autentification. Only available if authentication has been negotiated.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.#ctor(System.String,System.Int32)">
            <summary>
            Class managing a binary client socket.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Registers a line listener for listening to the traffic.
            </summary>
            <param name="LineListener">Line Listener to register.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Unregisters a line listener.
            </summary>
            <param name="LineListener">Line Listener to unregister.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.ChangeAddress(System.String,System.Int32)">
            <summary>
            Change the destination address.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.ChangeAddress(System.String)">
            <summary>
            Change the destination address.
            </summary>
            <param name="Address">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.Open">
            <summary>
            Opens a client connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.Close">
            <summary>
            Closes the client connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.StartTls(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Starts TLS Negotiation, using a default timeout of 30 s.
            </summary>
            <param name="ServerCertificateValidationCallback">Method to call to validate the server certificate.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.StartTls(System.Net.Security.RemoteCertificateValidationCallback,System.Int32)">
            <summary>
            Starts TLS Negotiation.
            </summary>
            <param name="ServerCertificateValidationCallback">Method to call to validate the server certificate.</param>
            <param name="Timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.StartAuthentication">
            <summary>
            Starts Negotiation for authentication of user, using a default timeout of 30 s.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.StartAuthentication(System.Int32)">
            <summary>
            Starts Negotiation for authentication of user, using a default timeout of 30 s.
            </summary>
            <param name="Timeout">Timeout to use</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.EndAuthentication">
            <summary>
            End Negotiation stream, but not underlying connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerMessage(System.String)">
            <summary>
            Logs a message to registered line listeners.
            </summary>
            <param name="Message">Message to log.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerError(System.String)">
            <summary>
            Logs an error to registered line listeners.
            </summary>
            <param name="Message">Erorr Message to log.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.Send(System.Byte[])">
            <summary>
            Sends binary data to the server.
            </summary>
            <param name="Data">Data to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            Logs a block of received data to registered line listeners.
            </summary>
            <param name="Id">ID attached to the block of data.</param>
            <param name="Data">Data being read.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.ReadFromStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the connection.
            </summary>
            <param name="Buffer">Buffer to read into.</param>
            <param name="Offset">Start at this offset.</param>
            <param name="Count">Read this number of bytes.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.BinarySocketException(System.String,System.Type)">
            <summary>
            Creates an exception object of a given type.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Type">Exception object.</param>
            <returns>Newly created Exception object</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.Receive(System.Byte[])">
            <summary>
            Receive data from the socket.
            </summary>
            <param name="Buffer">Buffer to receive data into.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinarySocketClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.Address">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.ReceiveTimeout">
            <summary>
            Reception timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.SendTimeout">
            <summary>
            Transmission timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.IsOpen">
            <summary>
            If the client connection is open.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.HasData">
            <summary>
            If data is available in the input buffer.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinarySocketClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.AlarmAction">
            <summary>
            vCalendar Alarm Action
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.Audio">
            <summary>
            Audio alarm
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.Display">
            <summary>
            Display an alarm
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.EMail">
            <summary>
            EMail Alarm
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.Procedure">
            <summary>
            Procedure
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.AlarmAction.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.CalendarAlarm">
            <summary>
            Class representing a vCalendar Alarm.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarAlarm.Description">
            <summary>
            Alarm description.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarAlarm.RepeatCount">
            <summary>
            Alarm repeat count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarAlarm.Action">
            <summary>
            Alarm action.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarAlarm.Trigger">
            <summary>
            Trigger timepoint.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.CommonName">
            <summary>
            Class representing a common name in a calendar record.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CommonName.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CommonName.AddressType">
            <summary>
            Address type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CommonName.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.EventPriority">
            <summary>
            Event priority 1-9, where 1 is High and 9 is low.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventPriority.Undefined">
            <summary>
            Undefined priority (0)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventPriority.High">
            <summary>
            High priority (1)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventPriority.Normal">
            <summary>
            Normal priority (5)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventPriority.Low">
            <summary>
            Low priority (9)
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.EventClass">
            <summary>
            Event classification
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventClass.Public">
            <summary>
            Public event
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventClass.Private">
            <summary>
            Private event
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventClass.Confidential">
            <summary>
            Confidential event
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventClass.Other">
            <summary>
            Other type of event
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventClass.Undefined">
            <summary>
            Undefined type of event
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.EventStatus">
            <summary>
            Event status
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventStatus.Tentative">
            <summary>
            Tentative
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventStatus.Confirmed">
            <summary>
            Confirmed
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventStatus.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.EventStatus.Undefined">
            <summary>
            Undefined status
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.TimeTransparency">
            <summary>
            Time transparency
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.TimeTransparency.Opaque">
            <summary>
            Opaque
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.TimeTransparency.Transparent">
            <summary>
            Transparent
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Calendar.TimeTransparency.Undefined">
            <summary>
            Undefined time transparency
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.CalendarEvent">
            <summary>
            Class representing a vCalendar event.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Organizer">
            <summary>
            Organizer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Attendees">
            <summary>
            Array of attendees.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Alarms">
            <summary>
            Array of alarms.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Description">
            <summary>
            Event Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Summary">
            <summary>
            Event summary
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Uid">
            <summary>
            Unique identifier of event.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Location">
            <summary>
            Event location
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Class">
            <summary>
            Event classification
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Priority">
            <summary>
            Event priority
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Created">
            <summary>
            When the event was created.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.TimeTransparency">
            <summary>
            Time transparency
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.EventStatus">
            <summary>
            Event status.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Sequence">
            <summary>
            Sequence.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.Start">
            <summary>
            Start of event.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.CalendarEvent.End">
            <summary>
            End of event.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.TimePoint">
            <summary>
            Class representing a vCalendar Timepoint.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.TimePoint.TimeZone">
            <summary>
            Time Zone
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.TimePoint.Timepoint">
            <summary>
            Time Point.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.TimeZone">
            <summary>
            Class representing a Time Zone in a vCalendar entry.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.TimeZone.Name">
            <summary>
            Name of the Time zone.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.vCalendar">
            <summary>
            Class representing a vCalendar item.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.#ctor">
            <summary>
            Class representing a vCalendar item.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.#ctor(System.String)">
            <summary>
            Class representing a vCalendar item.
            </summary>
            <param name="vCalendarString">String containing the vCalendar definition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.FindTimeZone(System.String)">
            <summary>
            Find time zone.
            </summary>
            <param name="Name">Name of time zone</param>
            <returns>Time Zone</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.AcceptResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName)">
            <summary>
            Craetes an Accept response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.AcceptResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName,System.String)">
            <summary>
            Craetes an Accept response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <param name="Comment">Comment</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.DeclineResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName)">
            <summary>
            Craetes a Decline response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.DeclineResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName,System.String)">
            <summary>
            Craetes a Decline response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <param name="Comment">Comment</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.TentativeResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName)">
            <summary>
            Craetes a tentative response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.vCalendar.TentativeResponse(Clayster.Library.Internet.Calendar.CalendarEvent,Clayster.Library.Internet.Calendar.CommonName,System.String)">
            <summary>
            Craetes a tentative response of the current item.
            </summary>
            <param name="Event">Event</param>
            <param name="Attendee">Attendee</param>
            <param name="Comment">Comment</param>
            <returns>Response</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.Content">
            <summary>
            Constent
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.Xml">
            <summary>
            XML Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.Events">
            <summary>
            Events
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.TimeZones">
            <summary>
            Time Zones
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.XmlString">
            <summary>
            XML Document as a string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.ProductIdentifier">
            <summary>
            Product Identifier
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.vCalendar.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.BinaryCommandOutgoing">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.#ctor(Clayster.Library.Internet.BinaryCommandServer)">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <param name="Server">Server</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.#ctor(Clayster.Library.Internet.BinaryCommandServer,System.Boolean)">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <param name="Server">Server</param>
            <param name="UseBinaryMarshallingOfFloats">True if float values should be marshalled through binary format, false if string representation should be used. 
            Note: Use string representation to be backward compatable, if both receiving and sending party is in agreement to use binary marshalling set this parameter to true.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.#ctor(Clayster.Library.Internet.BinaryCommandClient)">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <param name="Client">Client</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.#ctor(Clayster.Library.Internet.BinaryCommandClient,System.Boolean)">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <param name="Client">Client</param>
            <param name="LineListener">If the line listener function should be active or not.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.#ctor(Clayster.Library.Internet.BinaryCommandClient,System.Boolean,System.Boolean)">
            <summary>
            Binary Command Outgoing Data
            </summary>
            <param name="Client">Client</param>
            <param name="LineListener">If the line listener function should be active or not.</param>
            <param name="UseBinaryMarshallingOfFloats">True if float values should be marshalled through binary format, false if string representation should be used. 
            Note: Use string representation to be backward compatable, if both receiving and sending party is in agreement to use binary marshalling set this parameter to true.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Byte)">
            <summary>
            Adds a byte to the response.
            </summary>
            <param name="b">Byte to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Boolean)">
            <summary>
            Adds a boolean value to the response.
            </summary>
            <param name="b">Boolean value to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Int16)">
            <summary>
            Adds an integer to the response.
            </summary>
            <param name="i">Integer to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Int32)">
            <summary>
            Adds an integer to the response.
            </summary>
            <param name="i">Integer to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Int64)">
            <summary>
            Adds an integer to the response.
            </summary>
            <param name="i">Integer to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Byte[])">
            <summary>
            Adds a block of binary data to the response.
            </summary>
            <param name="Data">Binary data to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.String)">
            <summary>
            Adds a string to the response.
            </summary>
            <param name="s">String to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.String[])">
            <summary>
            Adds an array of strings to the response.
            </summary>
            <param name="s">Strings to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.DateTime)">
            <summary>
            Adds a Date &amp; Time value to the response.
            </summary>
            <param name="Timepoint">Date &amp; Time value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.TimeSpan)">
            <summary>
            Adds a Time Span to the response.
            </summary>
            <param name="TimeSpan">Time Span value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Double)">
            <summary>
            Adds a double to the response.
            </summary>
            <param name="d">Double value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandOutgoing.Add(System.Drawing.Color)">
            <summary>
            Adds acolor to the response.
            </summary>
            <param name="c">Color to add.</param>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandOutgoing.Buffer">
            <summary>
            Gets the response buffer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandOutgoing.LineListener">
            <summary>
            If line listening is active.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandOutgoing.LineListenerData">
            <summary>
            Accumulated line listener data.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.OnBinaryClientCommandReceivedDelegate">
            <summary>
            Delegate used for client side binary command receiption events.
            </summary>
            <param name="Client">Binary command server receiving the command.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.BinaryCommandClient">
            <summary>
            Binary Command Client
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Binary Command Client
            </summary>
            <param name="ClientName">Name of the client. Can be used for identification.</param>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="BufferSize">BufferSize</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.#ctor(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Binary Command Client
            </summary>
            <param name="ClientName">Name of the client. Can be used for identification.</param>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="BufferSize">BufferSize</param>
            <param name="UniqueId">Unique id (guid string for instance) that identifies the client</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RegisterCommand(System.Int32,Clayster.Library.Internet.OnBinaryClientCommandReceivedDelegate)">
            <summary>
            Registers a binary command with the client.
            </summary>
            <param name="Command">Command number.</param>
            <param name="EventHandler">Event handler to handle the particular command.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.Open">
            <summary>
            <see cref="M:Clayster.Library.Internet.BinarySocketClient.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.Close">
            <summary>
            <see cref="M:Clayster.Library.Internet.BinarySocketClient.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.Recycle">
            <summary>
            Is called when the connection needs to be recycled, i.e. closed and reopened.
            It calls the <see cref="E:Clayster.Library.Internet.BinaryCommandClient.OnConnectionRecycle"/> event after closing and
            successfully opening the connection again.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,Clayster.Library.Internet.BinaryCommandOutgoing)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,System.Byte[])">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,System.Int32)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="TimeoutMs">Maximum time (in milliseconds) to wait for a response.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,Clayster.Library.Internet.BinaryCommandOutgoing,System.Int32)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <param name="TimeoutMs">Maximum time (in milliseconds) to wait for a response.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <param name="TimeoutMs">Maximum time (in milliseconds) to wait for a response.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.RequestRespond(System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Performs a request respond.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <param name="TimeoutMs">Maximum time (in milliseconds) to wait for a response.</param>
            <param name="SilenceMode">If the client should enter silence mode with this request. This means all other
            outgoing commands are queued, and no more read events are performed. The silence mode can be
            ended by calling <see cref="M:Clayster.Library.Internet.BinaryCommandClient.EndSilence"/>.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.SendCommand(System.Int32)">
            <summary>
            Sends a command to the server.
            </summary>
            <param name="CommandNr">Command number</param>
            <returns>Sequence number of command.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.SendCommand(System.Int32,Clayster.Library.Internet.BinaryCommandOutgoing)">
            <summary>
            Sends a command to the server.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <returns>Sequence number of command.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.SendCommand(System.Int32,System.Byte[])">
            <summary>
            Sends a command to the server.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <returns>Sequence number of command.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.SendAck(System.Int32)">
            <summary>
            Sends an acknowledge response to a given command.
            </summary>
            <param name="SequenceNr">Sequence number</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.IsQueued(System.Int32)">
            <summary>
            Check if command to send is queued.
            </summary>
            <param name="SequenceNr">Sequence number</param>
            <returns>True if command with sequence number is queued to be sent, false otherwise</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.SendCommand(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Sends a command to the server.
            </summary>
            <param name="CommandNr">Command number</param>
            <param name="Data">Binary data</param>
            <param name="SequenceNr">Sequence number.</param>
            <returns>Sequence number of command.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandClient.EndSilence">
            <summary>
            Ends silence mode.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandClient.Id">
            <summary>
            ID of the client. Is used to identify the client.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandClient.ClientName">
            <summary>
            Name of the client. Can be used for identification.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandClient.UseBinaryMarshallingOfFloats">
            <summary>
            True if float values should be marshalled through binary format, false if string representation should be used. 
            Note: Use string representation to be backward compatable, if both receiving and sending party is in agreement to use binary marshalling set this parameter to true.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandClient.RequestResponseTimeoutMs">
            <summary>
            Default maximum time (in milliseconds) to wait for a response to a given request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandClient.IsInReceiveMode">
            <summary>
            If the client is currently listening for incoming traffic.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.BinaryCommandClient.OnConnectionRecycle">
            <summary>
            Event raised when the connection has been recycled.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Address">
            <summary>
            Class representing an address in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.Address.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.PostOfficeBox">
            <summary>
            Post-offic Box
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.ExtendedAddress">
            <summary>
            Extended address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.StreetAddress">
            <summary>
            Street address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Locality">
            <summary>
            Locality
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.PostalCode">
            <summary>
            Postal code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.CountryName">
            <summary>
            Country name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Domestic">
            <summary>
            Domestic address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.International">
            <summary>
            International address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Postal">
            <summary>
            Postal address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Parcel">
            <summary>
            Parcel delivery address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Home">
            <summary>
            Home address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Work">
            <summary>
            Work address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Address.Preferred">
            <summary>
            Preferred address
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Coordinates">
            <summary>
            Class representing a coordinate a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.Coordinates.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Coordinates.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Coordinates.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Coordinates.Defined">
            <summary>
            If the coordinates are well defined.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.ImType">
            <summary>
            Instant Messaging Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.AIM">
            <summary>
            AIM
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.ICQ">
            <summary>
            ICQ
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Jabber">
            <summary>
            Jabber (XMPP)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.MSN">
            <summary>
            MSN
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Yahoo">
            <summary>
            Yahoo
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Skype">
            <summary>
            Skype User Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Gadugadu">
            <summary>
            GADUGADU
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Groupwise">
            <summary>
            GroupWise
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Card.ImType.Unknown">
            <summary>
            Unknown or unspecified.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.IMAddress">
            <summary>
            Class representing an Instant Messaging (IM) Address in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Card.PhoneNumber">
            <summary>
            Class representing a phone number in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.PhoneNumber.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Number">
            <summary>
            Telephone number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Personal">
            <summary>
            Personal
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Business">
            <summary>
            Business
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Home">
            <summary>
            Home number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Message">
            <summary>
            Message number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Work">
            <summary>
            Work number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Voice">
            <summary>
            Voice number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Fax">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Cellular">
            <summary>
            Cellular number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Video">
            <summary>
            Video number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Bbs">
            <summary>
            BBS number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Car">
            <summary>
            HomCar number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Isdn">
            <summary>
            ISDN number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Pcs">
            <summary>
            PCS number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Pager">
            <summary>
            Pager
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.PhoneNumber.Preferred">
            <summary>
            Preferred number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.IMAddress.IMType">
            <summary>
            Instant Messaging Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Organization">
            <summary>
            Class representing an organization in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.Organization.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Organization.OrganizationName">
            <summary>
            Organization Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Organization.UnitNames">
            <summary>
            Unit Names
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Photo">
            <summary>
            Class representing a photo in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Photo.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Photo.Url">
            <summary>
            URL of image. The empty string, if the image was embedded into the vCard.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Photo.IsLoaded">
            <summary>
            If the image is loaded into the Photo object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Photo.Type">
            <summary>
            IANA Image Type (if available).
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.EMail">
            <summary>
            Class representing an email address in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.EMail.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.EMail.EMailAddress">
            <summary>
            EMail Address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.EMail.Internet">
            <summary>
            Internet address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.EMail.X400">
            <summary>
            X.400 Address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.EMail.Preferred">
            <summary>
            Preferred address
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Label">
            <summary>
            Class representing an address label in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.Label.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Text">
            <summary>
            Address label text
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Domestic">
            <summary>
            Domestic address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.International">
            <summary>
            International address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Postal">
            <summary>
            Postal address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Parcel">
            <summary>
            Parcel delivery address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Home">
            <summary>
            Home address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Work">
            <summary>
            Work address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Label.Preferred">
            <summary>
            Preferred address
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.Name">
            <summary>
            Class representing a name in a vCard record.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.Name.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Name.FamilyName">
            <summary>
            Family Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Name.GivenName">
            <summary>
            Given Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Name.AdditionalNames">
            <summary>
            Additional Names
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Name.HonorificPrefixes">
            <summary>
            Honorific Prefixes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.Name.HonorificSuffixes">
            <summary>
            Honorific Suffixes
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.vCard">
            <summary>
            Class representing a vCard item.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.vCard.#ctor">
            <summary>
            Class representing a vCard item.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Card.vCard.#ctor(System.String)">
            <summary>
            Class representing a vCard item.
            </summary>
            <param name="vCardString">String containing the vCard definition.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Content">
            <summary>
            Constent
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Xml">
            <summary>
            XML Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.XmlString">
            <summary>
            XML Document as a string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.CommonNames">
            <summary>
            Common names.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Surname">
            <summary>
            Surname
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.FormattedName">
            <summary>
            Formatted Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.NickNames">
            <summary>
            Nick Names
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Addresses">
            <summary>
            Addresses.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Labels">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.PhoneNumbers">
            <summary>
            Phone Numbers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.EMails">
            <summary>
            EMail Addresses
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Mailer">
            <summary>
            Mailer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Photos">
            <summary>
            Photos
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.BirthDate">
            <summary>
            Birth Date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.TimeZone">
            <summary>
            Time Zone
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Coordinates">
            <summary>
            Coordinates
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Logo">
            <summary>
            Logo
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.CardPicture">
            <summary>
            Card Picture (MS Outlook Extension to vCard)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.vCard.IMAddresses">
            <summary>
            Instant Messaging Addresses
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapResponseEventHandler">
            <summary>
            Delegate for CoAP response events.
            </summary>
            <param name="Endpoint">Endpoint sending the original request.</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapEndpoint">
            <summary>
            Handles a CoAP Endpoint. This includes both CoAP client and server message management.
            
            CoAP is described in:
            http://tools.ietf.org/html/rfc7252
            
            Block-wise transfer is described in:
            http://tools.ietf.org/html/draft-ietf-core-block-15
            
            The observation pattern is described in:
            http://tools.ietf.org/html/draft-ietf-core-observe-14
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapEndpoint.DefaultCoapPort">
            <summary>
            Default port for CoAP is 5683.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapEndpoint.DefaultCoapsPort">
            <summary>
            Default port for CoAP Secure is 5684.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapEndpoint.CoapIp4MulticastAddress">
            <summary>
            CoAP IP4 Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapEndpoint.CoapIp6LinkLocalMulticastAddress">
            <summary>
            CoAP IP6 Link Local Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapEndpoint.CoapIp6SiteLocalMulticastAddress">
            <summary>
            CoAP IP6 Site Local Multicast address
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.#ctor">
            <summary>
            Handles a CoAP Endpoint. This includes both CoAP client and server message management.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.#ctor(System.Int32)">
            <summary>
            Handles a CoAP Endpoint. This includes both CoAP client and server message management.
            </summary>
            <param name="Port">Port number to use for incoming trafic.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.#ctor(System.Int32,System.Int16,System.String[])">
            <summary>
            Handles a CoAP Endpoint. This includes both CoAP client and server message management.
            </summary>
            <param name="Port">Port number to use for incoming trafic.</param>
            <param name="Ttl">Time to live, i.e. number of router hops allowed.</param>
            <param name="MulticastAddresses">Any multi-cast addresses to listen on.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartNotification(System.Net.Sockets.UdpClient,System.Boolean,System.Nullable{System.UInt64},System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapResponseCode,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a notification
            </summary>
            <param name="Client">UDP Client to send the notification with. Can be null.</param>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Token">Optional token to use. If not provided, one will be generated.</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="ResponseCode">CoAP Response Code</param>
            <param name="Payload">Optional payload to include in request.</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartRequest(System.Boolean,System.Nullable{System.UInt64},System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapRequestMethod,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Token">Optional token to use. If not provided, one will be generated.</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Method">CoAP Method</param>
            <param name="Payload">Optional payload to include in request.</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartGET(System.Boolean,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a GET request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.GET(System.Boolean,System.String,System.Int32,System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Performs a GET request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartObserve(System.Boolean,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts to observe a resource, using confirmed delivery.
            </summary>
            <param name="Confirmable">If the request and notifications should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.Observe(System.String,System.Int32,System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Request to observe a resource.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartEndObserve(System.UInt64,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Stops observing a resource.
            </summary>
            <param name="Token">Token of subscription.</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartEndObserve(System.UInt64,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Stops observing a resource.
            </summary>
            <param name="Token">Token of subscription.</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.EndObserve(System.UInt64,System.String,System.Int32,System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Stops observing a resource.
            </summary>
            <param name="Token">Token of subscription.</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartPOST(System.Boolean,System.String,System.Int32,System.String,System.String,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a POST request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Payload">Payload</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.POST(System.Boolean,System.String,System.Int32,System.String,System.String,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Performs a POST request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Payload">Payload</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartPUT(System.Boolean,System.String,System.Int32,System.String,System.String,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a PUT request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Payload">Payload</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.PUT(System.Boolean,System.String,System.Int32,System.String,System.String,System.Object,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Performs a PUT request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Payload">Payload</param>
            <param name="BlockSize">Block size to use when transmitting payload.</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.StartDELETE(System.Boolean,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Starts a DELETE request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.DELETE(System.Boolean,System.String,System.Int32,System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Performs a DELETE request
            </summary>
            <param name="Confirmable">If the request should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="Timeout">Timeout, in milliseconds</param>
            <param name="AdditionalOptions">Additional options</param>
            <returns>CoAP Response</returns>
            <exception cref="T:System.TimeoutException">If no response was returned within the given period of time.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterResource(Clayster.Library.Internet.CoAP.CoapResource)">
            <summary>
            Registers a resource on the endpoint.
            </summary>
            <param name="Resource">CoAP Resource</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterResource(System.String,System.String,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Nullable{System.Int32},System.Boolean,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler)">
            <summary>
            Registers a resource on the endpoint.
            </summary>
            <param name="Path">Path</param>
            <param name="Title">Title of the resource.</param>
            <param name="BlockSize">Block Size to use for responses.</param>
            <param name="AllowSubPaths">If sub-paths are allowed.</param>
            <param name="MaxAgeSeconds">Maximum age of content, in seconds, if known.</param>
            <param name="Observable">If the resource is observable or not.</param>
            <param name="GetMethod">GET method, if GET is supported, null otherwise.</param>
            <param name="PostMethod">POST method, if POST is supported, null otherwise.</param>
            <param name="PutMethod">PUT method, if PUT is supported, null otherwise.</param>
            <param name="DeleteMethod">DELETE method, if DELETE is supported, null otherwise.</param>
            <returns>The implicitly created CoAP resource.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterResource(System.String,System.String,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Nullable{System.Int32},System.Boolean,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler)">
            <summary>
            Registers a resource on the endpoint.
            </summary>
            <param name="Path">Path</param>
            <param name="Title">Title of the resource.</param>
            <param name="BlockSize">Block Size to use for responses.</param>
            <param name="AllowSubPaths">If sub-paths are allowed.</param>
            <param name="MaxAgeSeconds">Maximum age of content, in seconds, if known.</param>
            <param name="Observable">If the resource is observable or not.</param>
            <param name="GetMethod">GET method, if GET is supported, null otherwise.</param>
            <param name="PostMethod">POST method, if POST is supported, null otherwise.</param>
            <param name="PutMethod">PUT method, if PUT is supported, null otherwise.</param>
            <returns>The implicitly created CoAP resource.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterResource(System.String,System.String,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Nullable{System.Int32},System.Boolean,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler)">
            <summary>
            Registers a resource on the endpoint.
            </summary>
            <param name="Path">Path</param>
            <param name="Title">Title of the resource.</param>
            <param name="BlockSize">Block Size to use for responses.</param>
            <param name="MaxAgeSeconds">Maximum age of content, in seconds, if known.</param>
            <param name="Observable">If the resource is observable or not.</param>
            <param name="AllowSubPaths">If sub-paths are allowed.</param>
            <param name="GetMethod">GET method, if GET is supported, null otherwise.</param>
            <param name="PostMethod">POST method, if POST is supported, null otherwise.</param>
            <returns>The implicitly created CoAP resource.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEndpoint.RegisterResource(System.String,System.String,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Nullable{System.Int32},System.Boolean,Clayster.Library.Internet.CoAP.CoapMethodEventHandler)">
            <summary>
            Registers a resource on the endpoint.
            </summary>
            <param name="Path">Path</param>
            <param name="Title">Title of the resource.</param>
            <param name="BlockSize">Block Size to use for responses.</param>
            <param name="AllowSubPaths">If sub-paths are allowed.</param>
            <param name="MaxAgeSeconds">Maximum age of content, in seconds, if known.</param>
            <param name="Observable">If the resource is observable or not.</param>
            <param name="GetMethod">GET method, if GET is supported, null otherwise.</param>
            <returns>The implicitly created CoAP resource.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.LineListeners">
            <summary>
            Array of registered line listeners (possibly an empty array).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.NrOutstandingTokens">
            <summary>
            Number of outstanding long requests, identified by Tokens.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.NrOutstandingMessageIds">
            <summary>
            Number of outstanding short requests, identified by Message IDs.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.ActiveTokens">
            <summary>
            Tokens still active.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.ActiveMessageIds">
            <summary>
            Message IDs still active.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckTimeout">
            <summary>
            Minimum ACK timeout, in milliseconds. Retries will be sent between <see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckTimeout"/> and <see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckTimeout"/>*<see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckRandomFactor"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckRandomFactor">
            <summary>
            ACK timeout random factor. Retries will be sent between <see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckTimeout"/> and <see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckTimeout"/>*<see cref="P:Clayster.Library.Internet.CoAP.CoapEndpoint.AckRandomFactor"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.MaxRetransmit">
            <summary>
            Maximum number of retransmissions of a request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEndpoint.Port">
            <summary>
            Port number used to receive incoming messages on.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapOption">
            <summary>
            Base class for CoAP Options.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode)">
            <summary>
            Base class for CoAP Options.
            </summary>
            <param name="Code">Option code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOption.#ctor(System.Int32)">
            <summary>
            Base class for CoAP Options.
            </summary>
            <param name="Code">Option code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOption.SerializeValue(System.IO.Stream)">
            <summary>
            Serializes the option value to a stream.
            </summary>
            <param name="Output">Serializes the option value to this stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            Converts the CoAP Option to the HTTP equivalent.
            </summary>
            <param name="Headers">HTTP headers</param>
            <param name="Query">HTTP Query</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.Code">
            <summary>
            Option code.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.Length">
            <summary>
            Length of option value, in bytes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOption.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapResponse">
            <summary>
            Event arguments for a CoAP response event.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResponse.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,System.Object,Clayster.Library.Internet.CoAP.CoapOption[],System.Object,System.Boolean,System.UInt64)">
            <summary>
            Event arguments for a CoAP response event.
            </summary>
            <param name="ResponseCode">Response code received.</param>
            <param name="Response">Decoded object received in response.</param>
            <param name="Options">Options received in response.</param>
            <param name="State">State object provided in request.</param>
            <param name="Timeout">If a timeout occurred. If true, no response was returned.</param>
            <param name="Token">Token used in response.</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.ResponseCode">
            <summary>
            Status code received.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.Response">
            <summary>
            Decoded object received in response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.Options">
            <summary>
            Options received in response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.State">
            <summary>
            State object provided in request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.Timeout">
            <summary>
            If a timeout occurred. If true, no response was returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResponse.Token">
            <summary>
            Token used in response.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapRequest">
            <summary>
            Contains information about an ongoing CoAP request.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.#ctor(System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath[],Clayster.Library.Internet.CoAP.CoapVersion,Clayster.Library.Internet.CoAP.CoapMessageType,System.UInt64,System.UInt16,System.Byte,System.Byte[],Clayster.Library.Internet.CoAP.CoapBlockSize,Clayster.Library.Internet.CoAP.CoapOption[],Clayster.Library.Internet.CoAP.CoapResponseEventHandler,System.Object,System.Double,System.Net.IPEndPoint)">
            <summary>
            Contains information about an ongoing CoAP request.
            </summary>
            <param name="BaseUrl">Base URL of request</param>
            <param name="Host">Host</param>
            <param name="Port">Port</param>
            <param name="SubPath">Sub-path, if any, or null if none.</param>
            <param name="Version">CoAP Version</param>
            <param name="Type">Message Type</param>
            <param name="Token">Token</param>
            <param name="MessageId">Message ID</param>
            <param name="Code">CoAP Response Code or Method</param>
            <param name="Payload">Payload</param>
            <param name="BlockSize">Block size of outgoing data.</param>
            <param name="Options">CoAP Options</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object to forward to callback method.</param>
            <param name="TimeoutMs">Timeout, in milliseconds.</param>
            <param name="From">From which IP Endpoint the request originated.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.StoreRequestBlock(System.Byte[],System.Int32)">
            <summary>
            Stores a block of information received as part of a request.
            </summary>
            <param name="Block">Block of information</param>
            <param name="SequenceNr">Block sequence nr.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.SumAndClearRequestBlocks">
            <summary>
            Sums all stored blocks as part of a request.
            </summary>
            <returns>Sum of all stored blocks as part of a request.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.StoreResponseBlock(System.Byte[],System.Int32)">
            <summary>
            Stores a block of information received as part of a response.
            </summary>
            <param name="Block">Block of information</param>
            <param name="SequenceNr">Block sequence nr.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.SumAndClearResponseBlocks">
            <summary>
            Sums all stored blocks as part of a response.
            </summary>
            <returns>Sum of all stored blocks as part of a response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.StoreBlock(System.Byte[],Clayster.Library.Internet.CoAP.CoapMessageType,System.Int32)">
            <summary>
            Stores a block of information received.
            </summary>
            <param name="Block">Block of information</param>
            <param name="Type">Message type of incoming message</param>
            <param name="SequenceNr">Block sequence nr.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.HasStoredBlocks(Clayster.Library.Internet.CoAP.CoapMessageType)">
            <summary>
            If the response has stored blocks.
            </summary>
            <param name="Type">Message type of incoming message</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.SumAndClearBlocks(Clayster.Library.Internet.CoAP.CoapMessageType)">
            <summary>
            Sums all stored blocks as part of a response.
            </summary>
            <param name="Type">Message type of incoming message</param>
            <returns>Sum of all stored blocks as part of a response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.Accepts(System.UInt32)">
            <summary>
            Checks if the caller accepts a specific content format.
            </summary>
            <param name="ContentFormat">CoAP Content Format to check.</param>
            <returns>If a response with this content format is accepted.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapRequest.ToHttpRequest">
            <summary>
            Converts the CoAP request object to a HTTP request object.
            </summary>
            <returns>HTTP request</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.BaseUrl">
            <summary>
            Base URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Host">
            <summary>
            Host name or IP address to send the request to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Port">
            <summary>
            port number to send the request to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.SubPath">
            <summary>
            Sub-path, if any, or null if none.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.From">
            <summary>
            IP Address from which the request came.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Version">
            <summary>
            CoAP Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Type">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Code">
            <summary>
            CoAP Response code or method
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Payload">
            <summary>
            Payload
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.PayloadDecoded">
            <summary>
            Payload, decoded
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Options">
            <summary>
            CoAP Options
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.Callback">
            <summary>
            Callback method
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.State">
            <summary>
            State object to forward to callback method.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.LastAccess">
            <summary>
            When the token of this request was last accessed. Can be used to detect observable resources that have stopped sending events.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.LastClient">
            <summary>
            Last UDP Client
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.LastSentDatagram">
            <summary>
            Last sent datagram.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.LastMessageId">
            <summary>
            Last Message ID used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.RetransmissionCount">
            <summary>
            Retransmission count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.TimeoutMs">
            <summary>
            Timeout, in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.HasStoredRequestBlocks">
            <summary>
            If the request has stored blocks as part of a request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.HasStoredResponseBlocks">
            <summary>
            If the response has stored blocks as part of a response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapRequest.HasAccepts">
            <summary>
            If the request has Accepts options.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapMethodEventHandler">
            <summary>
            Event Handler for Coap Methods.
            </summary>
            <param name="Request">Request object</param>
            <param name="DecodedPayload">Decoded payload, if any, null otherwise.</param>
            <returns>Object to return.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapResource">
            <summary>
            Base class for CoAP Resources.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.#ctor(System.String)">
            <summary>
            Base class for CoAP Resources.
            </summary>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.Allow(Clayster.Library.Internet.CoAP.CoapRequestMethod)">
            <summary>
            If the method specified in <paramref name="Method"/> is supported by the resource.
            </summary>
            <param name="Method">CoAP Method</param>
            <returns>If method is supported.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.GET(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a GET request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.PUT(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a PUT request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.POST(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a POST request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.DELETE(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a DELETE request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.Subscribe(System.Net.IPEndPoint,System.UInt64,Clayster.Library.Internet.CoAP.CoapRequest,Clayster.Library.Internet.CoAP.CoapEndpoint)">
            <summary>
            Registers a new subscription
            </summary>
            <param name="Endpoint">Endpoint of client requesting the subscription.</param>
            <param name="Token">Token used for subscription.</param>
            <param name="Request">Original request.</param>
            <param name="CoapEndpoint">CoAP endpoint handling the communication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.Unsubscribe(System.Net.IPEndPoint,System.UInt64)">
            <summary>
            Unregisters a subscription
            </summary>
            <param name="Endpoint">Endpoint of client requesting the unsubscription.</param>
            <param name="Token">Token used for subscription.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.NotifySubscribers">
            <summary>
            Notify subscribers of new values available.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapResource.AppendLinkFormatResourceOptions(System.Text.StringBuilder)">
            <summary>
            Appends Link Format resource options to the current link.
            </summary>
            <param name="Output">Link Format output.</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.Path">
            <summary>
            Path of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.Segments">
            <summary>
            Path segments.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.AllowSubPaths">
            <summary>
            If the resource handles all sub-paths as well.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.AllowGET">
            <summary>
            If GET is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.AllowPUT">
            <summary>
            If PUT is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.AllowPOST">
            <summary>
            If POST is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.AllowDELETE">
            <summary>
            If DELETE is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.BlockSize">
            <summary>
            Maximum size of payload in responses from a CoAP resource, before payload is divided into blocks.
            By default, no limit is set and <see cref="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_Datagram"/> is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.Observable">
            <summary>
            If the resource is observable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.MaxAgeSeconds">
            <summary>
            Max Age for content published by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapResource.Title">
            <summary>
            Title of the resource.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapException">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,System.String)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,System.Exception)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,System.String,System.Exception)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Message">Message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,Clayster.Library.Internet.CoAP.CoapResponse)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Response">CoAP response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,Clayster.Library.Internet.CoAP.CoapResponse,System.String)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Response">CoAP response.</param>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,Clayster.Library.Internet.CoAP.CoapResponse,System.Exception)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Response">CoAP response.</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapException.#ctor(Clayster.Library.Internet.CoAP.CoapResponseCode,Clayster.Library.Internet.CoAP.CoapResponse,System.String,System.Exception)">
            <summary>
            Base class for CoAP Exceptions.
            </summary>
            <param name="Code">CoAP Status Code</param>
            <param name="Response">CoAP response.</param>
            <param name="Message">Message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapException.Code">
            <summary>
            CoAP Status Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapException.Response">
            <summary>
            CoAP Response, if available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapDelegateResource">
            <summary>
            CoAP Delegate Resource.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapDelegateResource.#ctor(System.String,System.String,Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,Clayster.Library.Internet.CoAP.CoapMethodEventHandler,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            CoAP Delegate Resource.
            </summary>
            <param name="Path">Path</param>
            <param name="Title">Title of the resource.</param>
            <param name="BlockSize">Block Size to use for responses.</param>
            <param name="AllowSubPaths">If sub-paths are allowed.</param>
            <param name="GetMethod">GET method, if GET is supported, null otherwise.</param>
            <param name="PostMethod">POST method, if POST is supported, null otherwise.</param>
            <param name="PutMethod">PUT method, if PUT is supported, null otherwise.</param>
            <param name="DeleteMethod">DELETE method, if DELETE is supported, null otherwise.</param>
            <param name="MaxAge">Max age of content, in seconds, if any.</param>
            <param name="Observable">If the resource is observable or not.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapDelegateResource.GET(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a GET request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapDelegateResource.PUT(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a PUT request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapDelegateResource.POST(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a POST request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapDelegateResource.DELETE(Clayster.Library.Internet.CoAP.CoapRequest,System.Object)">
            <summary>
            Called when a DELETE request has been made to the resource.
            </summary>
            <param name="Request">Request object with details of the request.</param>
            <param name="DecodedPayload">Decoded payload.</param>
            <returns>Payload to return. Can be null, if no special response is to be returned. The CoAP engine encodes the payload using available CoAP Content Format encoders.</returns>
            <exception cref="T:Clayster.Library.Internet.CoAP.CoapException">Thrown, if a special CoAP error is to be returned.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.AllowSubPaths">
            <summary>
            If the resource handles all sub-paths as well.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.AllowGET">
            <summary>
            If GET is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.AllowPUT">
            <summary>
            If PUT is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.AllowPOST">
            <summary>
            If POST is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.AllowDELETE">
            <summary>
            If DELETE is supported by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.BlockSize">
            <summary>
            Maximum size of payload in responses from a CoAP resource, before payload is divided into blocks.
            By default, no limit is set and <see cref="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_Datagram"/> is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.Observable">
            <summary>
            If the resource is observable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.MaxAgeSeconds">
            <summary>
            Max Age for content published by the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapDelegateResource.Title">
            <summary>
            Title of the resource.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapObserver">
            <summary>
            Class observing changes frmo an observable CoAP resource.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapObserver.#ctor(Clayster.Library.Internet.CoAP.CoapEndpoint,System.Boolean,System.String,System.Int32,System.String,System.String,System.Int32,Clayster.Library.Internet.CoAP.CoapOption[])">
            <summary>
            Class observing changes frmo an observable CoAP resource.
            </summary>
            <param name="Endpoint">CoAP Endpoint.</param>
            <param name="Confirmable">If the request and notifications should be sent using confirmable message service (true) or unconfirmable message service (false).</param>
            <param name="Host">IP Address or host name</param>
            <param name="Port">Port number</param>
            <param name="Path">Path</param>
            <param name="Query">Query</param>
            <param name="AcceptedDelaySeconds">Accepted delay in receiving response, in seconds, before a retry is sent.</param>
            <param name="AdditionalOptions">Additional options</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapObserver.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.CoAP.CoapObserver.OnDataReceived">
            <summary>
            Event raised when a new value from the observable resource has been received successfully.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.CoAP.CoapObserver.OnError">
            <summary>
            Event raised when an error response or a timeout has been received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder">
            <summary>
            <para>Base interface used by all CoAP Decoders.</para>
            <para>Implementing this interface makes the class visible to the 
            CoAP Decoder. In this way you can create your own pluggable CoAP decoders.</para>
            <para>Important note: The class needs to have a default constructor defined
            for the CoAP Decoder to be able to use it.</para>
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)">
            <summary>
            Performs a CoAP Decoding.
            </summary>
            <param name="Data">Binary data to decode.</param>
            <param name="SourceUrl">Source URL, if available. If not, the empty string.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat">
            <summary>
            <para>CoAP Content Format supported by the CoAP Decoder.</para>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder">
            <summary>
            <para>Base interface used by all CoAP Encoders.</para>
            <para>Implementing this interface makes the class visible to the 
            CoAP Encoder. In this way you can create your own pluggable CoAP encoders.</para>
            <para>Important note: The class needs to have a default constructor defined
            for the CoAP Encoder to be able to use it.</para>
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            If the encoder can encode objects like the object provided.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="CoapContentFormat">Resulting CoAP Content Format.</param>
            <returns>How well the encoder can encode it.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            If the encoder can encode objects like the object provided using a
            specific CoAP Content Format.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredCoapContentFormat">Requested CoAP Content Format to use.</param>
            <returns>true if the encoder can encode it using the requested CoAP Content Format, 
            false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            Encodes a specific object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="CoapContentFormat">Resulting CoAP Content Format.</param>
            <param name="SupportGrade">How well the object was encoded.</param>
            <returns>Encoded object, or null if unable to encode it.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            Encodes a specific object using a specified CoAP Content Format.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredCoapContentFormat">Requested CoAP Content Format.</param>
            <param name="SupportGrade">How well the encoding is done.</param>
            <returns>Encoded object, or null if unable to encode it.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat">
            <summary>
            <para>CoAP Content Format supported by the CoAP Encoder.</para>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding">
            <summary>
            Utilities for CoAP decoding and encoding of objects.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Unload">
            <summary>
            Unloads all CoAP encoders and decoders. If new CoAP encodings or decodings are performed, the current application domain 
            will be scanned again for available encoders and decoders. Call this method after dynamically loading assemblies into the 
            application domain.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Decode(System.Byte[],System.UInt32)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="CoapContentFormat">CoAP Content Format of the object.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Decode(System.Byte[],System.UInt32,System.String)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="CoapContentFormat">CoAP Content Format of the object.</param>
            <param name="SourceUrl">File Name or URL</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.GetDecoder(System.UInt32)">
            <summary>
            Gets a CoAP Decoder corresponding to a given CoAP Content Format of File Name.
            </summary>
            <param name="CoapContentFormat">CoAP Content Format</param>
            <returns>CoAP decoder, if found, or null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.ContentFormatToContentType(System.UInt32)">
            <summary>
            Converts a Content Format to a Content Type.
            </summary>
            <param name="ContentFormat">Content Format.</param>
            <returns>Content Type, if found, or the empty string, if not recognized.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.GetEncodingCoapContentFormat(System.Object)">
            <summary>
            Gets the CoAP Content Format of an object. If no CoAP Encoder can be found supporting the object type, the empty string is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>CoAP Content Format of an object. If no CoAP Encoder can be found supporting the object type, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Encodes(System.Object)">
            <summary>
            If an object can be encoded with any of the CoAP Encoders available.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>true if the object can be encoded, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Encodes(System.Object,System.UInt32@)">
            <summary>
            If an object can be encoded with any of the CoAP Encoders available.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="CoapContentFormat">If the object can be encoded, the corresponding
            CoAP Content Format will be output into this variable. If the object cannot be
            encoded, the empty string is output.</param>
            <returns>true if the object can be encoded, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            If an object can be encoded using a specific CoAP Content Format.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredCoapContentFormat">CoAP Content Format to use.</param>
            <returns>true if the object can be encoded using the specified CoAP Content Format, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Encode(System.Object)">
            <summary>
            Tries to encode an object. If no encoder was found to encode the object, null is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>Encoded object. If no encoder was found to encode the object, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.Encode(System.Object,System.UInt32@)">
            <summary>
            Tries to encode an object. If no encoder was found to encode the object, null is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="CoapContentFormat">If the object is encoded, the corresponding CoAP Content Format is output to this
            variable. If not encoded, the empty string is output.</param>
            <returns>Encoded object. If no encoder was found to encode the object, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.EncodeSpecificType(System.Object,System.UInt32)">
            <summary>
            Tries to encode an object using a specified CoAP Content Format.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredCoapContentFormat">CoAP Content Format to use for encoding.</param>
            <returns>Encoded object if possible to encode, null if not.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.RegisteredDecoderCoapContentFormats">
            <summary>
            Returns an array of registered decoder CoAP Content Formats 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Encoding.CoapEncoding.RegisteredEncoderCoapContentFormats">
            <summary>
            Returns an array of registered encoder CoAP Content Formats 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapVersion">
            <summary>
            CoAP Version
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapVersion.CoapVersion1">
            <summary>
            CoAP version 1
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapMessageType">
            <summary>
            CoAP Message Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapMessageType.Confirmable">
            <summary>
            Confirmable
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapMessageType.NonConfirmable">
            <summary>
            Non-confirmable
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapMessageType.Acknowledgement">
            <summary>
            Acknowledgement
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapMessageType.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapRequestMethod">
            <summary>
            CoAP Request Method Code, according to §12.1.1, RFC 7252
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapRequestMethod.GET">
            <summary>
            GET=1
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapRequestMethod.POST">
            <summary>
            POST=2
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapRequestMethod.PUT">
            <summary>
            PUT=3
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapRequestMethod.DELETE">
            <summary>
            DELETE=4
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapResponseCode">
            <summary>
            CoAP Status Code, according to §12.1.2, RFC 7252
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Created">
            <summary>
            Created=2.01
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Deleted">
            <summary>
            Deleted=2.02
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Valid">
            <summary>
            Valid=2.03
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Changed">
            <summary>
            Changed=2.04
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Content">
            <summary>
            Content=2.05
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.Success_Continue">
            <summary>
            Content=2.31
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_BadRequest">
            <summary>
            Bad Request=4.00
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_Unauthorized">
            <summary>
            Unauthorized=4.01
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_BadOption">
            <summary>
            Bad Option=4.02
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_Forbidden">
            <summary>
            Forbidden=4.00
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_NotFound">
            <summary>
            Not Found=4.04
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_MethodNotAllowed">
            <summary>
            Method Not Allowed=4.05
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_NotAcceptable">
            <summary>
            Not Acceptable=4.06
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_RequestEntityIncomplete">
            <summary>
            Request Entity Incomplete=4.08
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_PreconditionFailed">
            <summary>
            Precondition Failed=4.12
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_RequestEntityTooLarge">
            <summary>
            Request Entity Too Large=4.13
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ClientError_UnsupportedContentFormat">
            <summary>
            Unsupported Content-Format=4.15
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_InternalServerError">
            <summary>
            Internal Server Error=5.00
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_NotImplemented">
            <summary>
            Not Implemented=5.01
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_BadGateway">
            <summary>
            Bad Gateway=5.02
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_ServiceUnavailable">
            <summary>
            Service Unavailable=5.03
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_GatewayTimeout">
            <summary>
            Gateway Timeout=5.04
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapResponseCode.ServerError_ProxyingNotSupported">
            <summary>
            Proxying Not Supported=5.05
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapOptionCode">
            <summary>
            CoAP Option Code, according to §12.2, RFC 7252
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.IfMatch">
            <summary>
            If-Match
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.UriHost">
            <summary>
            Uri-Host
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.ETag">
            <summary>
            ETag
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.IfNoneMatch">
            <summary>
            If-None-Match
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.Observe">
            <summary>
            Observe
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.UriPort">
            <summary>
            Uri-Port
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.LocationPath">
            <summary>
            Location-Path
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.UriPath">
            <summary>
            Uri-Path
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.ContentFormat">
            <summary>
            Content-Format
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.MaxAge">
            <summary>
            Max-Age
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.UriQuery">
            <summary>
            Uri-Query
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.Accept">
            <summary>
            Accept
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.LocationQuery">
            <summary>
            Location-Query
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.Block2">
            <summary>
            Block2
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.Block1">
            <summary>
            Block1
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.ProxyUri">
            <summary>
            Proxy-Uri
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.ProxyScheme">
            <summary>
            Proxy-Scheme
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapOptionCode.Size1">
            <summary>
            Size1
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapBlockSize">
            <summary>
            Maximum size of payload in responses from a CoAP resource, before payload is divided into blocks.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_16Bytes">
            <summary>
            Payload is divided into 16-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_32Bytes">
            <summary>
            Payload is divided into 32-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_64Bytes">
            <summary>
            Payload is divided into 64-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_128Bytes">
            <summary>
            Payload is divided into 128-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_256Bytes">
            <summary>
            Payload is divided into 256-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_512Bytes">
            <summary>
            Payload is divided into 512-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_1024Bytes">
            <summary>
            Payload is divided into 1024-byte blocks, if needed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.CoAP.CoapBlockSize.BlockLimit_Datagram">
            <summary>
            Payload is always sent in one datagram, and not divided into blocks.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapStringOption">
            <summary>
            Base class for CoAP string-valued Options.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapStringOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.String)">
            <summary>
            Base class for CoAP string-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapStringOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Base class for CoAP string-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapStringOption.SerializeValue(System.IO.Stream)">
            <summary>
            Serializes the option value to a stream.
            </summary>
            <param name="Output">Serializes the option value to this stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapStringOption.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapStringOption.Value">
            <summary>
            Option value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapStringOption.Length">
            <summary>
            Length of option value, in bytes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapUIntOption">
            <summary>
            Base class for CoAP uint-valued Options.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapUIntOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.UInt32)">
            <summary>
            Base class for CoAP uint-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapUIntOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Base class for CoAP uint-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapUIntOption.SerializeValue(System.IO.Stream)">
            <summary>
            Serializes the option value to a stream.
            </summary>
            <param name="Output">Serializes the option value to this stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapUIntOption.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapUIntOption.Value">
            <summary>
            Option value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapUIntOption.Length">
            <summary>
            Length of option value, in bytes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapEmptyOption">
            <summary>
            Base class for CoAP empty-valued Options.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEmptyOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode)">
            <summary>
            Base class for CoAP empty-valued Options.
            </summary>
            <param name="Code">Option code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEmptyOption.SerializeValue(System.IO.Stream)">
            <summary>
            Serializes the option value to a stream.
            </summary>
            <param name="Output">Serializes the option value to this stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapEmptyOption.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapEmptyOption.Length">
            <summary>
            Length of option value, in bytes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.CoapOpaqueOption">
            <summary>
            Base class for CoAP opaque-valued Options.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.Byte[])">
            <summary>
            Base class for CoAP opaque-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.#ctor(System.Int32,System.Byte[])">
            <summary>
            Base class for CoAP opaque-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.#ctor(Clayster.Library.Internet.CoAP.CoapOptionCode,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Base class for CoAP opaque-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.#ctor(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Base class for CoAP opaque-valued Options.
            </summary>
            <param name="Code">Option code.</param>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.SerializeValue(System.IO.Stream)">
            <summary>
            Serializes the option value to a stream.
            </summary>
            <param name="Output">Serializes the option value to this stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.CoapOpaqueOption.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOpaqueOption.Value">
            <summary>
            Option value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.CoapOpaqueOption.Length">
            <summary>
            Length of option value, in bytes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch">
            <summary>
            If-Match CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.#ctor(System.Byte[])">
            <summary>
            If-Match CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            If-Match CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfMatch.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionETag">
            <summary>
            ETag CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.#ctor(System.Byte[])">
            <summary>
            ETag CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            ETag CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionETag.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost">
            <summary>
            Uri-Host CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.#ctor(System.String)">
            <summary>
            Uri-Host CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Uri-Host CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriHost.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch">
            <summary>
            If-None-Match CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.#ctor">
            <summary>
            If-None-Match CoAP option
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionIfNoneMatch.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort">
            <summary>
            Uri-Port CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.#ctor(System.UInt32)">
            <summary>
            Uri-Port CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Uri-Port CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPort.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath">
            <summary>
            Location-Path CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.#ctor(System.String)">
            <summary>
            Location-Path CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Location-Path CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationPath.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath">
            <summary>
            Uri-Path CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.#ctor(System.String)">
            <summary>
            Uri-Path CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Uri-Path CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriPath.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat">
            <summary>
            Content-Format CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.#ctor(System.UInt32)">
            <summary>
            Content-Format CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Content-Format CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionContentFormat.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge">
            <summary>
            Max-Age CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.#ctor(System.UInt32)">
            <summary>
            Max-Age CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Max-Age CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionMaxAge.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery">
            <summary>
            Uri-Query CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.#ctor(System.String)">
            <summary>
            Uri-Query CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Uri-Query CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionUriQuery.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept">
            <summary>
            Accept CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.#ctor(System.UInt32)">
            <summary>
            Accept CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Accept CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionAccept.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery">
            <summary>
            Location-Query CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.#ctor(System.String)">
            <summary>
            Location-Query CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Location-Query CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionLocationQuery.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri">
            <summary>
            Proxy-Uri CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.#ctor(System.String)">
            <summary>
            Proxy-Uri CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Proxy-Uri CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyUri.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme">
            <summary>
            Proxy-Scheme CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.#ctor(System.String)">
            <summary>
            Proxy-Scheme CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Proxy-Scheme CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionProxyScheme.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1">
            <summary>
            Size1 CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.#ctor(System.UInt32)">
            <summary>
            Size1 CoAP option
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Size1 CoAP option
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionSize1.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom">
            <summary>
            Custom CoAP option
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.#ctor(System.Int32,System.Byte[])">
            <summary>
            Custom CoAP option
            </summary>
            <param name="OptionCode">Option code.</param>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.#ctor(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Custom CoAP option
            </summary>
            <param name="OptionCode">Option code.</param>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionCustom.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1">
            <summary>
            Block1 CoAP option. Pertains to the request payload.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.#ctor(System.UInt32)">
            <summary>
            Block1 CoAP option. Pertains to the request payload.
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Block1 CoAP option. Pertains to the request payload.
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.#ctor(Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Int32)">
            <summary>
            Block1 CoAP option. Pertains to the request payload.
            </summary>
            <param name="BlockSize">Block size, in bytes</param>
            <param name="More">If more blocks are available.</param>
            <param name="SequenceNr">Sequence number of current block.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.BlockSize">
            <summary>
            Block size, in bytes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.More">
            <summary>
            If more blocks are available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.SequenceNr">
            <summary>
            Sequence number of current block.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock1.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2">
            <summary>
            Block2 CoAP option. Pertains to the request payload.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.#ctor(System.UInt32)">
            <summary>
            Block2 CoAP option. Pertains to the request payload.
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Block2 CoAP option. Pertains to the request payload.
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.#ctor(Clayster.Library.Internet.CoAP.CoapBlockSize,System.Boolean,System.Int32)">
            <summary>
            Block2 CoAP option. Pertains to the request payload.
            </summary>
            <param name="BlockSize">Block size, in bytes</param>
            <param name="More">If more blocks are available.</param>
            <param name="SequenceNr">Sequence number of current block.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.BlockSize">
            <summary>
            Block size, in bytes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.More">
            <summary>
            If more blocks are available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.SequenceNr">
            <summary>
            Sequence number of current block.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionBlock2.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve">
            <summary>
            Observe CoAP option.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.#ctor(System.UInt32)">
            <summary>
            Observe CoAP option.
            </summary>
            <param name="Value">Option value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Observe CoAP option. Pertains to the request payload.
            </summary>
            <param name="Datagram">Datagram</param>
            <param name="Offset">Offset to the value of the option</param>
            <param name="Length">Length of the option</param>
        </member>
        <member name="M:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.CoapOption.ToHttp(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.SortedDictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.Critical">
            <summary>
            If the option is critical
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.Unsafe">
            <summary>
            If the option is unsafe
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.NoCacheKey">
            <summary>
            If the option is not a cache-key
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoAP.Options.CoapOptionObserve.Repeatable">
            <summary>
            If the option is repeatable
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.Address">
            <summary>
            Class managing a vCard Address.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Address.#ctor">
            <summary>
            Class managing a vCard Address.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Address.#ctor(Clayster.Library.Internet.Contacts.Place,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Class managing a vCard Address.
            </summary>
            <param name="Place">Place</param>
            <param name="Extra">Extra</param>
            <param name="Street">Street</param>
            <param name="Locality">Locality</param>
            <param name="Region">Region</param>
            <param name="PostalCode">Postal Code</param>
            <param name="Country">Country</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Address.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard Address.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Address.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the address to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Address.Lock">
            <summary>
            Locks the object for editing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.ExtAdd">
            <summary>
            ExtAdd
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.Street">
            <summary>
            Street
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.Locality">
            <summary>
            Locality
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.PostalCode">
            <summary>
            Postal Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Address.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.EMail">
            <summary>
            Class managing a vCard EMail Address.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.EMail.#ctor">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.EMail.#ctor(Clayster.Library.Internet.Contacts.Place,System.String)">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
            <param name="Place">Place</param>
            <param name="UserId">User ID</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.EMail.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.EMail.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the email to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.EMail.Lock">
            <summary>
            Locks the object for editing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.EMail.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.EMail.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.Place">
            <summary>
            Place of contact
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.Place.Work">
            <summary>
            At work
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.Place.Home">
            <summary>
            At home
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.Place.Internet">
            <summary>
            On the internet
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.TelephoneNumberType">
            <summary>
            Type of telephone number
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.TelephoneNumberType.Voice">
            <summary>
            Voice
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.TelephoneNumberType.Fax">
            <summary>
            Fax
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Contacts.TelephoneNumberType.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.TelephoneNumber">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.TelephoneNumber.#ctor">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.TelephoneNumber.#ctor(Clayster.Library.Internet.Contacts.Place,Clayster.Library.Internet.Contacts.TelephoneNumberType,System.String)">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
            <param name="Place">Place</param>
            <param name="Type">Type</param>
            <param name="Number">Number</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.TelephoneNumber.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard Telephone Number.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.TelephoneNumber.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the telephone number to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.TelephoneNumber.Lock">
            <summary>
            Locks the object for editing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.TelephoneNumber.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.TelephoneNumber.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.TelephoneNumber.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.Name">
            <summary>
            Class managing a vCard Name.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Name.#ctor">
            <summary>
            Class managing a vCard Name.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Name.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard Name.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Name.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the name to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Name.Lock">
            <summary>
            Locks the object for editing.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Name.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Name.FamilyName">
            <summary>
            Family Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Name.GivenName">
            <summary>
            Given Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Name.MiddleName">
            <summary>
            MiddleName
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.Orgnaisation">
            <summary>
            Class managing a vCard Organisation.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Orgnaisation.#ctor">
            <summary>
            Class managing a vCard Organisation.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Orgnaisation.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard Organisation.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Orgnaisation.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the organisation to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.Orgnaisation.Lock">
            <summary>
            Locks the object for editing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Orgnaisation.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.Orgnaisation.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Contacts.vCard">
            <summary>
            Class managing a vCard.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.vCard.#ctor">
            <summary>
            Class managing a vCard.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.vCard.#ctor(System.Xml.XmlElement)">
            <summary>
            Class managing a vCard.
            </summary>
            <param name="E">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.vCard.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the vCard to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.vCard.Lock">
            <summary>
            Locks the vCard for editing.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Contacts.vCard.ExportToXmlString">
            <summary>
            Exports the vCard to an XML String.
            </summary>
            <returns>XML String</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.TelephoneNumbers">
            <summary>
            Telephone numbers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Addresses">
            <summary>
            Addresses
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Emails">
            <summary>
            EMails
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Organisation">
            <summary>
            Organisation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.NameShort">
            <summary>
            Name (short version)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.NickName">
            <summary>
            Nickname
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Jid">
            <summary>
            JID (XMPP version)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Contacts.vCard.BirthDay">
            <summary>
            Birthday
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoRE.LinkFormatEncoder">
            <summary>
            Encodes CoRE Link-Format documents
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.IMimeEncoder">
            <summary>
            <para>Base interface used by all MIME Encoders.</para>
            <para>Implementing this interface makes the class visible to the 
            MIME Encoder. In this way you can create your own pluggable MIME encoders.</para>
            <para>Important note: The class needs to have a default constructor defined
            for the MIME Encoder to be able to use it.</para>
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)">
            <summary>
            If the encoder can encode objects like the object provided.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="MimeType">Resulting MIME Type.</param>
            <returns>How well the encoder can encode it.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            If the encoder can encode objects like the object provided using a
            specific MIME Type.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredMimeType">Requested MIME Type to use.</param>
            <returns>true if the encoder can encode it using the requested MIME Type, 
            false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            Encodes a specific object.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="MimeType">Resulting MIME Type.</param>
            <param name="SupportGrade">How well the object was encoded.</param>
            <returns>Encoded object, or null if unable to encode it.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            Encodes a specific object using a specified MIME Type.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredMimeType">Requested MIME Type.</param>
            <param name="SupportGrade">How well the encoding is done.</param>
            <returns>Encoded object, or null if unable to encode it.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            Returns the default file extension of objects as the one provided.
            If not recognized, the empty string is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>Default file exitension of the object, if recognozed.
            Otherwise, the empty string is returned.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes">
            <summary>
            MIME Types supported by the MIME Encoder.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.#ctor">
            <summary>
            Encodes CoRE Link-Format documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatEncoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoRE.Link">
            <summary>
            CoRE Link information.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.Link.#ctor(System.String,System.String)">
            <summary>
            CoRE Link information.
            </summary>
            <param name="Url">URL</param>
            <param name="BaseUrl">Base URL</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Item(System.String)">
            <summary>
            Accesses parameters, given their name.
            </summary>
            <param name="ParameterName">Parameter Name, according to RFC 6690.</param>
            <returns>Parameter value. If not found, the empty string is returned.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.RelationType">
            <summary>
            Relation type (rel parameter).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Anchor">
            <summary>
            Anchor (anchor attribute)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Rev">
            <summary>
            rev attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.HrefLang">
            <summary>
            hreflang attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Media">
            <summary>
            media attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Title">
            <summary>
            title attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.TitleExt">
            <summary>
            title* attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Type">
            <summary>
            type attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.ResourceType">
            <summary>
            rt attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.InterfaceDescription">
            <summary>
            if attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.MaximumSizeEstimate">
            <summary>
            sz attribute
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.IsObservable">
            <summary>
            If the link is observable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.ParameterNames">
            <summary>
            Parameter names, in the order they are reported.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.Link.Parameters">
            <summary>
            Parameter names, in the order they are reported.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoRE.LinkFormatDocument">
            <summary>
            CoRE Link Format Document, as defined in RFC 6690: http://tools.ietf.org/html/rfc6690
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDocument.#ctor(System.String,System.String)">
            <summary>
            CoRE Link Format Document, as defined in RFC 6690: http://tools.ietf.org/html/rfc6690
            </summary>
            <param name="Document">Link Format Document</param>
            <param name="SourceUrl">Source URL</param>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatDocument.Text">
            <summary>
            Text version of the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatDocument.Links">
            <summary>
            Links in document.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.CoRE.LinkFormatDecoder">
            <summary>
            Decodes CoRE Link-Format documents
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.IMimeDecoder">
            <summary>
            <para>Base interface used by all MIME Decoders.</para>
            <para>Implementing this interface makes the class visible to the 
            MIME Decoder. In this way you can create your own pluggable MIME decoders.</para>
            <para>Important note: The class needs to have a default constructor defined
            for the MIME Decoder to be able to use it.</para>
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            Performs a MIME Decoding.
            </summary>
            <param name="Data">Binary data to decode.</param>
            <param name="TextEncoding">Any associated Text encoding used in the transmission.</param>
            <param name="SourceUrl">Source URL, if available. If not, the empty string.</param>
            <param name="MimeTypeFull">Full Mime Type of the content, including character set definitions, boundaries, etc.</param>
            <param name="TextBase">If a text message in same way is decoded, put its string representation
            in this variable. It is used for logging and simplifies error tracking of communication errors.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            Returns the corresponding MIME Type from a given file extension (if recognized). If not,
            the empty string is returned.
            </summary>
            <param name="ExtensionLowerCase">The file extension in lower case letters.</param>
            <returns>The corresponding MIME Type from a given file extension (if recognized). If not,
            the empty string is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            Returns the default file extension of objects of a given MIME Type.
            If not recognized, the empty string is returned.
            </summary>
            <param name="MimeType">MIME Type</param>
            <returns>Default file exitension of the objects of the given MIME Type, if recognozed.
            Otherwise, the empty string is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions">
            <summary>
            Gets an array of recognized file extensions.
            </summary>
            <returns>Array of recognized file extensions.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes">
            <summary>
            <para>MIME Types supported by the MIME Decoder.</para>
            <para>If the decoder supports all sub-types
            of a given MIME Type, the sub types can be omitted. Example "video/" corresponds
            to all MIME Types starting with "video/".</para>
            <para>Note: Specific MIME Decoders (for example "video/mpeg") has precedence
            over general MIME Decoders (for example "video/").</para>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.#ctor">
            <summary>
            Decodes CoRE Link-Format documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.CoRE.LinkFormatDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatDecoder.ContentTypes">
            <summary>
            XML Content Types.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.CoRE.LinkFormatDecoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.DayTimeDuration">
            <summary>
            XML Schema DayTimeDuration parameter.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.#ctor">
            <summary>
            XML Schema Duration parameter.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
            <param name="Negative">If the duration is negative (true) or positive (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.#ctor(System.TimeSpan)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="TS">TimeSpan</param>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.#ctor(System.String)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="XsdDayTimeDuration">Duration, according to http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration </param>
            <exception cref="T:System.ArgumentException">If <paramref name="XsdDayTimeDuration"/> is not a valid dayTimeDuration according to http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration </exception>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.TryParse(System.String,Clayster.Library.Internet.DayTimeDuration@)">
            <summary>
            Tries to parse an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration
            </summary>
            <param name="s">String representation of duration.</param>
            <param name="Result">Result, if successful.</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.Parse(System.String)">
            <summary>
            Parses an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration
            </summary>
            <param name="s">String representation of duration.</param>
            <returns>Parsed duration.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is not a valid duration according to http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration </exception>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.AddTo(System.DateTime)">
            <summary>
            Adds the duration to a DateTime value.
            </summary>
            <param name="DateTime">Value to add the duration to.</param>
            <returns>DateTime+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.SubtractForm(System.DateTime)">
            <summary>
            Subtracts the duration from a DateTime value.
            </summary>
            <param name="DateTime">Value to subtract the duration from.</param>
            <returns>DateTime-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.Copy">
            <summary>
            Creates a copy of the duration class.
            </summary>
            <returns>Copy of duration.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.Add(Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Adds a duration to the current duration.
            </summary>
            <param name="Duration">Duration to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.Subtract(Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Subtracts a duration from the current duration.
            </summary>
            <param name="Duration">Duration to subtract.</param>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Addition(System.DateTime,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Adds a Duration to a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Subtraction(System.DateTime,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Subtracts a Duration from a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Addition(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Adds two durations
            </summary>
            <param name="Left">Duration 1</param>
            <param name="Right">Duration 2</param>
            <returns>Left+Right</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Subtraction(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Subtracts one duration from another.
            </summary>
            <param name="Left">Duration 1</param>
            <param name="Right">Duration 2</param>
            <returns>Left-Right</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.ToTimeSpan">
            <summary>
            Converts the Duration to a TimeSpan.
            </summary>
            <returns>TimeSpan</returns>
            <exception cref="T:System.Exception">If Years or Months are non-zero.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThan(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is smaller than <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is smaller than <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThanOrEqual(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is smaller than or equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is smaller than or equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThan(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is grater than <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is grater than <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThanOrEqual(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is grater than or equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is grater than or equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Equality(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Inequality(Clayster.Library.Internet.DayTimeDuration,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="D1"/> is not equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is not equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThan(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThanOrEqual(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThan(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThanOrEqual(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Equality(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Inequality(System.TimeSpan,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThan(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_LessThanOrEqual(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThan(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_GreaterThanOrEqual(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Equality(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.DayTimeDuration.op_Inequality(Clayster.Library.Internet.DayTimeDuration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.DayTimeDuration.Zero">
            <summary>
            Zero duration.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.DayTimeDuration.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.DayTimeDuration.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.DayTimeDuration.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.DayTimeDuration.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.Functions.GuardFirst">
            <summary>
            HPath Guard first() function.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardNode">
            <summary>
            Base class for all HPath Guard nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNode.#ctor">
            <summary>
            Base class for all HPath Guard nodes.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            Evaluates the node on an HTML Element.
            </summary>
            <param name="E">HTML Element</param>
            <param name="NodeList">Node List</param>
            <returns>Node evaluation.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardFirst.#ctor">
            <summary>
            HPath Guard first() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardFirst.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.Functions.GuardLast">
            <summary>
            HPath Guard last() function.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardLast.#ctor">
            <summary>
            HPath Guard last() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardLast.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.Functions.GuardPosition">
            <summary>
            HPath Guard position() function.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardPosition.#ctor">
            <summary>
            HPath Guard position() function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.Functions.GuardPosition.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTPU.HttpuServerResponse">
            <summary>
            HTTPU Server Response object.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerResponse">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServerResponse.udp_Client">
            <summary>
            UDP Client, if HTTPU was used.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServerResponse.udp_EndPoint">
            <summary>
            UDP End point, if HTTPU was used.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.#ctor(System.Net.Sockets.Socket,System.IO.Stream,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="ClientSocket">Client socket that will receive the response.</param>
            <param name="OutputStream">Stream outputting data to the client.</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="UdpClient">UDP Client</param>
            <param name="UdpEndPoint">UDP Endpoint</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.#ctor(System.Net.Sockets.Socket,System.IO.Stream,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Threading.ManualResetEvent)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="ClientSocket">Client socket that will receive the response.</param>
            <param name="OutputStream">Stream outputting data to the client.</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
            <param name="ResponseSentEvent">Event that will be set when the response has been sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Threading.ManualResetEvent)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="UdpClient">UDP Client</param>
            <param name="UdpEndPoint">UDP Endpoint</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
            <param name="ResponseSentEvent">Event that will be set when the response has been sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.GetData">
            <summary>
            Content data.
            </summary>
            <returns>Byte array with encoded data.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendHeader(System.Int64)">
            <summary>
            Send the header to the client.
            </summary>
            <param name="ContentLength">Length of content (in bytes)</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendHeader(System.Int64,System.Int64,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Send the header to the client using a partial response.
            </summary>
            <param name="ContentLength">Length of content (in bytes)</param>
            <param name="FileSize">Total length of original file.</param>
            <param name="Ranges">What ranges are being sent in the partial responde.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.AddHeader(System.String,System.String)">
            <summary>
            Adds a custom header to the response.
            </summary>
            <param name="Key">HTTP Header</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
            <param name="Expires">When the cookie expires. If not provided, the cookie will expire when the browser closes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
            <param name="MaxAgeSeconds">Maximum age of the cookie, in seconds counted from the time the browser receives the cookie.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String,System.Int64)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
            <param name="MaxAgeSeconds">Maximum age of the cookie, in seconds counted from the time the browser receives the cookie.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SetCookie(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Sends a cookie to the client.
            </summary>
            <param name="Name">Name of the cookie</param>
            <param name="Value">Cookie value</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
            <param name="Expires">When the cookie expires. If not provided, the cookie will expire when the browser closes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends content to the client. If the client has only requested the header, the
            content will be ignored.
            </summary>
            <param name="Data">Content data</param>
            <param name="Offset">Start at this offset.</param>
            <param name="Count">Send this number of bytes to the client.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendRaw(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends raw data to the client. If using this method, make sure to call
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.ContentSent"/> when all data has been sent.
            </summary>
            <param name="Data">Binary Data</param>
            <param name="Offset">Start offset of data to write.</param>
            <param name="Count">Number of bytes to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendRaw(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sends raw data to the client. If using this method, make sure to call
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.ContentSent"/> when all data has been sent.
            </summary>
            <param name="Data">Binary Data</param>
            <param name="Offset">Start offset of data to write.</param>
            <param name="Count">Number of bytes to send.</param>
            <param name="Flush">If output is to be flushed (i.e. sent) immediately.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.ContentSent">
            <summary>
            Ends the sending of content to the client.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendResponse">
            <summary>
            Sends the response to the client.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendResponse(System.Boolean)">
            <summary>
            Sends the response to the client.
            </summary>
            <param name="SendHeader">true if the header should be sent first.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteBinary(System.Byte[])">
            <summary>
            Writes binary content data to the client.
            </summary>
            <param name="Data">Data to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteBinary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes binary content data to the client.
            </summary>
            <param name="Data">Data to send.</param>
            <param name="Offset">Start at this offset.</param>
            <param name="Length">Write this number of bytes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Send an error header back to the client.
            </summary>
            <param name="Code">HTTP Error Code</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(Clayster.Library.Internet.HTTP.HttpException)">
            <summary>
            Send an error header back to the client.
            </summary>
            <param name="ex">HTTP Exception</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(Clayster.Library.Internet.HTTP.HttpException,System.Boolean,System.Boolean)">
            <summary>
            Send an error header back to the client.
            </summary>
            <param name="Exception">HTTP Exception</param>
            <param name="SendCustomHeaders">Send custom headers or not.</param>
            <param name="CloseSocket">Close socket after sending or not.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(System.Exception)">
            <summary>
            Send an error header back to the client.
            </summary>
            <param name="ex">Internal Server Exception</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Boolean)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Char)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Char[])">
            <summary>
            Write content data to the client.
            </summary>
            <param name="buffer">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Decimal)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Double)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Single)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Int32)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Int64)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Object)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.String)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.String,System.Object)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.String,System.Object[])">
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg">Arguments</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="buffer">Data</param>
            <param name="index">Start at this position</param>
            <param name="count">Write this number of characters</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.String,System.Object,System.Object)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">First argument</param>
            <param name="arg1">Second argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">First argument</param>
            <param name="arg1">Second argument</param>
            <param name="arg2">Third argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine">
            <summary>
            Writes an empty line as content data to the client.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Boolean)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Char)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Char[])">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="buffer">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Decimal)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Double)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Single)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Int32)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Int64)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Object)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.String)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="value">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.String,System.Object)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.String,System.Object[])">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg">Arguments</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <param name="buffer">Data</param>
            <param name="index">Start at this index.</param>
            <param name="count">Write this number of characters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">First argument</param>
            <param name="arg1">Second argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write content data to the client. Suffix the data with a CRLF sequence.
            </summary>
            <summary>
            Write content data to the client.
            </summary>
            <param name="format">Format string</param>
            <param name="arg0">First argument</param>
            <param name="arg1">Second argument</param>
            <param name="arg2">Third argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponse.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.HTTP.HttpServerResponse.OnResponseSent">
            <summary>
            Event raised when the response has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.HTTP.HttpServerResponse.OnDisposed">
            <summary>
            Event raised when the response has been disposed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.TextWriter">
            <summary>
            Text Writer used to create the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.OutputStream">
            <summary>
            Output Stream.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.ContentType">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.HeaderOnly">
            <summary>
            If only the header should be transmitted.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.Resource">
            <summary>
            HTTP Resource creating the response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.Tag">
            <summary>
            User of the object can attach data to the object through this property. It's not used by the object itself.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.ExpiresSet">
            <summary>
            If the Expires header has been set, to a value in the future.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.NoCache">
            <summary>
            If the Expires header has been set, to a value less than or equal to the current time (for instance <see cref="F:System.DateTime.MinValue"/>).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.Expires">
            <summary>
            When the response expires. If set to less than or equal <see cref="P:System.DateTime.Now"/>, the response will be assumed to be not cached.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.Encoding">
            <summary>
            Text encoding to use to encode text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponse.ReturnCode">
            <summary>
            Return code to use in response. By default, this property is null. This means a 200 (OK) or 206 (Partial Content) will
            be used, depending on the circumstances. However, if you want to return a custom response code, set this property.
            
            Note: If an exception occurs, and a fault message is returned, this property is not used.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServerResponse.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="UdpClient">UDP Client</param>
            <param name="UdpEndPoint">UDP Endpoint</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServerResponse.#ctor(System.Net.Sockets.UdpClient,System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Threading.ManualResetEvent)">
            <summary>
            Class collecting information about an HTTP Response that will be sent to a client.
            </summary>
            <param name="UdpClient">UDP Client</param>
            <param name="UdpEndPoint">UDP Endpoint</param>
            <param name="Header">HTTP Header</param>
            <param name="HeaderOnly">If only the header should be sent (i.e. after a HEAD request).</param>
            <param name="Resource">HTTP Resource sending the response.</param>
            <param name="ResponseSentEvent">Event that will be set when the response has been sent.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTPU.HttpuServerResponse.UdpClient">
            <summary>
            UDP Client, if HTTPU was used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTPU.HttpuServerResponse.UdpEndPoint">
            <summary>
            UDP End point, if HTTPU was used.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource">
            <summary>
            Represents an Asynchronous HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource">
            <summary>
            <para>Base class of all asynchronous HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.</para>
            <para>Asynchronous resources execute in the client request thread and need
            to return promptly not to degrade server performance. Asynchronous resources can be
            used for resources that return quickly or implement their own asycnronous processing
            mechanism making it uneccessary to assign a worker thread to it. The execution method
            needs to handle completion of the response itself.</para>
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource"/>
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerIISResource">
            <summary>
            Base class of all HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerResource">
            <summary>
            Base class of all HTTP Server resources.
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.IHttpServerResource">
            <summary>
            Interface for HTTP Server Resources.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a GET Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a partial GET Request (i.e. ranges found in the HTTP Header).
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a POST Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.PUT(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a PUT Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.DELETE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a DELETE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.TRACE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a TRACE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.CONNECT(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a CONNECT Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a NOTIFY Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.MSEARCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process an M-SEARCH Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.SUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a SUBSCRIBE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.UNSUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a UNSUBSCRIBE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpServerResource.PATCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a PATCH Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.Name">
            <summary>
            Name of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.Synchronous">
            <summary>
            <para>If the resource is synchronous (true) or asynchronous (false).</para>
            <para>Synchronous resources are executed by their own worker threads and can block
            thread execution without affecting the rest of the application. The execution of the
            resource is considered complete when the execution method returns.</para>
            <para>Asynchronous resources however execute in the client request thread and need
            to return promptly not to degrade server performance. Asynchronous resources can be
            used for resources that return quickly or implement their own asycnronous processing
            mechanism making it uneccessary to assign a worker thread to it. The execution method
            needs to handle completion of the response itself.</para>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPartialGET">
            <summary>
            If partial GETs (i.e. ranges) are supported.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptGET">
            <summary>
            If GETs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPOST">
            <summary>
            If POSTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPUT">
            <summary>
            If PUTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptDELETE">
            <summary>
            If DELETEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptTRACE">
            <summary>
            If TRACEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptCONNECT">
            <summary>
            If CONNECTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptNOTIFY">
            <summary>
            If NOTIFYs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptMSEARCH">
            <summary>
            If M-SEARCHs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptSUBSCRIBE">
            <summary>
            If SUBSCRIBEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptUNSUBSCRIBE">
            <summary>
            If UNSUBSCRIBEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPATCH">
            <summary>
            If PATCHs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.RequiresAuthentication">
            <summary>
            If authentication is required to get access to the resource. Will use the authentication methods
            provided by <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AuthenticationMethods"/>, or if null, the methods registered on the
            corresponding <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> object.
            
            The authorization object returned by the authorization method can be accessed through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AuthenticationMethods">
            <summary>
            Acceptable authentication methods. If null is returned, the authentication methods available
            on the current HTTP Server will be used.
            
            The authorization object returned by the authorization method can be accessed through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.#ctor(System.String)">
            <summary>
            Base class of all HTTP Server resources.
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <param name="Name">Name of the resource.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a GET Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a partial GET Request (i.e. ranges found in the HTTP Header).
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a POST Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.PUT(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a PUT Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.DELETE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a DELETE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.TRACE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a TRACE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.CONNECT(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a CONNECT Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a NOTIFY Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.MSEARCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a MSEARCH Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.SUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a SUBSCRIBE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.UNSUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a UNSUBSCRIBE Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResource.PATCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Process a PATCH Request.
            </summary>
            <param name="Response">Response object to write the response to.</param>
            <param name="Request">Request parameters.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.Name">
            <summary>
            Name of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.Synchronous">
            <summary>
            <para>If the resource is synchronous (true) or asynchronous (false).</para>
            <para>Synchronous resources are executed by their own worker threads and can block
            thread execution without affecting the rest of the application. The execution of the
            resource is considered complete when the execution method returns.</para>
            <para>Asynchronous resources however execute in the client request thread and need
            to return promptly not to degrade server performance. Asynchronous resources can be
            used for resources that return quickly or implement their own asycnronous processing
            mechanism making it uneccessary to assign a worker thread to it. The execution method
            needs to handle completion of the response itself.</para>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPartialGET">
            <summary>
            If partial GETs (i.e. ranges) are supported.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptGET">
            <summary>
            If GETs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPOST">
            <summary>
            If POSTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPUT">
            <summary>
            If PUTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptDELETE">
            <summary>
            If DELETEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptTRACE">
            <summary>
            If TRACEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptCONNECT">
            <summary>
            If CONNECTs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptNOTIFY">
            <summary>
            If NOTIFYs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptMSEARCH">
            <summary>
            If M-SEARCHs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptSUBSCRIBE">
            <summary>
            If SUBSCRIBEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptUNSUBSCRIBE">
            <summary>
            If UNSUBSCRIBEs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPATCH">
            <summary>
            If PATCHs are handled.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.RequiresAuthentication">
            <summary>
            If authentication is required to get access to the resource. Will use the authentication methods
            provided by <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AuthenticationMethods"/>, or if null, the methods registered on the
            corresponding <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> object.
            
            The authorization object returned by the authorization method can be accessed through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>.
            
            Default is false.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResource.AuthenticationMethods">
            <summary>
            Acceptable authentication methods. If null is returned, the authentication methods available
            on the current HTTP Server will be used.
            
            The authorization object returned by the authorization method can be accessed through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerIISResource.#ctor(System.String)">
            <summary>
            Base class of all HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.
            </summary>
            <param name="Name">Name of the resource.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerIISResource.Setup(System.Web.HttpContext,System.Collections.Generic.SortedDictionary{System.String,System.String}@,Clayster.Library.Internet.HTTP.HttpHeader@,System.String@,System.Boolean)">
            <summary>
            Initializes the resource.
            </summary>
            <param name="context">HTTP Context from IIS.</param>
            <param name="Query">Query parameters.</param>
            <param name="Header">HTTP Header</param>
            <param name="SubItem">Subitem parsed from URL (i.e. whats lest when the resource name and query parameters
            have been removed.</param>
            <param name="HeaderOnly">If only the header should be returned (i.e. after a HEAD request).</param>
            <returns>Response object to use.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerIISResource.Setup(System.Web.HttpContext,System.IAsyncResult,System.AsyncCallback,System.Collections.Generic.SortedDictionary{System.String,System.String}@,Clayster.Library.Internet.HTTP.HttpHeader@,System.String@,System.Boolean)">
            <summary>
            Initializes the resource.
            </summary>
            <param name="context">HTTP Context from IIS.</param>
            <param name="AsychResult">Object handling asynchronous operation.</param>
            <param name="Callback">Callback method</param>
            <param name="Query">Query parameters.</param>
            <param name="Header">HTTP Header</param>
            <param name="SubItem">Subitem parsed from URL (i.e. whats lest when the resource name and query parameters
            have been removed.</param>
            <param name="HeaderOnly">If only the header should be returned (i.e. after a HEAD request).</param>
            <returns>Response object to use.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerIISResource.ReadObject(System.Web.HttpContext)">
            <summary>
            <para>Reads and decodes any object found together with the request.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="context">HTTP context from IIS.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerIISResource.IsReusable">
            <summary>
            If the resource is reusable or a new instance needs to be created for each call to the resource.
            Default value is true.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.#ctor(System.String)">
            <summary>
            <para>Base class of all asynchronous HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.</para>
            <para>Asynchronous resources execute in the client request thread and need
            to return promptly not to degrade server performance. Asynchronous resources can be
            used for resources that return quickly or implement their own asycnronous processing
            mechanism making it uneccessary to assign a worker thread to it. The execution method
            needs to handle completion of the response itself.</para>
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource"/>
            </summary>
            <param name="Name">Resource name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Throws an exception. Synchronous processing of this resource is not permitted.
            </summary>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">Allways thrown. Synchronous processing of this resource is not permitted.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of an HTTP Request from IIS.
            </summary>
            <param name="context">HTTP Context object as delivered by IIS.</param>
            <param name="cb">Callback method to call when processing is completed.</param>
            <param name="extraData">State data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.EndProcessRequest(System.IAsyncResult)">
            <summary>
            Called when processing of an HTTP Request from IIS ends.
            </summary>
            <param name="result">Result object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.ResponseDone(System.Web.HttpContext)">
            <summary>
            Method called when response is completed.
            </summary>
            <param name="Context">IIS HTTP context object.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.Synchronous">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.Synchronous"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation">
            <summary>
            Asynchronous state class.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.#ctor(System.AsyncCallback,System.Web.HttpContext,System.Object)">
            <summary>
            Asynchronous state class.
            </summary>
            <param name="Callback">Callback method</param>
            <param name="Context">IIS HTTP Context</param>
            <param name="State">IIS State object.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.AsyncState">
            <summary>
            Asynchronous handler
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.AsyncWaitHandle">
            <summary>
            Wait handle for asynchronous completion.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.IsCompleted">
            <summary>
            If request has been completed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.Context">
            <summary>
            IIS HTTP Context.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.Response">
            <summary>
            HTTP Response object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource.AsynchOperation.CompletedSynchronously">
            <summary>
            If the response completed synchronously (i.e. while inside the request method.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[])">
            <summary>
            Represents an HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <param name="Name">Resource name.</param>
            <param name="GetHandler">GET Handler</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[])">
            <summary>
            Represents an HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <param name="Name">Resource name.</param>
            <param name="GetHandler">GET Handler</param>
            <param name="PostHandler">POST Handler</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.AcceptGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.AcceptPOST">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.RequiresAuthentication">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.RequiresAuthentication"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAsynchronousDelegateResource.AuthenticationMethods">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AuthenticationMethods"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpHandler">
            <summary>
            Delegate for HTTP Handlers.
            </summary>
            <param name="Response">Response object.</param>
            <param name="Request">Request object.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource">
            <summary>
            Represents an HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource">
            <summary>
            <para>Base class of all synchronous HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.</para>
            <para>Synchronous resources are executed by their own worker threads and can block
            thread execution without affecting the rest of the application. The execution of the
            resource is considered complete when the execution method returns.</para>
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource"/>
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource.#ctor(System.String)">
            <summary>
            <para>Base class of all synchronous HTTP Server resources that should be accessible through both the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpServer"/> class and IIS.</para>
            <para>Synchronous resources are executed by their own worker threads and can block
            thread execution without affecting the rest of the application. The execution of the
            resource is considered complete when the execution method returns.</para>
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServerAsynchronousResource"/>
            </summary>
            <param name="Name">Resource name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes an HTTP Request from IIS.
            </summary>
            <param name="context">HTTP Context object as delivered by IIS.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerSynchronousResource.Synchronous">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.Synchronous"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[])">
            <summary>
            Represents an HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <param name="Name">Resource name.</param>
            <param name="GetHandler">GET Handler</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[])">
            <summary>
            Represents an HTTP Server Resource, defined by delegates provided during registration.
            </summary>
            <param name="Name">Resource name.</param>
            <param name="GetHandler">GET Handler</param>
            <param name="PostHandler">POST Handler</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.AcceptGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.AcceptPOST">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.RequiresAuthentication">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.RequiresAuthentication"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerSynchronousDelegateResource.AuthenticationMethods">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AuthenticationMethods"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.IWebServiceRecording">
            <summary>
            Interface for Web Service recordings.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IWebServiceRecording.Invoke(System.String,System.String,System.Collections.Generic.SortedDictionary{System.String,System.Object},System.Nullable{System.Int32})">
            <summary>
            Is called when a web servic method is called.
            </summary>
            <param name="Service">Name of service</param>
            <param name="MethodName">Name of method</param>
            <param name="Query">Parameters</param>
            <param name="ResponseCode">HTTP Response code, if exceptions occur</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut">
            <summary>
            Puts an object on a web resource.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Puts an object on a web resource.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen">
            <summary>
            Puts an object on a web resource. Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Puts an object on a web resource. Outputs the communication to the print output.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck">
            <summary>
            Puts an object on a web resource. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut"/> instead.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Puts an object on a web resource. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut"/> instead.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheck.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen">
            <summary>
            Puts an object on a web resource. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Puts an object on a web resource. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPut"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPutNoCheckListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterMultiLineAttribute">
            <summary>
            Tells the Web Service that the parameter should accept multi line input when rendering test forms, etc.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterMultiLineAttribute.#ctor">
            <summary>
            Tells the Web Service that the parameter should accept multi line input when rendering test forms, etc.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream">
            <summary>
            HTTP over XMPP Output Stream.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.#ctor(Clayster.Library.Internet.XMPP.XmppClient,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            HTTP over XMPP Output Stream.
            </summary>
            <param name="Client">XMPP Client</param>
            <param name="From">Original request came from this JID.</param>
            <param name="To">Original request was made to this JID.</param>
            <param name="Id">ID of IQ stanza.</param>
            <param name="HttpChunkLimit">Any HTTP content sent over XMPP larger or equal to this number of bytes in size, will be partitioned into chunks.
            Note that this is the size limit of the content, not of the resulting XMPP messages sent.
            Default value is 6000 bytes.</param>
            <param name="HttpStreamLimit">Any HTTP audio or video content sent over XMPP larger or equal to this number of bytes in size, will be sent using streaming mode instead of chunked mode.
            Note that this is the size limit of the content, not of the resulting XMPP messages sent.
            Default value is 1048576 (1 Mb).</param>
            <param name="SupportsSipub">If the XMPP File Transfer Protocol (sipub) XEP is supported by the client.</param>
            <param name="SupportsIbb">If the XMPP In-band bytestream XEP is supported by the client.</param>
            <param name="SupportsJingle">If the XMPP ingle XEP is supported by the client.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.SetLength(System.Int64)">
            <summary>
            <see cref="M:System.IO.Stream.SetLength(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Flush">
            <summary>
            <see cref="M:System.IO.Stream.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.ContentSent">
            <summary>
            Makes sure everything is has been sent.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Dispose(System.Boolean)">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Close">
            <summary>
            <see cref="M:System.IO.Stream.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Abort">
            <summary>
            Aborts the response stream and the thread producing it.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Resource">
            <summary>
            Current resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.CanRead">
            <summary>
            <see cref="P:System.IO.Stream.CanRead"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.CanSeek">
            <summary>
            <see cref="P:System.IO.Stream.CanSeek"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.CanWrite">
            <summary>
            <see cref="P:System.IO.Stream.CanWrite"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Length">
            <summary>
            <see cref="P:System.IO.Stream.Length"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.HttpOverXmppOutputStream.Position">
            <summary>
            <see cref="P:System.IO.Stream.Position"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.XMPP.XmppEndPoint">
            <summary>
            XMPP Endpoint.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.XmppEndPoint.#ctor(System.String)">
            <summary>
            XMPP Endpoint.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.XMPP.XmppEndPoint.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.XMPP.XmppEndPoint.Jid">
            <summary>
            JID
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.ConsoleErrorLineListenerSink">
            <summary>
            A Line Listener that outputs communication to the Console Error output stream.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListener">
            <summary>
            Base class of all line listeners.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.ILineListener">
            <summary>
            Interface for Line Listeners
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnRowWritten(System.String,System.String)">
            <summary>
            Method called when a text row has been written.
            </summary>
            <param name="Id">ID Attached to the row.</param>
            <param name="Row">Text row.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnRowRead(System.String,System.String)">
            <summary>
            Method called when a text row has been read.
            </summary>
            <param name="Id">ID Attached to the row.</param>
            <param name="Row">Text row.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnDataWritten(System.String,System.Byte[])">
            <summary>
            Method called when binary data has been written.
            </summary>
            <param name="Id">ID Attached to the data.</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnDataRead(System.String,System.Byte[])">
            <summary>
            Method called when binary data has been read.
            </summary>
            <param name="Id">ID Attached to the data.</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnError(System.String,System.String)">
            <summary>
            Method called when an error has occurred.
            </summary>
            <param name="Id">ID Attached to the message.</param>
            <param name="Message">Error message</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ILineListener.OnMessage(System.String,System.String)">
            <summary>
            Method called when an informative message is logged.
            </summary>
            <param name="Id">ID Attached to the message.</param>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Base class of all line listeners.
            </summary>
            <param name="BinaryFormat">Format to use for displaying binary data blocks.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            Records a new Line Listener record to the line listener.
            </summary>
            <param name="Record">Record being added.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            Iterates through all Line Listener records available in the line listener, if available.
            </summary>
            <param name="m">Callback method.</param>
            <param name="Parameters">Parameters to pass on to the callback method.</param>
            <returns>true if process completed, false if aborted.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.ToHtml(System.Boolean)">
            <summary>
            Converts the contents of the Line Listener to a HTML page.
            </summary>
            <param name="IncludeId">If record IDs should be included.</param>
            <returns>HTML page as a string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnError(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnError(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnMessage(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListener.OnMessage(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsWritten(System.String,System.String[])">
            <summary>
            Records multiple rows as having been written.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Rows">Rows having been written.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsRead(System.String,System.String[])">
            <summary>
            Records multiple rows as having been read.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Rows">Rows having been read.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsWritten(System.String,System.Object[])">
            <summary>
            Records multiple rows as having been written.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Rows">Rows having been written.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsRead(System.String,System.Object[])">
            <summary>
            Records multiple rows as having been read.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Rows">Rows having been read.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsWritten(System.String,System.Xml.XmlNode)">
            <summary>
            Records multiple rows defined by an XML Node as having been written.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Xml">Rows having been written.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowsRead(System.String,System.Xml.XmlNode)">
            <summary>
            Records multiple rows defined by an XML Node as having been read.
            </summary>
            <param name="Id">Record ID</param>
            <param name="Xml">Rows having been read.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListener.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListener.BinaryFormat">
            <summary>
            Format to use for displaying binary data blocks.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleErrorLineListenerSink.#ctor">
            <summary>
            A Line Listener that outputs communication to the Console Error output stream.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleErrorLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            A Line Listener that outputs communication to the Console Error output stream.
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleErrorLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleErrorLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.TraceConsoleLineListenerSink">
            <summary>
            A Line Listener that outputs communication to the Trace output stream.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.TraceConsoleLineListenerSink.#ctor">
            <summary>
            A Line Listener that outputs communication to the Trace output stream.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.TraceConsoleLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            A Line Listener that outputs communication to the Trace output stream.
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.TraceConsoleLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.TraceConsoleLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormDataDecoder">
            <summary>
            Decodes mutlipart form data. (Used with file upload, for instance.)
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.FormDataDecoder.MimeType">
            <summary>
            MIME Type for Form Parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataDecoder.#ctor">
            <summary>
            Decodes form parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormDataDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.PdfDecoder">
            <summary>
            Provides the correct content type for PDF files. Does not perform any proper PDF decoding.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.#ctor">
            <summary>
            Provides the correct content type for PDF files. Does not perform any proper PDF decoding.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.PdfDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.PdfDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder">
            <summary>
            Encodes SPARQL Results documents as CSV documents.
            http://www.w3.org/TR/sparql11-results-csv-tsv/
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsCsvEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder">
            <summary>
            Encodes SPARQL Results documents as TSV documents.
            http://www.w3.org/TR/sparql11-results-csv-tsv/
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsTsvEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.TsvDecoder">
            <summary>
            Decodes tsv documents
            http://www.iana.org/assignments/media-types/text/tab-separated-values
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.#ctor">
            <summary>
            Decodes csv documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.ParseTsv(System.String)">
            <summary>
            Parses CSV content.
            </summary>
            <param name="Tsv">CSV file</param>
            <returns>List of records.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TsvDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TsvDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TsvDecoder.ContentTypes">
            <summary>
            CSV Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.DataPublishedEventArgs">
            <summary>
            Event arguments for the <see cref="E:Clayster.Library.Internet.MQTT.MqttClient.OnDataPublished"/> event.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.DataPublishedEventArgs.#ctor(System.String,System.Byte[],Clayster.Library.Internet.MQTT.MqttClient)">
            <summary>
            Event arguments for the <see cref="E:Clayster.Library.Internet.MQTT.MqttClient.OnDataPublished"/> event.
            </summary>
            <param name="Topic">Topic of data received.</param>
            <param name="Data">Binary data received.</param>
            <param name="Client">MQTT Client who received the data.</param>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.DataPublishedEventArgs.Topic">
            <summary>
            Topic of data received.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.DataPublishedEventArgs.Data">
            <summary>
            Binary data received.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.DataPublishedEventArgs.Client">
            <summary>
            MQTT Client who received the data.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.MqttMessageType">
            <summary>
            MQTT Message Types
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.Undefined">
            <summary>
            Undefined message type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.CONNECT">
            <summary>
            Client request to connect to Server 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.CONNACK">
            <summary>
            Connect Acknowledgment 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PUBLISH">
            <summary>
            Publish message
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PUBACK">
            <summary>
            Publish Acknowledgment 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PUBREC">
            <summary>
            Publish Received (assured delivery part 1) 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PUBREL">
            <summary>
            Publish Release (assured delivery part 2)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PUBCOMP">
            <summary>
            Publish Complete (assured delivery part 3) 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.SUBSCRIBE">
            <summary>
            Client Subscribe request 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.SUBACK">
            <summary>
            Subscribe Acknowledgment 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.UNSUBSCRIBE">
            <summary>
            Client Unsubscribe request
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.UNSUBACK">
            <summary>
            Unsubscribe Acknowledgment
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PINGREQ">
            <summary>
            PING Request
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.PINGRESP">
            <summary>
            PING Response
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttMessageType.DISCONNECT">
            <summary>
            Client is Disconnecting 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.MqttQoS">
            <summary>
            MQTT Quality of Service Levels
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttQoS.QoS0_FireAndForget">
            <summary>
            At most once, Fire and Forget
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttQoS.QoS1_Acknowledged">
            <summary>
            At least once, Acknowledged delivery
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttQoS.QoS2_Assured">
            <summary>
            Exactly once, Assured delivery
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.DataPublished">
            <summary>
            Delegate for <see cref="E:Clayster.Library.Internet.MQTT.MqttClient.OnDataPublished"/> events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.MqttClient">
            <summary>
            MQTT Client implementing the MQ Telemetry Transport protocol.
            http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttClient.DefaultPort">
            <summary>
            Default MQTT Port Number
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MQTT.MqttClient.DefaultPortSslTls">
            <summary>
            Default MQTT Port Number for use with SSL/TLS
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.#ctor(System.String,System.String,System.String)">
            <summary>
            MQTT Client implementing the MQ Telemetry Transport protocol.
            http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html
            </summary>
            <param name="Host">Host Name</param>
            <param name="UserName">User Name</param>
            <param name="Password">Password</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            MQTT Client implementing the MQ Telemetry Transport protocol.
            http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html
            </summary>
            <param name="Host">Host Name</param>
            <param name="Port">Port Number</param>
            <param name="UserName">User Name</param>
            <param name="Password">Password</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            MQTT Client implementing the MQ Telemetry Transport protocol.
            http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html
            </summary>
            <param name="Host">Host Name</param>
            <param name="Port">Port Number</param>
            <param name="UserName">User Name</param>
            <param name="Password">Password</param>
            <param name="Ssl">If SSL/TLS is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.Open">
            <summary>
            Opens the connection
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.CONNECT(System.Int32)">
            <summary>
            Connects to the server
            </summary>
            <param name="KeepAliveTime">Keep-alive time, in seconds.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.CONNECT(System.Int32,System.Boolean)">
            <summary>
            Connects to the server
            </summary>
            <param name="KeepAliveTime">Keep-alive time, in seconds.</param>
            <param name="CleanConnect">If this is set to triu, all previously maintained information about the client will be discarded. (Default=true)</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.SUBSCRIBE(System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.MQTT.MqttQoS}[])">
            <summary>
            Registers interest in one or more topic names with the server.
            </summary>
            <param name="Topics">A set of topics to subscribe to, together with their corresponding Quality of Service levels.</param>
            <returns>Array of quality of service levels corresponding to the topics subcribed to.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.UNSUBSCRIBE(System.String[])">
            <summary>
            Unregisters interest in one or more topic names with the server.
            </summary>
            <param name="Topics">A set of topics to unsubscribe from.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.PINGREQ">
            <summary>
            Performs a Ping.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.DISCONNECT">
            <summary>
            Disconnects from the server
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.PUBLISH(System.String,System.Xml.XmlDocument,Clayster.Library.Internet.MQTT.MqttQoS,System.Boolean)">
            <summary>
            Publishes data to a topic
            </summary>
            <param name="Topic">Name of topic. May not include wildcard characters.</param>
            <param name="Data">Data to publish.</param>
            <param name="QualityOfService">Quality of Service leve to use when publishing the data.</param>
            <param name="Retain">If the data should be retained by the server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.PUBLISH(System.String,System.String,Clayster.Library.Internet.MQTT.MqttQoS,System.Boolean)">
            <summary>
            Publishes data to a topic
            </summary>
            <param name="Topic">Name of topic. May not include wildcard characters.</param>
            <param name="Data">Data to publish.</param>
            <param name="QualityOfService">Quality of Service leve to use when publishing the data.</param>
            <param name="Retain">If the data should be retained by the server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttClient.PUBLISH(System.String,System.Byte[],Clayster.Library.Internet.MQTT.MqttQoS,System.Boolean)">
            <summary>
            Publishes data to a topic
            </summary>
            <param name="Topic">Name of topic. May not include wildcard characters.</param>
            <param name="Data">Data to publish.</param>
            <param name="QualityOfService">Quality of Service leve to use when publishing the data.</param>
            <param name="Retain">If the data should be retained by the server.</param>
        </member>
        <member name="E:Clayster.Library.Internet.MQTT.MqttClient.OnDataPublished">
            <summary>
            Event raised whenever new published data has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.MQTT.MqttClient.OnHeartBeat">
            <summary>
            Event raised whenever a keep-alive message has been sent.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.PortNumber">
            <summary>
            Port Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.TimeoutMilliseconds">
            <summary>
            Timeout during request/response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.MaxRetries">
            <summary>
            Maximum number of retries before failing a request/response.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.LineListeners">
            <summary>
            Array of line listeners registered.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MQTT.MqttClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MQTT.MqttException">
            <summary>
            Base class for MQTT Exceptions
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttException.#ctor(System.String)">
            <summary>
            Base class for MQTT Exceptions
            </summary>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.MQTT.MqttException.#ctor(System.String,System.Exception)">
            <summary>
            Base class for MQTT Exceptions
            </summary>
            <param name="Message">Exception message.</param>
            <param name="InnerException">Inner Exception.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortScanProgressEventArgs">
            <summary>
            Event Arguments for port scanning progress events.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortFoundEventArgs">
            <summary>
            Event Arguments for callbacks when IP Ports have been found open.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortFoundEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Event Arguments for callbacks when IP Ports have been found open.
            </summary>
            <param name="IpAddress">IP Address</param>
            <param name="Port">Port</param>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.PortFoundEventArgs.IpAddress">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.PortFoundEventArgs.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanProgressEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Event Arguments for port scanning progress events.
            </summary>
            <param name="IpAddress">IP Address</param>
            <param name="Port">Port</param>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.XmlDate">
            <summary>
            Converts a DateTime to a string according to xs:date.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDate.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts a DateTime to a string according to xs:date.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDate.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDate.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.XmlDate.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.XmlDateTime">
            <summary>
            Converts a DateTime to a string according to xs:dateTime.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDateTime.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts a DateTime to a string according to xs:dateTime.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDateTime.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlDateTime.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.XmlDateTime.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DataSets.DataSetFile">
            <summary>
            Represents a file-based Semantic Data Set.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet">
            <summary>
            Abstract base class for semantic data sets. Provides default semantic behaviour
            which can be overridden in specialized classes.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.ISemanticDataSet">
            <summary>
            Interface for semantic datasets. It is used by semantic query engines to extract
            information from the dataset.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a single pattern.
            </summary>
            <param name="Pattern">Simple Graph Pattern</param>
            <param name="SelectMode">Selection Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null. If provided, the restriction will be duplicated into the solutions returned.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a group pattern.
            </summary>
            <param name="Pattern">Group Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches an optional pattern.
            </summary>
            <param name="Pattern">Optional Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a union pattern.
            </summary>
            <param name="Pattern">Union Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            Gets registered prefixed namespaces.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <returns>Array of prefixed namespaces.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetSubset(System.String,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets a subset of the whole set.
            </summary>
            <param name="SubItem">Sub Item</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Subset, or null if <paramref name="SubItem"/> is not recognized.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets available triples.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic graph triples.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Checks is the source contains a specific semantic triple.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>If the semantic triple is available in the source.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Objects, having a specific Subject and Predicate.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available objects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Subjects, having a specific Predicate and Object.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available subjects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Predicates, having a specific Subject and Object.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available predicates matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Subject.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by predicate.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Object.
            </summary>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by subject.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Predicate.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets a list of possible nodes in the data source (subjects and objects).
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>List of possible nodes matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.#ctor">
            <summary>
            Abstract base class for semantic data sets. Provides default semantic behaviour
            which can be overridden in specialized classes.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.FromUri(System.String)">
            <summary>
            Creates a Dataset object for the corresponding Uri scheme.
            </summary>
            <param name="Uri">Dataset URI</param>
            <returns>Semantic data set handler.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a single pattern.
            </summary>
            <param name="Pattern">Simple Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null. If provided, the restriction will be duplicated into the solutions returned.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a group pattern.
            </summary>
            <param name="Pattern">Group Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches an optional pattern.
            </summary>
            <param name="Pattern">Optional Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a union pattern.
            </summary>
            <param name="Pattern">Union Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a simple graph pattern, using a default algorithm.
            </summary>
            <param name="Dataset">Current Data Set.</param>
            <param name="Pattern">Simple Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a group pattern, using a default algorithm.
            </summary>
            <param name="Dataset">Current Data Set.</param>
            <param name="Pattern">Group Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches an optional pattern, using a default algorithm.
            </summary>
            <param name="Dataset">Current Data Set.</param>
            <param name="Pattern">Optional Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches a union pattern, using a default algorithm.
            </summary>
            <param name="Dataset">Current Data Set.</param>
            <param name="Pattern">Union Graph Pattern</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetSubset(System.String,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets a subset of the whole set.
            
            The default behaviour is to return the same set.
            </summary>
            <param name="SubItem">Sub Item</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Subset, or null if <paramref name="SubItem"/> is not recognized.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets available triples.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic graph triples.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            Gets registered prefixed namespaces.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <returns>Array of prefixed namespaces.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Checks is the source contains a specific semantic triple.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>If the semantic triple is available in the source.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Objects, having a specific Subject and Predicate.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available objects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Subjects, having a specific Predicate and Object.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available subjects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Predicates, having a specific Subject and Object.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available predicates matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Subject.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by predicate.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Object.
            </summary>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by subject.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Predicate.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.SemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets a list of possible nodes (subjects and objects) in the data source.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>List of possible nodes matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.#ctor(System.String)">
            <summary>
            Represents a file-based Semantic Data Set.
            </summary>
            <param name="FileName">File Name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.LoadDataSet(System.String)">
            <summary>
            Loads a Semantic Data Set from a file.
            </summary>
            <param name="FileName">File name.</param>
            <returns>Semantic Data Set.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.FileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DataSets.DataSetFile.SemanticDataSet">
            <summary>
            Semantic Data Set, if available and loaded.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.Bindings">
            <summary>
            Variable bindings (SPARQL v1.1)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.Bindings.#ctor(System.String[],System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            Variable bindings (SPARQL v1.1)
            </summary>
            <param name="VariableNames">Variable names</param>
            <param name="Solutions">Solutions</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.Bindings.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            Returns all solutions in the data set that matches the pattern <paramref name="Where"/>.
            </summary>
            <param name="Where">Group pattern to match.</param>
            <param name="DefaultDataset">Default Data set</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.Bindings.IsVariableInScope(System.String)">
            <summary>
            Checks if a variable is in scope.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>If the variable is in scope.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.Bindings.VariableNames">
            <summary>
            Variable names.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.Bindings.Solutions">
            <summary>
            Solutions
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.IVariableScope">
            <summary>
            Interface handling variable scope in SPARQL queries.
            information from the dataset.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)">
            <summary>
            Checks if a variable is in scope.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>If the variable is in scope.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.ComparisonOperator">
            <summary>
            Base class for all comparison operators.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.BinaryOperator">
            <summary>
            Base class for all binary operators.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode">
            <summary>
            Abstract base class for all expression nodes.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.#ctor">
            <summary>
            Abstract base class for all expression nodes.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            Evaluates the expression node.
            </summary>
            <param name="Variables">Variable values.</param>
            <param name="EvaluationContext">Evaluation context.</param>
            <returns>Evaluation result.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.EffectiveBooleanValue(System.Object)">
            <summary>
            Calculates the Effective Boolean Value of an object, according to rules in §11.2.2:
            http://www.w3.org/TR/rdf-sparql-query/#ebv
            </summary>
            <param name="Obj">Value</param>
            <returns>EBV(<paramref name="Obj"/>)</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize">
            <summary>
            Attempts to return an expression node in normalized form, i.e. OR_i=1^N(AND_j=1^M[i]([NOT](...))), where
            comparison nodes of one variable and one value are in the form VARIABLE OPERAND VALUE.
            </summary>
            <returns>Normalized expression, if possible.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.GetNormalForm">
            <summary>
            Converts the expression to normal form, which means the first node is always a <see cref="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ors"/> node
            (even if the number of oeprands is one), and the second level nodes are always <see cref="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ands"/>, and
            with comparison nodes of one variable and one value are in the form VARIABLE OPERAND VALUE.
            </summary>
            <returns>Expression in normal form.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.GetStringValue(System.Object)">
            <summary>
            Gets the string value of an argument.
            </summary>
            <param name="Value">Argument value.</param>
            <returns>String value.</returns>
            <exception cref="T:Clayster.Library.Internet.Semantic.Sparql.SparqlException">If the value is not a string.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.GetCompatibleStringValues(System.Object,System.Object,System.String@,System.String@)">
            <summary>
            Gets the string values of two arguments. The string values must be compatible, or an error will be generated.
            </summary>
            <param name="Value1">First argument value.</param>
            <param name="Value2">Second argument value.</param>
            <param name="String1">First string value.</param>
            <param name="String2">Second string value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.MakeCompatible(System.Object@,System.Object@)">
            <summary>
            Tries to make two values compatible.
            </summary>
            <param name="v1">Value 1</param>
            <param name="v2">Value 1</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.CompatibleComparison(System.Object,System.Object)">
            <summary>
            Makes a comparison of values (making the types compatible first).
            </summary>
            <param name="Value1">Value1</param>
            <param name="Value2">Value2</param>
            <returns>&lt;0 if Value1&lt;Value2, &gt;0 if Value1&gt;Value2, =0 if Value1=Value2.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.BinaryOperator.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            Base class for all binary operators.
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.BinaryOperator.LeftOperand">
            <summary>
            Left Operand
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.BinaryOperator.RightOperand">
            <summary>
            Right Operand
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.ComparisonOperator.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            Base class for all comparison operators.
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.NotIn">
            <summary>
            x NOT IN (...)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.NotIn.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            x NOT IN (...)
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operands</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.NotIn.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.NotIn.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.In">
            <summary>
            x IN (...)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.In.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            x IN (...)
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operands</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.In.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.In.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ands">
            <summary>
            AND()
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ands.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            AND()
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ands.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ands.Operands">
            <summary>
            Operands
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ors">
            <summary>
            OR()
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ors.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            OR()
            </summary>
            <param name="Operands">Operands</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ors.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Ors.Operands">
            <summary>
            Operands
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext">
            <summary>
            Evaluation context, used when evaluating expressions.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext.#ctor(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}},Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Evaluation context, used when evaluating expressions.
            </summary>
            <param name="Group">Current group, if evaluating aggregates. May be null.</param>
            <param name="Dataset">Current dataset.</param>
            <param name="Context">Current context.</param>
            <param name="ConstraintsInformational">Any available constraints, if available.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext.Group">
            <summary>
            Current group, if evaluating aggregates. May be null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext.Dataset">
            <summary>
            Current dataset.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext.Context">
            <summary>
            Current context.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext.ConstraintsInformational">
            <summary>
            Any available constraints, if available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Aggregate">
            <summary>
            Base class for all aggregates.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionOneVariable">
            <summary>
            Base class for all functions of one variable.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionOneVariable.argument">
            <summary>
            Argument
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionOneVariable.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            Base class for all functions of one variable.
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Aggregate.variableName">
            <summary>
            If the aggregate operates on a variable. If not, null is returned (i.e. more complex expression).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Aggregate.distinct">
            <summary>
            If only distinct matches should be processed.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Aggregate.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            Base class for all functions of one variable.
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Avg">
            <summary>
            AVG() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Avg.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            AVG() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Avg.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.GroupConcat">
            <summary>
            GROUP_CONCAT() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.GroupConcat.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean,System.String)">
            <summary>
            GROUP_CONCAT() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
            <param name="Separator">Separator</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.GroupConcat.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sample">
            <summary>
            SAMPLE() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sample.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            SAMPLE() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sample.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Max">
            <summary>
            MAX() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Max.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            MAX() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Max.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Min">
            <summary>
            MIN() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Min.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            MIN() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Min.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sum">
            <summary>
            SUM() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sum.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            SUM() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Sum.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Count">
            <summary>
            COUNT() aggregate
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Count.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,System.Boolean)">
            <summary>
            COUNT() aggregate
            </summary>
            <param name="Argument">Argument</param>
            <param name="Distinct">If only distinct matches should be processed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Aggregates.Count.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.TimeZone">
            <summary>
            TIMEZONE(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.TimeZone.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            TIMEZONE(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.TimeZone.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Tz">
            <summary>
            TZ(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Tz.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            TZ(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Tz.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Seconds">
            <summary>
            SECONDS(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Seconds.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SECONDS(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Seconds.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Minutes">
            <summary>
            MINUTES(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Minutes.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            MINUTES(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Minutes.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Hours">
            <summary>
            HOURS(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Hours.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            HOURS(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Hours.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Day">
            <summary>
            DAY(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Day.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            DAY(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Day.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Month">
            <summary>
            MONTH(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Month.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            MONTH(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Month.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Year">
            <summary>
            YEAR(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Year.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            YEAR(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Year.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Now">
            <summary>
            NOW()
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Now.#ctor">
            <summary>
            NOW()
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.DatesAndTimes.Now.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Coalesce">
            <summary>
            COALESCE(expression,...)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Coalesce.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            COALESCE(expression,...)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Coalesce.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Exists">
            <summary>
            EXISTS{pattern}
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Exists.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern)">
            <summary>
            EXISTS{pattern}
            </summary>
            <param name="Pattern">Pattern</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Exists.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.If">
            <summary>
            IF(condition,ifTrue,ifFalse)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.If.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            IF(condition,ifTrue,ifFalse)
            </summary>
            <param name="Condition">Condition</param>
            <param name="IfTrue">Expression evaluated if <paramref name="Condition"/> is true.</param>
            <param name="IfFalse">Expression evaluated if <paramref name="Condition"/> is false.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.If.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.StrUUID">
            <summary>
            STRUUID(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.StrUUID.#ctor">
            <summary>
            STRUUID()
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.StrUUID.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.UUID">
            <summary>
            UUID(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.UUID.#ctor">
            <summary>
            UUID()
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.UUID.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA384">
            <summary>
            SHA384(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA384.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SHA384(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA384.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA512">
            <summary>
            SHA512(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA512.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SHA512(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA512.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA256">
            <summary>
            SHA256(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA256.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SHA256(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA256.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA1">
            <summary>
            SHA1(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA1.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SHA1(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.SHA1.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.MD5">
            <summary>
            MD5(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.MD5.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            MD5(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Hashing.MD5.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Abs">
            <summary>
            ABS(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Abs.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            ABS(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Abs.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Rand">
            <summary>
            RAND()
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Rand.#ctor">
            <summary>
            RAND()
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Rand.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Floor">
            <summary>
            FLOOR(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Floor.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            FLOOR(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Floor.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Ceil">
            <summary>
            CEIL(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Ceil.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            CEIL(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Ceil.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Round">
            <summary>
            ROUND(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Round.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            ROUND(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Numerics.Round.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Contains">
            <summary>
            CONTAINS(x,y)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionTwoVariables">
            <summary>
            Base class for all functions of two variables.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionTwoVariables.argument1">
            <summary>
            Argument 1
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionTwoVariables.argument2">
            <summary>
            Argument 2
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionTwoVariables.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            Base class for all functions of two variables.
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Contains.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            CONTAINS(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Contains.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Concat">
            <summary>
            CONCAT(x1,...)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Concat.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[])">
            <summary>
            CONCAT(x1,...)
            </summary>
            <param name="Arguments">Arguments</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Concat.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace">
            <summary>
            REPLACE(arg,pattern,replacement)
            REPLACE(arg,pattern,replacement,flags)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            REPLACE(arg,pattern,replacement)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
            <param name="Argument3">Argument 3</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            REPLACE(arg,pattern,replacement,flags)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
            <param name="Argument3">Argument 3</param>
            <param name="Argument4">Argument 4</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.Replacement">
            <summary>
            Replacement
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.Replace.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.EncodeForUri">
            <summary>
            ENCODE_FOR_URI(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.EncodeForUri.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            ENCODE_FOR_URI(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.EncodeForUri.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrAfter">
            <summary>
            STRAFTER(x,y)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrAfter.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRAFTER(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrAfter.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrBefore">
            <summary>
            STRBEFORE(x,y)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrBefore.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRBEFORE(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrBefore.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrEnds">
            <summary>
            STRENDS(x,y)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrEnds.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRENDS(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrEnds.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrStarts">
            <summary>
            STRSTARTS(x,y)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrStarts.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRSTARTS(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrStarts.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LCase">
            <summary>
            LCASE(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LCase.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            LCASE(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LCase.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.UCase">
            <summary>
            UCASE(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.UCase.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            UCASE(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.UCase.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.SubStr">
            <summary>
            SUBSTR(s,Start)
            SUBSTR(s,Start,Len)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.SubStr.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SUBSTR(s,Start)
            </summary>
            <param name="Argument1">String</param>
            <param name="Argument2">Start</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.SubStr.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            SUBSTR(s,Start,Len)
            </summary>
            <param name="Argument1">String</param>
            <param name="Argument2">Start</param>
            <param name="Argument3">Length</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.SubStr.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrLen">
            <summary>
            STRLEN(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrLen.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRLEN(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.StrLen.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.BNode">
            <summary>
            BNODE()
            BNODE(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.BNode.#ctor">
            <summary>
            BNODE()
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.BNode.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            BNODE(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.BNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrLang">
            <summary>
            STRLANG(x,language)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrLang.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRLANG(x,language)
            </summary>
            <param name="Value">Value</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrLang.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrDT">
            <summary>
            STRDT(x,type)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrDT.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STRDT(x,type)
            </summary>
            <param name="Value">Value</param>
            <param name="Type">Type</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.StrDT.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToUri">
            <summary>
            URI(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToUri.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            URI(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToUri.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToIri">
            <summary>
            IRI(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToIri.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            IRI(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.ToIri.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsNumeric">
            <summary>
            isNumeric(x)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsNumeric.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            isNumeric(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsNumeric.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDate">
            <summary>
            Converts a value to an xsd:date
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction">
            <summary>
            Interface for external functions accessible from SPARQL script.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])">
            <summary>
            Evaluates the function.
            </summary>
            <param name="Arguments">Argments.</param>
            <returns>Return value.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri">
            <summary>
            Full URI of the external function.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDate.#ctor">
            <summary>
            Converts a value to an xsd:date
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDate.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDate.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm">
            <summary>
            Leaf node in a property path.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path">
            <summary>
            Abstract base class for all property paths
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item">
            <summary>
            Abstract base class for items (objects/subjects).
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.#ctor">
            <summary>
            Abstract base class for items (objects/subjects).
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            Converts the item to a string.
            </summary>
            <param name="OutputMode">Output mode.</param>
            <returns>String</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as a subject to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as a predicate to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as an object to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsVariableInScope(System.String)">
            <summary>
            Checks if a variable is in scope.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>If the variable is in scope.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Lists available variables.
            </summary>
            <param name="Variables">List receiving available variables.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsBlankNode">
            <summary>
            If the item represents a blank node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsVariable">
            <summary>
            If the item represents a variable.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.#ctor">
            <summary>
            Abstract base class for all property paths
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.Equals(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetHashCode">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets available triples.
            </summary>
            <param name="Dataset">Semantic dataset.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic graph triples, or null if not found. Triples are ordered (Subject, Predicate, Object).</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Predicates, having a specific Subject and Object.
            </summary>
            <param name="Dataset">Semantic dataset.</param>
            <param name="Subject">Subject</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available predicates matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Subject.
            </summary>
            <param name="Dataset">Semantic dataset.</param>
            <param name="Subject">Subject</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. Pairs are formed as (Predicate, Object).</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Object.
            </summary>
            <param name="Dataset">Semantic dataset.</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. Pairs are formed as (Subject, Predicate)</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.Join(System.Collections.Generic.LinkedList{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern}@,System.Collections.Generic.IEnumerable{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern})">
            <summary>
            Joins two result sets.
            </summary>
            <param name="Result">Previous result. May be null.</param>
            <param name="List">New result. May be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.Join(System.Collections.Generic.LinkedList{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern}@,System.Collections.Generic.IEnumerable{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Joins two result sets.
            </summary>
            <param name="Result">Previous result. May be null.</param>
            <param name="List">New result. May be null.</param>
            <param name="Subject">Change the subject in the new found patterns to this value.</param>
            <param name="Query">Query being evaluated.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.IsBlankNode">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsBlankNode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.IsVariable">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsVariable"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term)">
            <summary>
            Leaf node in a property path.
            </summary>
            <param name="Term">Term</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathTerm.Term">
            <summary>
            Term
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions">
            <summary>
            Path repetitions
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path,System.Int32,System.Int32)">
            <summary>
            Path repetitions
            </summary>
            <param name="Path">Path</param>
            <param name="From">From</param>
            <param name="To">To</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathRepetitions.ElementPath">
            <summary>
            Element Path being repeated.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOneOrMore">
            <summary>
            One or more instances of path
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOneOrMore.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path)">
            <summary>
            One or more instances of path
            </summary>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOneOrMore.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOptional">
            <summary>
            Optional path
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOptional.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path)">
            <summary>
            Optional path
            </summary>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathOptional.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathZeroOrMore">
            <summary>
            Zero or more instances of path
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathZeroOrMore.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path)">
            <summary>
            Zero or more instances of path
            </summary>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathZeroOrMore.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated">
            <summary>
            Negated paths
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path[])">
            <summary>
            Negated paths
            </summary>
            <param name="Paths">Paths</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathNegated.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse">
            <summary>
            Inverse path
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path)">
            <summary>
            Inverse path
            </summary>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathInverse.ElementPath">
            <summary>
            Path being inverted.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence">
            <summary>
            Sequence paths
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path[])">
            <summary>
            Sequence paths
            </summary>
            <param name="Paths">Paths</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathSequence.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative">
            <summary>
            Alternative paths
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path[])">
            <summary>
            Alternative paths
            </summary>
            <param name="Paths">Paths</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetTriples(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Path.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.PathAlternative.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern">
            <summary>
            Bind pattern (SPARQL v1.1)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern">
            <summary>
            Abstract base class for all Graph Patterns
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Abstract base class for all Graph Patterns
            </summary>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns all solutions in the data set that matches the pattern.
            </summary>
            <param name="Dataset">Data set</param>
            <param name="SelectMode">Select Mode</param>
            <param name="Restriction">Any restrictions in the search. May be null. If provided, the restriction will be duplicated into the solutions returned.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            Checks if a variable name is defined as an object value.
            </summary>
            <param name="VariableName">Name of variable</param>
            <param name="Subject">If a subject is given for the variable definition.</param>
            <param name="Predicate">If a predicate is given for the variable definition.</param>
            <returns>If the variable name is defined as an object value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableInScope(System.String)">
            <summary>
            Checks if a variable is in scope.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>If the variable is in scope.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Lists available variables.
            </summary>
            <param name="Variables">List receiving available variables.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.Query">
            <summary>
            SPARQL Query.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.#ctor(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Bind pattern (SPARQL v1.1)
            </summary>
            <param name="VariableName">Variable Name</param>
            <param name="Expression">Expression</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.BindPattern.VariableName">
            <summary>
            Variable Name
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern">
            <summary>
            Variable Federated Pattern
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern">
            <summary>
            Named (using an URI) Federated Pattern
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.#ctor(System.Uri,System.Boolean,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,System.String,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Named (using an URI) Service Pattern
            </summary>
            <param name="Uri">URI of named graph.</param>
            <param name="Silent">If errors should be handled silently, or if the entire query should fail.</param>
            <param name="GraphPattern">Embedded graph pattern</param>
            <param name="FederatedQueryString">String representation of the federated query string.</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.GetUri(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            URI of the remote SPARQL endpoint.
            </summary>
            <param name="Restriction">Available variables.</param>
            <returns>Remote SPARQL endpoing.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.Uri">
            <summary>
            URI of named graph.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.Silent">
            <summary>
            If errors should be handled silently, or if the entire query should fail.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.GraphPattern">
            <summary>
            Embedded graph pattern.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.FederatedQueryString">
            <summary>
            String representation of the federated query string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern.#ctor(System.String,System.Boolean,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,System.String,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Named (using an URI) Service Pattern
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Silent">If errors should be handled silently, or if the entire query should fail.</param>
            <param name="GraphPattern">Embedded graph pattern</param>
            <param name="FederatedQueryString">String representation of the federated query string.</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern.GetUri(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceUriGraphPattern.GetUri(System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.ServiceVariableGraphPattern.VariableName">
            <summary>
            Variable Name
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern">
            <summary>
            Minus pattern (SPARQL v1.1)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Minus pattern (SPARQL v1.1)
            </summary>
            <param name="Pattern">Pattern</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.MinusPattern.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern">
            <summary>
            Subquery pattern (SPARQL v1.1)
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Subquery pattern (SPARQL v1.1)
            </summary>
            <param name="SubSelect">Subquery</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SubSelectPattern.SubSelect">
            <summary>
            Subquery
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.SsdpNotifyEventArgs">
            <summary>
            Event arguments for SSDP notification events. Notify the network of hosted interfaces.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpNotifyEventArgs.#ctor(Clayster.Library.Internet.SSDP.SsdpClient)">
            <summary>
            Event arguments for SSDP discovery (M-SEARCH) events.
            </summary>
            <param name="Client">SSDP Client</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpNotifyEventArgs.SendNotification(System.DateTime,System.String,System.String,System.String)">
            <summary>
            Sends a discovery response back to the client.
            </summary>
            <param name="Expires">When the information expires.</param>
            <param name="LocationResource">Path on local server to resource information</param>
            <param name="NotificationType">Notification Type</param>
            <param name="UniqueServiceName">Unique Service Name</param>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpNotifyEventArgs.Client">
            <summary>
            SSDP Client
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs">
            <summary>
            Event arguments for SSDP discovery (M-SEARCH) events.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.#ctor(Clayster.Library.Internet.SSDP.SsdpClient,Clayster.Library.Internet.HTTPU.HttpuServerResponse,System.String,System.Int32,System.String,System.String,System.Net.EndPoint)">
            <summary>
            Event arguments for SSDP discovery (M-SEARCH) events.
            </summary>
            <param name="Client">SSDP Client</param>
            <param name="Response">HTTP Response object.</param>
            <param name="Host">Value of the HOST header in the discovery request.</param>
            <param name="MaximumWaitTime">Value of the MX header in the discovery request. Represent the maximum time before a response should be returned, in seconds.
            The client should return a response with a random time delay between zero seconds and this number of seconds. Can be zero if unicast message service is used.</param>
            <param name="SearchTarget">Value of the ST header in the discovery request. Shows what the client doing the search is interested in finding.</param>
            <param name="UserAgent">Value of the User-Agent header in the discovery request. What client is being used.</param>
            <param name="From">From what IP and port number the request was being made.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.ReportInterface(System.String)">
            <summary>
            If a specific interface is to be returned.
            </summary>
            <param name="InterfaceUrn">Interface URN</param>
            <returns>If the interface is desired or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.SendResponse(System.DateTime,System.String,System.String,System.String)">
            <summary>
            Sends a discovery response back to the client.
            </summary>
            <param name="Expires">When the information expires.</param>
            <param name="LocationResource">Path on local server to resource information</param>
            <param name="SearchTarget">Search Target</param>
            <param name="UniqueServiceName">Unique Service Name</param>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.Client">
            <summary>
            SSDP Client
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.Response">
            <summary>
            HTTP Server Response object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.Host">
            <summary>
            Value of the HOST header in the discovery request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.MaximumWaitTime">
            <summary>
            Value of the MX header in the discovery request. Represent the maximum time before a response should be returned, in seconds.
            The client should return a response with a random time delay between zero seconds and this number of seconds. Can be zero if unicast message service is used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.SearchTarget">
            <summary>
            Value of the ST header in the discovery request. Shows what the client doing the search is interested in finding.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.UserAgent">
            <summary>
            Value of the User-Agent header in the discovery request. What client is being used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.From">
            <summary>
            From what IP and port number the request was being made.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs">
            <summary>
            Event arguments containing information of a multicast state variable event that was received.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.#ctor(System.String,System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Event arguments containing information of a multicast state variable event that was received.
            </summary>
            <param name="UniqueServiceName">Unique Service Name for the publisher</param>
            <param name="ServiceId">ServiceID from SCPD</param>
            <param name="EventLevel">Event importance. Comes in the form DOMAIN:/LEVEL. There are some predefined event levels:
            
            upnp:/emergency = The event carries critical information that the device SHOULD act upon immediately. 
            
            upnp:/fault = The event carries information related to an error case.
            
            upnp:/warning = The event carries information that is a non-critical condition that the device MAY want to process or pass to the user.
            
            upnp:/info = The event carries information about the normal operation of the device that may be of interest to end-users.  This information is simply informative 
            and does not indicate any abnormal condition or status such as a warning or fault.  Other event levelsare defined for those purposes. 
            
            upnp:/debug = The event carries debug information typically used by programmers and test engineers to evaluate the internal operation of the device.  This information is 
            typically not displayed to end users. 
            
            upnp:/general = For events that fit into no other defined category.
            </param>
            <param name="SEQ">Monotonically increasing sequence count. Originally a 32-bit unsigned integer. First event must have sequence number 0.</param>
            <param name="PropertySet">Property Set received</param>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.UniqueServiceName">
            <summary>
            Unique Service Name for the publisher
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.ServiceId">
            <summary>
            ServiceID from SCPD
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.EventLevel">
            <summary>
            Event importance. Comes in the form DOMAIN:/LEVEL. There are some predefined event levels:
            
            upnp:/emergency = The event carries critical information that the device SHOULD act upon immediately. 
            
            upnp:/fault = The event carries information related to an error case.
            
            upnp:/warning = The event carries information that is a non-critical condition that the device MAY want to process or pass to the user.
            
            upnp:/info = The event carries information about the normal operation of the device that may be of interest to end-users.  This information is simply informative 
            and does not indicate any abnormal condition or status such as a warning or fault.  Other event levelsare defined for those purposes. 
            
            upnp:/debug = The event carries debug information typically used by programmers and test engineers to evaluate the internal operation of the device.  This information is 
            typically not displayed to end users. 
            
            upnp:/general = For events that fit into no other defined category.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.SEQ">
            <summary>
            Monotonically increasing sequence count. Originally a 32-bit unsigned integer. First event must have sequence number 0.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPMulticastPropertySetEventArgs.PropertySet">
            <summary>
            Property Set received
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs">
            <summary>
            Event arguments containing information of a state variable event that was received.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.#ctor(System.String,System.String,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Event arguments containing information of a state variable event that was received.
            </summary>
            <param name="Host">HOST header used by the device to read the service.</param>
            <param name="SID">Subscription ID</param>
            <param name="SEQ">Sequence Number</param>
            <param name="PropertySet">Property Set received</param>
            <param name="SubItem">Sub-item. This corresponds to what comes after the resource path, in the URL.</param>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.Host">
            <summary>
            HOST header used by the device to read the service.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.SID">
            <summary>
            Subscription ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.SubItem">
            <summary>
            Sub-item. This corresponds to what comes after the resource path, in the URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.SEQ">
            <summary>
            Sequence Number. Normally an unsigned 32-bit number.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPPropertySetEventArgs.PropertySet">
            <summary>
            Property Set received
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPPropertySetEventHandler">
            <summary>
            Event Handler used by property set events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPEvents">
            <summary>
            Web resource that can receive and interpret UPnP event notifications.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPEvents.#ctor(System.String)">
            <summary>
            Web resource that can receive and interpret UPnP event notifications.
            </summary>
            <param name="Name">Resource name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPEvents.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResource.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.UPnP.UPnPEvents.OnEventsReceived">
            <summary>
            Event raised when events have been received.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPEvents.AcceptNOTIFY">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptNOTIFY"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPSubscription">
            <summary>
            UPnP Subscription information
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPSubscription.NextSeq">
            <summary>
            Next sequence number for the subscription.
            </summary>
            <returns>Next sequence number for the subscription.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPSubscription.Sid">
            <summary>
            SID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPSubscription.Callback">
            <summary>
            Callback URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPSubscription.Timeout">
            <summary>
            When subscription times out.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPWebService">
            <summary>
            Base class for UPnP Web Service. Supports supscriptions of evented state variables.
            
            Use the <see cref="T:System.Web.Services.WebMethod"/> attribute to mark public methods as web services. All such methods will be published
            in the web service WSDL, and can be called from external parties.
            
            In a web service method, att a parameter of type <see cref="T:Clayster.Library.Internet.HTTP.HttpServerRequest"/> to get information about the current request. This parameter
            will not be published by the WSDL, and is only used to pass information about the HTTP call to the web service method.
            
            To return UPnP error messages, throw <see cref="T:Clayster.Library.Internet.UPnP.UPnPException"/>.
            
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerWebService">
            <summary>
            Base class for Web Services.
            
            Use the <see cref="T:System.Web.Services.WebMethod"/> attribute to mark public methods as web services. All such methods will be published
            in the web service WSDL, and can be called from external parties.
            
            In a web service method, att a parameter of type <see cref="T:Clayster.Library.Internet.HTTP.HttpServerRequest"/> to get information about the current request. This parameter
            will not be published by the WSDL, and is only used to pass information about the HTTP call to the web service method.
            
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServerWebService.RecordingXmlNamespace">
            <summary>
            XML Namespce for web service recording files.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.IsRecording(System.Object)">
            <summary>
            Checks if web service interaction for a given authorization object is being recorded.
            </summary>
            <param name="AuthorizationObject">Authorization object</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.StartRecording(System.Object,System.Int32,System.Object,Clayster.Library.Internet.HTTP.OnRecordingTimeout)">
            <summary>
            Starts recording web service interaction for a given authorization object.
            </summary>
            <param name="AuthorizationObject">Authorization object</param>
            <param name="MaxRecordingTimeSeconds">Maximum recording time, in seconds.</param>
            <param name="Tag">Value to tag the session with.</param>
            <param name="OnTimeout">Callback method called when the recording has timed out.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.StopRecording(System.Object,System.Object@)">
            <summary>
            Stop recording web servic interaction for a given authorization object.
            </summary>
            <param name="AuthorizationObject">Authorization object</param>
            <param name="Tag">Tag recording was tagget with when started.</param>
            <returns>Recording XML, if available, null if no recording found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.GetRecording(System.Object)">
            <summary>
            Gets a web service recording, if available.
            </summary>
            <param name="AuthorizationObject">Authorization object</param>
            <returns>Web service recording, if available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.#ctor(System.String)">
            <summary>
            Base class for Web Services.
            
            Use the <see cref="T:System.Web.Services.WebMethod"/> attribute to mark public methods as web services. All such methods will be published
            in the web service WSDL, and can be called from external parties.
            
            In a web service method, att a parameter of type <see cref="T:Clayster.Library.Internet.HTTP.HttpServerRequest"/> to get information about the current request. This parameter
            will not be published by the WSDL, and is only used to pass information about the HTTP call to the web service method.
            
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <param name="Name">Resource name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.GetWsdl(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Returns the WSDL document for the web service.
            
            Override this method to return a custom WSDL document instead of the automatically generated version.
            </summary>
            <param name="Response">Response object.</param>
            <param name="Request">Request object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.GetDiscovery(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Returns the DISCO document for the web service.
            
            Override this method to return a custom DISCO document instead of the automatically generated version.
            </summary>
            <param name="Response">Response object.</param>
            <param name="Request">Request object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.GetWiki(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Returns the WIKI document for the web service.
            
            Override this method to return a custom WIKI document instead of the automatically generated version.
            </summary>
            <param name="Response">Response object.</param>
            <param name="Request">Request object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.OutputXml(System.Object,System.Type,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Converts a return value to a SOAP XML string.
            </summary>
            <param name="Value">Value to output.</param>
            <param name="ElementType">Expected type of element, if available, null if not known.</param>
            <param name="RootElementName">A root element to encapsulate output. Can be empty or null, if none is to be used.</param>
            <param name="OutputParameters">Any output parameters</param>
            <returns>SOAP XML string representation of the output value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerWebService.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.POST(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerWebService.AcceptGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerWebService.AcceptPartialGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPartialGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerWebService.AcceptPOST">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerWebService.Namespace">
            <summary>
            Namespace of the Web Service.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerWebService.CanShowTestFormOnRemoteComputers">
            <summary>
            If the Web Service can display a test form on remote computers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.#ctor(System.String)">
            <summary>
            Base class for UPnP Web Service. Supports supscriptions of evented state variables.
            
            Use the <see cref="T:System.Web.Services.WebMethod"/> attribute to mark public methods as web services. All such methods will be published
            in the web service WSDL, and can be called from external parties.
            
            In a web service method, att a parameter of type <see cref="T:Clayster.Library.Internet.HTTP.HttpServerRequest"/> to get information about the current request. This parameter
            will not be published by the WSDL, and is only used to pass information about the HTTP call to the web service method.
            
            To return UPnP error messages, throw <see cref="T:Clayster.Library.Internet.UPnP.UPnPException"/>.
            
            <seealso cref="T:Clayster.Library.Internet.HTTP.HttpServer"/>
            </summary>
            <param name="Name">Resource name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.SUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResource.SUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.UNSUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResource.UNSUBSCRIBE(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.RemoveOldSubscriptions">
            <summary>
            Removes old subscriptions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.GetSubscriptions">
            <summary>
            Gets an array of current subscriptions
            </summary>
            <returns>Array of current subscriptions. If none, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.GetCurrentStateVariables">
            <summary>
            Gets the last reported state variable values.
            </summary>
            <returns>Last reported state variable values</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.NotifySubscribers(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Notifies evented state variables to registered subscribers.
            </summary>
            <param name="Properties">Updated state variables</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPWebService.NotifySubscribers(System.String,System.String)">
            <summary>
            Notifies evented state variables to registered subscribers.
            </summary>
            <param name="PropertyName">State Variable Name</param>
            <param name="PropertyValue">State Variable Value</param>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPWebService.AcceptSUBSCRIBE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptSUBSCRIBE"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPWebService.AcceptUNSUBSCRIBE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerResource.AcceptUNSUBSCRIBE"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPWebService.DefaultTimeoutSeconds">
            <summary>
            Default event subscription timeout.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPWebService.MaxTimeoutSeconds">
            <summary>
            Maximum event subscription timeout.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPWebService.ServiceID">
            <summary>
            UPnP Service ID (from SCPD interface definition).
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.CoAPUriScheme">
            <summary>
            CoAP URI scheme.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.UriScheme">
            <summary>
            Base class for URI schemes. Provides basic operations using the URI scheme. 
            Classes inheriting from this class will automatically be found and
            integrated within the URL architecture of the system.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.IUriScheme">
            <summary>
            Interface for URI schemes. Provides basic operations using the URI scheme. 
            Classes implementing this interfaces will automatically be found and
            integrated within the URL architecture of the system.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme">
            <summary>
            Name of scheme, as registered with IANA:
            http://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort">
            <summary>
            Default port of the protocol. 0 means the scheme has no default port (or doesn't use port numbers).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet">
            <summary>
            If the URI scheme supports a Get operation, similar to HTTP GET
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme">
            <summary>
            HTTP URI Scheme enumeration value, if the URI scheme is HTTP compatible. An exception will be thrown if not HTTP compatible.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsHead">
            <summary>
            If the URI scheme supports a Head operation, similar to HTTP HEAD
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsPost">
            <summary>
            If the URI scheme supports a Post operation, similar to HTTP POST
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.#ctor">
            <summary>
            Base class for URI schemes. Provides basic operations using the URI scheme. 
            Classes inheriting from this class will automatically be found and
            integrated within the URL architecture of the system.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String)">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP GET
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String)">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Get operation, similar to HTTP HEAD
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <param name="Headers">Any additional headers. Can be null</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.UriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Post operation, similar to HTTP POST
            </summary>
            <param name="Timeout">Timeout of operation, in milliseconds.</param>
            <param name="Uri">Parsed URI</param>
            <param name="Headers">Any additional headers. Can be null</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.Scheme">
            <summary>
            Name of scheme, as registered with IANA:
            http://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.DefaultPort">
            <summary>
            Default port of the protocol. 0 means the scheme has no default port (or doesn't use port numbers).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.ToHttpUriScheme">
            <summary>
            HTTP URI Scheme enumeration value, if the URI scheme is HTTP compatible. An exception will be thrown if not HTTP compatible.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.SupportsGet">
            <summary>
            If the URI scheme supports a Get operation, similar to HTTP GET
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.SupportsHead">
            <summary>
            If the URI scheme supports a Head operation, similar to HTTP HEAD
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.UriScheme.SupportsPost">
            <summary>
            If the URI scheme supports a Post operation, similar to HTTP POST
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.Ssl">
            <summary>
            If SSL/TLS should be used or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.SupportsHead">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsHead"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoAPUriScheme.SupportsPost">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsPost"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.CoapsUriScheme">
            <summary>
            CoAP Secure URI scheme.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.Ssl">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.HttpUriScheme.Ssl"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.CoapsUriScheme.SupportsPost">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsPost"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.HttpxUriScheme">
            <summary>
            HTTPX URI scheme.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpxUriScheme.Register(Clayster.Library.Internet.XMPP.XmppClient)">
            <summary>
            Registers an XMPP Client for use with the httpx URI scheme.
            </summary>
            <param name="Client"></param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpxUriScheme.Unregister(Clayster.Library.Internet.XMPP.XmppClient)">
            <summary>
            Registers an XMPP Client for use with the httpx URI scheme.
            </summary>
            <param name="Client"></param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpxUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpxUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpxUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.SupportsHead">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsHead"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpxUriScheme.SupportsPost">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsPost"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.ScriptExtensions.UriSchemes">
            <summary>
            Returns a list of registered URI schemes.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.UriSchemes.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a list of registered URI schemes.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.UriSchemes.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.UriSchemes.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ScriptExtensions.UriSchemes.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.ScriptExtensions.ParseUri">
            <summary>
            Parses an URI
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.ParseUri.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses an URI
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.ParseUri.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ScriptExtensions.ParseUri.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ScriptExtensions.ParseUri.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.DataUriScheme">
            <summary>
            DATA URI scheme.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.DataUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.DataUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.DataUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.DataUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.DataUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.FtpUriScheme">
            <summary>
            FTP URI scheme.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.FtpUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.FtpUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.FtpUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.FtpUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.FtpUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.HttpsUriScheme">
            <summary>
            HTTPS URI scheme.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.HttpUriScheme">
            <summary>
            HTTP URI scheme.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Get(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Head(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.HttpUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <see cref="M:Clayster.Library.Internet.URIs.IUriScheme.Post(System.Int32,Clayster.Library.Internet.URIs.ParsedUri,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.SupportsGet">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsGet"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.Ssl">
            <summary>
            If SSL/TLS should be used or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.SupportsHead">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsHead"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpUriScheme.SupportsPost">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.SupportsPost"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpsUriScheme.Scheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.Scheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpsUriScheme.DefaultPort">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.DefaultPort"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpsUriScheme.ToHttpUriScheme">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.IUriScheme.ToHttpUriScheme"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.HttpsUriScheme.Ssl">
            <summary>
            <see cref="P:Clayster.Library.Internet.URIs.HttpUriScheme.Ssl"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.URIs.ParsedUri">
            <summary>
            Contains information about the different parts of an URI, according to RFC 3986:
            http://tools.ietf.org/html/rfc3986
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.URIs.ParsedUri.#ctor(System.String,Clayster.Library.Internet.URIs.IUriScheme,System.String,System.String,System.Int32,System.String,System.String,Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            Contains information about the different parts of an URI, according to RFC 3986:
            http://tools.ietf.org/html/rfc3986
            </summary>
            <param name="Scheme">Scheme name</param>
            <param name="UriScheme">Object handling the URI scheme.</param>
            <param name="Authority">Authority-part of the URI</param>
            <param name="Host">Host-part of the authority</param>
            <param name="Port">Port number-part of the authority</param>
            <param name="PathAndQuery">Path and Query-part of the URI</param>
            <param name="Fragment">Fragment-part of the URI</param>
            <param name="Credentials">User credentials, if found, null otherwise.</param>
            <param name="Uri">Original URI</param>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.UriScheme">
            <summary>
            Object handling the URI scheme.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Credentials">
            <summary>
            User credentials, if found, null otherwise. Can be set after parsing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Uri">
            <summary>
            Original URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Scheme">
            <summary>
            Scheme name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Authority">
            <summary>
            Authority-part of the URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Host">
            <summary>
            Host-part of the authority
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.PathAndQuery">
            <summary>
            Path and Query-part of the URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Fragment">
            <summary>
            Fragment-part of the URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Port">
            <summary>
            Port number-part of the authority
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Query">
            <summary>
            Query-part of the URI
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.URIs.ParsedUri.Path">
            <summary>
            Path-part of the URI
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.UnknownType">
            <summary>
            Unknown Type, not defined, but returned in a response nevertheless.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.SchemaType">
            <summary>
            Base class for types defined in an XML schema.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition">
            <summary>
            Called when all types in a schema have been added to the Document, 
            enabling parsing of cross-references.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)">
            <summary>
            Input Parameters found in type.
            </summary>
            <param name="ElementName">Name of element</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Parses an XML Element from its schema definition.
            </summary>
            <param name="Response">XMl Element to parse.</param>
            <param name="SchemaInstancePrefix">Schema Instance namespace prefix used in response, or null if not available.</param>
            <param name="CheckType">If the type attribute should be checked for type overrides.</param>
            <returns>Parsed result.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)">
            <summary>
            Encodes an object to an input string.
            </summary>
            <param name="Value">Value to encode</param>
            <param name="ParameterName">Name of parameter to encode.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            Encodes an object as a SOAP parameter.
            </summary>
            <param name="w">XML Output.</param>
            <param name="Value">Value to encode</param>
            <param name="ParameterName">Name of parameter to encode.</param>
            <param name="TargetNamespace">Target namespace</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.Definition">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.Name">
            <summary>
            Type Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.LocalName">
            <summary>
            Local name of type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.Namespace">
            <summary>
            Namespace of type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SchemaType.Prefix">
            <summary>
            Prefix
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.UnknownType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.UnknownType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.UnknownType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.UnknownType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.UnknownType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.InternalArrayType">
            <summary>
            Internal Array Type, defined by a xsi:type reference to an internal array type.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.InternalArrayType.ElementType">
            <summary>
            Element Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.InternalType">
            <summary>
            Internal Type, defined by a xsi:type reference to an internal type.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.InternalType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.InternalType.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlNamespaceChange">
            <summary>
            Class transforming an XML document such that one namespace is changed for another.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XmlTransformation">
            <summary>
            Base class of all XML transformations.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.Transform(System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms the XML Document.
            </summary>
            <param name="Xml">XML to transform.</param>
            <param name="XsltParameters">Parameters to pass on to the XSLT transform.</param>
            <returns>Transformed XML.</returns>
            <exception cref="T:System.Exception">If transformation cannot be performed.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Registers an XML Transform. This transformation will be used when trying to load and validate an XML Document,
            and the document is of a different namespace than expected.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -> ns2, and one from ns2->ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            </summary>
            <param name="FromNamespace">From Namespace</param>
            <param name="ToNamespace">To Namespace</param>
            <param name="Transform">XSLT Transform to convert from namespace <paramref name="FromNamespace"/> to
            <paramref name="ToNamespace"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.TransformsAvailableTo(System.String)">
            <summary>
            List all To Namespaces that transformations is registered to transfor to from the specified namespace.
            </summary>
            <param name="FromNamespace">Query if Transforms exist from this namespace</param>
            <returns>Array of available To namespaces for the specified FromNamespace</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.Transform(System.Xml.XmlDocument@,System.String)">
            <summary>
            Transforms the XML Document, using registered XML Transformations, to a desired namespace.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -&gt; ns2, and one from ns2-&gt;ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            <seealso cref="M:Clayster.Library.Internet.XmlTransformation.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>
            </summary>
            <param name="Doc">XML Document to transform.</param>
            <param name="ToNamespace">Transforms the document to this name space.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.Transform(System.Xml.XmlDocument@,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms the XML Document, using registered XML Transformations, to a desired namespace.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -&gt; ns2, and one from ns2-&gt;ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            <seealso cref="M:Clayster.Library.Internet.XmlTransformation.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>
            </summary>
            <param name="Doc">XML Document to transform.</param>
            <param name="ToNamespace">Transforms the document to this name space.</param>
            <param name="XsltParameters">Any parameters to pass on to the XSLT transforms.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlTransformation.TransformAllNamespaceChanges(System.String)">
            <summary>
            Make all registered namespace changes transformations for an XML string. 
            </summary>
            <param name="Xml">XML to transform</param>
            <returns>New XML string where all namespace changes have been transformed</returns>
        </member>
        <member name="T:Clayster.Library.Internet.XmlTransformation.TransformationStep">
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Duration">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.#ctor">
            <summary>
            XML Schema Duration parameter.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="Years">Years</param>
            <param name="Months">Months</param>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="Years">Years</param>
            <param name="Months">Months</param>
            <param name="Days">Days</param>
            <param name="Hours">Hours</param>
            <param name="Minutes">Minutes</param>
            <param name="Seconds">Seconds</param>
            <param name="Negative">If the duration is negative (true) or positive (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.#ctor(System.TimeSpan)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="TS">TimeSpan</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.#ctor(System.String)">
            <summary>
            XML Schema Duration parameter.
            </summary>
            <param name="XsdDuration">Duration, according to http://www.w3.org/TR/xmlschema-2/#duration</param>
            <exception cref="T:System.ArgumentException">If <paramref name="XsdDuration"/> is not a valid duration according to http://www.w3.org/TR/xmlschema-2/#duration</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.TryParse(System.String,Clayster.Library.Internet.Duration@)">
            <summary>
            Tries to parse an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <param name="s">String representation of duration.</param>
            <param name="Result">Result, if successful.</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Parse(System.String)">
            <summary>
            Parses an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <param name="s">String representation of duration.</param>
            <returns>Parsed duration.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is not a valid duration according to http://www.w3.org/TR/xmlschema-2/#duration</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.AddTo(System.DateTime)">
            <summary>
            Adds the duration to a DateTime value.
            </summary>
            <param name="DateTime">Value to add the duration to.</param>
            <returns>DateTime+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.SubtractForm(System.DateTime)">
            <summary>
            Subtracts the duration from a DateTime value.
            </summary>
            <param name="DateTime">Value to subtract the duration from.</param>
            <returns>DateTime-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.AddTo(System.DateTimeOffset)">
            <summary>
            Adds the duration to a DateTimeOffset value.
            </summary>
            <param name="DateTimeOffset">Value to add the duration to.</param>
            <returns>DateTimeOffset+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.SubtractForm(System.DateTimeOffset)">
            <summary>
            Subtracts the duration from a DateTimeOffset value.
            </summary>
            <param name="DateTimeOffset">Value to subtract the duration from.</param>
            <returns>DateTimeOffset-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Copy">
            <summary>
            Creates a copy of the duration class.
            </summary>
            <returns>Copy of duration.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Add(Clayster.Library.Internet.Duration)">
            <summary>
            Adds a duration to the current duration.
            </summary>
            <param name="Duration">Duration to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Subtract(Clayster.Library.Internet.Duration)">
            <summary>
            Subtracts a duration from the current duration.
            </summary>
            <param name="Duration">Duration to subtract.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.Multiply(System.Int32)">
            <summary>
            Multiplies the duration with an integer scalar value.
            </summary>
            <param name="Scalar">Integer scalar value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Addition(System.DateTime,Clayster.Library.Internet.Duration)">
            <summary>
            Adds a Duration to a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Subtraction(System.DateTime,Clayster.Library.Internet.Duration)">
            <summary>
            Subtracts a Duration from a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Addition(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Adds two durations
            </summary>
            <param name="Left">Duration 1</param>
            <param name="Right">Duration 2</param>
            <returns>Left+Right</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Subtraction(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Subtracts one duration from another.
            </summary>
            <param name="Left">Duration 1</param>
            <param name="Right">Duration 2</param>
            <returns>Left-Right</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Multiply(Clayster.Library.Internet.Duration,System.Int32)">
            <summary>
            Multiplies an integer scalar value to the duration.
            </summary>
            <param name="Left">Duration</param>
            <param name="Scalar">Scalar</param>
            <returns>Left*Scalar</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Multiply(System.Int32,Clayster.Library.Internet.Duration)">
            <summary>
            Multiplies an integer scalar value to the duration.
            </summary>
            <param name="Scalar">Scalar</param>
            <param name="Right">Duration</param>
            <returns>Scalar*Right</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.ToTimeSpan">
            <summary>
            Converts the Duration to a TimeSpan.
            </summary>
            <returns>TimeSpan</returns>
            <exception cref="T:System.Exception">If Years or Months are non-zero.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThan(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is smaller than <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is smaller than <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThanOrEqual(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is smaller than or equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is smaller than or equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThan(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is grater than <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is grater than <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThanOrEqual(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is grater than or equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is grater than or equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Equality(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Inequality(Clayster.Library.Internet.Duration,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="D1"/> is not equal to <paramref name="D2"/>.
            </summary>
            <param name="D1">Duration 1</param>
            <param name="D2">Duration 2</param>
            <returns>If <paramref name="D1"/> is not equal to <paramref name="D2"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThan(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThanOrEqual(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThan(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThanOrEqual(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Equality(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Inequality(System.TimeSpan,Clayster.Library.Internet.Duration)">
            <summary>
            Checks if <paramref name="TS"/> is smaller than <paramref name="D"/>.
            </summary>
            <param name="TS">TimeSpan value</param>
            <param name="D">Duration value</param>
            <returns>If <paramref name="TS"/> is smaller than <paramref name="D"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThan(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_LessThanOrEqual(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThan(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_GreaterThanOrEqual(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Equality(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Duration.op_Inequality(Clayster.Library.Internet.Duration,System.TimeSpan)">
            <summary>
            Checks if <paramref name="D"/> is smaller than <paramref name="TS"/>.
            </summary>
            <param name="D">Duration value</param>
            <param name="TS">TimeSpan value</param>
            <returns>If <paramref name="D"/> is smaller than <paramref name="TS"/>.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Zero">
            <summary>
            Zero duration.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Years">
            <summary>
            Years
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Minutes">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Duration.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Alignment">
            <summary>
            The alignment option is used to control the alignment of event codes and content items.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.Alignment.BitPacked">
            <summary>
            The alignment option value bit-packed indicates that the event codes and associated content are packed in bits without any padding in-between. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.Alignment.ByteAlignment">
            <summary>
            The alignment option value byte-alignment indicates that the event codes and associated content are aligned on byte boundaries. While byte-alignment generally results in EXI streams of larger sizes compared with their bit-packed equivalents, byte-alignment may provide a help in some use cases that involve frequent copying of large arrays of scalar data directly out of the stream. It can also make it possible to work with data in-place and can make it easier to debug encoded data by allowing items on aligned boundaries to be easily located in the stream.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.Alignment.Precompression">
            <summary>
            The alignment option value pre-compression indicates that all steps involved in compression (see section 9. EXI Compression) are to be done with the exception of the final step of applying the DEFLATE algorithm. The primary use case of pre-compression is to avoid a duplicate compression step when compression capability is built into the transport protocol. In this case, pre-compression just prepares the stream for later compression. 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiOptions">
            <summary>
            Bit flags for EXI options.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.None">
            <summary>
            No options
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.PreserveComments">
            <summary>
            CM events can be preserved
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.PreserveProcessingInstructions">
            <summary>
            PI events can be preserved
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.PreserveDtd">
            <summary>
            DT and ER events can be preserved
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.PreservePrefixes">
            <summary>
            NS events and namespace prefixes can be preserved
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.PreserveLexicalValues">
            <summary>
            Lexical form of element and attribute values can be preserved in value content items 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.Strict">
            <summary>
            The strict option is a Boolean used to increase compactness by using a strict interpretation of the schemas and omitting preservation of certain 
            items, such as comments, processing instructions and namespace prefixes. The default value "false" is assumed when the "strict" element is absent 
            in the EXI Options document whereas its presence denotes the value "true". When set to true, those productions that have NS, CM, PI, ER, and SC 
            terminal symbols are omitted from the EXI grammars, and schema-informed element and type grammars are restricted to only permit items declared 
            in the schemas. A note in section 8.5.4.4.2 Adding Productions when Strict is True describes some additional restrictions consequential of the 
            use of this option. The "strict" element MUST NOT appear in an EXI options document when one of "dtd", "prefixes", "comments", "pis" or 
            "selfContained" element is present in the same options document. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.Fragment">
            <summary>
            The fragment option is a Boolean that indicates whether the EXI body is an EXI document or an EXI fragment. When set to true, the EXI body is an 
            EXI fragment. Otherwise, the EXI body is an EXI document. The default value "false" is assumed when the "fragment" element is absent in the EXI 
            Options document whereas its presence denotes the value "true". 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.SelfContained">
            <summary>
            The selfContained option is a Boolean used to enable the use of self-contained elements in the EXI stream. Self-contained elements may be read 
            independently from the rest of the EXI body, allowing them to be indexed for random access. The "selfContained" element MUST NOT appear in an 
            EXI options document when one of "compression", "pre-compression" or "strict" elements are present in the same options document. The default 
            value "false" is assumed when the "selfContained" element is absent from the EXI Options document whereas its presence denotes the value "true". 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.ExiOptions.Compression">
            <summary>
            The compression option is a Boolean used to increase compactness using additional computational resources. The default value "false" is assumed 
            when the "compression" element is absent in the EXI Options document whereas its presence denotes the value "true". When set to true, the event 
            codes and associated content are compressed according to 9. EXI Compression regardless of the alignment option value. As mentioned above, the 
            "compression" element MUST NOT appear in an EXI options document when the "alignment" element is present.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.Comment">
            <summary>
            Comment (CM) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent">
            <summary>
            Abstract base class for all EXI nodes.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.#ctor(Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Abstract base class for all EXI nodes.
            </summary>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.#ctor(Clayster.Library.Internet.EXI.Grammars.Grammar,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Abstract base class for all EXI nodes.
            </summary>
            <param name="NextGrammar">Next (sibling) grammar.</param>
            <param name="ChildGrammar">Child grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Reads an attribute value.
            </summary>
            <param name="r">EXI Reader</param>
            <returns>If an attribute value was read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToFirstAttribute(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Moves to the first attribute.
            </summary>
            <param name="r">EXI reader</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToNextAttribute(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Moves to the next attribute.
            </summary>
            <param name="r">EXI reader</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToElement(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Moves to the current element (if on an attribute).
            </summary>
            <param name="r">EXI reader</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Depth(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Depth
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.Int32)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToAttribute(System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToAttribute(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ResolveEntity">
            <summary>
            <see cref="M:System.Xml.XmlReader.ResolveEntity"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NextGrammar">
            <summary>
            Next (sibling) grammar
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ChildGrammar">
            <summary>
            Child grammar
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Nested">
            <summary>
            If the node is nested (i.e. has a child grammar).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.BaseURI">
            <summary>
            Base URI of the current node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType">
            <summary>
            XML Node Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Prefix">
            <summary>
            Prefix
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.LocalName">
            <summary>
            Local Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value">
            <summary>
            Value of the node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.HasValue">
            <summary>
            If the node has a value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.SelfContained">
            <summary>
            If the current element represents an empty element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.AttributeCount">
            <summary>
            Attribute count.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Comment.#ctor(System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Comment (CM) event
            </summary>
            <param name="Value">Value</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Comment.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Comment.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Comment.HasValue">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.Attribute">
            <summary>
            Attribute (AT) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Attribute.#ctor(System.String,System.String,System.String,System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Attribute (AT) event
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="Value">Value</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Attribute.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.Prefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Prefix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.LocalName">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.LocalName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.Namespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Namespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Attribute.HasValue">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.Characters">
            <summary>
            Characters (CH) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Characters.#ctor(System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Characters (CH) event
            </summary>
            <param name="Value">Value</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Characters.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Characters.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Characters.HasValue">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.EntityReference">
            <summary>
            Element Reference (ER) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.EntityReference.#ctor(System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Element Reference (ER) event
            </summary>
            <param name="Name">Name</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.EntityReference.ResolveEntity">
            <summary>
            <see cref="M:System.Xml.XmlReader.ResolveEntity"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.EntityReference.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.SelfContained">
            <summary>
            Self Contained (SC) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.SelfContained.#ctor(Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Self Contained (SC) event
            </summary>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.SelfContained.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.Namespace">
            <summary>
            Namespace (NS) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Namespace.#ctor(System.String,System.Boolean,System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Namespace (NS) event
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalElementNamespace">Local Element Namespace</param>
            <param name="Namespace">Namespace</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.Namespace.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Namespace.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Namespace.Prefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Prefix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Namespace.LocalName">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.LocalName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Namespace.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.Namespace.HasValue">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.StartDocument">
            <summary>
            Start Document (SD) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartDocument.#ctor(Clayster.Library.Internet.EXI.Grammars.Grammar,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Start Document (SD) event
            </summary>
            <param name="NextGrammar">Next (sibling) grammar.</param>
            <param name="ChildGrammar">Child grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartDocument.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.EndDocument">
            <summary>
            End Document (ED) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.EndDocument.#ctor(Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            End Document (ED) event
            </summary>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.EndDocument.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.EndElement">
            <summary>
            End Element (EE) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.EndElement.#ctor">
            <summary>
            End Element (EE) event
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.EndElement.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.ProcessingInstruction">
            <summary>
            Processing Instruction (PI) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.ProcessingInstruction.#ctor(System.String,System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Processing Instruction (PI) event
            </summary>
            <param name="Name">Name</param>
            <param name="Text">Text</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.ProcessingInstruction.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.DocumentType">
            <summary>
            Document Type (DT) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.DocumentType.#ctor(System.String,System.String,System.String,System.String,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Document Type (DT) event
            </summary>
            <param name="Name">Name</param>
            <param name="Public">Public</param>
            <param name="System">System</param>
            <param name="Text">Text</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.DocumentType.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiEvents.StartElement">
            <summary>
            Start Element (SE) event
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.#ctor(System.String,System.String,System.String,Clayster.Library.Internet.EXI.Grammars.Grammar,Clayster.Library.Internet.EXI.Grammars.Grammar)">
            <summary>
            Start Element (SE) event
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="NextGrammar">Next (sibling) grammar.</param>
            <param name="ChildGrammar">Child grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.MoveToFirstAttribute(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToFirstAttribute(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.MoveToNextAttribute(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToNextAttribute(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.ReadAttributeValue(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.MoveToElement(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToElement(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.Depth(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Depth(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.GetAttribute(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.GetAttribute(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.GetAttribute(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.GetAttribute(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.MoveToAttribute(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiEvents.StartElement.MoveToAttribute(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.MoveToAttribute(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.NodeType">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.Prefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Prefix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.LocalName">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.LocalName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.Namespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Namespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.SelfContained">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.SelfContained"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.HasValue">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiEvents.StartElement.AttributeCount">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.ExiEvents.ExiEvent.AttributeCount"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiReader">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream,System.String)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
            <param name="SchemaId">Schema ID
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream,System.Xml.Schema.XmlSchema)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
            <param name="Schema">Optional schema</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream,System.String,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
            <param name="SchemaId">Schema ID
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.#ctor(System.IO.Stream,System.Xml.Schema.XmlSchema,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI reader. Reads XML from a compressed binary EXI stream.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Input">Input</param>
            <param name="Schema">Optional schema</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream,System.String)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream,System.Xml.Schema.XmlSchema)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <param name="Schema">XML Schema</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <param name="Options">Options</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream,System.String,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Options">Options</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Decode(System.IO.Stream,System.Xml.Schema.XmlSchema,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Decodes an EXI stream into an XML Document
            </summary>
            <param name="Exi">EXI Stream</param>
            <param name="Schema">XML Schema</param>
            <param name="Options">Options</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ByteAlign">
            <summary>
            Makes sure the next read starts from a byte boundary.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadBinary">
            <summary>
            Reads a binary value, according to §7.1.1: http://www.w3.org/TR/exi/#encodingBinary
            </summary>
            <returns>Binary data</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadBoolean">
            <summary>
            Reads a boolean value, according to §7.1.2: http://www.w3.org/TR/exi/#encodingBoolean
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadDecimal(System.Boolean@,System.UInt64@,System.UInt64@)">
            <summary>
            Reads a boolean value, according to §7.1.3: http://www.w3.org/TR/exi/#encodingDecimal
            </summary>
            <param name="Sign">Sign</param>
            <param name="IntegralPart">Integral part of value</param>
            <param name="DecimalPartReverseOrder">Decimal part of value, with the digits in reverse order.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadFloat">
            <summary>
            Writes an unsigned integer, according to §7.1.4: http://www.w3.org/TR/exi/#encodingFloat
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadInteger(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Reads a signed integer, according to §7.1.5: http://www.w3.org/TR/exi/#encodingInteger
            </summary>
            <param name="MinInclusive">Mimimum value allowed.</param>
            <param name="MaxInclusive">Maximum value allowed.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadUnsignedInteger">
            <summary>
            Reads an unsigned integer, according to §7.1.6: http://www.w3.org/TR/exi/#encodingUnsignedInteger
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadQName(System.String@,System.String@,System.String@)">
            <summary>
            Reads a QName, according to §7.1.7: http://www.w3.org/TR/exi/#encodingQName
            </summary>
            <param name="Prefix">Prefix used. If persistance of prefix names is not enabled, unique prefix names
            will be created based on name space.</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadDateTime">
            <summary>
            Reads a Date &amp; Time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadGYear">
            <summary>
            Reads a gYear value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadGYearMonth(System.Int32@,System.Int32@)">
            <summary>
            Reads a gYearMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadDate">
            <summary>
            Reads a Date value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDate
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadGMonth">
            <summary>
            Reads a gMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadGMonthDay(System.Int32@,System.Int32@)">
            <summary>
            Reads a gMonthDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadGDay">
            <summary>
            Reads a gDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadTime">
            <summary>
            Reads a time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadNBitUnsignedInteger(System.Byte)">
            <summary>
            Reads an unsigned integer, according to §7.1.9: http://www.w3.org/TR/exi/#encodingBoundedUnsigned
            </summary>
            <param name="NrBits">Number of bits allocated for the number.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadString(System.String,System.Nullable{System.Int32})">
            <summary>
            Reads a string, according to §7.1.10: http://www.w3.org/TR/exi/#encodingString
            </summary>
            <param name="RestrictedCharacterSet">Optional restricted character set. May be null.</param>
            <param name="Length">If the string length is already known.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadStringLiteral(System.String)">
            <summary>
            Writes a string literal value, according to §7.3.3: http://www.w3.org/TR/exi/#encodingOptimizedForMisses
            </summary>
            <param name="RestrictedCharacterSet">Optional restricted character set. May be null.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Read">
            <summary>
            <see cref="M:System.Xml.XmlReader.Read"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.MoveToFirstAttribute">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToFirstAttribute"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.MoveToNextAttribute">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToNextAttribute"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ReadAttributeValue">
            <summary>
            <see cref="M:System.Xml.XmlReader.ReadAttributeValue"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.MoveToElement">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToElement"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.Close">
            <summary>
            <see cref="M:System.Xml.XmlReader.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.GetAttribute(System.Int32)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.GetAttribute(System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.GetAttribute(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.GetAttribute(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.MoveToAttribute(System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.MoveToAttribute(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.MoveToAttribute(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.LookupNamespace(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlReader.LookupNamespace(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.LookupPrefix(System.String)">
            <summary>
            Gets the first prefix defined for a namespace.
            </summary>
            <param name="Namespace">Namespace</param>
            <returns>Prefix, if found, or the empty string if not found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiReader.ResolveEntity">
            <summary>
            <see cref="M:System.Xml.XmlReader.ResolveEntity"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.Alignment">
            <summary>
            The alignment option is used to control the alignment of event codes and content items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.Options">
            <summary>
            The preserve option is a set of Booleans that can be set independently to each enable or disable a share of the format's capacity determining 
            whether or how certain information items can be preserved in the EXI stream. Section 6.3 Fidelity Options describes the set of information items 
            affected by the preserve option. The presence of "dtd", "prefixes", "lexicalValues", "comments" and "pis" in the EXI Options document each turns 
            on fidelity options Preserve.comments, Preserve.pis, Preserve.dtd, Preserve.prefixes and Preserve.lexicalValues whereas the absence denotes turning 
            each off. The elements "dtd", "prefixes", "comments" and "pis" MUST NOT appear in an EXI options document when the "strict" element is present in 
            the same options document. The element "lexicalValues", on the other hand, is permitted to occur in the presence of "strict" element. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.SchemaId">
            <summary>
            The schemaId option may be used to identify the schema information used for processing the EXI body. When the "schemaId" element in the EXI options 
            document contains the xsi:nil attribute with its value set to true, no schema information is used for processing the EXI body (i.e. a schema-less 
            EXI stream). When the value of the "schemaId" element is empty, no user defined schema information is used for processing the EXI body; however, 
            the built-in XML schema types are available for use in the EXI body. When the schemaId option is absent (i.e., undefined), no statement is made 
            about the schema information used to encode the EXI body and this information MUST be communicated out of band. This specification does not dictate 
            the syntax or semantics of other values specified in this field. An example schemaId scheme is the use of URI that is apt for globally identifying 
            schema resources on the Web. The parties involved in the exchange are free to agree on the scheme of schemaId field that is appropriate for their 
            use to uniquely identify the schema information. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.DatatypeRepresentationMap">
            <summary>
            The datatypeRepresentationMap option specifies an alternate set of datatype representations for typed values in the EXI body as described in 7.4 
            Datatype Representation Map. When there are no "datatypeRepresentationMap" elements in the EXI Options document, no Datatype Representation Map is 
            used for processing the EXI body. This option does not take effect when the value of the Preserve.lexicalValues fidelity option is true (see 6.3 
            Fidelity Options), or when the EXI stream is a schema-less EXI stream. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.BlockSize">
            <summary>
            The blockSize option specifies the block size used for EXI compression. When the "blockSize" element is absent in the EXI Options document, the 
            default blocksize of 1,000,000 is used. The default blockSize is intentionally large but can be reduced for processing large documents on devices 
            with limited memory.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.ValueMaxLength">
            <summary>
            The valueMaxLength option specifies the maximum length of value content items to be considered for addition to the string table. The default value 
            "unbounded" is assumed when the "valueMaxLength" element is absent in the EXI Options document. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.ValuePartitionCapacity">
            <summary>
            The valuePartitionCapacity option specifies the maximum number of value content items in the string table at any given time. The default value 
            "unbounded" is assumed when the "valuePartitionCapacity" element is absent in the EXI Options document. Section 7.3.3 Partitions Optimized for Frequent use of String Literals specifies the behavior of the string table when this capacity is reached. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.BaseURI">
            <summary>
            <see cref="P:System.Xml.XmlReader.BaseURI"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.ReadState">
            <summary>
            <see cref="P:System.Xml.XmlReader.ReadState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.NodeType">
            <summary>
            <see cref="P:System.Xml.XmlReader.NodeType"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.IsEmptyElement">
            <summary>
            <see cref="P:System.Xml.XmlReader.IsEmptyElement"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.Prefix">
            <summary>
            <see cref="P:System.Xml.XmlReader.Prefix"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.LocalName">
            <summary>
            <see cref="P:System.Xml.XmlReader.LocalName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.NamespaceURI">
            <summary>
            <see cref="P:System.Xml.XmlReader.NamespaceURI"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.Value">
            <summary>
            <see cref="P:System.Xml.XmlReader.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.AttributeCount">
            <summary>
            <see cref="P:System.Xml.XmlReader.AttributeCount"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.Depth">
            <summary>
            <see cref="P:System.Xml.XmlReader.Depth"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.EOF">
            <summary>
            <see cref="P:System.Xml.XmlReader.EOF"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.HasValue">
            <summary>
            <see cref="P:System.Xml.XmlReader.HasValue"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiReader.NameTable">
            <summary>
            <see cref="P:System.Xml.XmlReader.NameTable"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.ExiWriter">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream,System.String)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
            <param name="SchemaId">Schema ID
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream,System.Xml.Schema.XmlSchema)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
            <param name="Schema">Optional schema</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream,System.String,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
            <param name="SchemaId">Schema ID
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.#ctor(System.IO.Stream,System.Xml.Schema.XmlSchema,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            EXI writer. Compresses XML to a efficient compressed binary format.
            
            For more information, see: http://www.w3.org/TR/exi/
            </summary>
            <param name="Output">Output</param>
            <param name="Schema">Optional schema</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.String)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.Xml.Schema.XmlSchema)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Schema">XML Schema</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Output">EXI output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.String,System.IO.Stream)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Output">EXI output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.Xml.Schema.XmlSchema,System.IO.Stream)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Schema">XML Schema</param>
            <param name="Output">EXI output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Options">Options</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.String,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Options">Options</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.Xml.Schema.XmlSchema,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Schema">XML Schema</param>
            <param name="Options">Options</param>
            <returns>EXI Output</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Options">Options</param>
            <param name="Output">EXI output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.String,System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="SchemaId">Schema ID.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.</param>
            <param name="Options">Options</param>
            <param name="Output">EXI output</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Encode(System.Xml.XmlDocument,System.Xml.Schema.XmlSchema,System.IO.Stream,Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Encodes an XML Document using EXI
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Schema">XML Schema</param>
            <param name="Output">EXI output</param>
            <param name="Options">Options</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteBinary(System.Byte[])">
            <summary>
            Writes a binary value, according to §7.1.1: http://www.w3.org/TR/exi/#encodingBinary
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a boolean value, according to §7.1.2: http://www.w3.org/TR/exi/#encodingBoolean
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDecimal(System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Writes a boolean value, according to §7.1.3: http://www.w3.org/TR/exi/#encodingDecimal
            </summary>
            <param name="Sign">Sign</param>
            <param name="IntegralPart">Integral part of value</param>
            <param name="DecimalPartReverseOrder">Decimal part of value, with the digits in reverse order.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteFloat(System.Double)">
            <summary>
            Writes an unsigned integer, according to §7.1.4: http://www.w3.org/TR/exi/#encodingFloat
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteInteger(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Writes an signed integer, according to §7.1.5: http://www.w3.org/TR/exi/#encodingInteger
            </summary>
            <param name="Value">Value</param>
            <param name="MinInclusive">Mimimum value allowed.</param>
            <param name="MaxInclusive">Maximum value allowed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteUnsignedInteger(System.UInt64)">
            <summary>
            Writes an unsigned integer, according to §7.1.6: http://www.w3.org/TR/exi/#encodingUnsignedInteger
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteQName(System.String,System.String,System.String)">
            <summary>
            Writes a QName, according to §7.1.7: http://www.w3.org/TR/exi/#encodingQName
            </summary>
            <param name="Prefix">Prefix used</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDateTime(System.DateTime)">
            <summary>
            Writes a Date &amp; Time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDateTime(System.DateTime,System.TimeSpan)">
            <summary>
            Writes a Date &amp; Time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Value">Value</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGYear(System.Int32)">
            <summary>
            Writes a gYear value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Year">Year</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGYear(System.Int32,System.TimeSpan)">
            <summary>
            Writes a gYear value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Year">Year</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGYearMonth(System.Int32,System.Int32)">
            <summary>
            Writes a gYearMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGYearMonth(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Writes a gYearMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Year">Year</param>
            <param name="Month">Month</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDate(System.DateTime)">
            <summary>
            Writes a Date value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDate
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDate(System.DateTime,System.TimeSpan)">
            <summary>
            Writes a Date value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDate
            </summary>
            <param name="Value">Value</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGMonth(System.Int32)">
            <summary>
            Writes a gMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Month">Month</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGMonth(System.Int32,System.TimeSpan)">
            <summary>
            Writes a gMonth value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Month">Month</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGMonthDay(System.Int32,System.Int32)">
            <summary>
            Writes a gMonthDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGMonthDay(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Writes a gMonthDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Month">Month</param>
            <param name="Day">Day</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGDay(System.Int32)">
            <summary>
            Writes a gDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Day">Day</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteGDay(System.Int32,System.TimeSpan)">
            <summary>
            Writes a gDay value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Day">Day</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteTime(System.TimeSpan)">
            <summary>
            Writes a time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Time">Time</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteTime(System.TimeSpan,System.TimeSpan)">
            <summary>
            Writes a time value, according to §7.1.8: http://www.w3.org/TR/exi/#encodingDateTime
            </summary>
            <param name="Time">Time</param>
            <param name="TimeZone">Time Zone</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteNBitUnsignedInteger(System.UInt64,System.Byte)">
            <summary>
            Writes an unsigned integer, according to §7.1.9: http://www.w3.org/TR/exi/#encodingBoundedUnsigned
            </summary>
            <param name="Value">Value</param>
            <param name="NrBits">Number of bits allocated for the number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteString(System.String,System.String,System.Int32)">
            <summary>
            Writes a string, according to §7.1.10: http://www.w3.org/TR/exi/#encodingString
            </summary>
            <param name="Value">Value</param>
            <param name="RestrictedCharacterSet">Optional restricted character set. May be null.</param>
            <param name="LengthModifier">Length modifier to use when encoding the string.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteStringLiteral(System.String,System.String)">
            <summary>
            Writes a string literal value, according to §7.3.3: http://www.w3.org/TR/exi/#encodingOptimizedForMisses
            </summary>
            <param name="Value">Value</param>
            <param name="RestrictedCharacterSet">Optional restricted character set. May be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Flush">
            <summary>
            Flushes any pending bits to be written to the output.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.Close">
            <summary>
            <see cref="M:System.Xml.XmlWriter.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteStartDocument(System.Boolean)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteStartDocument">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartDocument"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteEndDocument">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteEndDocument"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteComment(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteComment(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteEntityRef(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteEntityRef(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteEndElement">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteFullEndElement">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteFullEndElement"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteEndAttribute">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteEndAttribute"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteString(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteString(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteWhitespace(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteWhitespace(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteCData(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteCData(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteCharEntity(System.Char)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.LookupPrefix(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.LookupPrefix(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteRaw(System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteRaw(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.ExiWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.Alignment">
            <summary>
            The alignment option is used to control the alignment of event codes and content items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.Options">
            <summary>
            The preserve option is a set of Booleans that can be set independently to each enable or disable a share of the format's capacity determining 
            whether or how certain information items can be preserved in the EXI stream. Section 6.3 Fidelity Options describes the set of information items 
            affected by the preserve option. The presence of "dtd", "prefixes", "lexicalValues", "comments" and "pis" in the EXI Options document each turns 
            on fidelity options Preserve.comments, Preserve.pis, Preserve.dtd, Preserve.prefixes and Preserve.lexicalValues whereas the absence denotes turning 
            each off. The elements "dtd", "prefixes", "comments" and "pis" MUST NOT appear in an EXI options document when the "strict" element is present in 
            the same options document. The element "lexicalValues", on the other hand, is permitted to occur in the presence of "strict" element. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.SchemaId">
            <summary>
            The schemaId option may be used to identify the schema information used for processing the EXI body. When the "schemaId" element in the EXI options 
            document contains the xsi:nil attribute with its value set to true, no schema information is used for processing the EXI body (i.e. a schema-less 
            EXI stream). When the value of the "schemaId" element is empty, no user defined schema information is used for processing the EXI body; however, 
            the built-in XML schema types are available for use in the EXI body. When the schemaId option is absent (i.e., undefined), no statement is made 
            about the schema information used to encode the EXI body and this information MUST be communicated out of band. This specification does not dictate 
            the syntax or semantics of other values specified in this field. An example schemaId scheme is the use of URI that is apt for globally identifying 
            schema resources on the Web. The parties involved in the exchange are free to agree on the scheme of schemaId field that is appropriate for their 
            use to uniquely identify the schema information. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.DatatypeRepresentationMap">
            <summary>
            The datatypeRepresentationMap option specifies an alternate set of datatype representations for typed values in the EXI body as described in 7.4 
            Datatype Representation Map. When there are no "datatypeRepresentationMap" elements in the EXI Options document, no Datatype Representation Map is 
            used for processing the EXI body. This option does not take effect when the value of the Preserve.lexicalValues fidelity option is true (see 6.3 
            Fidelity Options), or when the EXI stream is a schema-less EXI stream. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.BlockSize">
            <summary>
            The blockSize option specifies the block size used for EXI compression. When the "blockSize" element is absent in the EXI Options document, the 
            default blocksize of 1,000,000 is used. The default blockSize is intentionally large but can be reduced for processing large documents on devices 
            with limited memory.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.ValueMaxLength">
            <summary>
            The valueMaxLength option specifies the maximum length of value content items to be considered for addition to the string table. The default value 
            "unbounded" is assumed when the "valueMaxLength" element is absent in the EXI Options document. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.ValuePartitionCapacity">
            <summary>
            The valuePartitionCapacity option specifies the maximum number of value content items in the string table at any given time. The default value 
            "unbounded" is assumed when the "valuePartitionCapacity" element is absent in the EXI Options document. Section 7.3.3 Partitions Optimized for Frequent use of String Literals specifies the behavior of the string table when this capacity is reached. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.ExiWriter.WriteState">
            <summary>
            <see cref="P:System.Xml.XmlWriter.WriteState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent">
            <summary>
            Built-in Element Grammar 
            
            §8.4.3: http://www.w3.org/TR/exi/#builtinElemGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.Grammar">
            <summary>
            Abstract base class for all EXI grammars.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.EXI.Grammars.Grammar.options">
            <summary>
            What productions to preserve.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Abstract base class for all EXI grammars.
            </summary>
            <param name="Options">EXI options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Reads the next node from the file.
            </summary>
            <returns>New node</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PostRead(Clayster.Library.Internet.EXI.ExiReader,Clayster.Library.Internet.EXI.ExiEvents.ExiEvent)">
            <summary>
            Anything that needs to be done after reading an event.
            </summary>
            <param name="r">EXI reader</param>
            <param name="Event">Currently read event.</param>
            <returns>Next grammar.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SD(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            Start Document
            </summary>
            <param name="w">EXI Writer</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ED(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            End Document
            </summary>
            <param name="w">EXI Writer</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            Start Element
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Prefix">Prefix</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.EE(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            End Element
            </summary>
            <param name="w">EXI Writer</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.AT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            Attribute
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Prefix">Prefix</param>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="Value">Value</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            Characters
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Value">Value</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.NS(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            Namespace
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            Comment
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Value">Value</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            Processing Instruction
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Name">Name</param>
            <param name="Text">Text</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.DT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            DOCTYPE
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Name">Name</param>
            <param name="Public">Public</param>
            <param name="System">System</param>
            <param name="Text">Text</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ER(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            Entity Reference
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Name">Name</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SC(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            Self Contained
            </summary>
            <param name="w">EXI Writer</param>
            <returns>Grammar to use after the event.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NextEventCode1">
            <summary>
            Gets the next event code at level 1
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NextEventCode2">
            <summary>
            Gets the next event code at level 2
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NextEventCode3">
            <summary>
            Gets the next event code at level 3
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodes1">
            <summary>
            Gets the number of used event codes at level 1
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodes2">
            <summary>
            Gets the number of used event codes at level 2, for the current event code at level 1
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodes3">
            <summary>
            Gets the number of used event codes at level 3, for the current event codes at level 1 and 2.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodeBits1">
            <summary>
            Gets the number of bits necessary to encode event codes at level 1
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodeBits2">
            <summary>
            Gets the number of bits necessary to encode event codes at level 2, for the current event code at level 1
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.NrEventCodeBits3">
            <summary>
            Gets the number of bits necessary to encode event codes at level 3, for the current event codes at level 1 and 2.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState">
            <summary>
            Write State.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState">
            <summary>
            Read State.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Element Grammar 
            
            §8.4.3: http://www.w3.org/TR/exi/#builtinElemGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.EE(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.EE(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.ER(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ER(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.ElementContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent">
            <summary>
            Built-in Element Grammar 
            
            §8.4.3: http://www.w3.org/TR/exi/#builtinElemGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions,System.String,System.String)">
            <summary>
            Built-in Element Grammar 
            
            §8.4.3: http://www.w3.org/TR/exi/#builtinElemGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="Prefix">Prefix of element</param>
            <param name="Namespace">Namespace of element</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.EE(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.EE(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.AT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.AT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.NS(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.NS(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.SC(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SC(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.ER(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ER(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.PostRead(Clayster.Library.Internet.EXI.ExiReader,Clayster.Library.Internet.EXI.ExiEvents.ExiEvent)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PostRead(Clayster.Library.Internet.EXI.ExiReader,Clayster.Library.Internet.EXI.ExiEvents.ExiEvent)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.StartTagContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent">
            <summary>
            Built-in Fragment Grammar 
            
            §8.4.2: http://www.w3.org/TR/exi/#builtinFragGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Fragment Grammar 
            
            §8.4.2: http://www.w3.org/TR/exi/#builtinFragGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.ED(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ED(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.FragmentContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment">
            <summary>
            Built-in Fragment Grammar 
            
            §8.4.2: http://www.w3.org/TR/exi/#builtinFragGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Fragment Grammar 
            
            §8.4.2: http://www.w3.org/TR/exi/#builtinFragGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment.SD(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SD(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Fragment.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.ED(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ED(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocEnd.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document.SD(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SD(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.Document.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions)">
            <summary>
            Built-in Document Grammar 
            
            §8.4.1: http://www.w3.org/TR/exi/#builtinDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.DT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.DT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.BuiltIn.DocContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.ExiString">
            <summary>
            exi:string
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType">
            <summary>
            Abstract base class for data types
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.#ctor(System.Xml.Schema.XmlSchemaSimpleType)">
            <summary>
            Abstract base class for data types
            </summary>
            <param name="SimpleType">Simple Data Type</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Encode(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            Encodes a value
            </summary>
            <param name="w">EXI Writer</param>
            <param name="Value">Value to encode.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Decode(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Decodes a value
            </summary>
            <param name="r">EXI Reader</param>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.DecodeToXmlString(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            Decodes a value to an XML String.
            </summary>
            <param name="r">EXI Reader</param>
            <returns>Decoded value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Create(System.Xml.Schema.XmlSchemaSimpleType)">
            <summary>
            Creates a data type object based on schema information about the corresponding simple type.
            </summary>
            <param name="SchemaType">Schema type information.</param>
            <returns>Data type object.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.SimpleType">
            <summary>
            Simple Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.LocalName">
            <summary>
            Local Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.ExiString.#ctor(System.Xml.Schema.XmlSchemaSimpleType)">
            <summary>
            exi:string
            </summary>
            <param name="SimpleType">Simple Data Type</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.ExiString.Encode(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Encode(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.ExiString.Decode(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.Decode(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.ExiString.DecodeToXmlString(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType.DecodeToXmlString(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformedGrammar">
            <summary>
            Abstract base class for all schema informed grammars.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformedGrammar.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Abstract base class for all schema informed grammars.
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformedGrammar.InitializeStateMachine">
            <summary>
            Returns a grammar with an initialized state machine.
            </summary>
            <returns>Grammar with an initialized state machine.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformedGrammar.SchemaInformation">
            <summary>
            XML Schema Information
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.DT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.DT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.ED(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ED(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DocEnd.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment">
            <summary>
            Schema informed Fragment Grammar 
            
            §8.5.2: http://www.w3.org/TR/2011/REC-exi-20110310/#informedFragGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Schema informed Fragment Grammar 
            
            §8.5.2: http://www.w3.org/TR/2011/REC-exi-20110310/#informedFragGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment.SD(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SD(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Fragment.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent">
            <summary>
            Schema informed Fragment Grammar 
            
            §8.5.2: http://www.w3.org/TR/2011/REC-exi-20110310/#informedFragGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Schema informed Fragment Grammar 
            
            §8.5.2: http://www.w3.org/TR/2011/REC-exi-20110310/#informedFragGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.ED(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.ED(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CM(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PI(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.FragmentContent.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.LexicographicalOrder">
            <summary>
            Lexicographical sort order
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.LexicographicalOrder.#ctor">
            <summary>
            Lexicographical sort order
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.LexicographicalOrder.Compare(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
            <summary>
            <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation">
            <summary>
            Class containing schema information pertaining to EXI encoding and decoding.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.#ctor(System.Xml.Schema.XmlSchema)">
            <summary>
            Class containing schema information pertaining to EXI encoding and decoding.
            </summary>
            <param name="Schema">XML Schema</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.GetSchemaInformation(System.Xml.Schema.XmlSchema)">
            <summary>
            Gets the (possibly cached) schema information for a schema.
            </summary>
            <param name="Schema">XML Schema</param>
            <returns>Schema information object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.TryGetGlobalElement(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement@)">
            <summary>
            Tries to get a global element given its qualified name,
            </summary>
            <param name="QualifiedName">Qualified name.</param>
            <param name="Element">Global element, if defined.</param>
            <returns>If found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.TryGetGlobalElement(System.String,System.String,System.Xml.Schema.XmlSchemaElement@)">
            <summary>
            Tries to get a global element given its qualified name,
            </summary>
            <param name="LoalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="Element">Global element, if defined.</param>
            <returns>If found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.TryGetGlobalAttribute(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaAttribute@,System.Boolean@)">
            <summary>
            Tries to get a global attribute given its qualified name,
            </summary>
            <param name="QualifiedName">Qualified name.</param>
            <param name="Attribute">Global attribute, if defined.</param>
            <param name="Ambiguous">If the attribute definition is ambiguous (and should be encoded as a string) or not.</param>
            <returns>If found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.TryGetGlobalAttribute(System.String,System.String,System.Xml.Schema.XmlSchemaAttribute@,System.Boolean@)">
            <summary>
            Tries to get a global attribute given its qualified name,
            </summary>
            <param name="LoalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="Attribute">Global attribute, if defined.</param>
            <param name="Ambiguous">If the attribute definition is ambiguous (and should be encoded as a string) or not.</param>
            <returns>If found.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.Schema">
            <summary>
            XML Schema
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.HasGlobalElements">
            <summary>
            If the schema has global elements.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.GlobalElements">
            <summary>
            Global elements, sorted by lexicographical order.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.HasGlobalAttributes">
            <summary>
            If the schema has global attributes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation.GlobalAttributes">
            <summary>
            Global attributes, sorted by lexicographical order.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation)">
            <summary>
            Schema informed Document Grammar 
            
            §8.5.1: http://www.w3.org/TR/2011/REC-exi-20110310/#informedDocGrammars
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document.SD(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SD(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.Document.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment">
            <summary>
            Schema informed Element Grammar 
            
            §8.5.3: http://www.w3.org/TR/2011/REC-exi-20110310/#informedElementFragGrammar
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.#ctor(Clayster.Library.Internet.EXI.ExiOptions,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.SchemaInformation,System.Byte,System.Xml.Schema.XmlSchemaElement,System.Boolean)">
            <summary>
            Schema informed Element Grammar 
            
            §8.5.3: http://www.w3.org/TR/2011/REC-exi-20110310/#informedElementFragGrammar
            </summary>
            <param name="Options">EXI Options.</param>
            <param name="SchemaInformation">XML Schema Information object.</param>
            <param name="EventCode">Event Code</param>
            <param name="XmlElement">XML Element schema definition</param>
            <param name="AllowAttributes">If attributes are allowed in the grammar.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.EE(Clayster.Library.Internet.EXI.ExiWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.EE(Clayster.Library.Internet.EXI.ExiWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.AT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.AT(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.SE(Clayster.Library.Internet.EXI.ExiWriter,System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.CH(Clayster.Library.Internet.EXI.ExiWriter,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.Read(Clayster.Library.Internet.EXI.ExiReader)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.Read(Clayster.Library.Internet.EXI.ExiReader)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.PostRead(Clayster.Library.Internet.EXI.ExiReader,Clayster.Library.Internet.EXI.ExiEvents.ExiEvent)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.Grammar.PostRead(Clayster.Library.Internet.EXI.ExiReader,Clayster.Library.Internet.EXI.ExiEvents.ExiEvent)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.EventCode">
            <summary>
            Event Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.XmlElement">
            <summary>
            XML Schema Element definition.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.LocalName">
            <summary>
            Local Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.WriteState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.WriteState"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.ElementFragment.ReadState">
            <summary>
            <see cref="P:Clayster.Library.Internet.EXI.Grammars.Grammar.ReadState"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition">
            <summary>
            Abstract base class for all state transitions.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            Abstract base class for all state transitions.
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            Creates a new copy of the transition.
            </summary>
            <param name="Destination">New destination</param>
            <returns>New copy</returns>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Destination">
            <summary>
            Trnasition destination.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State">
            <summary>
            Abstract base class for all EXI Element &amp; Type grammar states.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.#ctor">
            <summary>
            Abstract base class for all EXI Element &amp; Type grammar states.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition[])">
            <summary>
            Abstract base class for all EXI Element &amp; Type grammar states.
            </summary>
            <param name="Transistions">Transitions</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.Clone">
            <summary>
            Clones the state (i.e. performs a shallow copy).
            </summary>
            <returns>Cloned state</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.op_Addition(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            Grammar concatenation operator:
            
            http://www.w3.org/TR/2011/REC-exi-20110310/#grammarConcatOperator
            </summary>
            <param name="StateLeft">Left operand</param>
            <param name="StateRight">Right operand</param>
            <returns>Concatenation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaSimpleType,System.Boolean)">
            <summary>
            Simple Type Grammar
            
            §8.5.4.1.3.1: http://www.w3.org/TR/2011/REC-exi-20110310/#simpleTypeGrammars
            </summary>
            <param name="XmlType">Simple type.</param>
            <param name="Empty">If content should be omitted.</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaElement,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Element Grammar
            
            §8.5.4.1.2: http://www.w3.org/TR/2011/REC-exi-20110310/#elementGrammars
            </summary>
            <param name="Element">Element definition</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaComplexType,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Complex Type Grammar
            
            §8.5.4.1.3.2: http://www.w3.org/TR/2011/REC-exi-20110310/#complexTypeGrammars
            any &amp; anyAttribute: http://www.w3.org/TR/xmlschema-0/#any
            </summary>
            <param name="XmlType">Complex type.</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateUrType(System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Complex ur-Type Grammar
            
            §8.5.4.1.3.3: http://www.w3.org/TR/2011/REC-exi-20110310/#anyTypeGrammar
            </summary>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaParticle,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Particle grammar
            
            §8.5.4.1.5: http://www.w3.org/TR/2011/REC-exi-20110310/#particles
            §8.5.4.1.6. Element terms: http://www.w3.org/TR/2011/REC-exi-20110310/#elementTerms
            §8.5.4.1.7. Wildcard terms: http://www.w3.org/TR/2011/REC-exi-20110310/#wildcardTerms
            §8.5.4.1.8. Model group terms: http://www.w3.org/TR/2011/REC-exi-20110310/#modelGroupTerms
            </summary>
            <param name="Particle">Particle</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaGroupRef,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Group reference grammar:
            
            §8.5.4.1.8. Model group terms: http://www.w3.org/TR/2011/REC-exi-20110310/#modelGroupTerms
            </summary>
            <param name="GroupRef">Group reference</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaSequence,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Sequence model groups
            
            §8.5.4.1.8.1: http://www.w3.org/TR/2011/REC-exi-20110310/#sequenceGroupTerms
            </summary>
            <param name="Sequence">Sequence declaration</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaChoice,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            Choice model groups
            
            §8.5.4.1.8.2: http://www.w3.org/TR/2011/REC-exi-20110310/#choiceGroupTerms
            </summary>
            <param name="Choice">Choice declaration</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaAll,System.Boolean,System.Xml.Schema.XmlSchema)">
            <summary>
            All model groups
            
            §8.5.4.1.8.3: http://www.w3.org/TR/2011/REC-exi-20110310/#allGroupTerms
            </summary>
            <param name="All">All declaration</param>
            <param name="Empty">If content should be omitted.</param>
            <param name="Schema">Schema</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.CreateProto(System.Xml.Schema.XmlSchemaAttribute,System.Boolean)">
            <summary>
            Attribute Uses Grammar
            
            §8.5.4.1.4: http://www.w3.org/TR/2011/REC-exi-20110310/#attributeUses
            </summary>
            <param name="Attribute">Attribute</param>
            <param name="Empty">If content should be omitted.</param>
            <returns>State</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State.Normalize">
            <summary>
            Normalizes a proto-grammar.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersTyped">
            <summary>
            CH [schema-typed value]
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersTyped.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            CH [schema-typed value]
            </summary>
            <param name="DataType">Data Type</param>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersTyped.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeQNameTyped">
            <summary>
            AT(qname) [schema-typed value]
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeQNameTyped.#ctor(System.String,System.String,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.DataTypes.DataType,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            AT(qname) [schema-typed value]
            </summary>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="DataType">Data Type</param>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeQNameTyped.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeWildcardUntyped">
            <summary>
            AT(*)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeWildcardUntyped.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            AT(*)
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeWildcardUntyped.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeUriWildcardUntyped">
            <summary>
            AT(uri:*)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeUriWildcardUntyped.#ctor(System.String,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            AT(uri:*)
            </summary>
            <param name="Namespace">Namespace</param>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.AttributeUriWildcardUntyped.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersUntyped">
            <summary>
            CH [untyped value]
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersUntyped.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            CH [untyped value]
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.CharactersUntyped.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementQName">
            <summary>
            SE(qname)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementQName.#ctor(System.String,System.String,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            SE(qname)
            </summary>
            <param name="LocalName">Local Name</param>
            <param name="Namespace">Namespace</param>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementQName.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.EndElement">
            <summary>
            End Element transition (EE)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.EndElement.#ctor">
            <summary>
            End Element transition (EE)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.EndElement.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            End Element transition (EE)
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.EndElement.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementUriWildcard">
            <summary>
            SE(uri:*)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementUriWildcard.#ctor(System.String,Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            SE(uri:*)
            </summary>
            <param name="Namespace">Namespace</param>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementUriWildcard.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementWildcard">
            <summary>
            SE(*)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementWildcard.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            SE(*)
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.StartElementWildcard.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.Nop">
            <summary>
            NOP transition (EE)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.Nop.#ctor">
            <summary>
            NOP transition (EE)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.Nop.#ctor(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            NOP transition (EE)
            </summary>
            <param name="Destination">Destination state</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transitions.Nop.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.Transition.Copy(Clayster.Library.Internet.EXI.Grammars.SchemaInformed.StateMachine.State)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.StringTables.LocalNameRecord">
            <summary>
            Record used in Local Name string tables.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.StringTables.NamespaceRecord">
            <summary>
            Record used in Namespace string tables.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EXI.StringTables.StringTable`1">
            <summary>
            Generic string table
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.#ctor(`0)">
            <summary>
            Generic string table
            </summary>
            <param name="DefaultValue">Default value to return in <see cref="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.TryGetValue(System.String,System.Int32@,`0@)"/> calls, when the
            key is not found.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.#ctor(`0,System.Collections.Generic.KeyValuePair{System.String,`0}[])">
            <summary>
            Generic string table
            </summary>
            <param name="DefaultValue">Default value to return in <see cref="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.TryGetValue(System.String,System.Int32@,`0@)"/> calls, when the
            key is not found.</param>
            <param name="InitialValues">Initial values.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.Add(System.String,`0)">
            <summary>
            Adds an item to the string table.
            </summary>
            <param name="Key">String</param>
            <param name="Value">Value</param>
            <returns>Index of <paramref name="Key"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.Replace(System.String,`0)">
            <summary>
            Replaces a value in the string table.
            </summary>
            <param name="Key">Key</param>
            <param name="Value">New Value</param>
            <returns>-1 if the key was not found, otherwise the index of the key in the table.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.Replace(System.Int32,System.String,`0)">
            <summary>
            Replaces a value in the string table.
            </summary>
            <param name="Index">Index of value in the table.</param>
            <param name="Key">New Key</param>
            <param name="Value">New Value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.TryGetValue(System.String,System.Int32@,`0@)">
            <summary>
            Tries to get a value from the string table from its key.
            </summary>
            <param name="Key">String</param>
            <param name="Index">Index in the table if found.</param>
            <param name="Value">Value if found.</param>
            <returns>If <paramref name="Key"/> was found or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.TryGetValue(System.Int32,System.String@,`0@)">
            <summary>
            Tries to get a value from the string table from its index.
            </summary>
            <param name="Index">Index in the table.</param>
            <param name="Key">String if found</param>
            <param name="Value">Value if found.</param>
            <returns>If <paramref name="Key"/> was found or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EXI.StringTables.StringTable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EXI.StringTables.StringTable`1.Count">
            <summary>
            Number of items in the table.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.BlogSearchResultItem">
            <summary>
            Google Blog Search Result Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.PostUrl">
            <summary>
            Post URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.TitleNoFormatting">
            <summary>
            Unformatted title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.Author">
            <summary>
            Author
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.BlogUrl">
            <summary>
            Blog URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.PublishedDate">
            <summary>
            Published Date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResultItem.Tag">
            <summary>
            Tag. Can be used by clients to attach information to the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.BlogSearchResult">
            <summary>
            Google Blog Search Result.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.BlogSearchResult.GetPageStartIndex(System.String)">
            <summary>
            Page start index.
            </summary>
            <param name="Page">Page</param>
            <returns>Start Index.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResult.Items">
            <summary>
            Search result items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResult.MoreResultsUrl">
            <summary>
            URL for more results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResult.EstimatedResultCount">
            <summary>
            Estimated result count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResult.CurrentPageIndex">
            <summary>
            Current page index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.BlogSearchResult.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageSearchResult">
            <summary>
            Google Image Search Result.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.ImageSearchResult.GetPageStartIndex(System.String)">
            <summary>
            Page start index.
            </summary>
            <param name="Page">Page</param>
            <returns>Start Index.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResult.Items">
            <summary>
            Search result items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResult.MoreResultsUrl">
            <summary>
            URL for more results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResult.EstimatedResultCount">
            <summary>
            Estimated result count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResult.CurrentPageIndex">
            <summary>
            Current page index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResult.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageSearchResultItem">
            <summary>
            Google Image Search Result Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.ImageId">
            <summary>
            Image ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.UnescapedUrl">
            <summary>
            Unescaped URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.VisibleUrl">
            <summary>
            Visible URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.OriginalContextUrl">
            <summary>
            Original Context URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.ThumbnailUrl">
            <summary>
            Thumbnail URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.TitleNoFormatting">
            <summary>
            Unformatted title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.ContentNoFormatting">
            <summary>
            Unformatted content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.ThumbnailWidth">
            <summary>
            Thumbnail Width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.ThumbnailHeight">
            <summary>
            Thumbnail Height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.ImageSearchResultItem.Tag">
            <summary>
            Tag. Can be used by clients to attach information to the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.PhoneNumber">
            <summary>
            Google Local Search Phone number.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.PhoneNumber.Number">
            <summary>
            Telephone number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.PhoneNumber.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.VideoSearchResult">
            <summary>
            Google Video Search Result.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.VideoSearchResult.GetPageStartIndex(System.String)">
            <summary>
            Page start index.
            </summary>
            <param name="Page">Page</param>
            <returns>Start Index.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResult.Items">
            <summary>
            Search result items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResult.MoreResultsUrl">
            <summary>
            URL for more results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResult.EstimatedResultCount">
            <summary>
            Estimated result count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResult.CurrentPageIndex">
            <summary>
            Current page index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResult.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.VideoSearchResultItem">
            <summary>
            Google Video Search Result Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.PlayUrl">
            <summary>
            Play URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.TitleNoFormatting">
            <summary>
            Unformatted title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Publisher">
            <summary>
            Publisher
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.ThumbnailUrl">
            <summary>
            Thumbnail URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.VideoType">
            <summary>
            Videotype
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Published">
            <summary>
            Published
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Rating">
            <summary>
            Rating
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.ThumbnailWidth">
            <summary>
            Thumbnail width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.ThumbnailHeight">
            <summary>
            Thumbnail height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.VideoSearchResultItem.Tag">
            <summary>
            Tag. Can be used by clients to attach information to the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.LocalSearchResult">
            <summary>
            Google Local Search Result.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.LocalSearchResult.GetPageStartIndex(System.String)">
            <summary>
            Page start index.
            </summary>
            <param name="Page">Page</param>
            <returns>Start Index.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.Items">
            <summary>
            Search result items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.MoreResultsUrl">
            <summary>
            URL for more results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.EstimatedResultCount">
            <summary>
            Estimated result count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.CurrentPageIndex">
            <summary>
            Current page index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.LatitudeSpan">
            <summary>
            Latitude span of map.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.LongitudeSpan">
            <summary>
            Longitude span of map.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.SouthLatitude">
            <summary>
            South boundary
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.NorthLatitude">
            <summary>
            North boundary
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.WestLongitude">
            <summary>
            West boundary
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.EastLongitude">
            <summary>
            East boundary
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResult.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.LocalSearchResultItem">
            <summary>
            Google Local Search Result Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.PhoneNumbers">
            <summary>
            Phone numbers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.AddressLines">
            <summary>
            Address lines
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.ViewportMode">
            <summary>
            Viewport mode
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.ListingType">
            <summary>
            Listing type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.TitleNoFormatting">
            <summary>
            Unformatted title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.DdUrl">
            <summary>
            Direct road description URL, from the location of the client to this item.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.DdUrlToHere">
            <summary>
            Direct road description URL, from somewhere to this item.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.DdUrlFromHere">
            <summary>
            Direct road description URL, from this item to somewhere.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.StreetAddress">
            <summary>
            Street address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Country">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.StaticMapUrl">
            <summary>
            Static map URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Accuracy">
            <summary>
            Accuracy
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.MaxAge">
            <summary>
            Max Age
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.LocalSearchResultItem.Tag">
            <summary>
            Tag. Can be used by clients to attach information to the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ResultSize">
            <summary>
            Result size.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ResultSize.Small">
            <summary>
            Small, i.e. 4 result items
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ResultSize.Large">
            <summary>
            Large, i.e. 8 result items
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.SearchFilter">
            <summary>
            Search filter
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.SearchFilter.Active">
            <summary>
            Enables the highest level of safe search filtering 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.SearchFilter.Moderate">
            <summary>
            Enables moderate safe search filtering (default) 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.SearchFilter.Off">
            <summary>
            Disables safe search filtering 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.LocalSearchListing">
            <summary>
            Local Search Listing
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.LocalSearchListing.Blended">
            <summary>
            Request KML, Local Business Listings, and Geocode results 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.LocalSearchListing.KmlOnly">
            <summary>
            Request KML and Geocode results 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.LocalSearchListing.LocalOnly">
            <summary>
            Request Local Business Listings and Geocode results 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.VideoSortOrder">
            <summary>
            Video search sort order.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.VideoSortOrder.Relevance">
            <summary>
            By relevance.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.VideoSortOrder.Date">
            <summary>
            By publishing date
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.BlogSortOrder">
            <summary>
            Blog search sort order.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.BlogSortOrder.Relevance">
            <summary>
            By relevance.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.BlogSortOrder.Date">
            <summary>
            By publishing date
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageSize">
            <summary>
            Image size
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.Small">
            <summary>
            Small
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.Large">
            <summary>
            Large
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.XLarge">
            <summary>
            Extra large
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.XXLarge">
            <summary>
            Extra extra large
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageSize.Huge">
            <summary>
            Huge
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageColors">
            <summary>
            Image colors
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColors.Grayscale">
            <summary>
            Grayscale
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColors.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageColorFilter">
            <summary>
            Image color filter
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Black">
            <summary>
            Black
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Brown">
            <summary>
            Brown
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.White">
            <summary>
            White
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageColorFilter.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageType">
            <summary>
            Image Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageType.Face">
            <summary>
            Face
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageType.Photo">
            <summary>
            Photo
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageType.Clipart">
            <summary>
            Clipart
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageType.Lineart">
            <summary>
            Lineart
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.ImageFileType">
            <summary>
            Image File Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageFileType.Jpeg">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageFileType.Png">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageFileType.Gif">
            <summary>
            GIF
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.Search.ImageFileType.Bmp">
            <summary>
            BMP
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.GoogleSearchClient">
            <summary>
            Google Search Client. Uses the Google Ajax Search API:
            http://code.google.com/intl/sv/apis/ajaxsearch/documentation/
            http://code.google.com/intl/sv/apis/ajaxsearch/documentation/reference.html#_restUrlBase
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.GoogleSearchClient.WebSearch(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Clayster.Library.Internet.Google.Search.ResultSize},System.String,System.Nullable{Clayster.Library.Internet.Google.Search.SearchFilter},System.String,System.String,System.Nullable{System.Boolean},System.String)">
            <summary>
            Performs a web search.
            </summary>
            <param name="Query">Query</param>
            <param name="Referer">HTTP Referer, i.e. site referring to the service.</param>
            <param name="UserIP">User IP, if available, or the empty string if not.</param>
            <param name="StartIndex">Optional zero-based start index</param>
            <param name="Size">Optional result size.</param>
            <param name="ApiKey">Optional API key.</param>
            <param name="Filter">This optional argument supplies the search safety level.</param>
            <param name="HostLanguage">This optional argument supplies the host language of the application
            making the request. If this argument is not present then the system will choose a value based on
            the value of the Accept-Language http header. If this header is not present, a value of en is assumed.</param>
            <param name="ResultLanguageRestriction">This optional argument allows the caller to restrict the
            search to documents written in a particular language </param>
            <param name="RemoveDuplicates">This optional argument controls turning on or off the duplicate content filter.</param>
            <param name="TailorResultForCountry">This optional argument allows the caller to tailor the results to a 
            specific country. The value should be a valid country code (e.g. uk, de, etc.). If this argument is not 
            present, then the system will use a value based on the domain used to load the API (e.g. http://www.google.com/jsapi). 
            If the API loader was not used, a value of "us" is assumed.</param>
            <returns>Search result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.GoogleSearchClient.LocalSearch(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Clayster.Library.Internet.Google.Search.ResultSize},System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{Clayster.Library.Internet.Google.Search.LocalSearchListing})">
            <summary>
            Performs a local search.
            </summary>
            <param name="Query">Query</param>
            <param name="Referer">HTTP Referer, i.e. site referring to the service.</param>
            <param name="UserIP">User IP, if available, or the empty string if not.</param>
            <param name="StartIndex">Optional zero-based start index</param>
            <param name="Size">Optional result size.</param>
            <param name="ApiKey">Optional API key.</param>
            <param name="HostLanguage">This optional argument supplies the host language of the application
            making the request. If this argument is not present then the system will choose a value based on
            the value of the Accept-Language http header. If this header is not present, a value of en is assumed.</param>
            <param name="Latitude">This optional argument supplies the search center latitude for a local search.</param>
            <param name="Longitude">This optional argument supplies the search center longitude for a local search.</param>
            <param name="LatitudeSpan">Optional latitude span</param>
            <param name="LongitudeSpan">Optional longitude span</param>
            <param name="Listing">This optional argument specifies which type of listing the user is interested in.</param>
            <returns>Search result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.GoogleSearchClient.VideoSearch(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Clayster.Library.Internet.Google.Search.ResultSize},System.String,System.String,System.Nullable{Clayster.Library.Internet.Google.Search.VideoSortOrder})">
            <summary>
            Performs a video search.
            </summary>
            <param name="Query">Query</param>
            <param name="Referer">HTTP Referer, i.e. site referring to the service.</param>
            <param name="UserIP">User IP, if available, or the empty string if not.</param>
            <param name="StartIndex">Optional zero-based start index</param>
            <param name="Size">Optional result size.</param>
            <param name="ApiKey">Optional API key.</param>
            <param name="HostLanguage">This optional argument supplies the host language of the application
            making the request. If this argument is not present then the system will choose a value based on
            the value of the Accept-Language http header. If this header is not present, a value of en is assumed.</param>
            <param name="SortOrder">Sort order</param>
            <returns>Search result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.GoogleSearchClient.BlogSearch(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Clayster.Library.Internet.Google.Search.ResultSize},System.String,System.String,System.Nullable{Clayster.Library.Internet.Google.Search.BlogSortOrder})">
            <summary>
            Performs a blog search.
            </summary>
            <param name="Query">Query</param>
            <param name="Referer">HTTP Referer, i.e. site referring to the service.</param>
            <param name="UserIP">User IP, if available, or the empty string if not.</param>
            <param name="StartIndex">Optional zero-based start index</param>
            <param name="Size">Optional result size.</param>
            <param name="ApiKey">Optional API key.</param>
            <param name="HostLanguage">This optional argument supplies the host language of the application
            making the request. If this argument is not present then the system will choose a value based on
            the value of the Accept-Language http header. If this header is not present, a value of en is assumed.</param>
            <param name="SortOrder">Sort order</param>
            <returns>Search result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.GoogleSearchClient.ImageSearch(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Clayster.Library.Internet.Google.Search.ResultSize},System.String,System.String,System.Nullable{Clayster.Library.Internet.Google.Search.SearchFilter},System.Nullable{Clayster.Library.Internet.Google.Search.ImageSize},System.Nullable{Clayster.Library.Internet.Google.Search.ImageColors},System.Nullable{Clayster.Library.Internet.Google.Search.ImageColorFilter},System.Nullable{Clayster.Library.Internet.Google.Search.ImageType},System.Nullable{Clayster.Library.Internet.Google.Search.ImageFileType},System.String)">
            <summary>
            Performs a image search.
            </summary>
            <param name="Query">Query</param>
            <param name="Referer">HTTP Referer, i.e. site referring to the service.</param>
            <param name="UserIP">User IP, if available, or the empty string if not.</param>
            <param name="StartIndex">Optional zero-based start index</param>
            <param name="Size">Optional result size.</param>
            <param name="ApiKey">Optional API key.</param>
            <param name="HostLanguage">This optional argument supplies the host language of the application
            making the request. If this argument is not present then the system will choose a value based on
            the value of the Accept-Language http header. If this header is not present, a value of en is assumed.</param>
            <param name="Filter">This optional argument supplies the search safety level.</param>
            <param name="RestrictSize">This optional argument tells the image search system to restrict the search 
            to images of the specified size.</param>
            <param name="RestrictColors">This optional argument tells the image search system to restrict the 
            search to images of the specified colorization.</param>
            <param name="ColorFilter">This optional argument tells the image search system to filter the search 
            to images of the specified color.</param>
            <param name="RestrictType">This optional argument tells the image search system to restrict the 
            search to images of the specified type.</param>
            <param name="RestrictFileType">This optional argument tells the image search system to restrict the 
            search to images of the specified filetype.</param>
            <param name="SiteSearch">This optional argument tells the image search system to restrict the search to 
            images within the specified domain, e.g., "photobucket.com". Note: This method restricts results to 
            images found on pages at the given URL.</param>
            <returns>Search result</returns>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.WebSearchResult">
            <summary>
            Google Web Search Result.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Search.WebSearchResult.GetPageStartIndex(System.String)">
            <summary>
            Page start index.
            </summary>
            <param name="Page">Page</param>
            <returns>Start Index.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResult.Items">
            <summary>
            Search result items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResult.MoreResultsUrl">
            <summary>
            URL for more results.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResult.EstimatedResultCount">
            <summary>
            Estimated result count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResult.CurrentPageIndex">
            <summary>
            Current page index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResult.Pages">
            <summary>
            Pages
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Search.WebSearchResultItem">
            <summary>
            Google Web Search Result Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.UnescapedUrl">
            <summary>
            Unescaped URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.VisibleUrl">
            <summary>
            Visible URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.CacheUrl">
            <summary>
            Cache URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.TitleNoFormatting">
            <summary>
            Title without formatting
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Search.WebSearchResultItem.Tag">
            <summary>
            Tag. Can be used by clients to attach information to the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Books.Book">
            <summary>
            Google Books Book reference.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.#ctor(Clayster.Library.Internet.ATOM.AtomContainerElements.AtomEntry)">
            <summary>
            Google Books Book reference.
            </summary>
            <param name="Entry">ATOM Entry definition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.GetHtml(Clayster.Library.Internet.Google.Books.GoogleBooksClient)">
            <summary>
            HTML version of the book. The HTML is cached inside the book object, and will
            only be loaded once.
            </summary>
            <param name="Client">Client used to get the book reference.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.GetEpubUrl(Clayster.Library.Internet.Google.Books.GoogleBooksClient)">
            <summary>
            Gets the URL to the EPUB version of the book (if available).
            </summary>
            <param name="Client">Client used to get the book reference.</param>
            <returns>URL to the EPUB version of the book, or null if not available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.GetEpubUrl(Clayster.Library.Internet.Google.Books.GoogleBooksClient,System.Boolean,System.Boolean)">
            <summary>
            Gets the URL to the EPUB version of the book (if available).
            </summary>
            <param name="Client">Client used to get the book reference.</param>
            <param name="GuessUrl">If an attempt should be made to guess the URL first.</param>
            <param name="TryLoadHtml">If URL guess do not result in a valid EPUB-book, the HTML page
            can be loaded, to see if another url exists.</param>
            <returns>URL to the EPUB version of the book, or null if not available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.GetPdfUrl(Clayster.Library.Internet.Google.Books.GoogleBooksClient)">
            <summary>
            Gets the URL to the PDF version of the book (if available).
            </summary>
            <param name="Client">Client used to get the book reference.</param>
            <returns>URL to the PDF version of the book, or null if not available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.Book.GetPdfUrl(Clayster.Library.Internet.Google.Books.GoogleBooksClient,System.Boolean,System.Boolean)">
            <summary>
            Gets the URL to the PDF version of the book (if available).
            </summary>
            <param name="Client">Client used to get the book reference.</param>
            <param name="GuessUrl">If an attempt should be made to guess the URL first.</param>
            <param name="TryLoadHtml">If URL guess do not result in a valid PDF-book, the HTML page
            can be loaded, to see if another url exists.</param>
            <returns>URL to the PDF version of the book, or null if not available.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Viewability">
            <summary>
            Viewability
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Embeddability">
            <summary>
            Embeddability
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Review">
            <summary>
            Reviews
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Creators">
            <summary>
            Creators
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Identifiers">
            <summary>
            Identifiers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Publishers">
            <summary>
            Publishers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Subjects">
            <summary>
            Subjects
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Titles">
            <summary>
            Titles
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.ThumbnailUrls">
            <summary>
            Thumbnail Urls
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.Books.Book.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.AccountType">
            <summary>
            Type of account to request authorization for.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.AccountType.Google">
            <summary>
            Get authorization for a Google account only
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.AccountType.Hosted">
            <summary>
            Get authorization for a hosted account only
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Google.AccountType.HostedOrGoogle">
            <summary>
            Get authorization first for a hosted account; if attempt fails, get authorization for a Google account
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Google.ClientLogin">
            <summary>
            Static class that handles client logins to Google APIs.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.ClientLogin.Login(Clayster.Library.Internet.Google.AccountType,System.String,System.String,System.String,System.String)">
            <summary>
            Use ClientLogin authentication if your client is a standalone, single-user "installed" client (such as a desktop application).
            </summary>
            <param name="AccountType">Account Type.</param>
            <param name="EMailAddress">The user's email address.</param>
            <param name="Password">The user's password.</param>
            <param name="Service">Service names. For a list of services, see: http://code.google.com/intl/sv/apis/gdata/faq.html</param>
            <param name="Source">Identifies your client application. Should take the form companyName-applicationName-versionID.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.ClientLogin.Login(System.String,System.String,System.String,System.String)">
            <summary>
            Use ClientLogin authentication if your client is a standalone, single-user "installed" client (such as a desktop application).
            </summary>
            <param name="EMailAddress">The user's email address.</param>
            <param name="Password">The user's password.</param>
            <param name="Service">Service names. For a list of services, see: http://code.google.com/intl/sv/apis/gdata/faq.html</param>
            <param name="Source">Identifies your client application. Should take the form companyName-applicationName-versionID.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Google.Books.GoogleBooksClient">
            <summary>
            Google Books Client. For more info, see:
            http://code.google.com/intl/sv/apis/books/docs/gdata/developers_guide_protocol.html
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Google Books Client. For more info, see:
            http://code.google.com/intl/sv/apis/books/docs/gdata/developers_guide_protocol.html
            </summary>
            <param name="EMailAddress">The user's email address.</param>
            <param name="Password">The user's password.</param>
            <param name="Source">Identifies your client application. Should take the form companyName-applicationName-versionID.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.#ctor(Clayster.Library.Internet.Google.AccountType,System.String,System.String,System.String)">
            <summary>
            Google Books Client. For more info, see:
            http://code.google.com/intl/sv/apis/books/docs/gdata/developers_guide_protocol.html
            </summary>
            <param name="AccountType">Account Type.</param>
            <param name="EMailAddress">The user's email address.</param>
            <param name="Password">The user's password.</param>
            <param name="Source">Identifies your client application. Should take the form companyName-applicationName-versionID.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.SearchBooks(System.String)">
             <summary>
             Searches for books.
             </summary>
             <param name="Query">Specifies a search query term. Book Search searches all book metadata and full text 
             for books matching the term. Book metadata includes titles, keywords, descriptions, author names, and subjects.
             
             To search for an exact phrase, enclose the phrase in quotation marks.
            
             You can also use any of the advanced search operators supported by Book Search. For example, jane+austen+-inauthor:austen 
             returns matches that mention (but are not authored by) Jane Austen.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.SearchBooks(System.String,System.String)">
             <summary>
             Searches for books.
             </summary>
             <param name="Query">Specifies a search query term. Book Search searches all book metadata and full text 
             for books matching the term. Book metadata includes titles, keywords, descriptions, author names, and subjects.
             
             To search for an exact phrase, enclose the phrase in quotation marks.
            
             You can also use any of the advanced search operators supported by Book Search. For example, jane+austen+-inauthor:austen 
             returns matches that mention (but are not authored by) Jane Austen.</param>
             <param name="EndUserIpAddress">Google Book Search respects copyright, contract, and other legal restrictions associated 
             with the end user's location. As a result, some users may not be able to access book content from certain countries. 
             For example, certain books are only "previewable" in the United States; we omit such books' preview links for users 
             outside that country.
            
             To ensure that your application's users receive accurate and consistent results, we recommend that you include the end 
             user's IP address in every query to the Book Search API. The user's IP address allows Book Search to determine with high 
             accuracy the country where the user is located, which in turn allows Book Search to accurately determine what content 
             can be served to the user. This is the same technique we use in the Book Search GUI to determine whether a preview is 
             served to a particular user.
            
             The Book Search Data API provides only search results--pointers to the desired books--which are accessible from anywhere 
             in the world. Thus, if you show results to the user that includes books the user can't view, the user is likely to be 
             frustrated or confused. So please provide the user's IP address when querying, to avoid showing the user results that 
             they can't view.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.SearchBooks(System.String,System.String,System.Nullable{Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability})">
             <summary>
             Searches for books.
             </summary>
             <param name="Query">Specifies a search query term. Book Search searches all book metadata and full text 
             for books matching the term. Book metadata includes titles, keywords, descriptions, author names, and subjects.
             
             To search for an exact phrase, enclose the phrase in quotation marks.
            
             You can also use any of the advanced search operators supported by Book Search. For example, jane+austen+-inauthor:austen 
             returns matches that mention (but are not authored by) Jane Austen.</param>
             <param name="EndUserIpAddress">Google Book Search respects copyright, contract, and other legal restrictions associated 
             with the end user's location. As a result, some users may not be able to access book content from certain countries. 
             For example, certain books are only "previewable" in the United States; we omit such books' preview links for users 
             outside that country.
            
             To ensure that your application's users receive accurate and consistent results, we recommend that you include the end 
             user's IP address in every query to the Book Search API. The user's IP address allows Book Search to determine with high 
             accuracy the country where the user is located, which in turn allows Book Search to accurately determine what content 
             can be served to the user. This is the same technique we use in the Book Search GUI to determine whether a preview is 
             served to a particular user.
            
             The Book Search Data API provides only search results--pointers to the desired books--which are accessible from anywhere 
             in the world. Thus, if you show results to the user that includes books the user can't view, the user is likely to be 
             frustrated or confused. So please provide the user's IP address when querying, to avoid showing the user results that 
             they can't view.</param>
             <param name="BookViewability">Allows you to filter the results according to the books' viewability status.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.SearchBooks(System.String,System.String,System.Nullable{Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability},System.Nullable{System.Int32})">
             <summary>
             Searches for books.
             </summary>
             <param name="Query">Specifies a search query term. Book Search searches all book metadata and full text 
             for books matching the term. Book metadata includes titles, keywords, descriptions, author names, and subjects.
             
             To search for an exact phrase, enclose the phrase in quotation marks.
            
             You can also use any of the advanced search operators supported by Book Search. For example, jane+austen+-inauthor:austen 
             returns matches that mention (but are not authored by) Jane Austen.</param>
             <param name="EndUserIpAddress">Google Book Search respects copyright, contract, and other legal restrictions associated 
             with the end user's location. As a result, some users may not be able to access book content from certain countries. 
             For example, certain books are only "previewable" in the United States; we omit such books' preview links for users 
             outside that country.
            
             To ensure that your application's users receive accurate and consistent results, we recommend that you include the end 
             user's IP address in every query to the Book Search API. The user's IP address allows Book Search to determine with high 
             accuracy the country where the user is located, which in turn allows Book Search to accurately determine what content 
             can be served to the user. This is the same technique we use in the Book Search GUI to determine whether a preview is 
             served to a particular user.
            
             The Book Search Data API provides only search results--pointers to the desired books--which are accessible from anywhere 
             in the world. Thus, if you show results to the user that includes books the user can't view, the user is likely to be 
             frustrated or confused. So please provide the user's IP address when querying, to avoid showing the user results that 
             they can't view.</param>
             <param name="BookViewability">Allows you to filter the results according to the books' viewability status.</param>
             <param name="StartIndex">Specifies the index of the first matching result that should be included in the result set. 
             This parameter uses a one-based index, meaning the first result is 1, the second result is 2 and so forth.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Google.Books.GoogleBooksClient.SearchBooks(System.String,System.String,System.Nullable{Clayster.Library.Internet.ATOM.ForeignNamespaces.GoogleBooks.Viewability},System.Nullable{System.Int32},System.Nullable{System.Int32})">
             <summary>
             Searches for books.
             </summary>
             <param name="Query">Specifies a search query term. Book Search searches all book metadata and full text 
             for books matching the term. Book metadata includes titles, keywords, descriptions, author names, and subjects.
             
             To search for an exact phrase, enclose the phrase in quotation marks.
            
             You can also use any of the advanced search operators supported by Book Search. For example, jane+austen+-inauthor:austen 
             returns matches that mention (but are not authored by) Jane Austen.</param>
             <param name="EndUserIpAddress">Google Book Search respects copyright, contract, and other legal restrictions associated 
             with the end user's location. As a result, some users may not be able to access book content from certain countries. 
             For example, certain books are only "previewable" in the United States; we omit such books' preview links for users 
             outside that country.
            
             To ensure that your application's users receive accurate and consistent results, we recommend that you include the end 
             user's IP address in every query to the Book Search API. The user's IP address allows Book Search to determine with high 
             accuracy the country where the user is located, which in turn allows Book Search to accurately determine what content 
             can be served to the user. This is the same technique we use in the Book Search GUI to determine whether a preview is 
             served to a particular user.
            
             The Book Search Data API provides only search results--pointers to the desired books--which are accessible from anywhere 
             in the world. Thus, if you show results to the user that includes books the user can't view, the user is likely to be 
             frustrated or confused. So please provide the user's IP address when querying, to avoid showing the user results that 
             they can't view.</param>
             <param name="BookViewability">Allows you to filter the results according to the books' viewability status.</param>
             <param name="StartIndex">Specifies the index of the first matching result that should be included in the result set. 
             This parameter uses a one-based index, meaning the first result is 1, the second result is 2 and so forth.</param>
             <param name="MaxResults">Specifies the maximum number of results that should be included in the result set.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Google.GoogleUserAuthentication">
            <summary>
            Static class that handles client logins to Google APIs.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Google.GoogleUserAuthentication.SID">
            <summary>
            SID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.GoogleUserAuthentication.LSID">
            <summary>
            LSID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Google.GoogleUserAuthentication.Auth">
            <summary>
            Authentication token
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlMeta">
            <summary>
            HTML Meta information.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlMeta.#ctor(Clayster.Library.Internet.HTML.HtmlElement)">
            <summary>
            HTML Meta information.
            </summary>
            <param name="E">HTML definition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlMeta.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlMeta.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlMeta.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardLike">
            <summary>
            HPath Guard Like operator
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator">
            <summary>
            Base class for all binary HPath Guard operators
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardOperator">
            <summary>
            Base class for all HPath Guard operators.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardOperator.#ctor">
            <summary>
            Base class for all HPath Guard operators.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardOperator.ToDouble(System.String,System.Double@)">
            <summary>
            Parses a string to a double.
            </summary>
            <param name="s">String</param>
            <param name="Result">Result, if possible</param>
            <returns>true if the string could be parsed, false otherwise.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble">
            <summary>
            If the operator supports doubles
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            Base class for all binary HPath Guard operators
            </summary>
            <param name="Left">Left Operand</param>
            <param name="Right">Right Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)">
            <summary>
            Performs the operation on two strings.
            </summary>
            <param name="Left">Left string</param>
            <param name="Right">Right string</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)">
            <summary>
            Performs the operation on two doubles.
            </summary>
            <param name="Left">Left double</param>
            <param name="Right">Right double</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Boolean,System.Boolean)">
            <summary>
            Performs the operation on two boolean values.
            </summary>
            <param name="Left">Left boolean value</param>
            <param name="Right">Right boolean value</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLike.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Equal operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLike.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLike.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardLike.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlLink">
            <summary>
            HTML Link.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlLink.#ctor(Clayster.Library.Internet.HTML.HtmlElement)">
            <summary>
            HTML Link.
            </summary>
            <param name="E">HTML definition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlLink.HasRel(System.String)">
            <summary>
            If the link contains a specific rel. This comparison is case insensitive.
            </summary>
            <param name="Rel">rel</param>
            <returns>If <paramref name="Rel"/> is available in the link.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlLink.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlLink.Rel">
            <summary>
            Rel-attribute. Values might be separated by space characters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlLink.Type">
            <summary>
            MIME Type of content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlLink.Rels">
            <summary>
            Rels available in <see cref="P:Clayster.Library.Internet.HTML.HtmlLink.Rel"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlLink.HRef">
            <summary>
            URL to content.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect">
            <summary>
            Extracts information from an HTML document, using a SElECT-like approach.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Extracts information from an HTML document, using a SElECT-like approach.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlSelect.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTPU.AsynchronousHttpuResponseCallback">
            <summary>
            Delegate for asynchronous HTTPU response callbacks.
            </summary>
            <param name="From">The response came from this endpoint.</param>
            <param name="StatusCode">HTTP Status code.</param>
            <param name="StatusMessage">Status Message</param>
            <param name="Header">HTTP Header</param>
            <param name="Data">Decoded data (if any). Null if none.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTPU.HttpuServer">
            <summary>
            HTTP Server.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.#ctor(System.Int32,Clayster.Library.Internet.HTTP.HttpServer)">
            <summary>
            HTTPU Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="HttpServer">HTTP Server, that will process incoming requests.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.#ctor(System.Int32,Clayster.Library.Internet.HTTP.HttpServer,System.Int16,System.String[])">
            <summary>
            HTTPU Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="HttpServer">HTTP Server, that will process incoming requests.</param>
            <param name="Ttl">Time to live, i.e. number of router hops allowed.</param>
            <param name="MulticastAddresses">Any multi-cast addresses to listen on.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Send(System.String,System.Int32,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IpAddress">IP Address to send the message to.</param>
            <param name="Port">Port to send the message to.</param> 
            <param name="Command">Command</param>
            <param name="Resource">Resource</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Send(System.String,System.Int32,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IpAddress">IP Address to send the message to.</param>
            <param name="Port">Port to send the message to.</param>
            <param name="Command">Command</param>
            <param name="Resource">Resource</param>
            <param name="Data">Data (may be null).</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Send(System.Net.IPEndPoint,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IPEndPoint">IP Address and port to send the message to.</param>
            <param name="Command">Command</param>
            <param name="Resource">Resource</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Send(System.Net.IPEndPoint,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IPEndPoint">IP Address and port to send the message to.</param>
            <param name="Command">Command</param>
            <param name="Resource">Resource</param>
            <param name="Headers">Headers</param>
            <param name="Data">Data (may be null).</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Respond(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpStatusCode,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IpAddress">IP Address to send the message to.</param>
            <param name="Port">Port to send the message to.</param> 
            <param name="ResponseCode">Response Code</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Respond(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpStatusCode,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IpAddress">IP Address to send the message to.</param>
            <param name="Port">Port to send the message to.</param>
            <param name="ResponseCode">Response Code</param>
            <param name="Data">Data (may be null).</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Respond(System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpStatusCode,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IPEndPoint">IP Address and port to send the message to.</param>
            <param name="ResponseCode">Response Code</param>
            <param name="Headers">Headers</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTPU.HttpuServer.Respond(System.Net.IPEndPoint,Clayster.Library.Internet.HTTP.HttpStatusCode,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Sends an HTTPU message.
            </summary>
            <param name="IPEndPoint">IP Address and port to send the message to.</param>
            <param name="ResponseCode">Response Code</param>
            <param name="Headers">Headers</param>
            <param name="Data">Data (may be null).</param>
        </member>
        <member name="E:Clayster.Library.Internet.HTTPU.HttpuServer.OnAsynchronousResponse">
            <summary>
            Event raised when an asynchronous response has been received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpHeaderEventHandler">
            <summary>
            Delegate for HTTP Header events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpDataEventHandler">
            <summary>
            Delegate for HTTP Data events.
            </summary>
            <param name="Sender">Sender of event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpEventArgs">
            <summary>
            HTTP Header Event Arguments.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpEventArgs.#ctor(Clayster.Library.Internet.HTTP.HttpSocketClient)">
            <summary>
            HTTP Event Arguments.
            </summary>
            <param name="Client">HTTP Client</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpEventArgs.Client">
            <summary>
            HTTP Client
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpEventArgs.Cancel">
            <summary>
            If the process should be cancelled. If setting this to true, the current socket connection
            will be closed, and an <see cref="T:System.IO.IOException"/> will be thrown.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpHeaderEventArgs">
            <summary>
            HTTP Header Event Arguments.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeaderEventArgs.#ctor(Clayster.Library.Internet.HTTP.HttpHeader,System.String[],Clayster.Library.Internet.HTTP.HttpSocketClient)">
            <summary>
            HTTP Header Event Arguments.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Rows">Rows in header, in the order they were received, including the first status row, but excluding any empty rows at the end.</param>
            <param name="Client">HTTP Client</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeaderEventArgs.Header">
            <summary>
            HTTP Header
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeaderEventArgs.Rows">
            <summary>
            Rows in header, in the order they were received, including the first status row, but excluding any empty rows at the end.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpDataEventArgs">
            <summary>
            HTTP Data Event Arguments.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpDataEventArgs.#ctor(System.Byte[],System.Int32,System.Int32,Clayster.Library.Internet.HTTP.HttpSocketClient)">
            <summary>
            HTTP Data Event Arguments.
            </summary>
            <param name="Data">Binary Data Array</param>
            <param name="Offset">Starting offset of received data.</param>
            <param name="Length">Number of bytes received.</param>
            <param name="Client">HTTP Client</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpDataEventArgs.Data">
            <summary>
            Binary Data Array
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpDataEventArgs.Offset">
            <summary>
            Starting offset of received data.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpDataEventArgs.Length">
            <summary>
            Number of bytes received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource">
            <summary>
            HTTP Resource giving access to files embedded into an assembly.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.#ctor(System.String,System.String)">
            <summary>
            HTTP Resource giving access to an embedded resource.
            </summary>
            <param name="Name">Name of the resource through the HTTP Server.</param>
            <param name="ResourceName">Resource Name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.CalcRangeSize(Clayster.Library.Internet.HTTP.HttpRange,System.Int64)">
            <summary>
            Calculates the size of a range request.
            </summary>
            <param name="Range">HTTP GET Range</param>
            <param name="FileSize">Size of the file.</param>
            <returns>Number of bytes in the range.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.CalcContentLength(Clayster.Library.Internet.HTTP.HttpRange[],System.Int64)">
            <summary>
            Calculates the content length of a ranged request.
            </summary>
            <param name="Ranges">HTTP Ranges</param>
            <param name="FileSize">File size</param>
            <returns>Content length of request.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.AcceptGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.AcceptPartialGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPartialGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerEmbeddedResource.AcceptPOST">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.IHttpCache">
            <summary>
            Interface for HTTP Caches.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpCache.TryGet(System.String,Clayster.Library.Internet.HTTP.HttpHeader@)">
            <summary>
            Tries to get a header from the cache.
            </summary>
            <param name="Url">URL of the content.</param>
            <param name="Header">HTTP Header of the content, or null if not found.</param>
            <returns>If content was found in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpCache.TryGet(System.String,Clayster.Library.Internet.HTTP.HttpHeader@,System.Byte[]@)">
            <summary>
            Tries to get content from the cache.
            </summary>
            <param name="Url">URL of the content.</param>
            <param name="Header">HTTP Header of the content, or null if not found.</param>
            <param name="Data">Binary data representation of content, or null if not found.</param>
            <returns>If content was found in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpCache.AddToCache(System.String,Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[])">
            <summary>
            Adds content to the cache.
            </summary>
            <param name="Url">URL of content.</param>
            <param name="Header">HTTP Header of content. Must contain cache expiration date.</param>
            <param name="Data">Binary data representation of content.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IHttpCache.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.IRedirectionDatabase">
            <summary>
            Interface for a redirection database.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IRedirectionDatabase.CheckRedirections(System.String@)">
            <summary>
            Checks if any permanent redirections have been registered for the Url, and changes <paramref name="Url"/> accordingly.
            </summary>
            <param name="Url">Url to check.</param>
            <returns>If <paramref name="Url"/> has been changed due to registered redirections.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.IRedirectionDatabase.RegisterRedirection(System.String,System.String)">
            <summary>
            Registers a new redirection.
            </summary>
            <param name="OldUrl">Old URL</param>
            <param name="NewUrl">New URL</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic">
            <summary>
            Creates a client credentials object using Basic Authentication.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a client credentials object using Basic Authentication.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.Basic.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest">
            <summary>
            Creates a client credentials object using Digest Authentication.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Creates a client credentials object using Digest Authentication.
            </summary>
            <param name="Parameter1">Parameter 1</param>
            <param name="Parameter2">Parameter 2</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.EvaluateFunction(System.Object,System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionTwoScalarParameters.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.Digest.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen">
            <summary>
            Posts an object to the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Posts an object to the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheckListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen">
            <summary>
            Posts an object to the web. Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Posts an object to the web. Outputs the communication to the print output.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheckListen">
            <summary>
            Fetches an object from the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheckListen.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Fetches an object from the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen"/> instead.
            
            Outputs the communication to the print output.
            </summary>
            <param name="Parameter">URL</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheckListen.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheckListen.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheckListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen">
            <summary>
            Fetches an object from the web. Outputs the communication to the print output.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Fetches an object from the web Outputs the communication to the print output.
            </summary>
            <param name="Parameter">URL</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck">
            <summary>
            Posts an object to the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost"/> instead.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Posts an object to the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost"/> instead.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPostNoCheck.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheck">
            <summary>
            Fetches an object from the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet"/> instead.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheck.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Fetches an object from the web. In the case of HTTPS communication, this function
            does not check the validity of the server certificate.
            
            If such a check is desired, use <see cref="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet"/> instead.
            </summary>
            <param name="Parameter">URL</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheck.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheck.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGetNoCheck.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultStringEmptyValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultValueAttribute.#ctor(System.Object)">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <param name="DefaultValue">Default value.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultValueAttribute.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultStringEmptyValueAttribute.#ctor">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterMaskedAttribute">
            <summary>
            Tells the Web Service that the parameter should be masked when rendering test forms, etc.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterMaskedAttribute.#ctor">
            <summary>
            Tells the Web Service that the parameter should be masked when rendering test forms, etc.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultTimeSpanMaxValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultTimeSpanMaxValueAttribute.#ctor">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultTimeSpanMinValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultTimeSpanMinValueAttribute.#ctor">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultDateTimeMaxValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultDateTimeMaxValueAttribute.#ctor">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultDateTimeMinValueAttribute">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDefaultDateTimeMinValueAttribute.#ctor">
            <summary>
            Web Service Method parameter default value attribute. If a call is made to a method, and a parameter lacks a value in the call,
            but the parameter is defined with this attribute, the corresponding default value will be used instead. Using default values,
            makes it possible to create REST type web services.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.UnauthorizedReason">
            <summary>
            Reasons for failing an authorization attempt.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.UnauthorizedReason.NoError">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.UnauthorizedReason.FirstAttempt">
            <summary>
            First attempt to connect. Challenge should only be returned.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.UnauthorizedReason.OldCredentialsTryAgain">
            <summary>
            Reconnect is made with old credentials. Challenge should only be returned.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.UnauthorizedReason.InvalidLogin">
            <summary>
            An invalid login attempt has been made. Take appropriate action.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod">
            <summary>
            Base class for all HTTP Server authentication methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Authorize(Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Net.EndPoint,System.String@,Clayster.Library.Internet.HTTP.UnauthorizedReason@)">
            <summary>
            Tries to authorize the client.
            </summary>
            <param name="Header">HTTP Header of the request.</param>
            <param name="Method">HTTP Method</param>
            <param name="Resource">Resource requiring authentication.</param>
            <param name="RemoteEndPoint">Endpoint from where the request originated.</param>
            <param name="UserName">User Name identified.</param>
            <param name="Reason">Contains information about the reason for not authenticating the user.</param>
            <returns>Authorization state object, if the client is authorized, or null if not authorized or the method
            is not applicable to the request.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Challenge">
            <summary>
            Challenge string for the authentication method.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.AuthorizeUserCallback">
            <summary>
            Delegate for user authentication methods. If the user name and password match, an authentication object 
            (accessible through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>) should be returned.
            If they don't match, null should be returned.
            </summary>
            <param name="UserName">User Name</param>
            <param name="Password">Password</param>
            <returns>Authentication object, later accessible through <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject"/>.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.BasicAuthentication">
            <summary>
            Class handling basic authentication in an HTTP Server.
            
            NOTE: The use of BasicAuthentication is discouraged, since user name and password are sent in clear text. 
            Use <see cref="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication"/> instead, to protect user credentials.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ServerSideAuthentication.BasicAuthentication.#ctor(System.String,Clayster.Library.Internet.HTTP.ServerSideAuthentication.AuthorizeUserCallback)">
            <summary>
            Class handling basic authentication in an HTTP Server.
            
            NOTE: The use of BasicAuthentication is discouraged, since user name and password are sent in clear text. 
            Use <see cref="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication"/> instead, to protect user credentials.
            </summary>
            <param name="Realm">Realm</param>
            <param name="UserAuthorizationMethod">Method used to authenticate a user.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ServerSideAuthentication.BasicAuthentication.Authorize(Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Net.EndPoint,System.String@,Clayster.Library.Internet.HTTP.UnauthorizedReason@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Authorize(Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Net.EndPoint,System.String@,Clayster.Library.Internet.HTTP.UnauthorizedReason@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.BasicAuthentication.Realm">
            <summary>
            Realm
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.BasicAuthentication.Challenge">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Challenge"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.GetDigestUserPasswordHashCallback">
            <summary>
            Delegate for user password has callbacks.
            </summary>
            <param name="UserName">User Name</param>
            <param name="PasswordHash">Password hash used for the user name.</param>
            <param name="AuthorizationObject">Authorization object to return, if authorization is successful.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication">
            <summary>
            Class handling digest authentication in an HTTP Server.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.#ctor(System.String,Clayster.Library.Internet.HTTP.ServerSideAuthentication.GetDigestUserPasswordHashCallback)">
            <summary>
            Class handling digest authentication in an HTTP Server.
            </summary>
            <param name="Realm">Realm</param>
            <param name="UserAuthorizationMethod">Method used to authenticate a user.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.Authorize(Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Net.EndPoint,System.String@,Clayster.Library.Internet.HTTP.UnauthorizedReason@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Authorize(Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,Clayster.Library.Internet.HTTP.IHttpServerResource,System.Net.EndPoint,System.String@,Clayster.Library.Internet.HTTP.UnauthorizedReason@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.CalculatePasswordHash(System.String,System.String)">
            <summary>
            Calculates a password hash for use with the current digest authentication method.
            
            NOTE: The password hash depends on the <paramref name="UserName"/>, <paramref name="Password"/>
            and <see cref="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.Realm"/> of the method. If the <see cref="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.Realm"/> changes, all password hashes
            need to be reset.
            </summary>
            <param name="UserName">User Name</param>
            <param name="Password">Password</param>
            <returns>Password hash for use in Digest authorization.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.Realm">
            <summary>
            Realm
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ServerSideAuthentication.DigestAuthentication.Challenge">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod.Challenge"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodParameterDocumentationAttribute">
            <summary>
            Web Service Method parameter documentation attribute. The documentation will be provided in the WSDL and Test forms corresponding
            to the web service method parameter to which this attribute is attached.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodParameterDocumentationAttribute.#ctor(System.String)">
            <summary>
            Web Service Method parameter documentation attribute. The documentation will be provided in the WSDL and Test forms corresponding
            to the web service method parameter to which this attribute is attached.
            </summary>
            <param name="Documentation">Web Service Method Parameter Documentation.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.WebMethodParameterDocumentationAttribute.Documentation">
            <summary>
            Web Service Method Parameter Documentation.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebMethodDocumentationAttribute">
            <summary>
            Web Service Method documentation attribute. The documentation will be provided in the WSDL and Test forms corresponding
            to the web service methods to which this attribute is attached.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebMethodDocumentationAttribute.#ctor(System.String)">
            <summary>
            Web Service Method documentation attribute. The documentation will be provided in the WSDL and Test forms corresponding
            to the web service methods to which this attribute is attached.
            </summary>
            <param name="Documentation">Web Service Method Documentation.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.WebMethodDocumentationAttribute.Documentation">
            <summary>
            Web Service Method Documentation.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpUriScheme">
            <summary>
            URI Scheme URL used to access system.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpUriScheme.Http">
            <summary>
            HTTP
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpUriScheme.Https">
            <summary>
            HTTPS
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpUriScheme.Httpu">
            <summary>
            HTTPU
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpUriScheme.HttpxEncrypted">
            <summary>
            HTTPX (HTTP over XMPP) over encrypted XMPP connection. Only the connection from the local machine to XMPP server is guaranteed to be encrypted.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpUriScheme.HttpxUnencrypted">
            <summary>
            HTTPX (HTTP over XMPP) over unencrypted XMPP connection.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerRequest">
            <summary>
            Class collecting information about an HTTP Request containing information about the client request.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerRequest.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHeader,System.String,System.Collections.Generic.SortedDictionary{System.String,System.String},System.Object,System.Net.EndPoint,Clayster.Library.Internet.HTTP.HttpUriScheme,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Class collecting information about an HTTP Request containing information about the client request.
            </summary>
            <param name="SubItem">Subitem, i.e. what is left of the uri after identifying the resource and stripping
            it from query parameters.</param>
            <param name="Header">HTTP Header of the request.</param>
            <param name="Url">URL used to reach the resource.</param>
            <param name="Query">Query parameters found in the url.</param>
            <param name="Data">Any data available.</param>
            <param name="ClientEndPoint">Client End Point (as seen from the server).</param>
            <param name="UriScheme">URI Scheme used in the request.</param>
            <param name="ClientCertificate">Any client certificate, if available.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerRequest.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpHeader,System.String,System.Collections.Generic.SortedDictionary{System.String,System.String},System.Object,System.Net.EndPoint,Clayster.Library.Internet.HTTP.HttpUriScheme,System.Security.Cryptography.X509Certificates.X509Certificate,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            Class collecting information about an HTTP Request containing information about the client request.
            </summary>
            <param name="SubItem">Subitem, i.e. what is left of the uri after identifying the resource and stripping
            it from query parameters.</param>
            <param name="Header">HTTP Header of the request.</param>
            <param name="Url">URL used to reach the resource.</param>
            <param name="Query">Query parameters found in the url.</param>
            <param name="Data">Any data available.</param>
            <param name="ClientEndPoint">Client End Point (as seen from the server).</param>
            <param name="UriScheme">URI Scheme used in the request.</param>
            <param name="ClientCertificate">Any client certificate, if available.</param>
            <param name="Ranges">Ranges to read out.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.SubItem">
            <summary>
            Subitem, i.e. what is left of the uri after identifying the resource and stripping
            it from query parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.Header">
            <summary>
            HTTP Header of the request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.Url">
            <summary>
            URL used to get to the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.Query">
            <summary>
            Query parameters found in the url.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.Data">
            <summary>
            Any data available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.ClientEndPoint">
            <summary>
            Client End Point (as seen from the server).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.ClientIpAddress">
            <summary>
            Client IP Address (as seen from the server). The empty string if the End Point is not an IP End Point.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.ClientXmppAddress">
            <summary>
            Client XMPP Address (as seen from the server). The empty string if the End Point is not an XMPP End Point.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.ClientAddress">
            <summary>
            Client Address (either IP Address or XMPP Address).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.UriScheme">
            <summary>
            URI Scheme used in the request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.IsEncrypted">
            <summary>
            If <see cref="P:Clayster.Library.Internet.HTTP.HttpServerRequest.UriScheme"/> represents an encrypted transport.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.ClientCertificate">
            <summary>
            Any client certificate, if available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.Ranges">
            <summary>
            Optional ranges to read out. null if full content is requested.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerRequest.HasRanges">
            <summary>
            If the request has ranges or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ClientCredentials.DigestMode">
            <summary>
            Digest Method Mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.ClientCredentials.DigestMode.Password">
            <summary>
            Password is given explicitly.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.ClientCredentials.DigestMode.PasswordHash">
            <summary>
            The Password Hash (MD5(UserName+":"+Realm+":"+Password))
            is computed by the caller and given to the method explicitly.
            The method never knows the password of the user.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication">
            <summary>
            Class enabling Digest Authentication in Web requests. If the server requests basic authentication it can answer such requests as well.
            However, the <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication"/> class will always require two requets to authentication the client. if you know, beforehand,
            that the server requuires Basic Authentication, it will be quicker to use <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication"/>, since it will authenticate the
            client with only one request.
            
            http://tools.ietf.org/html/rfc2069
            http://tools.ietf.org/html/rfc2617
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpCredentials">
            <summary>
            Base class for all HTTP Credential classes used in authentication.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCredentials.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)">
            <summary>
            Sets the credentials held by the object into the HTTP Web Request object used
            for communication.
            </summary>
            <param name="Client">Current HTTP Client.</param>
            <param name="r">Web request being performed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCredentials.Copy">
            <summary>
            Creates a new instance of the credentials object.
            </summary>
            <returns>Copy of the current object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCredentials.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)">
            <summary>
            Writes the credentials to the HTTP request.
            </summary>
            <param name="Client">HTTP Client</param>
            <param name="Uri">URI</param>
            <param name="Method">Method</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCredentials.CredentialDataUpdated(System.String)">
            <summary>
            Checks if further authentication data is found, and a retry to be made.
            </summary>
            <param name="AuthenticationMechanismData">Authentication mechanism data.</param>
            <returns>true iff the credentials objects was updated with new information and
            a retry should be attempted.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCredentials.MaxNrSteps">
            <summary>
            Maximum number of steps required to complete the task.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCredentials.AuthorizationObject">
            <summary>
            Authorization object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.#ctor(System.String,System.String)">
            <summary>
            Class enabling Digest Authentication in Web requests. If the server requests basic authentication it can answer such requests as well.
            However, the <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication"/> class will always require two requets to authentication the client. if you know, beforehand,
            that the server requuires Basic Authentication, it will be quicker to use <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication"/>, since it will authenticate the
            client with only one request.
            </summary>
            <param name="UserName">User Name to use in authentication.</param>
            <param name="Password">Password to use in authentication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.#ctor(System.String,System.String,Clayster.Library.Internet.HTTP.ClientCredentials.DigestMode)">
            <summary>
            Class enabling Digest Authentication in Web requests. If the server requests basic authentication it can answer such requests as well.
            However, the <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication"/> class will always require two requets to authentication the client. if you know, beforehand,
            that the server requuires Basic Authentication, it will be quicker to use <see cref="T:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication"/>, since it will authenticate the
            client with only one request.
            </summary>
            <param name="UserName">User Name to use in authentication.</param>
            <param name="Password">Password or Password Hash, depending on the value of
            <paramref name="Mode"/>, to use in authentication.</param>
            <param name="Mode">Digest Method Mode. Determines the function of
            <paramref name="Password"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.CredentialDataUpdated(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.CredentialDataUpdated(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.UserName">
            <summary>
            User Name to use in authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Password">
            <summary>
            Password or password hash to use in authentication. Depends on the value of
            <see cref="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Mode"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Mode">
            <summary>
            Determines the function of <see cref="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Password"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Realm">
            <summary>
            Realm value returned from the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Nonce">
            <summary>
            Nonce value returned from the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.Qop">
            <summary>
            Quality of protection value returned from the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.MaxNrSteps">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.MaxNrSteps"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.DigestAuthentication.AuthorizationObject">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.AuthorizationObject"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlDecode">
            <summary>
            Decodes a literal string from an HTML source.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlDecode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Decodes a literal string from an HTML source.
            </summary>
            <param name="Parameter">String</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlDecode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlDecode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlDecode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape">
            <summary>
            Unescapes a string for java script clients.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Unescapes a string for java script clients.
            </summary>
            <param name="Parameter">String</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.JsUnescape.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape">
            <summary>
            Escapes a string for java script clients.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Escapes a string for java script clients.
            </summary>
            <param name="Parameter">String</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.JsEscape.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting">
            <summary>
            Removes uninteresting information from an HTML document.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Removes uninteresting information from an HTML document.
            </summary>
            <param name="Parameter">HTML Document</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveUninteresting.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary">
            <summary>
            Removes secondary information from an HTML document.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Removes secondary information from an HTML document.
            </summary>
            <param name="Parameter">HTML Document</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlRemoveSecondary.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormData">
            <summary>
            Collection of multi-part Form Data fields.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.#ctor">
            <summary>
            Collection of multi-part Form Data fields.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.Contains(System.String)">
            <summary>
            Checks if a field with a given name exists in the collection.
            </summary>
            <param name="Name">Field name</param>
            <returns>If a field with the given name exits or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.Encode(System.String@)">
            <summary>
            Encodes the data form
            </summary>
            <param name="MimeType">Mime type for the encoded output</param>
            <returns>Encoded data form</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.Decode(System.Byte[],System.String)">
            <summary>
            Decodes a binary encoded Form Data object.
            </summary>
            <param name="Data">Binary data</param>
            <param name="Boundary">Boundary used to separate parts.</param>
            <returns>Form Data Object.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormData.Item(System.String)">
            <summary>
            Gets the data of a form field. If the parameter is not found, the null is returned.
            
            If a parameter "P" represents a file upload parameter, two additional parameters will be added: "P.FileName" will contain the file name of the 
            file being uplaoded, and "P.Binary" will contain the binary representation of the file. "P" itself will contain the MIME decoded value of the file.
            </summary>
            <param name="Name">Name of the form data field.</param>
            <returns>Value of the form data field. If the parameter is not found, the null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormData.Enum.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebServiceDocumentationAttribute">
            <summary>
            Web Service documentation attribut. The documentation will be provided in the WSDL and Test forms corresponding
            to the web services to which this attribute is attached.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebServiceDocumentationAttribute.#ctor(System.String)">
            <summary>
            Web Service documentation attribut. The documentation will be provided in the WSDL and Test forms corresponding
            to the web services to which this attribute is attached.
            </summary>
            <param name="Documentation">Web Service Documentation.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.WebServiceDocumentationAttribute.Documentation">
            <summary>
            Web Service Documentation.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost">
            <summary>
            Posts an object to the web.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Posts an object to the web.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpPost.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet">
            <summary>
            Fetches an object from the web
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Fetches an object from the web
            </summary>
            <param name="Parameter">URL</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.HttpGet.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlDecode">
            <summary>
            URL decodes a string
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlDecode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            URL decodes a string
            </summary>
            <param name="Parameter">String to decode</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlDecode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlDecode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlDecode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlEncode">
            <summary>
            URL encodes a string
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlEncode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            URL encodes a string
            </summary>
            <param name="Parameter">String to encode</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlEncode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlEncode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ScriptExtensions.UrlEncode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ICMP.IcmpClient">
            <summary>
            Client handling the ICMP protocol
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Registers a line listener to the ICMP Client.
            </summary>
            <param name="LineListener">Line Listener</param>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Unregisters a line listener from the ICMP Client.
            </summary>
            <param name="LineListener">Line Listener</param>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.String,System.Int32)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Host">Host name or IP address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.String,System.Int32,System.Net.IPAddress@)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Host">Host name or IP address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <param name="From">Address from where the ICMP message was received. If a timeout
            occurred, From is null</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.String,System.Int32,System.Int16,System.Net.IPAddress@)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Host">Host name or IP address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <param name="From">Address from where the ICMP message was received. If a timeout
            occurred, From is null</param>
            <param name="Ttl">Time to live (i.e. maximum number of routers allowed before reaching the destination)</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.Net.IPAddress,System.Int32)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Address">Address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.Net.IPAddress,System.Int32,System.Net.IPAddress@)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Address">Address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <param name="From">Address from where the ICMP message was received. If a timeout
            occurred, From is null</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpClient.Ping(System.Net.IPAddress,System.Int32,System.Int16,System.Net.IPAddress@)">
            <summary>
            Performs an ICMP Ping operation against an IP Address.
            </summary>
            <param name="Address">Address</param>
            <param name="TimeoutMilliseconds">Timeout, in milliseconds</param>
            <param name="From">Address from where the ICMP message was received. If a timeout
            occurred, From is null</param>
            <param name="Ttl">Time to live (i.e. maximum number of routers allowed before reaching the destination)</param>
            <returns>Time of the ICMP Ping operation. If no response is received within the
            allotted time frame, null is returned.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.ICMP.IcmpClient.Request">
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ICMP.IcmpEchoMessage">
            <summary>
            ICMP Echo Message
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ICMP.IcmpInformationMessage">
            <summary>
            ICMP Information Message
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ICMP.IcmpMessage">
            <summary>
            Base class of all ICMP Messages
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpMessage.#ctor(System.Byte)">
            <summary>
            Base class of all ICMP Messages
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpMessage.GetPayload">
            <summary>
            Message payload.
            </summary>
            <returns>Binary data</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpMessage.GetBytes">
            <summary>
            Gets the binary representation of the message.
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpMessage.CalcChecksum">
            <summary>
            Caclulates the checksum of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpMessage.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpMessage.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpMessage.CheckSum">
            <summary>
            Checksum
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpInformationMessage.#ctor(System.Byte)">
            <summary>
            ICMP Information Message
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpInformationMessage.GetPayload">
            <summary>
            <see cref="M:Clayster.Library.Internet.ICMP.IcmpMessage.GetPayload"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpInformationMessage.Identifier">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpInformationMessage.SequenceNumber">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpEchoMessage.#ctor">
            <summary>
            ICMP Echo Message
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpEchoMessage.GetPayload">
            <summary>
            <see cref="M:Clayster.Library.Internet.ICMP.IcmpMessage.GetPayload"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ICMP.IcmpEchoMessage.GetPingMessage(System.Int32,System.Int32)">
            <summary>
            Creates a Ping ICMP Message
            </summary>
            <param name="Identifier">Identifier</param>
            <param name="SequenceNumber">Sequence Number</param>
            <returns>Binary representation of the ICMP Message</returns>
        </member>
        <member name="P:Clayster.Library.Internet.ICMP.IcmpEchoMessage.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Interfaces.IPackagedModule">
            <summary>
            Interface implemented by packaged modules, that contain files in a specific package.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Interfaces.IPackagedModule.Certificate">
            <summary>
            The certificate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Interfaces.IPackagedModule.Publisher">
            <summary>
            The publisher idenifier string, computed as the thumbprint of the publisher certificate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Interfaces.IPackagedModule.ServicePackage">
            <summary>
            The service package idenifier string. The name of the service package must be the same as the
            name of the packagemanifest file m the file extension (.packagemanifest).
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IP.IpPacket">
            <summary>
            Contains information about an IP Header
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.IP.IpPacket.Protocol_ICMP">
            <summary>
            ICMP Protocol
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IP.IpPacket.Protocol_IGMP">
            <summary>
            IGMP Protocol
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IP.IpPacket.Protocol_TCP">
            <summary>
            TCP Protocol
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IP.IpPacket.Protocol_UDP">
            <summary>
            UDP Protocol
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IP.IpPacket.#ctor(System.Byte[])">
            <summary>
            Contains information about an IP Header
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.SourceAddress">
            <summary>
            Source address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.DestinationAddress">
            <summary>
            Destination address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.HeaderSize">
            <summary>
            Header size
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.DatagramSize">
            <summary>
            Datagram size
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.Fragmentation">
            <summary>
            Fragmentation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.CheckSum">
            <summary>
            Checksum
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.TypeOfService">
            <summary>
            Type of service
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.Ttl">
            <summary>
            Time to live
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.Protocol">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IP.IpPacket.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Association">
            <summary>
            The association element describes an application's preferences for desktop associations. 
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Association.Extensions">
            <summary>
            The extensions attribute of the association element indicates a list of extensions to associate. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Association.MimeType">
            <summary>
            The mime-type attribute of the association element indicates a mime-types to associate. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Association.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Association.Icons">
            <summary>
            Icons
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.ApplicationDescription">
            <summary>
            The application-desc element describes how to launch a Java-based application. It contains information about the main class and arguments.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.ApplicationDescription.MainClass">
            <summary>
            The main-class attribute of the application-desc element describes the main class of an application.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.ApplicationDescription.Arguments">
            <summary>
            The argument elements describe the ordered set of arguments to an application. These arguments will 
            be passed into the main method of the application's main class.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.AppletDescription">
            <summary>
            The applet-desc element describes how to launch a Java Technology-based Applet. It contains information about, e.g., 
            the main class, size, and parameters.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.Parameters">
            <summary>
            Parameters of the Applet
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.MainClass">
            <summary>
            The main-class attribute of the applet-desc element describes the name of the main Applet class.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.DocumentBase">
            <summary>
            The documentbase attribute of the applet-desc element describes the documentbase for the applet as a HREF.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.DocumentBaseUrl">
            <summary>
            The documentbase attribute of the applet-desc element describes the documentbase for the applet as a URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.Name">
            <summary>
            The name attribute of the applet-desc element describes the name of the Applet.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.Width">
            <summary>
            The width attribute of the applet-desc element describes the width of the Applet in pixels.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.AppletDescription.Height">
            <summary>
            The height attribute of the applet-desc element describes the height of the Applet in pixels.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.ComponentDescription">
            <summary>
            The component-desc element specifies a component extension.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.InstallerDescription">
            <summary>
            The installer-desc element specifies an installer extension.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.InstallerDescription.MainClass">
            <summary>
            The main-class attribute of the installer-desc element describes the main class for the installer/uninstaller.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Param">
            <summary>
            The param element describes a parameter to an Applet.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Param.Name">
            <summary>
            The name attribute of the param element describes the name of a parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Param.Value">
            <summary>
            The value attribute of the param element describes the value of a parameter.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Package">
            <summary>
            The package element defines a relationship between a Java package or class name and a part.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Package.Name">
            <summary>
            The name attribute of the package element describes the name of a package or class.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Package.Part">
            <summary>
            The part attribute of the package element describes the part that contains the specified package or class.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Package.Recursive">
            <summary>
            The recursive attribute of the package element indicates if all sub-packages of this particular package is also included.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Property">
            <summary>
            The property element describes a name/value pair that is available to the launched application as a system property.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Property.Name">
            <summary>
            The name attribute of the property element describes the name of a system property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Property.Value">
            <summary>
            The value element describes the value of a system property.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.ExtDownload">
            <summary>
            The ext-download element defines how parts of the extension are downloaded.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.ExtDownload.ExtPart">
            <summary>
            The ext-part attribute of an ext-download element describes the name of a part in the extension.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.ExtDownload.Part">
            <summary>
            The part attribute of an ext-download element describes the name of the part it belongs to in the current JNLP file.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.ExtDownload.Download">
            <summary>
            The download attribute of an ext-download element describes if the resource may be lazily downloaded.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Extension">
            <summary>
            The extension element describes an extension that is required in order to run the application.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Extension.ExtDownloads">
            <summary>
            The ext-download element defines how parts of the extension are downloaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Extension.Version">
            <summary>
            The version attribute of an extension element specifies the version of the extension requested.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Extension.Href">
            <summary>
            The href attribute of an extension element specifies the location of the extension.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Extension.Url">
            <summary>
            Location of the extension.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Extension.Name">
            <summary>
            The name attribute of an extension element specifies the name of the extension.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.NativeLib">
            <summary>
            The nativelib element describes a resource containing native files.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Version">
            <summary>
            The version attribute of a nativelib element describes the version of a particular nativelib file that is requested.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Href">
            <summary>
            The href attribute of a nativelib element contains the location of a nativelib file as a URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Url">
            <summary>
            Location of a nativelib file as a URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Part">
            <summary>
            The part attribute of a nativelib element describes the name of the part it belongs to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Size">
            <summary>
            The size attribute of a nativelib element indicates the size of a nativelib file in bytes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.NativeLib.Download">
            <summary>
            The download attribute of a nativelib element indicates if this element must be downloaded before an application is launched (eager), or not (lazy).
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Download">
            <summary>
            Download mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.Download.Eager">
            <summary>
            Eager
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.Download.Lazy">
            <summary>
            Lazy
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Jar">
            <summary>
            The jar element describes a jar file resource.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Version">
            <summary>
            The version attribute of a jar element describes the version of a particular JAR file that is requested.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Href">
            <summary>
            The href attribute of the jar element contains the location of a jar file as a HREF.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Url">
            <summary>
            Location of a jar file as a URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Part">
            <summary>
            The part attribute of a jar element describes the name of the group it belongs too.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Size">
            <summary>
            The size attribute of a jar element indicates the size of a JAR file in bytes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Download">
            <summary>
            The download attribute of a jar element indicates if this element must be downloaded before an application is launched (eager), or not (lazy).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Jar.Main">
            <summary>
            The main attribute of a jar element indicates whether this element contains the main class.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.J2se">
            <summary>
            The j2se element describes a supported JRE version and an optional resources element to be used by the particular JRE.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.Resources">
            <summary>
            Optional resources element to be used by the particular JRE.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.Version">
            <summary>
            The version attribute of the j2se element describes the versions of the JRE that this application is supported on.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.Href">
            <summary>
            The href attribute of the j2se element specifies the location where the JRE should be downloaded from.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.Url">
            <summary>
            Location where the JRE should be downloaded from.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.JavaVmArgs">
            <summary>
            The java-vm-args attribute of the java element specifies a preferred set of virtual machine arguments to use when launching java. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.InitialHeapSize">
            <summary>
            The initial-heap-size attribute of the java element specifies the initial size of the object heap.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.J2se.MaxHeapSize">
            <summary>
            The max-heap-size attribute of the java element specifies the preferred maximum size of the object heap.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Java">
            <summary>
            The java element describes a supported JRE version and an optional resources element to be used by the particular JRE.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.Resources">
            <summary>
            Optional resources element to be used by the particular JRE.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.Version">
            <summary>
            The version attribute of the java element describes the versions of the JRE that this application is supported on.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.Href">
            <summary>
            The href attribute of the java element specifies the location where the JRE should be downloaded from.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.Url">
            <summary>
            Location where the JRE should be downloaded from.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.JavaVmArgs">
            <summary>
            The java-vm-args attribute of the java element specifies a preferred set of virtual machine arguments to use when launching java. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.InitialHeapSize">
            <summary>
            The initial-heap-size attribute of the java element specifies the initial size of the object heap.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Java.MaxHeapSize">
            <summary>
            The max-heap-size attribute of the java element specifies the preferred maximum size of the object heap.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Resources">
            <summary>
            The resources element contains an ordered set of resources that constitutes an application.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Java">
            <summary>
            Java resources.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.J2se">
            <summary>
            J2SE resources
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Jar">
            <summary>
            JAR resrouces
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.NativeLibs">
            <summary>
            Native Libraries
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Extensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Packages">
            <summary>
            Packages
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Os">
            <summary>
            Operating system.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Arch">
            <summary>
            Architecture
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Resources.Locale">
            <summary>
            Locale
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.RelatedContent">
            <summary>
            The related-content element described additional content that may be integrated with the application. 
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.RelatedContent.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.RelatedContent.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.RelatedContent.Icons">
            <summary>
            Icons
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.RelatedContent.HRef">
            <summary>
            HREF to a location on the web containing additional related content for the application. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.RelatedContent.Url">
            <summary>
            URL to a location on the web containing additional related content for the application. 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Shortcut">
            <summary>
            The shortcut element describes an application's preferences for desktop integration. 
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Shortcut.Online">
            <summary>
            The online attribute of the shortcut element describes an application's preferences launching shortcuts online or offline 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Shortcut.Desktop">
            <summary>
            The desktop element indicates that a shortcut on the desktop is desired. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Shortcut.Menu">
            <summary>
            The menu element indicates that a shortcut in a menu is desired. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Shortcut.Submenu">
            <summary>
            The submenu attribute of the menu element indicates where in the menu a shortcut is desired. 
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Icon">
            <summary>
            The icon element describes an image for an application.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.HRef">
            <summary>
            HREF to a location on the web containing an image file for an icon. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Url">
            <summary>
            URL to a location on the web containing an image file for an icon. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Version">
            <summary>
            The version attribute of an icon contains a string describing the version of the image that is requested.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Kind">
            <summary>
            The kind attribute of the icon element describes the use of the icon.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Width">
            <summary>
            The width attribute of the icon element describes the width of the icon in pixels.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Height">
            <summary>
            The height attribute of the icon element describes the height of the icon in pixels.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Depth">
            <summary>
            The depth attribute of the icon element describes the color depth of the image in bits-per-pixel. Common values will be 8, 16, or 24.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Icon.Size">
            <summary>
            The size attribute of an icon element indicates the size of an icon file in bytes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.DescriptionKind">
            <summary>
            Kind of description
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.DescriptionKind.OneLine">
            <summary>
            One-line, for a one-line description
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.DescriptionKind.Short">
            <summary>
            Short, for a one paragraph description
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.DescriptionKind.ToolTip">
            <summary>
            Tooltip, for a tool-tip description.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Description">
            <summary>
            The description element contains a description of the application.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Description.Text">
            <summary>
            Textual description.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Description.Kind">
            <summary>
            The kind attribute for the description element indicates the use of a description element. The values are: 
            
            i) one-line, for a one-line description, 
            ii) short, for a one paragraph description, and 
            iii) tooltip, for a tool-tip description. 
            
            Longer descriptions should be put on a separate web page and referred to using the homepage element.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Information">
            <summary>
            The information element contains various descriptive information about the application being launched.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Icons">
            <summary>
            Icons
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Associations">
            <summary>
            Associations
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.RelatedContent">
            <summary>
            Related content
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Shortcut">
            <summary>
            Shortcut
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Os">
            <summary>
            The os attribute of the information element specifies for which operating system this element should be considered. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Arch">
            <summary>
            The arch attribute of the information element specifies for what architecure this element should be considered. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Platform">
            <summary>
            The platform attribute of the information element specifies for what platform this element should be considered. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Locale">
            <summary>
            The locale attribute of the information element specifies the locale for which this information element should be used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Title">
            <summary>
            The title element contains the name of the application.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Vendor">
            <summary>
            The vendor element contains the name of the vendor.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.HomepageHRef">
            <summary>
            HREF of the homepage.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.Homepage">
            <summary>
            URL of the homepage.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.Information.OfflineAllowed">
            <summary>
            The offline-allowed element indicates if the application can be launched offline. 
            Default value (i.e., if the element is not specified) is online.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.Security">
            <summary>
            Security requirements.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.Security.AllPermissions">
            <summary>
            The all-permissions element indicates that the application needs full access the the local system and network.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.Security.J2eeApplicationClientPermissions">
            <summary>
            The j2ee-application-client-permissions element indicates that the application needs the set of 
            permissions defined for a J2EE application client.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.Security.Undefined">
            <summary>
            Security settings not available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.UpdateCheck">
            <summary>
            The check attribute of the update element indicates the applications preference for when to check for updates.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdateCheck.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdateCheck.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdateCheck.Background">
            <summary>
            Background
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdateCheck.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.UpdatePolicy">
            <summary>
            The policy attribute of the update element indicates the applications preference for what to do when updates are available.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdatePolicy.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdatePolicy.PromptUpdate">
            <summary>
            Prompt for updates
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdatePolicy.PromputRun">
            <summary>
            Prompt for run
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.UpdatePolicy.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.JnlpDocument">
            <summary>
            Contents of a JNLP File Document.
            
            For more information, see:
            http://java.sun.com/javase/technologies/desktop/javawebstart/download-spec.html
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Contents of a JNLP File Document.
            
            For more information, see:
            http://java.sun.com/javase/technologies/desktop/javawebstart/download-spec.html
            </summary>
            <param name="Doc">XML Definition</param>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDocument.GetUrl(System.String)">
            <summary>
            Gets a full URL from <see cref="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Codebase"/> and <paramref name="HRef"/>.
            </summary>
            <param name="HRef">Uri to resource.</param>
            <returns>Full URL.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Spec">
            <summary>
            The spec attribute of the jnlp element specifies what versions of the JNLP specification a particular 
            JNLP file works with. The default value is "1.0+".
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Version">
            <summary>
            The version attribute of the jnlp element specifies the version of the application being launched, 
            as well as the version of the JNLP file itself.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Codebase">
            <summary>
            The codebase attribute of the jnlp element specifies the codebase for the application. This is also 
            used as the base URL for all relative URLs in href attributes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.HRef">
            <summary>
            The href attribute of the jnlp element contains the location of the JNLP file as a URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Inforamtion">
            <summary>
            The information element contains various descriptive information about the application being launched.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Resources">
            <summary>
            The resources element contains an ordered set of resources that constitutes an application.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.Security">
            <summary>
            The security element describes the security requirements of the application.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.UpdateCheck">
            <summary>
            Application Update Check
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.UpdatePolicy">
            <summary>
            Application Update Policy
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.ApplicationDescription">
            <summary>
            Application Description, if available, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.AppletDescription">
            <summary>
            Applet Description, if available, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.ComponentDescription">
            <summary>
            Component Description, if available, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDocument.InstallerDescription">
            <summary>
            Installer Description, if available, null otherwise.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.BsonWriter">
            <summary>
            BSON Writer. For more information about BSON, see:
            http://bsonspec.org/#/specification
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonWriter">
            <summary>
            JSON Writer. For more information about JSON, see:
            http://www.json.org/
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.mode">
            <summary>
            JSON Writer mode.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            JSON Writer. For more information about JSON, see:
            http://www.json.org/
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            JSON Writer. For more information about JSON, see:
            http://www.json.org/
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.BeginObject">
            <summary>
            Begins an object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.EndObject">
            <summary>
            Ends an object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.BeginArray">
            <summary>
            Begins an array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.EndArray">
            <summary>
            Ends an array.
            </summary>
            <returns>Number of items added to the array.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteName(System.String)">
            <summary>
            Writes a property name.
            </summary>
            <param name="Name">Name</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Enum)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Drawing.Color)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes an untyped value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteObject(System.Collections.Generic.SortedDictionary{System.String,System.Object})">
            <summary>
            Writes an object
            </summary>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteObject(System.Object)">
            <summary>
            Writes an object
            </summary>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteArray(System.Array)">
            <summary>
            Writes an array
            </summary>
            <param name="Array">Array</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteArray(System.Collections.IEnumerable)">
            <summary>
            Writes an array
            </summary>
            <param name="Array">Array</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.WriteRawValue(System.Object)">
            <summary>
            Writes a raw (already JSON encoded) value.
            </summary>
            <param name="Json">JSON encoded value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonWriter.CreateTemporaryWriter(System.Object@)">
            <summary>
            Creates a temporary writer with its own output.
            </summary>
            <param name="Output">Output.</param>
            <returns>New JSON Writer</returns>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonWriter.CurrentMode">
            <summary>
            Current Mode
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonWriter.JsonMode">
            <summary>
            JSON Writer modes
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.Value">
            <summary>
            Ready to write a value
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.End">
            <summary>
            At the end of file.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.InArray">
            <summary>
            In an array, first element
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.InArrayNext">
            <summary>
            In an array, not the first element
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.InObjectName">
            <summary>
            Ready to receive a memeber name, first member
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.InObjectValue">
            <summary>
            Ready to receive a member value
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonWriter.JsonMode.InObjectNameNext">
            <summary>
            Ready to receive a member name, not first member
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.#ctor(System.IO.MemoryStream)">
            <summary>
            BSON Writer. For more information about BSON, see:
            http://bsonspec.org/#/specification
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.BeginObject">
            <summary>
            Begins an object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.EndObject">
            <summary>
            Ends an object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.BeginArray">
            <summary>
            Begins an array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.EndArray">
            <summary>
            Ends an array.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteName(System.String)">
            <summary>
            Writes a property name.
            </summary>
            <param name="Name">Name</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.WriteRawValue(System.Object)">
            <summary>
            Writes a raw (Blready JSON encoded) value.
            </summary>
            <param name="Json">BSON encoded value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonWriter.CreateTemporaryWriter(System.Object@)">
            <summary>
            Creates a temporary writer with its own output.
            </summary>
            <param name="Output">Output.</param>
            <returns>New JSON Writer</returns>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonUtilities">
            <summary>
            JSON Utilities. For more information about JSON, see:
            http://www.json.org/
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.Encode(System.Object)">
            <summary>
            Encodes an object into JSON
            </summary>
            <param name="Object">Object to encode</param>
            <returns>JSON Encoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.EncodeBinary(System.Object)">
            <summary>
            Encodes an object into BSON
            </summary>
            <param name="Object">Object to encode</param>
            <returns>BSON Encoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.TryParse(System.String,System.Object@)">
            <summary>
            Tries parsing a JSON string.
            </summary>
            <param name="Json">JSON</param>
            <param name="Result">Parsed JSON, if correctly formatted.</param>
            <returns>If the string was successfully parsed or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.Parse(System.String)">
            <summary>
            Parses a string in JSON format.
            </summary>
            <param name="Json">JSON formatted string</param>
            <returns>Parsed object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.Parse(System.Byte[])">
            <summary>
            Parses a data block in BSON format.
            </summary>
            <param name="Bson">BSON formatted byte array</param>
            <returns>Parsed object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.LoadJSON(System.String)">
            <summary>
            Loads JSON encoded data from an URL using HTTP.
            </summary>
            <param name="Url">URL to JSON Encoded data.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonUtilities.LoadBSON(System.String)">
            <summary>
            Loads BSON encoded data from an URL using HTTP.
            </summary>
            <param name="Url">URL to BSON Encoded data.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonUtilities.CodeWithScope">
            <summary>
            Contains Javascript code with scope information.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonUtilities.CodeWithScope.Code">
            <summary>
            JavaScript Code
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.JSON.JsonUtilities.CodeWithScope.Scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.ScriptExtensions.JsonDecode">
            <summary>
            JSON decodes a string
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonDecode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            JSON decodes a string
            </summary>
            <param name="Parameter">String to decode</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonDecode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonDecode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.ScriptExtensions.JsonDecode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.ScriptExtensions.JsonEncode">
            <summary>
            JSON encodes a string
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonEncode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            JSON encodes a string
            </summary>
            <param name="Parameter">String to encode</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonEncode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.ScriptExtensions.JsonEncode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.ScriptExtensions.JsonEncode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomDecoder">
            <summary>
            Decodes atom documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDecoder.#ctor">
            <summary>
            Decodes atom documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ATOM.AtomEncoder">
            <summary>
            Encodes atom documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Mikael Borgbrant, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ATOM.AtomEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ATOM.AtomEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.BinaryDecoder">
            <summary>
            Decodes binary objects
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.#ctor">
            <summary>
            Decodes binary objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.BinaryDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.BinaryDecoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.BinaryEncoder">
            <summary>
            Encodes Binary parameters
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.#ctor">
            <summary>
            Encodes binary parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.BinaryEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.BinaryEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.BinaryEncoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.BsonEncoder">
            <summary>
            Encodes BSON documents
            For more information, see:
            http://bsonspec.org/#/specification
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.#ctor">
            <summary>
            Encodes BSON documents
            For more information, see:
            http://bsonspec.org/#/specification
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.BsonEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.BsonDecoder">
            <summary>
            Decodes BSON documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonDecoder.#ctor">
            <summary>
            Decodes BSON documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.BsonDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.BsonDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.MultipartEncoder">
            <summary>
            Encodes arrays of objects.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MultipartEncoder.MimeTypeName">
            <summary>
            MIME Type for multipart messages.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.#ctor">
            <summary>
            Encodes arrays of objects.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MultipartEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.MultipartDecoder">
            <summary>
            Decodes multipart objects
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartDecoder.#ctor">
            <summary>
            Decodes multipart objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MultipartDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MultipartDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderExtensions">
            <summary>
            Returns a n x 2 matrix whose first column contains recognized file extensions, and the second column contains the corresponding mime type.
            The matrix is formed by analyzing all registered MIME Decoders in the system.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderExtensions.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a n x 2 matrix whose first column contains recognized file extensions, and the second column contains the corresponding mime type.
            The matrix is formed by analyzing all registered MIME Decoders in the system.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderExtensions.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderExtensions.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderExtensions.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder">
            <summary>
            Decodes RDF/JSON Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.#ctor">
            <summary>
            Decodes RDF/JSON Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.ParseRdfJson(System.String)">
            <summary>
            Parses RDF/JSON documents formatted according to:
            https://dvcs.w3.org/hg/rdf/raw-file/default/rdf-json/index.html
            </summary>
            <param name="Json">JSON</param>
            <returns>Semantic triples collection.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfJsonDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder">
            <summary>
            Encodes RDF/JSON Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.#ctor">
            <summary>
            Encodes Rdf Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.GetJson(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[])">
            <summary>
            Encodes a set of Semantic Triples into a JSON document
            </summary>
            <param name="Triples">Semantic Triples</param>
            <returns>JSON cocument</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfJsonEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder">
            <summary>
            Encodes SPARQL Results documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder">
            <summary>
            Decodes SPARQL Results documents encoded using JSON
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.#ctor">
            <summary>
            Decodes SPARQL Results documents encoded using JSON
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsJsonDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder">
            <summary>
            Encodes RDF/XML Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.#ctor">
            <summary>
            Encodes Rdf Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfXmlEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder">
            <summary>
            Decodes RDF/XML Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.#ctor">
            <summary>
            Decodes RDF/XML Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfXmlDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder">
            <summary>
            Encodes Turtle Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.#ctor">
            <summary>
            Encodes Turtle Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder">
            <summary>
            Decodes Turtle Documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.#ctor">
            <summary>
            Decodes Turtle Documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder">
            <summary>
            Encodes SPARQL Queries
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder">
            <summary>
            Decodes SPARQL queries
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.#ctor">
            <summary>
            Decodes SPARQL queries
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQueryDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder">
            <summary>
            Encodes SPARQL Results documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder.Clayster#Library#Internet#MIME#IMimeEncoder#GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder">
            <summary>
            Decodes SPARQL Results documents
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.#ctor">
            <summary>
            Decodes SPARQL Results documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsXmlDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Java.WebStart.JnlpDecoder">
            <summary>
            Decodes jnlp (Java Web Start) documents
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.MimeType">
            <summary>
            Java Web Start Document (JNLP File) MIME Type.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.#ctor">
            <summary>
            Decodes xml documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Java.WebStart.JnlpDecoder.ContentTypes">
            <summary>
            XML Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.XsltDecoder">
            <summary>
            Decodes xslt documents
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.#ctor">
            <summary>
            Decodes xml documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.DecodeXslt(System.Byte[],System.Text.Encoding,System.String,System.String@)">
            <summary>
            Decodes XML
            </summary>
            <param name="Data">Data</param>
            <param name="TextEncoding">Text encoding</param>
            <param name="SourceUrl">URL of resource, or the empty string if not available.</param>
            <param name="TextBase">Text base</param>
            <returns>Decoded XSLT</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XsltDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XsltDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XsltDecoder.ContentTypes">
            <summary>
            XML Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.CsvDecoder">
            <summary>
            Decodes csv documents
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.#ctor">
            <summary>
            Decodes csv documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.ParseCsv(System.String)">
            <summary>
            Parses CSV content.
            </summary>
            <param name="Csv">CSV file</param>
            <returns>List of records.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.CsvDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.CsvDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.CsvDecoder.ContentTypes">
            <summary>
            CSV Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlEncoder">
            <summary>
            Encodes HTML documents
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.#ctor">
            <summary>
            Encodes HTML documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncoderTypes">
            <summary>
            Returns a an array of redigered Encoder MIME Types.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncoderTypes.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a an array of redigered Encoder MIME Types.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncoderTypes.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncoderTypes.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncoderTypes.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderTypes">
            <summary>
            Returns a an array of redigered Decoder MIME Types.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderTypes.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Returns a an array of redigered Decoder MIME Types.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderTypes.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderTypes.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionZeroParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecoderTypes.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode">
            <summary>
            Decodes a MIME encoded object.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Decodes a MIME encoded object.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.CanTakeVectorParameter(System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CanTakeVectorParameter(System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ScriptExtensions.MimeDecode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode">
            <summary>
            Returns a an array containing the MIME encoded object, and its MIME content type string.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a an array containing the MIME encoded object, and its MIME content type string.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ScriptExtensions.MimeEncode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Calendar.VCalendarDecoder">
            <summary>
            Decodes vCalendar objects
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.VCalendarDecoder.#ctor">
            <summary>
            Decodes text objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.VCalendarDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.VCalendarDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.VCalendarDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Calendar.VCalendarDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Calendar.VCalendarDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Card.VCardDecoder">
            <summary>
            Decodes vCard objects
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Card.VCardDecoder.#ctor">
            <summary>
            Decodes text objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Card.VCardDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Card.VCardDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Card.VCardDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Card.VCardDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Card.VCardDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonEncoder">
            <summary>
            Encodes JSON documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.#ctor">
            <summary>
            Encodes JSON documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonEncoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.JSON.JsonDecoder">
            <summary>
            Decodes JSON documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.#ctor">
            <summary>
            Decodes JSON documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.JSON.JsonDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonDecoder.ContentTypes">
            <summary>
            ATOM Content Types.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.JSON.JsonDecoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormDataEncoder">
            <summary>
            Encodes Form Data parameters
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.FormDataEncoder.MimeTypeName">
            <summary>
            MIME Type for form data parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.#ctor">
            <summary>
            Encodes form data parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormDataEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormDataEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.TextEncoder">
            <summary>
            Encodes Text parameters
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.TextEncoder.MimeTypeName">
            <summary>
            MIME Type for text parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.#ctor">
            <summary>
            Encodes text parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TextEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TextEncoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.OAuth.SignatureMethod">
            <summary>
            OAuth Signature method.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.OAuth.SignatureMethod.HMAC_SHA1">
            <summary>
            HMAC-SHA1, as defined in RFC 2104.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.OAuth.OAuthClient">
            <summary>
            OAuth Client class. Definition of OAuth can be found at: http://oauth.net/core/1.0/
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_FirstDay">
            <summary>
            First day from which all time stamps are calculated in number of seconds.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.#ctor(Clayster.Library.Internet.OAuth.SignatureMethod,System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            OAuth Client class. Definition of OAuth can be found at: http://oauth.net/core/1.0/
            </summary>
            <param name="SignatureMethod">Signature method of the OAuth protocol.</param>
            <param name="ConsumerKey">OAuth Consumer Key</param>
            <param name="SharedSecret">OAuth Shared Secret</param>
            <param name="Host">Host of service provider</param>
            <param name="Port">Port to use</param>
            <param name="Ssl">If SSL (HTTPS) is to be used or not.</param>
            <param name="RequestTokenResource">HTTP Resource of the Request Token method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.#ctor(Clayster.Library.Internet.OAuth.SignatureMethod,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            OAuth Client class. Definition of OAuth can be found at: http://oauth.net/core/1.0/
            </summary>
            <param name="SignatureMethod">Signature method of the OAuth protocol.</param>
            <param name="ConsumerKey">OAuth Consumer Key</param>
            <param name="SharedSecret">OAuth Shared Secret</param>
            <param name="Host">Host of service provider</param>
            <param name="Port">Port to use</param>
            <param name="Ssl">If SSL (HTTPS) is to be used or not.</param>
            <param name="RequestTokenResource">HTTP Resource of the Request Token method.</param>
            <param name="Referer">Referer, used in HTTP POST messages.</param>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuthUrlEncode(System.String)">
            <summary>
            URL-Encodes a string. Made virtual so that descendants may override and modify which characters are URL-encoded.
            </summary>
            <param name="s">String to encode.</param>
            <returns>URL-encoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <returns>Response.</returns>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,Clayster.Library.Internet.HTTP.HttpRange[],System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="Ranges">Range to retrieve.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="DecodingMimeTypeOverride">Expected MIME Type, if different from the MIME Type reported in
            the HTTP Header.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[],System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="DecodingMimeTypeOverride">Expected MIME Type, if different from the MIME Type reported in
            the HTTP Header.</param>
            <param name="Ranges">Range to retrieve.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[],System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="Ranges">Range to retrieve.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Request(System.String,System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[],System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth Request
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="DecodingMimeTypeOverride">Expected MIME Type, if different from the MIME Type reported in
            the HTTP Header.</param>
            <param name="Ranges">Range to retrieve.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Post(System.String,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth POST
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="Data">Object to POST.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Put(System.String,System.String,System.String,System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth PUT
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="Data">Object to POST.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.OAuth_Delete(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Performs an OAuth DELETE
            </summary>
            <param name="Resource">Resource</param>
            <param name="Token">Token, if any.</param>
            <param name="TokenSecret">Token Secret, if any.</param>
            <param name="Parameters">Additional parameters to send to the service provider in the request.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.GET(System.String)">
            <summary>
            Normal HTTP GET. Skips OAUTH authentication.
            </summary>
            <param name="PathAndQuery">Path and query</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.RequestToken(System.String@,System.String@)">
            <summary>
            Requests an OAuth Token from the service provider.
            </summary>
            <param name="Token">Token</param>
            <param name="TokenSecret">Token Secret</param>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.RequestToken(System.String@,System.String@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Requests an OAuth Token from the service provider.
            </summary>
            <param name="Token">Token</param>
            <param name="TokenSecret">Token Secret</param>
            <param name="ExtParameters">Additional parameters to send to the service provider in the request.</param>
        </member>
        <member name="M:Clayster.Library.Internet.OAuth.OAuthClient.RequestToken(System.String@,System.String@,Clayster.Library.Internet.HTTP.FormParameters@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Requests an OAuth Token from the service provider.
            </summary>
            <param name="Token">Token</param>
            <param name="TokenSecret">Token Secret</param>
            <param name="Parameters">Any other parameters returned.</param>
            <param name="ExtParameters">Additional parameters to send to the service provider in the request.</param>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.ConsumerKey">
            <summary>
            OAuth Consumer Key.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.LineListeners">
            <summary>
            Registered linelisteners
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.ReceiveTimeout">
            <summary>
            Receive timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.IgnoreCookies">
            <summary>
            If cookies are to be ignored. (Default=false.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.OAuth.OAuthClient.Referer">
            <summary>
            Referer to use in HTTP requests.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ObjectExtensions">
            <summary>
            Static class containing method extensions.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ObjectExtensions.Add(System.DateTime,Clayster.Library.Internet.Duration)">
            <summary>
            Adds a Duration to a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ObjectExtensions.Subtract(System.DateTime,Clayster.Library.Internet.Duration)">
            <summary>
            Subtracts a Duration from a DateTime.
            </summary>
            <param name="DateTime">DateTime</param>
            <param name="Duration">Duration</param>
            <returns>DateTime-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ObjectExtensions.Add(System.DateTimeOffset,Clayster.Library.Internet.Duration)">
            <summary>
            Adds a Duration to a DateTimeOffset.
            </summary>
            <param name="DateTimeOffset">DateTimeOffset</param>
            <param name="Duration">Duration</param>
            <returns>DateTimeOffset+Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ObjectExtensions.Subtract(System.DateTimeOffset,Clayster.Library.Internet.Duration)">
            <summary>
            Subtracts a Duration from a DateTimeOffset.
            </summary>
            <param name="DateTimeOffset">DateTimeOffset</param>
            <param name="Duration">Duration</param>
            <returns>DateTimeOffset-Duration</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ObjectExtensions.ToDuration(System.TimeSpan)">
            <summary>
            Converts a TimeSpan to a Duration.
            </summary>
            <param name="TimeSpan">TimeSpan</param>
            <returns>Duration</returns>
        </member>
        <member name="T:Clayster.Library.Internet.POP3.Pop3Message">
            <summary>
            Mail message read from an POP3 server.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Message.#ctor(Clayster.Library.Internet.IMAP.ImapHeader,System.Object[],System.String)">
            <summary>
            Mail message read from an POP3 server.
            </summary>
            <param name="Header">Header</param>
            <param name="Parts">Parts of the message.</param>
            <param name="TextBase">Text representation of Message, if available.</param>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Message.Header">
            <summary>
            Mail Header
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Message.Parts">
            <summary>
            Parts of the decoded message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Message.TextBase">
            <summary>
            Text representation of <see cref="P:Clayster.Library.Internet.POP3.Pop3Message.Parts"/>, if available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.POP3.Pop3Exception">
            <summary>
            Base class for all POP3 Exception
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Exception.#ctor(System.String)">
            <summary>
            Base class for all POP3 Exception
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.POP3.Pop3ExtendedResponseException">
            <summary>
            Extended POP3 Response Code Exception.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3ExtendedResponseException.#ctor(System.String,System.String[])">
            <summary>
            Extended POP3 Response Code Exception.
            </summary>
            <param name="Message">Exception message</param>
            <param name="ResponseCodes">Extended response codes.</param>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3ExtendedResponseException.ResponseCodes">
            <summary>
            Extended response codes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.POP3.Pop3Client">
            <summary>
            POP3 Client. Implements the POP3 Protocol.
            
            http://www.ietf.org/rfc/rfc1939.txt
            http://www.ietf.org/rfc/rfc2449.txt
            http://tools.ietf.org/html/rfc2822
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.POP3.Pop3Client.DefaultPort">
            <summary>
            Default TCP Port.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.POP3.Pop3Client.DefaultPortSsl">
            <summary>
            Default TCP Port when using SSL/TLS.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.#ctor(System.String,System.String,System.String)">
            <summary>
            POP3 Client. Implements the POP3 Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">POP3 Account user name</param>
            <param name="Password">POP3 Account password</param>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            POP3 Client. Implements the POP3 Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">POP3 Account user name</param>
            <param name="Password">POP3 Account password</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            POP3 Client. Implements the POP3 Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">POP3 Account user name</param>
            <param name="Password">POP3 Account password</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL/TLS is to be used when connecting to the server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.Reopen">
            <summary>
            Reopen the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.Open">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LIST(System.Int32)">
            <summary>
            Returns the size of a message.
            </summary>
            <param name="MessageNumber">One-based message index.</param>
            <returns>Number of bytes of message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LIST">
            <summary>
            Returns an array of byte sizes of available messages.
            </summary>
            <returns>Array of message sizes.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.STAT(System.Int32@,System.Int64@)">
            <summary>
            Returns the number of messages available, and how many bytes they occupy in total.
            </summary>
            <param name="NrMessages">Number of messages available.</param>
            <param name="NrBytes">Number of bytes in total</param>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.NrMessages">
            <summary>
            Returns the number of messages available in the inbox. This function calls the <see cref="M:Clayster.Library.Internet.POP3.Pop3Client.STAT(System.Int32@,System.Int64@)"/> method.
            </summary>
            <returns>Number of messages available in the inbox.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.NrBytes">
            <summary>
            Returns the number of bytes of all messages in the inbox. This function calls the <see cref="M:Clayster.Library.Internet.POP3.Pop3Client.STAT(System.Int32@,System.Int64@)"/> method.
            </summary>
            <returns>Number of bytes of all messages in the inbox.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.RETR(System.Int32)">
            <summary>
            Retrieves a message.
            </summary>
            <param name="MessageNr">One-based message index.</param>
            <returns>Message</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.DELE(System.Int32)">
            <summary>
            Deletes a message.
            </summary>
            <param name="MessageNr">One-based message index.</param>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.NOOP">
            <summary>
            Execute a "No Operation" instruction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.RSET">
            <summary>
             If any messages have been marked as deleted by the POP3 server, they are unmarked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.TOP(System.Int32,System.Int32)">
            <summary>
            Retrieves the first set of rows of a message.
            
            NOTE: This is an optional command. Not all POP3 servers support this command.
            </summary>
            <param name="MessageNr">One-based message index.</param>
            <param name="NumberOfRows">Number of rows to read.</param>
            <returns>First number of rows of the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.UIDL(System.Int32)">
            <summary>
            Returns the unique message identifier of a message.
            
            NOTE: This is an optional command. Not all POP3 servers support this command.
            </summary>
            <param name="MessageNumber">One-based message index.</param>
            <returns>Unique message identifier of message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.UIDL">
            <summary>
            Returns an array of unique message identifiers of available messages.
            
            NOTE: This is an optional command. Not all POP3 servers support this command.
            </summary>
            <returns>Array of unique message identifiers.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.GetCapability(System.String)">
            <summary>
            Gets a capability from the system. Capabilities of the server is retrieved during login.
            </summary>
            <param name="Name">Name of the capability</param>
            <returns>Content of the capability, or null if not found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.HasCapability(System.String)">
            <summary>
            Checks if a capability exists on the server. Capabilities of the server is retrieved during login.
            </summary>
            <param name="Name">Name of the capability</param>
            <returns>If capability exists.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.POP3.Pop3Client.LoginDelay">
            <summary>
            Minimum number of seconds between logins.
            </summary>
            <returns>Login delay, in seconds.</returns>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnRowSent">
            <summary>
            Event raised when a row has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnRowReceived">
            <summary>
            Event raised when a row has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnMessage">
            <summary>
            Event raised when an informative message has been repored.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnError">
            <summary>
            Event raised when an error has occurred.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnOpening">
            <summary>
            Event raised when the connection is openeing.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnOpened">
            <summary>
            Event raised when the connection has opened.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnClosing">
            <summary>
            Event raised when the connection is closing.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.POP3.Pop3Client.OnClosed">
            <summary>
            Event raised when the connection has closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.Host">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.UserName">
            <summary>
            POP3 Account user name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.Password">
            <summary>
            POP3 Account password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.Port">
            <summary>
            Port number to use.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.Ssl">
            <summary>
            If SSL/TLS is to be used when connecting to the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.HasCapability_TOP">
            <summary>
            If the server supports the <see cref="M:Clayster.Library.Internet.POP3.Pop3Client.TOP(System.Int32,System.Int32)"/> command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.POP3.Pop3Client.HasCapability_UIDL">
            <summary>
            If the server supports the <see cref="M:Clayster.Library.Internet.POP3.Pop3Client.UIDL"/> command.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortScannerAll">
            <summary>
            IP Port Scanner that loops through all ports defined
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortScanner">
            <summary>
            IP Port Scanner
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.#ctor(System.String,System.String,System.Int32)">
            <summary>
            IP Port Scanner
            </summary>
            <param name="IpAddresses">
            <para>IP Address range to scan.</para>
            <para>Examples: "192.168.1.10", "192.168.1.10-50", "192.168.1.10,11,20-25".</para>
            </param>
            <param name="PortNumbers">
            <para>Port numbers to scan.</para>
            <para>Examples: "80", "1000-2000", "80,443,1000-2000".</para>
            </param>
            <param name="Threads">Threads to use during the scan.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.#ctor(Clayster.Library.Internet.Port_Scanner.IpAddressRange,Clayster.Library.Internet.Port_Scanner.PortRange,System.Int32)">
            <summary>
            IP Port Scanner
            </summary>
            <param name="IpAddresses">
            <para>IP Address range to scan.</para>
            <para>Examples: "192.168.1.10", "192.168.1.10-50", "192.168.1.10,11,20-25".</para>
            </param>
            <param name="PortNumbers">
            <para>Port numbers to scan.</para>
            <para>Examples: "80", "1000-2000", "80,443,1000-2000".</para>
            </param>
            <param name="Threads">Threads to use during the scan.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.Start">
            <summary>
            Starts the scanning.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.PortFound(System.String,System.Int32)">
            <summary>
            Send OnPortFound event
            </summary>
            <param name="IpAddress">Ip address found</param>
            <param name="PortNumber">Port number found</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.DoPortCheck(System.String,System.Int32)">
            <summary>
            Check ip address and port, if found raise OnPortFound event. 
            </summary>
            <param name="IpAddress">Ip address to check</param>
            <param name="PortNumber">Port number to check</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScanner.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.Port_Scanner.PortScanner.OnPortFound">
            <summary>
            Event raised when a new port has been found open.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.Port_Scanner.PortScanner.OnScanComplete">
            <summary>
            Event raused when the scan has been completed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.Port_Scanner.PortScanner.OnProgress">
            <summary>
            Event raised to report scan progress.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.PortScanner.Tag">
            <summary>
            User can attach any object to this property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.PortScanner.Timeout">
            <summary>
            Controls the Sending, receiving and connection timeouts of underlying sockets.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScannerAll.#ctor(System.String,System.String,System.Int32)">
            <summary>
            IP Port Scanner that loops through all ports defined 
            </summary>
            <param name="IpAddresses">
            <para>IP Address range to scan.</para>
            <para>Examples: "192.168.1.10", "192.168.1.10-50", "192.168.1.10,11,20-25".</para>
            </param>
            <param name="PortNumbers">
            <para>Port numbers to scan.</para>
            <para>Examples: "80", "1000-2000", "80,443,1000-2000".</para>
            </param>
            <param name="Threads">Threads to use during the scan.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScannerAll.#ctor(Clayster.Library.Internet.Port_Scanner.IpAddressRange,Clayster.Library.Internet.Port_Scanner.PortRange,System.Int32)">
            <summary>
            IP Port Scanner that loops through all ports defined
            </summary>
            <param name="IpAddresses">
            <para>IP Address range to scan.</para>
            <para>Examples: "192.168.1.10", "192.168.1.10-50", "192.168.1.10,11,20-25".</para>
            </param>
            <param name="PortNumbers">
            <para>Port numbers to scan.</para>
            <para>Examples: "80", "1000-2000", "80,443,1000-2000".</para>
            </param>
            <param name="Threads">Threads to use during the scan.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortScannerAll.DoPortCheck(System.String,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Port_Scanner.PortScanner.DoPortCheck(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.Base64Encode">
            <summary>
            Returns a base 64 encoded string. If the parameter is not a byte array, an implicit
            MIME encoding is attempted first.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Encode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns a base 64 encoded string. If the parameter is not a byte array, an implicit
            MIME encoding is attempted first.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Encode.EvaluateFunction(System.Array)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.EvaluateFunction(System.Array)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Encode.Evaluate(Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.ExpressionNode.Evaluate(Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Encode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleVectorParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.Base64Encode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.Base64Decode">
            <summary>
            Decodes a base 64 encoded string.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Decode.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Decodes a base 64 encoded string.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Decode.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Base64Decode.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.Base64Decode.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseDuration">
            <summary>
            Parses an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDuration.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDuration.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDuration.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseDuration.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.Xml">
            <summary>
            Converts a string to an XML Document.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Xml.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts a string to an XML Document.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Xml.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.Xml.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.Xml.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.XmlNamespaces">
            <summary>
            Returns an array of namespaces and their prefixes, defined in the root element of an XML Document.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlNamespaces.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Returns an array of namespaces and their prefixes, defined in the root element of an XML Document.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlNamespaces.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlNamespaces.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.XmlNamespaces.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.XmlSelect">
            <summary>
            Extracts information from an XML document, using a SElECT-like approach.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlSelect.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Extracts information from an XML document, using a SElECT-like approach.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlSelect.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlSelect.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.XmlSelect.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.XmlSelect.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.IsNcName">
            <summary>
            Checks if a string is a valid NCName or not.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.IsNcName.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Checks if a string is a valid NCName or not.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.IsNcName.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.IsNcName.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.IsNcName.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseTimeSpan">
            <summary>
            Parses a string to a time span value.
            
            Valid string format:
            [ws][-]{ d | d.hh:mm[:ss[.ff]] | hh:mm[:ss[.ff]] }[ws]
            
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (|) is required. Colons and periods (: and .) are literal characters and required. Other items are as follows.
            
            Item	Description  
            ws		Optional white space.  
            "-"		Optional minus sign indicating a negative TimeSpan.
            d		Days, ranging from 0 to 10675199.
            hh		Hours, ranging from 0 to 23. 
            mm		Minutes, ranging from 0 to 59. 
            ss		Optional seconds, ranging from 0 to 59. 
            ff		Optional fractional seconds, consisting of 1 to 7 decimal digits. 
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Tina Beckman, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseTimeSpan.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses a string to a time span value.
            
            Valid string format:
            [ws][-]{ d | d.hh:mm[:ss[.ff]] | hh:mm[:ss[.ff]] }[ws]
            
            Items in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (|) is required. Colons and periods (: and .) are literal characters and required. Other items are as follows.
            
            Item	Description  
            ws		Optional white space.  
            "-"		Optional minus sign indicating a negative TimeSpan.
            d		Days, ranging from 0 to 10675199.
            hh		Hours, ranging from 0 to 23. 
            mm		Minutes, ranging from 0 to 59. 
            ss		Optional seconds, ranging from 0 to 59. 
            ff		Optional fractional seconds, consisting of 1 to 7 decimal digits. 
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseTimeSpan.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseTimeSpan.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseTimeSpan.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseBoolean">
            <summary>
            Parses a string to a boolean. 
            Valid values: 1, true, yes, on, ok, 0, false, no, off, cancel
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Tina Beckman, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseBoolean.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses a string to a boolean.
            Valid values: 1, true, yes, on, ok, 0, false, no, off, cancel
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseBoolean.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseBoolean.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseBoolean.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix">
            <summary>
            Converts an HTML Table to a matrix.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts an HTML Table to a matrix.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix.ExtractMatrix(Clayster.Library.Internet.HTML.HtmlElement,Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            Converts an HTML Table to a matrix.
            </summary>
            <param name="Table">HTML Table element.</param>
            <param name="Variables">Current variables collection.</param>
            <param name="ExpressionNode">ExpressionNode performing the calculation.</param>
            <returns>Extracted matrix.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.ScriptExtensions.HtmlTableToMatrix.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseXmlDateTime">
            <summary>
            <para>Parses a string to a DateTime according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, DateTime.MinValue is returned.</para>
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseXmlDateTime.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <para>Parses a string to a DateTime according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, DateTime.MinValue is returned.</para>
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseXmlDateTime.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseXmlDateTime.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseXmlDateTime.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseWebColor">
            <summary>
            <para>Parses a string containing a web color to a Color value.</para>
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebColor.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <para>Parses a string to a Color according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, Color.MinValue is returned.</para>
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebColor.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebColor.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseWebColor.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseWebDateTime">
            <summary>
            <para>Parses a string to a DateTime according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, DateTime.MinValue is returned.</para>
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebDateTime.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <para>Parses a string to a DateTime according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, DateTime.MinValue is returned.</para>
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebDateTime.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseWebDateTime.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseWebDateTime.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString">
            <summary>
            Converts a DateTime to a string according to RFC 822.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts a DateTime to a string according to RFC 822.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.DateTimeToWebString.Synonyms">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.Synonyms"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.DoubleToString">
            <summary>
            Converts a double value to a string. Decimal separator is always supposed to be the period (.) character.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DoubleToString.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts a double value to a string. Decimal separator is always supposed to be the period (.) character.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DoubleToString.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.DoubleToString.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.DoubleToString.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ScriptExtensions.ParseDouble">
            <summary>
            Parses a string to a double. Decimal separator is always supposed to be the period (.) character.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDouble.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Parses a string to a double. Decimal separator is always supposed to be the period (.) character.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDouble.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ScriptExtensions.ParseDouble.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ScriptExtensions.ParseDouble.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamVocabularyEncodingSchemeAttribute">
            <summary>
            Dublin Core DCMI Abstract Model VocabularyEncodingScheme attribute. Add this attribute to properties that should be exported as dcam:VocabularyEncodingScheme information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A relationship between a resource and a vocabulary encoding scheme which indicates that the resource is a member of a set.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.SemanticClassAttribute">
            <summary>
            Abstract base class for all semantic web class attributes.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.SemanticClassAttribute.#ctor">
            <summary>
            Abstract base class for all semantic web class attributes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticClassAttribute.XmlNamespace">
            <summary>
            XML Namespace when exporting the property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticClassAttribute.XmlPrefix">
            <summary>
            XML Prefix when exporting the property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticClassAttribute.XmlElement">
            <summary>
            XML Element name when exporting the property.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamVocabularyEncodingSchemeAttribute.#ctor">
            <summary>
            Dublin Core DCMI Abstract Model VocabularyEncodingScheme attribute. Add this attribute to properties that should be exported as dcam:VocabularyEncodingScheme information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A relationship between a resource and a vocabulary encoding scheme which indicates that the resource is a member of a set.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamVocabularyEncodingSchemeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamVocabularyEncodingSchemeAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamVocabularyEncodingSchemeAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute">
            <summary>
            Dublin Core DCMI Abstract Model memberOf attribute. Add this attribute to properties that should be exported as dcam:memberOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A relationship between a resource and a vocabulary encoding scheme which indicates that the resource is a member of a set.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute">
            <summary>
            Abstract base class for all semantic web property attributes.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.#ctor">
            <summary>
            Abstract base class for all semantic web property attributes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace">
            <summary>
            XML Namespace when exporting the property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix">
            <summary>
            XML Prefix when exporting the property.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement">
            <summary>
            XML Element name when exporting the property.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.NamespaceDcam">
            <summary>
            Dublin Core DCMI Abstract Model namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.PrefixDcam">
            <summary>
            Dublin Core DCMI Abstract Model prefix.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.#ctor">
            <summary>
            Dublin Core DCMI Abstract Model memberOf attribute. Add this attribute to properties that should be exported as dcam:memberOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A relationship between a resource and a vocabulary encoding scheme which indicates that the resource is a member of a set.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Abstract.DcamMemberOfAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeTextAttribute">
            <summary>
            Dublin Core DCMI type Text attribute. Add this attribute to properties that should be exported as dctype:Text information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource consisting primarily of words for reading.
            
            Examples include books, letters, dissertations, poems, newspapers, articles, archives of mailing lists. Note that facsimiles 
            or images of texts are still of the genre Text.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute">
            <summary>
            Abstract base class for all Dublin Core DCMI Type attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute.NamespaceDcmiType">
            <summary>
            Dublin Core DCMI Type namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute.PrefixDcmiType">
            <summary>
            Dublin Core DCMI Type prefix.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute.#ctor">
            <summary>
            Abstract base class for all Dublin Core DCMI Type attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeTextAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Text attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource consisting primarily of words for reading.
            
            Examples include books, letters, dissertations, poems, newspapers, articles, archives of mailing lists. Note that facsimiles 
            or images of texts are still of the genre Text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeTextAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeStillImageAttribute">
            <summary>
            Dublin Core DCMI type StillImage attribute. Add this attribute to properties that should be exported as dctype:StillImage information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A static visual representation.
            
            Examples include paintings, drawings, graphic designs, plans and maps. Recommended best practice is to assign the type Text to images 
            of textual materials. Instances of the type Still Image must also be describable as instances of the broader type Image.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeStillImageAttribute.#ctor">
            <summary>
            Dublin Core DCMI type StillImage attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A static visual representation.
            
            Examples include paintings, drawings, graphic designs, plans and maps. Recommended best practice is to assign the type Text to images 
            of textual materials. Instances of the type Still Image must also be describable as instances of the broader type Image.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeStillImageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoundAttribute">
            <summary>
            Dublin Core DCMI type Sound attribute. Add this attribute to properties that should be exported as dctype:Sound information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource primarily intended to be heard.
            
            Examples include a music playback file format, an audio compact disc, and recorded speech or sounds.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoundAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Sound attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource primarily intended to be heard.
            
            Examples include a music playback file format, an audio compact disc, and recorded speech or sounds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoundAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoftwareAttribute">
            <summary>
            Dublin Core DCMI type Software attribute. Add this attribute to properties that should be exported as dctype:Software information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A computer program in source or compiled form.
            
            Examples include a C source file, MS-Windows .exe executable, or Perl script.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoftwareAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Software attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A computer program in source or compiled form.
            
            Examples include a C source file, MS-Windows .exe executable, or Perl script.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeSoftwareAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeServiceAttribute">
            <summary>
            Dublin Core DCMI type Service attribute. Add this attribute to properties that should be exported as dctype:Service information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A system that provides one or more functions.
            
            Examples include a photocopying service, a banking service, an authentication service, interlibrary loans, a Z39.50 or Web server.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeServiceAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Service attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A system that provides one or more functions.
            
            Examples include a photocopying service, a banking service, an authentication service, interlibrary loans, a Z39.50 or Web server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeServiceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypePhysicalObjectAttribute">
            <summary>
            Dublin Core DCMI type PhysicalObject attribute. Add this attribute to properties that should be exported as dctype:PhysicalObject information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An inanimate, three-dimensional object or substance.
            
            Note that digital representations of, or surrogates for, these objects should use Image, Text or one of the other types.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypePhysicalObjectAttribute.#ctor">
            <summary>
            Dublin Core DCMI type PhysicalObject attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An inanimate, three-dimensional object or substance.
            
            Note that digital representations of, or surrogates for, these objects should use Image, Text or one of the other types.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypePhysicalObjectAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeMovingImageAttribute">
            <summary>
            Dublin Core DCMI type MovingImage attribute. Add this attribute to properties that should be exported as dctype:MovingImage information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A series of visual representations imparting an impression of motion when shown in succession.
            
            Examples include animations, movies, television programs, videos, zoetropes, or visual output from a simulation. Instances of the type 
            Moving Image must also be describable as instances of the broader type Image.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeMovingImageAttribute.#ctor">
            <summary>
            Dublin Core DCMI type MovingImage attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A series of visual representations imparting an impression of motion when shown in succession.
            
            Examples include animations, movies, television programs, videos, zoetropes, or visual output from a simulation. Instances of the type 
            Moving Image must also be describable as instances of the broader type Image.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeMovingImageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeInteractiveResourceAttribute">
            <summary>
            Dublin Core DCMI type InteractiveResource attribute. Add this attribute to properties that should be exported as dctype:InteractiveResource information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource requiring interaction from the user to be understood, executed, or experienced.
            
            Examples include forms on Web pages, applets, multimedia learning objects, chat services, or virtual reality environments.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeInteractiveResourceAttribute.#ctor">
            <summary>
            Dublin Core DCMI type InteractiveResource attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource requiring interaction from the user to be understood, executed, or experienced.
            
            Examples include forms on Web pages, applets, multimedia learning objects, chat services, or virtual reality environments.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeInteractiveResourceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeImageAttribute">
            <summary>
            Dublin Core DCMI type Image attribute. Add this attribute to properties that should be exported as dctype:Image information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A visual representation other than text.
            
            Examples include images and photographs of physical objects, paintings, prints, drawings, other images and graphics, animations 
            and moving pictures, film, diagrams, maps, musical notation. Note that Image may include both electronic and physical representations.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeImageAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Image attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A visual representation other than text.
            
            Examples include images and photographs of physical objects, paintings, prints, drawings, other images and graphics, animations 
            and moving pictures, film, diagrams, maps, musical notation. Note that Image may include both electronic and physical representations.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeImageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeEventAttribute">
            <summary>
            Dublin Core DCMI type Event attribute. Add this attribute to properties that should be exported as dctype:Event information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A non-persistent, time-based occurrence.
            
            Metadata for an event provides descriptive information that is the basis for discovery of the purpose, location, duration, 
            and responsible agents associated with an event. Examples include an exhibition, webcast, conference, workshop, open day, 
            performance, battle, trial, wedding, tea party, conflagration.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeEventAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Event attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A non-persistent, time-based occurrence.
            
            Metadata for an event provides descriptive information that is the basis for discovery of the purpose, location, duration, 
            and responsible agents associated with an event. Examples include an exhibition, webcast, conference, workshop, open day, 
            performance, battle, trial, wedding, tea party, conflagration.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeEventAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeDatasetAttribute">
            <summary>
            Dublin Core DCMI type Dataset attribute. Add this attribute to properties that should be exported as dctype:Dataset information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Data encoded in a defined structure.
            
            Examples include lists, tables, and databases. A dataset may be useful for direct machine processing.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeDatasetAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Dataset attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Data encoded in a defined structure.
            
            Examples include lists, tables, and databases. A dataset may be useful for direct machine processing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeDatasetAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeCollectionAttribute">
            <summary>
            Dublin Core DCMI type Collection attribute. Add this attribute to properties that should be exported as dctype:Collection information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An aggregation of resources.
            
            A collection is described as a group; its parts may also be separately described.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeCollectionAttribute.#ctor">
            <summary>
            Dublin Core DCMI type Collection attribute. Add this attribute to properties that should be exported as dctype:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An aggregation of resources.
            
            A collection is described as a group; its parts may also be separately described.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Dcmi.Types.DcmiTypeCollectionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsStandardAttribute">
            <summary>
            Dublin Core terms Standard attribute. Add this attribute to properties that should be exported as dcterms:Standard information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A basis for comparison; a reference point against which other things can be evaluated.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsClassAttribute">
            <summary>
            Abstract base class for all Dublin Core Terms class attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsClassAttribute.#ctor">
            <summary>
            Abstract base class for all Dublin Core Terms class attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsClassAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsClassAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsStandardAttribute.#ctor">
            <summary>
            Dublin Core terms Standard attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A basis for comparison; a reference point against which other things can be evaluated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsStandardAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsSizeOrDurationAttribute">
            <summary>
            Dublin Core terms SizeOrDuration attribute. Add this attribute to properties that should be exported as dcterms:SizeOrDuration information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A dimension or extent, or a time taken to play or execute.
            
            Examples include a number of pages, a specification of length, width, and breadth, or a period in hours, minutes, and seconds.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsSizeOrDurationAttribute.#ctor">
            <summary>
            Dublin Core terms SizeOrDuration attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A dimension or extent, or a time taken to play or execute.
            
            Examples include a number of pages, a specification of length, width, and breadth, or a period in hours, minutes, and seconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsSizeOrDurationAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsRightsStatementAttribute">
            <summary>
            Dublin Core terms RightsStatement attribute. Add this attribute to properties that should be exported as dcterms:RightsStatement information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something 
            with a resource, or a statement about access rights.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsRightsStatementAttribute.#ctor">
            <summary>
            Dublin Core terms RightsStatement attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something 
            with a resource, or a statement about access rights.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsRightsStatementAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsProvenanceStatementAttribute">
            <summary>
            Dublin Core terms ProvenanceStatement attribute. Add this attribute to properties that should be exported as dcterms:ProvenanceStatement information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsProvenanceStatementAttribute.#ctor">
            <summary>
            Dublin Core terms ProvenanceStatement attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsProvenanceStatementAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPolicyAttribute">
            <summary>
            Dublin Core terms Policy attribute. Add this attribute to properties that should be exported as dcterms:Policy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPolicyAttribute.#ctor">
            <summary>
            Dublin Core terms Policy attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPolicyAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalResourceAttribute">
            <summary>
            Dublin Core terms PhysicalResource attribute. Add this attribute to properties that should be exported as dcterms:PhysicalResource information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A material thing.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalResourceAttribute.#ctor">
            <summary>
            Dublin Core terms PhysicalResource attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A material thing.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalResourceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalMediumAttribute">
            <summary>
            Dublin Core terms PhysicalMedium attribute. Add this attribute to properties that should be exported as dcterms:PhysicalMedium information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A physical material or carrier.
            
            Examples include paper, canvas, or DVD.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalMediumAttribute.#ctor">
            <summary>
            Dublin Core terms PhysicalMedium attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A physical material or carrier.
            
            Examples include paper, canvas, or DVD.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPhysicalMediumAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPeriodOfTimeAttribute">
            <summary>
            Dublin Core terms PeriodOfTime attribute. Add this attribute to properties that should be exported as dcterms:PeriodOfTime information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An interval of time that is named or defined by its start and end dates.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPeriodOfTimeAttribute.#ctor">
            <summary>
            Dublin Core terms PeriodOfTime attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An interval of time that is named or defined by its start and end dates.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsPeriodOfTimeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfInstructionAttribute">
            <summary>
            Dublin Core terms MethodOfInstruction attribute. Add this attribute to properties that should be exported as dcterms:MethodOfInstruction information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Method of Instruction
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfInstructionAttribute.#ctor">
            <summary>
            Dublin Core terms MethodOfInstruction attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Method of Instruction
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfInstructionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfAccrualAttribute">
            <summary>
            Dublin Core terms MethodOfAccrual attribute. Add this attribute to properties that should be exported as dcterms:MethodOfAccrual information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Method of Accrual
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfAccrualAttribute.#ctor">
            <summary>
            Dublin Core terms MethodOfAccrual attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Method of Accrual
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMethodOfAccrualAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeOrExtentAttribute">
            <summary>
            Dublin Core terms MediaTypeOrExtent attribute. Add this attribute to properties that should be exported as dcterms:MediaTypeOrExtent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Media Type or Extent
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeOrExtentAttribute.#ctor">
            <summary>
            Dublin Core terms MediaTypeOrExtent attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Media Type or Extent
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeOrExtentAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeAttribute">
            <summary>
            Dublin Core terms MediaType attribute. Add this attribute to properties that should be exported as dcterms:MediaType information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A file format or physical medium.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeAttribute.#ctor">
            <summary>
            Dublin Core terms MediaType attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A file format or physical medium.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsMediaTypeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationPeriodOrJurisdictionAttribute">
            <summary>
            Dublin Core terms LocationPeriodOrJurisdiction attribute. Add this attribute to properties that should be exported as dcterms:LocationPeriodOrJurisdiction information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A location, period of time, or jurisdiction.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationPeriodOrJurisdictionAttribute.#ctor">
            <summary>
            Dublin Core terms LocationPeriodOrJurisdiction attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A location, period of time, or jurisdiction.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationPeriodOrJurisdictionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationAttribute">
            <summary>
            Dublin Core terms Location attribute. Add this attribute to properties that should be exported as dcterms:Location information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A spatial region or named place.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationAttribute.#ctor">
            <summary>
            Dublin Core terms Location attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A spatial region or named place.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLocationAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLinguisticSystemAttribute">
            <summary>
            Dublin Core terms LinguisticSystem attribute. Add this attribute to properties that should be exported as dcterms:LinguisticSystem information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Examples include written, spoken, sign, and computer languages.
            
            A system of signs, symbols, sounds, gestures, or rules used in communication.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLinguisticSystemAttribute.#ctor">
            <summary>
            Dublin Core terms LinguisticSystem attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Examples include written, spoken, sign, and computer languages.
            
            A system of signs, symbols, sounds, gestures, or rules used in communication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLinguisticSystemAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLicenseDocumentAttribute">
            <summary>
            Dublin Core terms LicenseDocument attribute. Add this attribute to properties that should be exported as dcterms:LicenseDocument information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A legal document giving official permission to do something with a Resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLicenseDocumentAttribute.#ctor">
            <summary>
            Dublin Core terms LicenseDocument attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A legal document giving official permission to do something with a Resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsLicenseDocumentAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsJurisdictionAttribute">
            <summary>
            Dublin Core terms Jurisdiction attribute. Add this attribute to properties that should be exported as dcterms:Jurisdiction information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The extent or range of judicial, law enforcement, or other authority.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsJurisdictionAttribute.#ctor">
            <summary>
            Dublin Core terms Jurisdiction attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The extent or range of judicial, law enforcement, or other authority.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsJurisdictionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFrequencyAttribute">
            <summary>
            Dublin Core terms Frequency attribute. Add this attribute to properties that should be exported as dcterms:Frequency information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A rate at which something recurs.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFrequencyAttribute.#ctor">
            <summary>
            Dublin Core terms Frequency attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A rate at which something recurs.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFrequencyAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFileFormatAttribute">
            <summary>
            Dublin Core terms FileFormat attribute. Add this attribute to properties that should be exported as dcterms:FileFormat information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A digital resource format.
            
            Examples include the formats defined by the list of Internet Media Types.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFileFormatAttribute.#ctor">
            <summary>
            Dublin Core terms FileFormat attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A digital resource format.
            
            Examples include the formats defined by the list of Internet Media Types.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsFileFormatAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsBibliographicResourceAttribute">
            <summary>
            Dublin Core terms BibliographicResource attribute. Add this attribute to properties that should be exported as dcterms:BibliographicResource information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A book, article, or other documentary resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsBibliographicResourceAttribute.#ctor">
            <summary>
            Dublin Core terms BibliographicResource attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A book, article, or other documentary resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsBibliographicResourceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentClassAttribute">
            <summary>
            Dublin Core terms AgentClass attribute. Add this attribute to properties that should be exported as dcterms:AgentClass information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A group of agents.
            
            Examples of Agent Class include groups seen as classes, such as students, women, charities, lecturers.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentClassAttribute.#ctor">
            <summary>
            Dublin Core terms AgentClass attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A group of agents.
            
            Examples of Agent Class include groups seen as classes, such as students, women, charities, lecturers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentClassAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentAttribute">
            <summary>
            Dublin Core terms Agent attribute. Add this attribute to properties that should be exported as dcterms:Agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource that acts or has the power to act.
            
            Examples of Agent include person, organization, and software agent.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentAttribute.#ctor">
            <summary>
            Dublin Core terms Agent attribute. Add this attribute to properties that should be exported as dcterms:agent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A resource that acts or has the power to act.
            
            Examples of Agent include person, organization, and software agent.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Classes.DcTermsAgentAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Rdf.RdfDocument">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Rdf">Rdf/XML Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Rdf">Rdf/XML Document</param>
            <param name="BaseUri">Base URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(System.String)">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Rdf">Rdf/XML Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(System.String,System.String)">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Rdf">Rdf/XML Document</param>
            <param name="BaseUri">Base URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(Clayster.Library.Internet.Semantic.Turtle.TriplesWriter)">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Triples">Triples defining the RDF/XML document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Uri}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[])">
            <summary>
            Contains an RDF/XML Document
            
            http://www.w3.org/TR/REC-rdf-syntax/
            </summary>
            <param name="Prefixes">Defined prefixes.</param>
            <param name="Triples">Triples defining the RDF/XML document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GenerateRdfXml(System.Xml.XmlWriter,System.Collections.Generic.KeyValuePair{System.String,System.Uri}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[])">
            <summary>
            Generates an RDF/XML docuemtn from a set of semantic triples.
            </summary>
            <param name="w">RDF/XML Output</param>
            <param name="Prefixes">Defined prefixes</param>
            <param name="Triples">Semantic Triples</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GenerateRdfXml(System.Xml.XmlWriter,System.Collections.Generic.KeyValuePair{System.String,System.Uri}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[],System.Boolean)">
            <summary>
            Generates an RDF/XML docuemtn from a set of semantic triples.
            </summary>
            <param name="w">RDF/XML Output</param>
            <param name="Prefixes">Defined prefixes</param>
            <param name="Triples">Semantic Triples</param>
            <param name="Fragment">If the generated XML is only a fragment of a larger XML Document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.Xml">
            <summary>
            RDF/XML Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Rdf.RdfDocument.OuterXml">
            <summary>
            RDF/XML Document as an XML String.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcRightsAttribute">
            <summary>
            Dublin Core Rights attribute. Add this attribute to properties that should be exported as dc:rights information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            Information about rights held in and over the resource.
            
            Typically, Rights will contain a rights management statement for the resource, or reference a service providing such 
            information. Rights information often encompasses Intellectual Property Rights (IPR), Copyright, and various Property 
            Rights. If the Rights element is absent, no assumptions may be made about any rights held in or over the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute">
            <summary>
            Abstract base class for all Dublin Core property attributes.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute.NamespaceDc">
            <summary>
            Dublin Core element namespace (v1.1).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute.PrefixDc">
            <summary>
            Dublin Core element prefix (v1.1).
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute.#ctor">
            <summary>
            Abstract base class for all Dublin Core property attributes.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcPropertyAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcRightsAttribute.#ctor">
            <summary>
            Dublin Core Rights attribute. Add this attribute to properties that should be exported as dc:rights information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            Information about rights held in and over the resource.
            
            Typically, Rights will contain a rights management statement for the resource, or reference a service providing such 
            information. Rights information often encompasses Intellectual Property Rights (IPR), Copyright, and various Property 
            Rights. If the Rights element is absent, no assumptions may be made about any rights held in or over the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcRightsAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcCoverageAttribute">
            <summary>
            Dublin Core Coverage attribute. Add this attribute to properties that should be exported as dc:coverage information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The extent or scope of the content of the resource.
            
            Typically, Coverage will include spatial location (a place name or geographic coordinates), temporal period (a period label, date, 
            or date range) or jurisdiction (such as a named administrative entity). Recommended best practice is to select a value from a 
            controlled vocabulary (for example, the Thesaurus of Geographic Names [TGN]) and to use, where appropriate, named places or time 
            periods in preference to numeric identifiers such as sets of coordinates or date ranges.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcCoverageAttribute.#ctor">
            <summary>
            Dublin Core Coverage attribute. Add this attribute to properties that should be exported as dc:coverage information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The extent or scope of the content of the resource.
            
            Typically, Coverage will include spatial location (a place name or geographic coordinates), temporal period (a period label, date, 
            or date range) or jurisdiction (such as a named administrative entity). Recommended best practice is to select a value from a 
            controlled vocabulary (for example, the Thesaurus of Geographic Names [TGN]) and to use, where appropriate, named places or time 
            periods in preference to numeric identifiers such as sets of coordinates or date ranges.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcCoverageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcRelationAttribute">
            <summary>
            Dublin Core Relation attribute. Add this attribute to properties that should be exported as dc:relation information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A reference to a related resource.
            
            Recommended best practice is to identify the referenced resource by means of a string or number conforming to a formal identification system.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcRelationAttribute.#ctor">
            <summary>
            Dublin Core Relation attribute. Add this attribute to properties that should be exported as dc:relation information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A reference to a related resource.
            
            Recommended best practice is to identify the referenced resource by means of a string or number conforming to a formal identification system.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcRelationAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcLanguageAttribute">
            <summary>
            Dublin Core Language attribute. Add this attribute to properties that should be exported as dc:language information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A language of the intellectual content of the resource.
            
            Recommended best practice is to use RFC 3066 [RFC3066] which, in conjunction with ISO639 [ISO639]), defines two- and three-letter 
            primary language tags with optional subtags. Examples include "en" or "eng" for English, "akk" for Akkadian", and "en-GB" for 
            English used in the United Kingdom.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcLanguageAttribute.#ctor">
            <summary>
            Dublin Core Language attribute. Add this attribute to properties that should be exported as dc:language information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A language of the intellectual content of the resource.
            
            Recommended best practice is to use RFC 3066 [RFC3066] which, in conjunction with ISO639 [ISO639]), defines two- and three-letter 
            primary language tags with optional subtags. Examples include "en" or "eng" for English, "akk" for Akkadian", and "en-GB" for 
            English used in the United Kingdom.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcLanguageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcSourceAttribute">
            <summary>
            Dublin Core Source attribute. Add this attribute to properties that should be exported as dc:source information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A Reference to a resource from which the present resource is derived.
            
            The present resource may be derived from the Source resource in whole or in part. Recommended best practice is to identify the referenced 
            resource by means of a string or number conforming to a formal identification system.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcSourceAttribute.#ctor">
            <summary>
            Dublin Core Source attribute. Add this attribute to properties that should be exported as dc:source information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A Reference to a resource from which the present resource is derived.
            
            The present resource may be derived from the Source resource in whole or in part. Recommended best practice is to identify the referenced 
            resource by means of a string or number conforming to a formal identification system.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcSourceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcIdentifierAttribute">
            <summary>
            Dublin Core Identifier attribute. Add this attribute to properties that should be exported as dc:identifier information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An unambiguous reference to the resource within a given context.
            
            Recommended best practice is to identify the resource by means of a string or number conforming to a formal identification system. 
            Formal identification systems include but are not limited to the Uniform Resource Identifier (URI) (including the Uniform Resource 
            Locator (URL)), the Digital Object Identifier (DOI) and the International Standard Book Number (ISBN).
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcIdentifierAttribute.#ctor">
            <summary>
            Dublin Core Identifier attribute. Add this attribute to properties that should be exported as dc:identifier information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An unambiguous reference to the resource within a given context.
            
            Recommended best practice is to identify the resource by means of a string or number conforming to a formal identification system. 
            Formal identification systems include but are not limited to the Uniform Resource Identifier (URI) (including the Uniform Resource 
            Locator (URL)), the Digital Object Identifier (DOI) and the International Standard Book Number (ISBN).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcIdentifierAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcFormatAttribute">
            <summary>
            Dublin Core Format attribute. Add this attribute to properties that should be exported as dc:format information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The physical or digital manifestation of the resource.
            
            Typically, Format may include the media-type or dimensions of the resource. Format may be used to identify the software, hardware, or other 
            equipment needed to display or operate the resource. Examples of dimensions include size and duration. Recommended best practice is to select 
            a value from a controlled vocabulary (for example, the list of Internet Media Types [MIME] defining computer media formats).
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcFormatAttribute.#ctor">
            <summary>
            Dublin Core Format attribute. Add this attribute to properties that should be exported as dc:format information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The physical or digital manifestation of the resource.
            
            Typically, Format may include the media-type or dimensions of the resource. Format may be used to identify the software, hardware, or other 
            equipment needed to display or operate the resource. Examples of dimensions include size and duration. Recommended best practice is to select 
            a value from a controlled vocabulary (for example, the list of Internet Media Types [MIME] defining computer media formats).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcFormatAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcTypeAttribute">
            <summary>
            Dublin Core Type attribute. Add this attribute to properties that should be exported as dc:type information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The nature or genre of the content of the resource.
            
            Type includes terms describing general categories, functions, genres, or aggregation levels for content. Recommended best practice is to 
            select a value from a controlled vocabulary (for example, the DCMI Type Vocabulary [DCT1]). To describe the physical or digital manifestation 
            of the resource, use the FORMAT element.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcTypeAttribute.#ctor">
            <summary>
            Dublin Core Type attribute. Add this attribute to properties that should be exported as dc:type information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            The nature or genre of the content of the resource.
            
            Type includes terms describing general categories, functions, genres, or aggregation levels for content. Recommended best practice is to 
            select a value from a controlled vocabulary (for example, the DCMI Type Vocabulary [DCT1]). To describe the physical or digital manifestation 
            of the resource, use the FORMAT element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcTypeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcDateAttribute">
            <summary>
            Dublin Core Date attribute. Add this attribute to properties that should be exported as dc:date information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A date of an event in the lifecycle of the resource.
            
            Typically, Date will be associated with the creation or availability of the resource. Recommended best practice for encoding the date 
            value is defined in a profile of ISO 8601 [W3CDTF] and includes (among others) dates of the form YYYY-MM-DD.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcDateAttribute.#ctor">
            <summary>
            Dublin Core Date attribute. Add this attribute to properties that should be exported as dc:date information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A date of an event in the lifecycle of the resource.
            
            Typically, Date will be associated with the creation or availability of the resource. Recommended best practice for encoding the date 
            value is defined in a profile of ISO 8601 [W3CDTF] and includes (among others) dates of the form YYYY-MM-DD.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcDateAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcContributorAttribute">
            <summary>
            Dublin Core Contributor attribute. Add this attribute to properties that should be exported as dc:contributor information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity responsible for making contributions to the content of the resource.
            
            Examples of Contributor include a person, an organization, or a service. Typically, the name of a Contributor should be used to indicate the entity.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcContributorAttribute.#ctor">
            <summary>
            Dublin Core Contributor attribute. Add this attribute to properties that should be exported as dc:contributor information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity responsible for making contributions to the content of the resource.
            
            Examples of Contributor include a person, an organization, or a service. Typically, the name of a Contributor should be used to indicate the entity.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcContributorAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcPublisherAttribute">
            <summary>
            Dublin Core Publisher attribute. Add this attribute to properties that should be exported as dc:publisher information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity responsible for making the resource available
            
            Examples of Publisher include a person, an organization, or a service. Typically, the name of a Publisher should be used to indicate the entity.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcPublisherAttribute.#ctor">
            <summary>
            Dublin Core Publisher attribute. Add this attribute to properties that should be exported as dc:publisher information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity responsible for making the resource available
            
            Examples of Publisher include a person, an organization, or a service. Typically, the name of a Publisher should be used to indicate the entity.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcPublisherAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcDescriptionAttribute">
            <summary>
            Dublin Core Description attribute. Add this attribute to properties that should be exported as dc:description information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An account of the content of the resource.
            
            Examples of Description include, but is not limited to: an abstract, table of contents, reference to a graphical representation 
            of content or a free-text account of the content.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcDescriptionAttribute.#ctor">
            <summary>
            Dublin Core Description attribute. Add this attribute to properties that should be exported as dc:description information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An account of the content of the resource.
            
            Examples of Description include, but is not limited to: an abstract, table of contents, reference to a graphical representation 
            of content or a free-text account of the content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcDescriptionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcSubjectAttribute">
            <summary>
            Dublin Core Subject attribute. Add this attribute to properties that should be exported as dc:subject information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A topic of the content of the resource.
            
            Typically, Subject will be expressed as keywords, key phrases or classification codes that describe a topic of the resource. 
            Recommended best practice is to select a value from a controlled vocabulary or formal classification scheme.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcSubjectAttribute.#ctor">
            <summary>
            Dublin Core Subject attribute. Add this attribute to properties that should be exported as dc:subject information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A topic of the content of the resource.
            
            Typically, Subject will be expressed as keywords, key phrases or classification codes that describe a topic of the resource. 
            Recommended best practice is to select a value from a controlled vocabulary or formal classification scheme.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcSubjectAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcCreatorAttribute">
            <summary>
            Dublin Core Creator attribute. Add this attribute to properties that should be exported as dc:creator information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity primarily responsible for making the content of the resource.
            
            Examples of Creator include a person, an organization, or a service. Typically, the name of a Creator should be used to indicate the entity.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcCreatorAttribute.#ctor">
            <summary>
            Dublin Core Creator attribute. Add this attribute to properties that should be exported as dc:creator information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            An entity primarily responsible for making the content of the resource.
            
            Examples of Creator include a person, an organization, or a service. Typically, the name of a Creator should be used to indicate the entity.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcCreatorAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.DcTitleAttribute">
            <summary>
            Dublin Core Title attribute. Add this attribute to properties that should be exported as dc:title information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A name given to the resource.
            
            Typically, Title will be a name by which the resource is formally known.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.DcTitleAttribute.#ctor">
            <summary>
            Dublin Core Title attribute. Add this attribute to properties that should be exported as dc:title information.
            
            See: http://dublincore.org/documents/2003/06/02/dces/
            
            A name given to the resource.
            
            Typically, Title will be a name by which the resource is formally known.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.DcTitleAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsValidAttribute">
            <summary>
            Dublin Core terms Valid attribute. Add this attribute to properties that should be exported as dcterms:valid information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date (often a range) of validity of a resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute">
            <summary>
            Abstract base class for all Dublin Core Terms property attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute.NamespaceDcTerms">
            <summary>
            Dublin Core terms namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute.PrefixDcTerms">
            <summary>
            Dublin Core terms prefix.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute.#ctor">
            <summary>
            Abstract base class for all Dublin Core Terms property attributes.
            
            See: http://dublincore.org/documents/dcmi-terms/
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute.XmlNamespace">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlNamespace"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPropertyAttribute.XmlPrefix">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlPrefix"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsValidAttribute.#ctor">
            <summary>
            Dublin Core terms Valid attribute. Add this attribute to properties that should be exported as dcterms:valid information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date (often a range) of validity of a resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsValidAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSpatialAttribute">
            <summary>
            Dublin Core terms Spatial attribute. Add this attribute to properties that should be exported as dcterms:spatial information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Spatial characteristics of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSpatialAttribute.#ctor">
            <summary>
            Dublin Core terms Spatial attribute. Add this attribute to properties that should be exported as dcterms:spatial information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Spatial characteristics of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSpatialAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSubjectAttribute">
            <summary>
            Dublin Core terms Subject attribute. Add this attribute to properties that should be exported as dcterms:subject information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The topic of the resource.
            
            Typically, the subject will be represented using keywords, key phrases, or classification codes. Recommended best practice is to 
            use a controlled vocabulary. To describe the spatial or temporal topic of the resource, use the Coverage element.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSubjectAttribute.#ctor">
            <summary>
            Dublin Core terms Subject attribute. Add this attribute to properties that should be exported as dcterms:subject information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The topic of the resource.
            
            Typically, the subject will be represented using keywords, key phrases, or classification codes. Recommended best practice is to 
            use a controlled vocabulary. To describe the spatial or temporal topic of the resource, use the Coverage element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSubjectAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTableOfContentsAttribute">
            <summary>
            Dublin Core terms TableOfContents attribute. Add this attribute to properties that should be exported as dcterms:tableOfContents information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A list of subunits of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTableOfContentsAttribute.#ctor">
            <summary>
            Dublin Core terms TableOfContents attribute. Add this attribute to properties that should be exported as dcterms:tableOfContents information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A list of subunits of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTableOfContentsAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTemporalAttribute">
            <summary>
            Dublin Core terms Temporal attribute. Add this attribute to properties that should be exported as dcterms:temporal information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Temporal characteristics of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTemporalAttribute.#ctor">
            <summary>
            Dublin Core terms Temporal attribute. Add this attribute to properties that should be exported as dcterms:temporal information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Temporal characteristics of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTemporalAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTypeAttribute">
            <summary>
            Dublin Core terms Type attribute. Add this attribute to properties that should be exported as dcterms:type information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The nature or genre of the resource.
            
            Recommended best practice is to use a controlled vocabulary such as the DCMI Type Vocabulary [DCMITYPE]. To describe the file 
            format, physical medium, or dimensions of the resource, use the Format element.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTypeAttribute.#ctor">
            <summary>
            Dublin Core terms Type attribute. Add this attribute to properties that should be exported as dcterms:type information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The nature or genre of the resource.
            
            Recommended best practice is to use a controlled vocabulary such as the DCMI Type Vocabulary [DCMITYPE]. To describe the file 
            format, physical medium, or dimensions of the resource, use the Format element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTypeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTitleAttribute">
            <summary>
            Dublin Core terms Title attribute. Add this attribute to properties that should be exported as dcterms:title information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A name given to the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTitleAttribute.#ctor">
            <summary>
            Dublin Core terms Title attribute. Add this attribute to properties that should be exported as dcterms:title information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A name given to the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsTitleAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSourceAttribute">
            <summary>
            Dublin Core terms Source attribute. Add this attribute to properties that should be exported as dcterms:source information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource from which the described resource is derived.
            
            The described resource may be derived from the related resource in whole or in part. Recommended best practice is to identify the 
            related resource by means of a string conforming to a formal identification system.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSourceAttribute.#ctor">
            <summary>
            Dublin Core terms Source attribute. Add this attribute to properties that should be exported as dcterms:source information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource from which the described resource is derived.
            
            The described resource may be derived from the related resource in whole or in part. Recommended best practice is to identify the 
            related resource by means of a string conforming to a formal identification system.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsSourceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsHolderAttribute">
            <summary>
            Dublin Core terms RightsHolder attribute. Add this attribute to properties that should be exported as dcterms:rightsHolder information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A person or organization owning or managing rights over the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsHolderAttribute.#ctor">
            <summary>
            Dublin Core terms RightsHolder attribute. Add this attribute to properties that should be exported as dcterms:rightsHolder information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A person or organization owning or managing rights over the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsHolderAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsAttribute">
            <summary>
            Dublin Core terms Rights attribute. Add this attribute to properties that should be exported as dcterms:rights information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Information about rights held in and over the resource.
            
            Typically, rights information includes a statement about various property rights associated with the resource, including intellectual property rights.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsAttribute.#ctor">
            <summary>
            Dublin Core terms Rights attribute. Add this attribute to properties that should be exported as dcterms:rights information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Information about rights held in and over the resource.
            
            Typically, rights information includes a statement about various property rights associated with the resource, including intellectual property rights.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRightsAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRequiresAttribute">
            <summary>
            Dublin Core terms Requires attribute. Add this attribute to properties that should be exported as dcterms:requires information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is required by the described resource to support its function, delivery, or coherence.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRequiresAttribute.#ctor">
            <summary>
            Dublin Core terms Requires attribute. Add this attribute to properties that should be exported as dcterms:requires information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is required by the described resource to support its function, delivery, or coherence.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRequiresAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReplacesAttribute">
            <summary>
            Dublin Core terms Replaces attribute. Add this attribute to properties that should be exported as dcterms:replaces information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is supplanted, displaced, or superseded by the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReplacesAttribute.#ctor">
            <summary>
            Dublin Core terms Replaces attribute. Add this attribute to properties that should be exported as dcterms:replaces information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is supplanted, displaced, or superseded by the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReplacesAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRelationAttribute">
            <summary>
            Dublin Core terms Relation attribute. Add this attribute to properties that should be exported as dcterms:relation information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource.
            
            Recommended best practice is to identify the related resource by means of a string conforming to a formal identification system. 
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRelationAttribute.#ctor">
            <summary>
            Dublin Core terms Relation attribute. Add this attribute to properties that should be exported as dcterms:relation information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource.
            
            Recommended best practice is to identify the related resource by means of a string conforming to a formal identification system. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsRelationAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReferencesAttribute">
            <summary>
            Dublin Core terms References attribute. Add this attribute to properties that should be exported as dcterms:references information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is referenced, cited, or otherwise pointed to by the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReferencesAttribute.#ctor">
            <summary>
            Dublin Core terms References attribute. Add this attribute to properties that should be exported as dcterms:references information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is referenced, cited, or otherwise pointed to by the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsReferencesAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPublisherAttribute">
            <summary>
            Dublin Core terms Publisher attribute. Add this attribute to properties that should be exported as dcterms:publisher information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity responsible for making the resource available.
            
            Examples of a Publisher include a person, an organization, or a service.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPublisherAttribute.#ctor">
            <summary>
            Dublin Core terms Publisher attribute. Add this attribute to properties that should be exported as dcterms:publisher information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity responsible for making the resource available.
            
            Examples of a Publisher include a person, an organization, or a service.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsPublisherAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsProvenanceAttribute">
            <summary>
            Dublin Core terms Provenance attribute. Add this attribute to properties that should be exported as dcterms:provenance information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, 
            integrity, and interpretation.
            
            The statement may include a description of any changes successive custodians made to the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsProvenanceAttribute.#ctor">
            <summary>
            Dublin Core terms Provenance attribute. Add this attribute to properties that should be exported as dcterms:provenance information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, 
            integrity, and interpretation.
            
            The statement may include a description of any changes successive custodians made to the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsProvenanceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsModifiedAttribute">
            <summary>
            Dublin Core terms Modified attribute. Add this attribute to properties that should be exported as dcterms:modified information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date on which the resource was changed.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsModifiedAttribute.#ctor">
            <summary>
            Dublin Core terms Modified attribute. Add this attribute to properties that should be exported as dcterms:modified information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date on which the resource was changed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsModifiedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediumAttribute">
            <summary>
            Dublin Core terms Medium attribute. Add this attribute to properties that should be exported as dcterms:medium information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The material or physical carrier of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediumAttribute.#ctor">
            <summary>
            Dublin Core terms Medium attribute. Add this attribute to properties that should be exported as dcterms:medium information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The material or physical carrier of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediumAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediatorAttribute">
            <summary>
            Dublin Core terms Mediator attribute. Add this attribute to properties that should be exported as dcterms:mediator information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity that mediates access to the resource and for whom the resource is intended or useful.
            
            In an educational context, a mediator might be a parent, teacher, teaching assistant, or care-giver.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediatorAttribute.#ctor">
            <summary>
            Dublin Core terms Mediator attribute. Add this attribute to properties that should be exported as dcterms:mediator information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity that mediates access to the resource and for whom the resource is intended or useful.
            
            In an educational context, a mediator might be a parent, teacher, teaching assistant, or care-giver.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsMediatorAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLicenseAttribute">
            <summary>
            Dublin Core terms License attribute. Add this attribute to properties that should be exported as dcterms:license information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A legal document giving official permission to do something with the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLicenseAttribute.#ctor">
            <summary>
            Dublin Core terms License attribute. Add this attribute to properties that should be exported as dcterms:license information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A legal document giving official permission to do something with the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLicenseAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLanguageAttribute">
            <summary>
            Dublin Core terms Language attribute. Add this attribute to properties that should be exported as dcterms:language information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A language of the resource.
            
            Recommended best practice is to use a controlled vocabulary such as RFC 4646 [RFC4646].
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLanguageAttribute.#ctor">
            <summary>
            Dublin Core terms Language attribute. Add this attribute to properties that should be exported as dcterms:language information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A language of the resource.
            
            Recommended best practice is to use a controlled vocabulary such as RFC 4646 [RFC4646].
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsLanguageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsVersionOfAttribute">
            <summary>
            Dublin Core terms IsVersionOf attribute. Add this attribute to properties that should be exported as dcterms:isVersionOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource of which the described resource is a version, edition, or adaptation.
            
            Changes in version imply substantive changes in content rather than differences in format.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsVersionOfAttribute.#ctor">
            <summary>
            Dublin Core terms IsVersionOf attribute. Add this attribute to properties that should be exported as dcterms:isVersionOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource of which the described resource is a version, edition, or adaptation.
            
            Changes in version imply substantive changes in content rather than differences in format.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsVersionOfAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIssuedAttribute">
            <summary>
            Dublin Core terms Issued attribute. Add this attribute to properties that should be exported as dcterms:issued information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of formal issuance (e.g., publication) of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIssuedAttribute.#ctor">
            <summary>
            Dublin Core terms Issued attribute. Add this attribute to properties that should be exported as dcterms:issued information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of formal issuance (e.g., publication) of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIssuedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsRequiredByAttribute">
            <summary>
            Dublin Core terms IsRequiredBy attribute. Add this attribute to properties that should be exported as dcterms:isRequiredBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that requires the described resource to support its function, delivery, or coherence.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsRequiredByAttribute.#ctor">
            <summary>
            Dublin Core terms IsRequiredBy attribute. Add this attribute to properties that should be exported as dcterms:isRequiredBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that requires the described resource to support its function, delivery, or coherence.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsRequiredByAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReplacedByAttribute">
            <summary>
            Dublin Core terms IsReplacedBy attribute. Add this attribute to properties that should be exported as dcterms:isReplacedBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that supplants, displaces, or supersedes the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReplacedByAttribute.#ctor">
            <summary>
            Dublin Core terms IsReplacedBy attribute. Add this attribute to properties that should be exported as dcterms:isReplacedBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that supplants, displaces, or supersedes the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReplacedByAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReferencedByAttribute">
            <summary>
            Dublin Core terms IsReferencedBy attribute. Add this attribute to properties that should be exported as dcterms:isReferencedBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that references, cites, or otherwise points to the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReferencedByAttribute.#ctor">
            <summary>
            Dublin Core terms IsReferencedBy attribute. Add this attribute to properties that should be exported as dcterms:isReferencedBy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that references, cites, or otherwise points to the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsReferencedByAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsPartOfAttribute">
            <summary>
            Dublin Core terms IsPartOf attribute. Add this attribute to properties that should be exported as dcterms:isPartOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource in which the described resource is physically or logically included.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsPartOfAttribute.#ctor">
            <summary>
            Dublin Core terms IsPartOf attribute. Add this attribute to properties that should be exported as dcterms:isPartOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource in which the described resource is physically or logically included.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsPartOfAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsFormatOfAttribute">
            <summary>
            Dublin Core terms IsFormatOf attribute. Add this attribute to properties that should be exported as dcterms:isFormatOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is substantially the same as the described resource, but in another format.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsFormatOfAttribute.#ctor">
            <summary>
            Dublin Core terms IsFormatOf attribute. Add this attribute to properties that should be exported as dcterms:isFormatOf information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is substantially the same as the described resource, but in another format.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIsFormatOfAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsInstructionalMethodAttribute">
            <summary>
            Dublin Core terms InstructionalMethod attribute. Add this attribute to properties that should be exported as dcterms:instructionalMethod information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
            
            Instructional Method will typically include ways of presenting instructional materials or conducting instructional 
            activities, patterns of learner-to-learner and learner-to-instructor interactions, and mechanisms by which group 
            and individual levels of learning are measured. Instructional methods include all aspects of the instruction and 
            learning processes from planning and implementation through evaluation and feedback.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsInstructionalMethodAttribute.#ctor">
            <summary>
            Dublin Core terms InstructionalMethod attribute. Add this attribute to properties that should be exported as dcterms:instructionalMethod information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
            
            Instructional Method will typically include ways of presenting instructional materials or conducting instructional 
            activities, patterns of learner-to-learner and learner-to-instructor interactions, and mechanisms by which group 
            and individual levels of learning are measured. Instructional methods include all aspects of the instruction and 
            learning processes from planning and implementation through evaluation and feedback.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsInstructionalMethodAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIdentifierAttribute">
            <summary>
            Dublin Core terms Identifier attribute. Add this attribute to properties that should be exported as dcterms:identifier information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An unambiguous reference to the resource within a given context.
            
            Recommended best practice is to identify the resource by means of a string conforming to a formal identification system. 
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIdentifierAttribute.#ctor">
            <summary>
            Dublin Core terms Identifier attribute. Add this attribute to properties that should be exported as dcterms:identifier information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An unambiguous reference to the resource within a given context.
            
            Recommended best practice is to identify the resource by means of a string conforming to a formal identification system. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsIdentifierAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasVersionAttribute">
            <summary>
            Dublin Core terms HasVersion attribute. Add this attribute to properties that should be exported as dcterms:hasVersion information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is a version, edition, or adaptation of the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasVersionAttribute.#ctor">
            <summary>
            Dublin Core terms HasVersion attribute. Add this attribute to properties that should be exported as dcterms:hasVersion information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is a version, edition, or adaptation of the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasVersionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasPartAttribute">
            <summary>
            Dublin Core terms HasPart attribute. Add this attribute to properties that should be exported as dcterms:hasPart information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is included either physically or logically in the described resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasPartAttribute.#ctor">
            <summary>
            Dublin Core terms HasPart attribute. Add this attribute to properties that should be exported as dcterms:hasPart information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is included either physically or logically in the described resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasPartAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasFormatAttribute">
            <summary>
            Dublin Core terms HasFormat attribute. Add this attribute to properties that should be exported as dcterms:hasFormat information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is substantially the same as the pre-existing described resource, but in another format.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasFormatAttribute.#ctor">
            <summary>
            Dublin Core terms HasFormat attribute. Add this attribute to properties that should be exported as dcterms:hasFormat information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A related resource that is substantially the same as the pre-existing described resource, but in another format.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsHasFormatAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsFormatAttribute">
            <summary>
            Dublin Core terms Format attribute. Add this attribute to properties that should be exported as dcterms:format information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The file format, physical medium, or dimensions of the resource.
            
            Examples of dimensions include size and duration. Recommended best practice is to use a controlled vocabulary such as the list of Internet Media Types [MIME].
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsFormatAttribute.#ctor">
            <summary>
            Dublin Core terms Format attribute. Add this attribute to properties that should be exported as dcterms:format information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The file format, physical medium, or dimensions of the resource.
            
            Examples of dimensions include size and duration. Recommended best practice is to use a controlled vocabulary such as the list of Internet Media Types [MIME].
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsFormatAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsExtentAttribute">
            <summary>
            Dublin Core terms Extent attribute. Add this attribute to properties that should be exported as dcterms:extent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The size or duration of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsExtentAttribute.#ctor">
            <summary>
            Dublin Core terms Extent attribute. Add this attribute to properties that should be exported as dcterms:extent information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The size or duration of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsExtentAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsEducationLevelAttribute">
            <summary>
            Dublin Core terms EducationLevel attribute. Add this attribute to properties that should be exported as dcterms:educationLevel information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsEducationLevelAttribute.#ctor">
            <summary>
            Dublin Core terms EducationLevel attribute. Add this attribute to properties that should be exported as dcterms:educationLevel information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsEducationLevelAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDescriptionAttribute">
            <summary>
            Dublin Core terms Description attribute. Add this attribute to properties that should be exported as dcterms:description information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An account of the resource.
            
            Description may include but is not limited to: an abstract, a table of contents, a graphical representation, or a free-text account of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDescriptionAttribute.#ctor">
            <summary>
            Dublin Core terms Description attribute. Add this attribute to properties that should be exported as dcterms:description information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An account of the resource.
            
            Description may include but is not limited to: an abstract, a table of contents, a graphical representation, or a free-text account of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDescriptionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateSubmittedAttribute">
            <summary>
            Dublin Core terms DateSubmitted attribute. Add this attribute to properties that should be exported as dcterms:dateSubmitted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of submission of the resource.
            
            Examples of resources to which a Date Submitted may be relevant are a thesis (submitted to a university department) or an article (submitted to a journal).
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateSubmittedAttribute.#ctor">
            <summary>
            Dublin Core terms DateSubmitted attribute. Add this attribute to properties that should be exported as dcterms:dateSubmitted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of submission of the resource.
            
            Examples of resources to which a Date Submitted may be relevant are a thesis (submitted to a university department) or an article (submitted to a journal).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateSubmittedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateCopyrightedAttribute">
            <summary>
            Dublin Core terms DateCopyrighted attribute. Add this attribute to properties that should be exported as dcterms:dateCopyrighted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of copyright.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateCopyrightedAttribute.#ctor">
            <summary>
            Dublin Core terms DateCopyrighted attribute. Add this attribute to properties that should be exported as dcterms:dateCopyrighted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of copyright.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateCopyrightedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAcceptedAttribute">
            <summary>
            Dublin Core terms DateAccepted attribute. Add this attribute to properties that should be exported as dcterms:dateAccepted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of acceptance of the resource.
            
            Examples of resources to which a Date Accepted may be relevant are a thesis (accepted by a university department) or an article (accepted by a journal).
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAcceptedAttribute.#ctor">
            <summary>
            Dublin Core terms DateAccepted attribute. Add this attribute to properties that should be exported as dcterms:dateAccepted information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of acceptance of the resource.
            
            Examples of resources to which a Date Accepted may be relevant are a thesis (accepted by a university department) or an article (accepted by a journal).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAcceptedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAttribute">
            <summary>
            Dublin Core terms Date attribute. Add this attribute to properties that should be exported as dcterms:date information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A point or period of time associated with an event in the lifecycle of the resource.
            
            Date may be used to express temporal information at any level of granularity. Recommended best practice is to use an encoding scheme, 
            such as the W3CDTF profile of ISO 8601 [W3CDTF].
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAttribute.#ctor">
            <summary>
            Dublin Core terms Date attribute. Add this attribute to properties that should be exported as dcterms:date information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A point or period of time associated with an event in the lifecycle of the resource.
            
            Date may be used to express temporal information at any level of granularity. Recommended best practice is to use an encoding scheme, 
            such as the W3CDTF profile of ISO 8601 [W3CDTF].
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsDateAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatorAttribute">
            <summary>
            Dublin Core terms Creator attribute. Add this attribute to properties that should be exported as dcterms:creator information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity primarily responsible for making the resource.
            
            Examples of a Creator include a person, an organization, or a service.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatorAttribute.#ctor">
            <summary>
            Dublin Core terms Creator attribute. Add this attribute to properties that should be exported as dcterms:creator information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity primarily responsible for making the resource.
            
            Examples of a Creator include a person, an organization, or a service.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatorAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatedAttribute">
            <summary>
            Dublin Core terms Created attribute. Add this attribute to properties that should be exported as dcterms:created information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of creation of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatedAttribute.#ctor">
            <summary>
            Dublin Core terms Created attribute. Add this attribute to properties that should be exported as dcterms:created information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date of creation of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCreatedAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCoverageAttribute">
            <summary>
            Dublin Core terms Coverage attribute. Add this attribute to properties that should be exported as dcterms:coverage information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
            
            Spatial topic and spatial applicability may be a named place or a location specified by its geographic coordinates. Temporal topic may be a named 
            period, date, or date range. A jurisdiction may be a named administrative entity or a geographic place to which the resource applies. Recommended 
            best practice is to use a controlled vocabulary such as the Thesaurus of Geographic Names [TGN]. Where appropriate, named places or time periods 
            can be used in preference to numeric identifiers such as sets of coordinates or date ranges.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCoverageAttribute.#ctor">
            <summary>
            Dublin Core terms Coverage attribute. Add this attribute to properties that should be exported as dcterms:coverage information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
            
            Spatial topic and spatial applicability may be a named place or a location specified by its geographic coordinates. Temporal topic may be a named 
            period, date, or date range. A jurisdiction may be a named administrative entity or a geographic place to which the resource applies. Recommended 
            best practice is to use a controlled vocabulary such as the Thesaurus of Geographic Names [TGN]. Where appropriate, named places or time periods 
            can be used in preference to numeric identifiers such as sets of coordinates or date ranges.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsCoverageAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsContributorAttribute">
            <summary>
            Dublin Core terms Contributor attribute. Add this attribute to properties that should be exported as dcterms:contributor information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity responsible for making contributions to the resource.
            
            Examples of a Contributor include a person, an organization, or a service.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsContributorAttribute.#ctor">
            <summary>
            Dublin Core terms Contributor attribute. Add this attribute to properties that should be exported as dcterms:contributor information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An entity responsible for making contributions to the resource.
            
            Examples of a Contributor include a person, an organization, or a service.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsContributorAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsConformsToAttribute">
            <summary>
            Dublin Core terms ConformsTo attribute. Add this attribute to properties that should be exported as dcterms:conformsTo information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An established standard to which the described resource conforms.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsConformsToAttribute.#ctor">
            <summary>
            Dublin Core terms ConformsTo attribute. Add this attribute to properties that should be exported as dcterms:conformsTo information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An established standard to which the described resource conforms.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsConformsToAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsBibliographicCriterionAttribute">
            <summary>
            Dublin Core terms BibliographicCriterion attribute. Add this attribute to properties that should be exported as dcterms:bibliographicCriterion information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A bibliographic reference for the resource.
            
            Recommended practice is to include sufficient bibliographic detail to identify the resource as unambiguously as possible.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsBibliographicCriterionAttribute.#ctor">
            <summary>
            Dublin Core terms BibliographicCriterion attribute. Add this attribute to properties that should be exported as dcterms:bibliographicCriterion information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A bibliographic reference for the resource.
            
            Recommended practice is to include sufficient bibliographic detail to identify the resource as unambiguously as possible.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsBibliographicCriterionAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAvailableAttribute">
            <summary>
            Dublin Core terms Available attribute. Add this attribute to properties that should be exported as dcterms:available information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date (often a range) that the resource became or will become available.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAvailableAttribute.#ctor">
            <summary>
            Dublin Core terms Available attribute. Add this attribute to properties that should be exported as dcterms:available information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Date (often a range) that the resource became or will become available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAvailableAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAudienceAttribute">
            <summary>
            Dublin Core terms Audience attribute. Add this attribute to properties that should be exported as dcterms:audience information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A class of entity for whom the resource is intended or useful.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAudienceAttribute.#ctor">
            <summary>
            Dublin Core terms Audience attribute. Add this attribute to properties that should be exported as dcterms:audience information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A class of entity for whom the resource is intended or useful.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAudienceAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAlternativeAttribute">
            <summary>
            Dublin Core terms Alternative attribute. Add this attribute to properties that should be exported as dcterms:alternative information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An alternative name for the resource.
            
            The distinction between titles and alternative titles is application-specific.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAlternativeAttribute.#ctor">
            <summary>
            Dublin Core terms Alternative attribute. Add this attribute to properties that should be exported as dcterms:alternative information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            An alternative name for the resource.
            
            The distinction between titles and alternative titles is application-specific.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAlternativeAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPolicyAttribute">
            <summary>
            Dublin Core terms AccrualPolicy attribute. Add this attribute to properties that should be exported as dcterms:accrualPolicy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The policy governing the addition of items to a collection.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPolicyAttribute.#ctor">
            <summary>
            Dublin Core terms AccrualPolicy attribute. Add this attribute to properties that should be exported as dcterms:accrualPolicy information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The policy governing the addition of items to a collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPolicyAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPeriodicityAttribute">
            <summary>
            Dublin Core terms AccrualPeriodicity attribute. Add this attribute to properties that should be exported as dcterms:accrualPeriodicity information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The frequency with which items are added to a collection.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPeriodicityAttribute.#ctor">
            <summary>
            Dublin Core terms AccrualPeriodicity attribute. Add this attribute to properties that should be exported as dcterms:accrualPeriodicity information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The frequency with which items are added to a collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualPeriodicityAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualMethodAttribute">
            <summary>
            Dublin Core terms AccrualMethod attribute. Add this attribute to properties that should be exported as dcterms:accrualMethod information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The method by which items are added to a collection.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualMethodAttribute.#ctor">
            <summary>
            Dublin Core terms AccrualMethod attribute. Add this attribute to properties that should be exported as dcterms:accrualMethod information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            The method by which items are added to a collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccrualMethodAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccessRightsAttribute">
            <summary>
            Dublin Core terms AccessRights attribute. Add this attribute to properties that should be exported as dcterms:accessRights information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Information about who can access the resource or an indication of its security status.
            
            Access Rights may include information regarding access or restrictions based on privacy, security, or other policies.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccessRightsAttribute.#ctor">
            <summary>
            Dublin Core terms AccessRights attribute. Add this attribute to properties that should be exported as dcterms:accessRights information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            Information about who can access the resource or an indication of its security status.
            
            Access Rights may include information regarding access or restrictions based on privacy, security, or other policies.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAccessRightsAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAbstractAttribute">
            <summary>
            Dublin Core terms Abstract attribute. Add this attribute to properties that should be exported as dcterms:abstract information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A summary of the resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAbstractAttribute.#ctor">
            <summary>
            Dublin Core terms Abstract attribute. Add this attribute to properties that should be exported as dcterms:abstract information.
            
            See: http://dublincore.org/documents/dcmi-terms/
            
            A summary of the resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DublinCore.Terms.Properties.DcTermsAbstractAttribute.XmlElement">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.SemanticPropertyAttribute.XmlElement"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.SemanticContext">
            <summary>
            Contains information about the current semantic context.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.SemanticContext.#ctor(Clayster.Library.Language.Language,Clayster.Library.Internet.HTTP.HttpCredentials,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            Contains information about the current semantic context.
            </summary>
            <param name="UserLanguage">User Language.</param>
            <param name="Credentials">Credentials to use for federated requests.</param>
            <param name="Request">Original Server Request</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.SemanticContext.#ctor(Clayster.Library.Language.Language,Clayster.Library.Internet.HTTP.HttpCredentials,Clayster.Library.Internet.HTTP.HttpServerRequest,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Contains information about the current semantic context.
            </summary>
            <param name="UserLanguage">User Language.</param>
            <param name="Credentials">Credentials to use for federated requests.</param>
            <param name="Request">Original Server Request</param>
            <param name="Query">Current query.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.UserLanguage">
            <summary>
            User Language.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Credentials">
            <summary>
            Credentials to use for federated requests.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Request">
            <summary>
            Original Server Request.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Query">
            <summary>
            SPARQL query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Tag">
            <summary>
            Property that can be used to attach information to the current query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Tag2">
            <summary>
            Property that can be used to attach information to the current query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Tag3">
            <summary>
            Property that can be used to attach information to the current query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Tag4">
            <summary>
            Property that can be used to attach information to the current query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.SemanticContext.Tag5">
            <summary>
            Property that can be used to attach information to the current query.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp">
            <summary>
            Represents a HTTP-based Semantic Data Set.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.#ctor(System.String)">
            <summary>
            Represents a HTTP-based Semantic Data Set.
            </summary>
            <param name="Url">URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.#ctor(System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet)">
            <summary>
            Represents a HTTP-based Semantic Data Set.
            </summary>
            <param name="Url">URL</param>
            <param name="SemanticDataSet">Semantic Data Set representing <paramref name="Url"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.OptimizedLoadDataSet(System.String,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Loads a Semantic Data Set from a URL. If the URL points to a local server hosted by the process,
            the fetching of the data set is made directly from the resource, and not via the HTTP protocol.
            </summary>
            <param name="Url">URL</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic Data Set.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.RegisterLocalServers(System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Internet.HTTP.HttpServer})">
            <summary>
            Registers local HTTP servers.
            </summary>
            <param name="LocalServers">Local Servers</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.RegisterLocalServer(System.String,Clayster.Library.Internet.HTTP.HttpServer)">
            <summary>
            Registers a local HTTP server.
            </summary>
            <param name="UrlStartingWith">URL's starting with this string</param>
            <param name="LocalServer">...are handled by this local server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.LockLocalServers(System.Object)">
            <summary>
            Lock registered local servers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.TryGetLocalService(System.String,Clayster.Library.Internet.HTTP.IHttpServerResource@,System.String@)">
            <summary>
            Tries to get access to a locally hosted HTTP Resource.
            </summary>
            <param name="Url">URL of resource</param>
            <param name="Service">Service found for the <paramref name="Url"/>.</param>
            <param name="SubItem">SubItem left of the <paramref name="Url"/>.</param>
            <returns>If the URL matched a local http server or not.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">If the URL matches a local HTTP Server, but a resource
            matching the URL was not found.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.DataSets.DataSetHttp.SemanticDataSet">
            <summary>
            Semantic Data Set, if available and loaded.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion">
            <summary>
            Creates a new Data Set from the union of a set of data sets.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.#ctor(Clayster.Library.Internet.Semantic.ISemanticDataSet[])">
            <summary>
            Creates a new Data Set from the union of a set of data sets.
            </summary>
            <param name="DataSets">Data Sets</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetMatches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.DataSets.DataSetUnion.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Addition">
            <summary>
            x + y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Addition.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x + y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Addition.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Subtraction">
            <summary>
            x - y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Subtraction.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x - y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Subtraction.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Multiplication">
            <summary>
            x * y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Multiplication.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x * y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Multiplication.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Division">
            <summary>
            x / y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Division.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x / y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Arithmetic.Division.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThanOrEqualTo">
            <summary>
            x &gt;= y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThanOrEqualTo.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x &gt;= y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThanOrEqualTo.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThanOrEqualTo.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThanOrEqualTo">
            <summary>
            x &lt;= y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThanOrEqualTo.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x &lt;= y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThanOrEqualTo.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThanOrEqualTo.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThan">
            <summary>
            x &gt; y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThan.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x gt; y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThan.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.GreaterThan.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThan">
            <summary>
            x &lt; y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThan.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x &lt; y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThan.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.LesserThan.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Inequality">
            <summary>
            x != y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Inequality.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x != y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Inequality.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Inequality.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Equality">
            <summary>
            x = y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Equality.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x = y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Equality.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Comparisons.Equality.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.And">
            <summary>
            x &amp;&amp; y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.And.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x &amp;&amp; y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.And.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.And.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Or">
            <summary>
            x || y
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Or.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            x || y
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Or.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.BinaryOperators.Logic.Or.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint">
            <summary>
            Defines a constraint
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Defines a constraint
            </summary>
            <param name="Root">Root node</param>
            <param name="Query">SPARQL query.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Matches(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            Checks if the <paramref name="Variables"/> matches the constraint.
            </summary>
            <param name="Variables">Variable values.</param>
            <param name="EvaluationContext">Evaluation context.</param>
            <returns>If constraint applies to <paramref name="Variables"/> or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Matches(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[],System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            Checks if a solution matches an array of constraints.
            </summary>
            <param name="Constraints">Constraints</param>
            <param name="Variables">Variables (or solution).</param>
            <param name="EvaluationContext">Evaluation context.</param>
            <returns>If solution/variables applies to the <paramref name="Constraints"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Join(System.Collections.Generic.IEnumerable{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint})">
            <summary>
            Joins a set of constraints using the AND operator.
            </summary>
            <param name="Constraints">Constraints</param>
            <returns>Joined constraint. If no constraints to join, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Join(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Joins a set of constraints using the AND operator.
            </summary>
            <param name="Constraints">Constraints</param>
            <returns>Joined constraint. If no constraints to join, null is returned.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Root">
            <summary>
            Root expression node defining constraint.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint.Query">
            <summary>
            SPARQL query.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constant">
            <summary>
            Contains a constant value.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constant.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm)">
            <summary>
            Contains a constant value.
            </summary>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constant.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constant.Value">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Bound">
            <summary>
            BOUND(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Bound.#ctor(System.String)">
            <summary>
            BOUND(x)
            </summary>
            <param name="VariableName">Variable Name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Bound.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.Bound.VariableName">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy">
            <summary>
            Proxy to a script function.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy.ClaysterScriptExtensionsNamespace">
            <summary>
            Clayster Script Extensions
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[],Clayster.Library.Math.ExpressionNodes.Functions.Function)">
            <summary>
            Proxy to a script function.
            </summary>
            <param name="Arguments">Arguments</param>
            <param name="Function">External function.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ScriptFunctionProxy.Function">
            <summary>
            External function
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression">
            <summary>
            REGEX(x,y)
            REGEX(x,y,z)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            REGEX(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            REGEX(x,y,z)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
            <param name="Argument3">Argument 3</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.IsMatch(System.String,System.String,System.String)">
            <summary>
            Checks if <paramref name="Value"/> matches <paramref name="Pattern"/>.
            </summary>
            <param name="Value">Text to check</param>
            <param name="Pattern">Regular expression pattern.</param>
            <param name="Flags">Flags (possibly empty). Can be a string containig i, s, m, x, l and u characters.</param>
            <returns>If the string matches.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.Pattern">
            <summary>
            Pattern
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.RegularExpression.Flags">
            <summary>
            Flags
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsLiteral">
            <summary>
            isLITERAL(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsLiteral.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            isLITERAL(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsLiteral.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsBlank">
            <summary>
            isBLANK(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsBlank.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            isBLANK(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsBlank.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsUri">
            <summary>
            isURI(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsUri.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            isURI(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsUri.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsIri">
            <summary>
            isIRI(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsIri.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            isIRI(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.IsIri.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.SameTerm">
            <summary>
            sameTerm(x,y)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.SameTerm.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            sameTerm(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.FunctionalForms.SameTerm.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.DataType">
            <summary>
            DATATYPE(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.DataType.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            DATATYPE(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.DataType.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LangMatches">
            <summary>
            LANGMATCHES(x,y)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LangMatches.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            LANGMATCHES(x,y)
            </summary>
            <param name="Argument1">Argument 1</param>
            <param name="Argument2">Argument 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Strings.LangMatches.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Lang">
            <summary>
            LANG(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Lang.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            LANG(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Lang.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Str">
            <summary>
            STR(x)
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Str.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            STR(x)
            </summary>
            <param name="Argument">Argument</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.Terms.Str.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction">
            <summary>
            External function
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.NamespaceXPathFunctions">
            <summary>
            XPATH Function Namespace: http://www.w3.org/2005/xpath-functions
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction,System.String)">
            <summary>
            External function
            </summary>
            <param name="Arguments">Arguments</param>
            <param name="Function">External function.</param>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.Function">
            <summary>
            External function
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.ExternalFunction.Uri">
            <summary>
            URI of function.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedByte">
            <summary>
            Converts a value to an xsd:unsignedByte
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedByte.#ctor">
            <summary>
            Converts a value to an xsd:unsignedByte
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedByte.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedByte.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedShort">
            <summary>
            Converts a value to an xsd:unsignedShort
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedShort.#ctor">
            <summary>
            Converts a value to an xsd:unsignedShort
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedShort.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedShort.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedInt">
            <summary>
            Converts a value to an xsd:unsignedInt
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedInt.#ctor">
            <summary>
            Converts a value to an xsd:unsignedInt
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedInt.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedInt.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedLong">
            <summary>
            Converts a value to an xsd:unsignedLong
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedLong.#ctor">
            <summary>
            Converts a value to an xsd:unsignedLong
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedLong.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdUnsignedLong.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdByte">
            <summary>
            Converts a value to an xsd:byte
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdByte.#ctor">
            <summary>
            Converts a value to an xsd:byte
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdByte.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdByte.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdShort">
            <summary>
            Converts a value to an xsd:short
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdShort.#ctor">
            <summary>
            Converts a value to an xsd:short
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdShort.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdShort.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInt">
            <summary>
            Converts a value to an xsd:int
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInt.#ctor">
            <summary>
            Converts a value to an xsd:int
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInt.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInt.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdLong">
            <summary>
            Converts a value to an xsd:long
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdLong.#ctor">
            <summary>
            Converts a value to an xsd:long
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdLong.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdLong.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNegativeInteger">
            <summary>
            Converts a value to an xsd:negativeInteger
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNegativeInteger.#ctor">
            <summary>
            Converts a value to an xsd:negativeInteger
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNegativeInteger.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNegativeInteger.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdPositiveInteger">
            <summary>
            Converts a value to an xsd:positiveInteger
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdPositiveInteger.#ctor">
            <summary>
            Converts a value to an xsd:positiveInteger
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdPositiveInteger.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdPositiveInteger.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonNegativeInteger">
            <summary>
            Converts a value to an xsd:nonNegativeNonNegativeInteger
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonNegativeInteger.#ctor">
            <summary>
            Converts a value to an xsd:nonNegativeNonNegativeInteger
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonNegativeInteger.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonNegativeInteger.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonPositiveInteger">
            <summary>
            Converts a value to an xsd:nonPositiveNonPositiveInteger
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonPositiveInteger.#ctor">
            <summary>
            Converts a value to an xsd:nonPositiveNonPositiveInteger
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonPositiveInteger.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdNonPositiveInteger.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDateTime">
            <summary>
            Converts a value to an xsd:dateTime
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDateTime.#ctor">
            <summary>
            Converts a value to an xsd:dateTime
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDateTime.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDateTime.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdBoolean">
            <summary>
            Converts a value to an xsd:boolean
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdBoolean.#ctor">
            <summary>
            Converts a value to an xsd:boolean
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdBoolean.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdBoolean.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdString">
            <summary>
            Converts a value to an xsd:string
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdString.#ctor">
            <summary>
            Converts a value to an xsd:string
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdString.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdString.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDouble">
            <summary>
            Converts a value to an xsd:double
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDouble.#ctor">
            <summary>
            Converts a value to an xsd:double
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDouble.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDouble.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdFloat">
            <summary>
            Converts a value to an xsd:float
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdFloat.#ctor">
            <summary>
            Converts a value to an xsd:float
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdFloat.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdFloat.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDecimal">
            <summary>
            Converts a value to an xsd:decimal
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDecimal.#ctor">
            <summary>
            Converts a value to an xsd:decimal
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDecimal.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdDecimal.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInteger">
            <summary>
            Converts a value to an xsd:integer
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInteger.#ctor">
            <summary>
            Converts a value to an xsd:integer
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInteger.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.TypeConversions.XsdInteger.Uri">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Functions.IExternalFunction.Uri"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Not">
            <summary>
            !x
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.UnaryOperator">
            <summary>
            Base class for all unary operators.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.UnaryOperator.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            Base class for all unary operators.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.UnaryOperator.Operand">
            <summary>
            Operand
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Not.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            !x
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Not.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Not.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Negation">
            <summary>
            -x
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Negation.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode)">
            <summary>
            -x
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Negation.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.UnaryOperators.Negation.Normalize">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Normalize"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference">
            <summary>
            Contains a variable reference.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference.#ctor(System.String,Clayster.Library.Internet.Semantic.Sparql.IVariableScope)">
            <summary>
            Contains a variable reference.
            </summary>
            <param name="VariableName">Variable name</param>
            <param name="Scope">Variable scope.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode.Evaluate(System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.EvaluationContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference.TryGetValue(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object@)">
            <summary>
            Tries to get the parsed value of a variable.
            </summary>
            <param name="VariableName">Variable Name</param>
            <param name="Variables">Variable</param>
            <param name="Value">Value, if found, null otherwise.</param>
            <returns>If the variable value was found.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference.VariableName">
            <summary>
            Variable Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.VariableReference.Scope">
            <summary>
            Variable scope.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode">
            <summary>
            Blank Node
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm">
            <summary>
            Abstract base class for all Graph Terms
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.#ctor">
            <summary>
            Abstract base class for all Graph Terms
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            Converts the term to a string.
            </summary>
            <param name="OutputMode">Output mode.</param>
            <returns>String</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.GetHashCode">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)">
            <summary>
            Outputs the contents of the term to HTML
            </summary>
            <param name="Output">HTML Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as a subject to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as a predicate to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes the term as an object to a Turtle writer.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value">
            <summary>
            Value of the term.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.#ctor(System.String)">
            <summary>
            Blank Node
            </summary>
            <param name="Label">Label</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.ToHtml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.BlankNode.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.ISemanticTypedOperations">
            <summary>
            Pluggable interface for resources that want to perform operations on typed literal values.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.ISemanticTypedOperations.Compare(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped,System.String,System.Object)">
            <summary>
            Compares two typed literals.
            </summary>
            <param name="Source">Source value</param>
            <param name="SubItem">Sub Item left when identifying the comparer from the http server resource.</param>
            <param name="Destination">Destination value.</param>
            <returns>Source compared to Destination.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.ISemanticTypedOperations.Convert(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped,System.String)">
            <summary>
            Converts a typed value to one compatible with the current comparer.
            </summary>
            <param name="ValueToConvert">Value to convert</param>
            <param name="SubItem">Sub Item left when identifying the comparer from the http server resource.</param>
            <returns>Converted parsed value, if possible, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.ISemanticTypedOperations.Parse(System.String,System.String)">
            <summary>
            Parses a literal string.
            </summary>
            <param name="Literal">Literal string.</param>
            <param name="SubItem">Sub Item left when identifying the comparer from the http server resource.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase">
            <summary>
            Base class for all RDF Literals
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.literalString">
            <summary>
            Literal string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.#ctor(System.String)">
            <summary>
            Base class for all RDF Literals
            </summary>
            <param name="Literal">Literal value</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.Literal">
            <summary>
            Literal Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped">
            <summary>
            RDF Literal with data type.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdInteger">
            <summary>
            xsd:integer
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdUnsignedInteger">
            <summary>
            xsd:unsignedInteger
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdLong">
            <summary>
            xsd:long
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdUnsignedLong">
            <summary>
            xsd:unsignedLong
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDouble">
            <summary>
            xsd:double
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDecimal">
            <summary>
            xsd:decimal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdFloat">
            <summary>
            xsd:float
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdBoolean">
            <summary>
            xsd:boolean
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdString">
            <summary>
            xsd:string
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdUnsignedByte">
            <summary>
            xsd:unsignedByte
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDate">
            <summary>
            xsd:date
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDateTime">
            <summary>
            xsd:dateTime
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdByte">
            <summary>
            xsd:byte
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdShort">
            <summary>
            xsd:short
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdUnsignedShort">
            <summary>
            xsd:unsignedShort
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDuration">
            <summary>
            xsd:duration
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.xsdDayTimeDuration">
            <summary>
            xsd:dayTimeDuration
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.String,System.Uri)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Literal value</param>
            <param name="Type">Data Type URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Int32)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Integer literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Double)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Double valued literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Decimal)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Decimal valued literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Boolean)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Boolean literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.String)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">string valued literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.DateTime)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">DateTime valued literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.DateTimeOffset)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">DateTimeOffset valued literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Int64)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Int16)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Byte)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(Clayster.Library.Internet.Duration)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">literal.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Object,System.String,System.Uri)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Boolean literal.</param>
            <param name="LiteralString">Litaral string</param>
            <param name="Type">Type</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.#ctor(System.Object,System.String,System.Uri,System.Boolean)">
            <summary>
            RDF Literal with data type.
            </summary>
            <param name="Literal">Boolean literal.</param>
            <param name="LiteralString">Litaral string</param>
            <param name="Type">Type</param>
            <param name="Simple">If the parsed value is a simple value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ToHtml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.GetSemanticOperations(System.Uri,System.String@)">
            <summary>
            Gets the semantic comparer corresponding to a given type.
            </summary>
            <param name="Type">Type</param>
            <param name="SubItem">Sub Item left when identifying the comparer from the http server resource.</param>
            <returns>Semantic comparer, if available, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.AddRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.AddLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IAddition.AddLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.SubtractRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.SubtractLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ISubtraction.SubtractLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.MultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.MultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.MultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ElementMultiplyRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ElementMultiplyLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IMultiplication.ElementMultiplyLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.DivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.DivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ElementDivideRight(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.DivideRight(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ElementDivideLeft(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IDivision.ElementDivideLeft(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Negate">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.INegation.Negate"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Invert">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.IInversion.Invert"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Type">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ParsedValue">
            <summary>
            Parse Value. <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Value"/> only return parsed values for simple types. For more complex types,
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Value"/> return a reference to itself. <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.ParsedValue"/> can be used from script,
            for example, to access the parsed value directly.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.Literal">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralBase.Literal"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.IsAdditionCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IAddition.IsAdditionCommutative"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralTyped.IsMultiplicationCommutative">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.IMultiplication.IsMultiplicationCommutative"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage">
            <summary>
            RDF Literal with language specification.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.rdfLangString">
            <summary>
            rdf:langString
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.#ctor(System.String,System.String)">
            <summary>
            RDF Literal with language specification.
            </summary>
            <param name="Literal">Literal value</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.ToHtml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteralLanguage.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral">
            <summary>
            RDF Literal
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.#ctor(System.String)">
            <summary>
            RDF Literal
            </summary>
            <param name="Literal">Literal value</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.ToHtml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.RdfLiteral.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode">
            <summary>
            Different string output modes
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode.Full">
            <summary>
            Full output
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode.Simple">
            <summary>
            If simplified output is desired. If so, typed values
            of the known types xsd:string, xsd:integer, xsd:decimal &amp; xsd:double will be simplified.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode.HumanReadable">
            <summary>
            Human readable output
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri">
            <summary>
            IRI
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.#ctor(System.Uri)">
            <summary>
            IRI
            </summary>
            <param name="Uri">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.CompareTo(System.Object)">
            <summary>
            <see cref="M:System.IComparable.CompareTo(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.ToHtml(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.ToHtml(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.Uri">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.UriString">
            <summary>
            URI String
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.Iri.Value">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm.Value"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate">
            <summary>
            Is A (or "a") predicate
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term">
            <summary>
            Term
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.GraphTerm)">
            <summary>
            Term
            </summary>
            <param name="Term">Graph Term</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromIri(System.String)">
            <summary>
            Creates an IRI Term
            </summary>
            <param name="Iri">IRI</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromIri(System.Uri)">
            <summary>
            Creates an IRI Term
            </summary>
            <param name="Iri">IRI</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteral(System.String)">
            <summary>
            Creates a literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralLanguage(System.String,System.String)">
            <summary>
            Creates a localized literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <param name="Language">Language</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Boolean)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Decimal)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Double)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Int32)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.String)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.DateTime)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Int64)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Int16)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Byte)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.String,System.Uri)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <param name="Type">Type</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.String,System.String)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <param name="Type">Type</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Object,System.String,System.Uri)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <param name="LiteralString">String representation of literal value.</param>
            <param name="Type">Type</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.FromLiteralTyped(System.Object,System.String,System.String)">
            <summary>
            Creates a typed literal Term
            </summary>
            <param name="Literal">Literal value</param>
            <param name="LiteralString">String representation of literal value.</param>
            <param name="Type">Type</param>
            <returns>Term</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.GraphTerm">
            <summary>
            Term
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.IsBlankNode">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsBlankNode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Term.IsVariable">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsVariable"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate.IsAUriString">
            <summary>
            URI of the 'a' predicate
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate.IsAUri">
            <summary>
            URI of the 'a' predicate
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate.#ctor">
            <summary>
            Is A (or "a") predicate
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.IsAPredicate.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem">
            <summary>
            Variable
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.#ctor(System.String)">
            <summary>
            Variable
            </summary>
            <param name="Variable">Variable name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ToString(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.GraphTerms.OutputMode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsSubject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsPredicate(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.WriteAsObject(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.VariableName">
            <summary>
            Variable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.IsBlankNode">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsBlankNode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.VariableItem.IsVariable">
            <summary>
            <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item.IsVariable"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern">
            <summary>
            Simple Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Simple Graph Pattern
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.WritePattern(Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter)">
            <summary>
            Writes a subject, predicate, object triple to the Turtle Document.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.Predicate">
            <summary>
            Predicate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsSubjectVariable">
            <summary>
            If the Subject is a Variable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsSubjectBlankNode">
            <summary>
            If the Subject is a Blank Node
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsObjectVariable">
            <summary>
            If the Object is a Variable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsObjectBlankNode">
            <summary>
            If the Object is a Blank Node
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsPredicateVariable">
            <summary>
            If the Predicate is a Variable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern.IsPredicatePath">
            <summary>
            If the Predicate is a Property Path.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern">
            <summary>
            Union Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Union Graph Pattern
            </summary>
            <param name="FirstPattern">First graph pattern</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.UnionGraphPattern.Patterns">
            <summary>
            Graph Patterns
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern">
            <summary>
            Named (using an URI) Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.#ctor(System.Uri,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Named (using an URI) Graph Pattern
            </summary>
            <param name="Uri">URI of named graph.</param>
            <param name="GraphPattern">Embedded graph pattern</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.Uri">
            <summary>
            URI of named graph.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphUriGraphPattern.GraphPattern">
            <summary>
            Embedded graph pattern.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern">
            <summary>
            Named (using a variable) Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.#ctor(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Named (using a variable) Graph Pattern
            </summary>
            <param name="VariableName">Variable Name containing URL of the graph to query.</param>
            <param name="GraphPattern">Embedded graph pattern</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.VariableName">
            <summary>
            Variable Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphVariableGraphPattern.GraphPattern">
            <summary>
            Embedded graph pattern.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern">
            <summary>
            Optional Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
             Graph Pattern
            </summary>
            <param name="GraphPattern">Group Graph Pattern, that is optional.</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.OptionalGraphPattern.GraphPattern">
            <summary>
            Embedded graph pattern.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern">
            <summary>
            Group Graph Pattern
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern[],Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Group Graph Pattern
            </summary>
            <param name="Patterns">Graph Patterns</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[],Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            Group Graph Pattern
            </summary>
            <param name="Patterns">Graph Patterns</param>
            <param name="Constraints">Constraints</param>
            <param name="Query">Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.GetMatches(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.Dictionary{System.String,System.Object},Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GraphPattern.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.Patterns">
            <summary>
            Graph Patterns
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern.Constraints">
            <summary>
            Optional Constraints. May be null if no constraints are available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Ask">
            <summary>
            ASK query
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType">
            <summary>
            Abstract base class for all SPARQL Query Types
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.#ctor(Clayster.Library.Internet.Semantic.Sparql.SparqlQuery,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Abstract base class for all SPARQL Query Types
            </summary>
            <param name="Query">Query owning the object.</param>
            <param name="Where">Where Clause</param>
            <param name="GroupClause">Optional group clause, null if none.</param>
            <param name="HavingClause">Optional having clause, null if none.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)">
            <summary>
            Evaluates the query.
            </summary>
            <param name="DefaultDataset">Default dataset.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="Bindings">Bindings if available, null otherwise.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            Checks if a variable name is defined as an object value.
            </summary>
            <param name="VariableName">Name of variable</param>
            <param name="Subject">If a subject is given for the variable definition.</param>
            <param name="Predicate">If a predicate is given for the variable definition.</param>
            <returns>If the variable name is defined as an object value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Group(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.LinkedList{System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}},Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Groups matches based on group conditions defined in the query.
            </summary>
            <param name="Matches">Pattern matches</param>
            <param name="ExpressionVariables">Expressions defining variables outside the pattern matching context. May be null.</param>
            <param name="Dataset">Current dataset.</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Pattern matches grouped together as defined by <see cref="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.GroupClause"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.IsVariableInScope(System.String)">
            <summary>
            Checks if a variable is in scope.
            </summary>
            <param name="VariableName">Variable name.</param>
            <returns>If the variable is in scope.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Query">
            <summary>
            SPARQL Query
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Where">
            <summary>
            Where clause
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.GroupClause">
            <summary>
            Group clause if available, null if none.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.HavingClause">
            <summary>
            Having clause if available, null if none.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Ask.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,Clayster.Library.Internet.Semantic.Sparql.SparqlQuery,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            ASK query
            </summary>
            <param name="Where">Where clause.</param>
            <param name="Query">Query owning the object.</param>
            <param name="GroupClause">Optional group clause, null if none.</param>
            <param name="HavingClause">Optional having clause, null if none.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Ask.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct">
            <summary>
            CONSTRUCT query
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            CONSTRUCT query
            </summary>
            <param name="Template">Template</param>
            <param name="Where">Where clause.</param>
            <param name="GroupClause">Optional group clause, null if none.</param>
            <param name="HavingClause">Optional having clause, null if none.</param>
            <param name="SortOrder">Optional sort order.</param>
            <param name="Limit">Optional limit</param>
            <param name="Offset">Optional offset</param>
            <param name="Query">Query owning the object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.SortOrder">
            <summary>
            Sort order, if specified, or null if not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.Limit">
            <summary>
            Optional limitation on number of records to return.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Construct.Offset">
            <summary>
            Optional offset into response, i.e. index of first response record to return.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe">
            <summary>
            DESCRIBE query
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}},System.Collections.Generic.List{System.Uri},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            DESCRIBE query
            </summary>
            <param name="Variables">Variables to select. null = * (i.e. all)</param>
            <param name="Uris">URIs to describe</param>
            <param name="Where">Where clause.</param>
            <param name="GroupClause">Optional group clause, null if none.</param>
            <param name="HavingClause">Optional having clause, null if none.</param>
            <param name="SortOrder">Optional sort order.</param>
            <param name="Limit">Optional limit</param>
            <param name="Offset">Optional offset</param>
            <param name="Query">Query owning the object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.Variables">
            <summary>
            Variables to describe. May contain ["*"], if all available variables are to be selected.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.Uris">
            <summary>
            Uris to describe. May be null if all available uri's are to be selected.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.SortOrder">
            <summary>
            Sort order, if specified, or null if not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.Limit">
            <summary>
            Optional limitation on number of records to return.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Describe.Offset">
            <summary>
            Optional offset into response, i.e. index of first response record to return.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode">
            <summary>
            Defines a SELECT MODE
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode.Normal">
            <summary>
            Normal query
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode.Distinct">
            <summary>
            Only return Distinct records.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode.Reduced">
            <summary>
            Allowed to remove redundant records.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode.ExistanceOnly">
            <summary>
            If only existance is interesting. Used by the ASK command.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select">
            <summary>
            SELECT query
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SelectMode,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}},Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.GroupGraphPattern,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode}[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[],Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder,System.Nullable{System.Int32},System.Nullable{System.Int32},Clayster.Library.Internet.Semantic.Sparql.SparqlQuery)">
            <summary>
            SELECT query
            </summary>
            <param name="SelectMode">Select Mode</param>
            <param name="Variables">Variables to select. null = * (i.e. all)</param>
            <param name="Where">Where clause.</param>
            <param name="GroupClause">Optional group clause, null if none.</param>
            <param name="HavingClause">Optional having clause, null if none.</param>
            <param name="SortOrder">Optional sort order.</param>
            <param name="Limit">Optional limit</param>
            <param name="Offset">Optional offset</param>
            <param name="Query">Query owning the object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.QueryType.Evaluate(Clayster.Library.Internet.Semantic.ISemanticDataSet,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.Bindings)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.ListVariables(System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Lists available variables.
            </summary>
            <param name="Variables">List receiving available variables.</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.SelectMode">
            <summary>
            Selection mode, and how to treat redundant records.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.Variables">
            <summary>
            Variables to select. May contain ["*"], if all available variables are to be selected.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.SortOrder">
            <summary>
            Sort order, if specified, or null if not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.Limit">
            <summary>
            Optional limitation on number of records to return.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.Select.Offset">
            <summary>
            Optional offset into response, i.e. index of first response record to return.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrderDirection">
            <summary>
            Sort order direction
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrderDirection.Ascending">
            <summary>
            Ascending order
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrderDirection.Descending">
            <summary>
            Descending order
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder">
            <summary>
            Defines a sort order.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder.#ctor(System.Collections.Generic.KeyValuePair{Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.ExpressionNode,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrderDirection}[])">
            <summary>
            Defines a sort order.
            </summary>
            <param name="OrderBy">What to sort on.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder.Sort(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sorts a result set.
            </summary>
            <param name="Matches">Solutions found.</param>
            <param name="Offset">Starting offset to return.</param>
            <param name="Limit">Maximum number of records to return.</param>
            <returns>Sorted list of solutions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder.Slice(System.Collections.Generic.LinkedList{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Cuts a slice from a linked list of responses.
            </summary>
            <param name="Matches"></param>
            <param name="Offset"></param>
            <param name="Limit"></param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder.Compare(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Compares two solutions based on the sort order preferences defined in the query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.QueryNodes.QueryTypes.SortOrder.OrderBy">
            <summary>
            What to sort on.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql">
            <summary>
            Executes a SPARQL query to the local SPARQL endpoint.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql.#ctor(Clayster.Library.Math.Expression)">
            <summary>
            Executes a SPARQL query to the local SPARQL endpoint.
            </summary>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.EvaluateFunction(System.Object[],Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql.IsNumberOfParmetersCorrect(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.Function.IsNumberOfParmetersCorrect(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql.CreateInstance(Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionMultipleScalarParameters.CreateInstance(Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.ScriptExtensions.Sparql.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlClient">
            <summary>
            SPARQL Semantic Web Client
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlClient.#ctor(System.String)">
            <summary>
            SPARQL Semantic Web Client
            </summary>
            <param name="Endpoint">SPARQL Endpoint.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlClient.ExecuteQuery(System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            Executes a SPARQL query against a remote SPARQL endpoint.
            </summary>
            <param name="Sparql">SPARQL quert.</param>
            <param name="Credentials">Credentials.</param>
            <returns>Return value. May be of the following types, depending on the query, and the remote endpoint:
            
            * <see cref="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument"/>
            * <see cref="T:Clayster.Library.Internet.Semantic.Turtle.TripleCollection"/>
            * <see cref="T:Clayster.Library.Internet.Semantic.Rdf.RdfDocument"/>
            </returns>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlException">
            <summary>
            Base class for all SPARQL exceptions.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpException">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String,System.Int32)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Code">HTTP Status Code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Code">HTTP Status Code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(Clayster.Library.Internet.HTTP.HttpStatusCode,System.String)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Code">HTTP Status Code.</param>
            <param name="Item">HTTP Item.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpResponse)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Response">HTTP Response object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpResponse)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Code">HTTP Status Code.</param>
            <param name="Response">HTTP Response object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(Clayster.Library.Internet.HTTP.HttpStatusCode,Clayster.Library.Internet.HTTP.HttpResponse)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Code">HTTP Status Code.</param>
            <param name="Response">HTTP Response object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpResponse,System.String,System.String,System.Text.Encoding)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Response">HTTP Response object.</param>
            <param name="Content">Optional content page to display in the HTTP Error response.</param>
            <param name="ContentType">Content type of <paramref name="Content"/>.</param>
            <param name="ContentEncoding">Text encoding of <paramref name="Content"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpResponse,System.String,System.String,System.Text.Encoding)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Code">HTTP Status Code.</param>
            <param name="Response">HTTP Response object.</param>
            <param name="Content">Optional content page to display in the HTTP Error response.</param>
            <param name="ContentType">Content type of <paramref name="Content"/>.</param>
            <param name="ContentEncoding">Text encoding of <paramref name="Content"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.#ctor(Clayster.Library.Internet.HTTP.HttpStatusCode,Clayster.Library.Internet.HTTP.HttpResponse,System.String,System.String,System.Text.Encoding)">
            <summary>
            Base class of HTTP Exceptions.
            </summary>
            <param name="Code">HTTP Status Code.</param>
            <param name="Response">HTTP Response object.</param>
            <param name="Content">Optional content page to display in the HTTP Error response.</param>
            <param name="ContentType">Content type of <paramref name="Content"/>.</param>
            <param name="ContentEncoding">Text encoding of <paramref name="Content"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.StatusMessage(Clayster.Library.Internet.HTTP.HttpStatusCode,Clayster.Library.Internet.HTTP.HttpResponse)">
            <summary>
            Returns a string representation of an HTTP Error Code.
            </summary>
            <param name="Code">Error Code.</param>
            <param name="Response">Response</param>
            <returns>String representation of the error code.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpException.StatusMessage(Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Returns a string representation of an HTTP Error Code.
            </summary>
            <param name="Code">Error Code.</param>
            <returns>String representation of the error code.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.Code">
            <summary>
            HTTP Status Code.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.Response">
            <summary>
            HTTP Response object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.Location">
            <summary>
            Location field of the HTTP header. Used when redirecting clients to another URL.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.Content">
            <summary>
            Optional content to return. Default is null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.ContentType">
            <summary>
            Content type of <see cref="P:Clayster.Library.Internet.HTTP.HttpException.Content"/>. 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.ContentEncoding">
            <summary>
            Conetnt encoding of <see cref="P:Clayster.Library.Internet.HTTP.HttpException.Content"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpException.AuthentiationMethods">
            <summary>
            Any authentication methods used by the resource.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlException.#ctor(System.String)">
            <summary>
            Base class for all SPARQL exceptions.
            </summary>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlException.#ctor(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Base class for all SPARQL exceptions.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Content">Content to return in HTTP responses, if query result of an HTTP request.</param>
            <param name="ContentType">Content type of <paramref name="Content"/>.</param>
            <param name="ContentEncoding">Content encoding of <paramref name="Content"/>.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlSyntaxErrorException">
            <summary>
            Exception thrown when parsing an SPARQL Query containing syntax errors.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlSyntaxErrorException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Exception thrown when parsing an SPARQL Query containing syntax errors.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Query">Query causing the exception</param>
            <param name="Pos">Position of error.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlAggregateException">
            <summary>
            Exception thrown when evaluating an aggregate on non-grouped records.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlAggregateException.#ctor">
            <summary>
            Exception thrown when evaluating an aggregate on non-grouped records.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery">
            <summary>
            Contains a SPARQL Query
            
            http://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.RdfNil">
            <summary>
            URI for rdf:nil
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.RdfFirst">
            <summary>
            URI for rdf:first
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.RdfRest">
            <summary>
            URI for rdf:rest
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.SetLoopbackUrl(System.String,System.Boolean)">
            <summary>
            Sets the SPARQL Loopback URL used when evaluating internal SPARQL queries.
            </summary>
            <param name="Url">Assumed URL to the local SPARQL endpoint.</param>
            <param name="Lock">If the loopback URL should be locked or not.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.#ctor(System.String)">
            <summary>
            Contains a SPARQL Query
            
            http://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/
            </summary>
            <param name="Query">SPARQL Query</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.#ctor(System.String,System.String)">
            <summary>
            Contains a SPARQL Query
            
            http://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/
            </summary>
            <param name="Query">SPARQL Query</param>
            <param name="BaseUrl">Base URL of the query. This value will be overridden if a base is provided in the query.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.ParseIRI_REF(System.Int32@,System.Int32)">
            <summary>
            Returns an absolute IRI, between &lt; and &gt;.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.ISemanticDataSet[])">
            <summary>
            Evaluates the query.
            
            ASK queries return <see cref="T:System.Boolean"/> values.
            CONSTRUCT queries return <see cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument"/> objects.
            SELECT queries return <see cref="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument"/> objects.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="DefaultDatasets">Default datasets.</param>
            <returns>
            ASK queries return <see cref="T:System.Boolean"/> values.
            CONSTRUCT queries return <see cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument"/> objects.
            SELECT queries return <see cref="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument"/> objects.
            </returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.GetNextBlankNodeSequenceNumber">
            <summary>
            Returns the next blank node sequence number for the query. This number is unique only to the current query.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.AddDefaultDataSet(System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet)">
            <summary>
            Adds a default data set to the query.
            </summary>
            <param name="Iri">IRI of the default data set.</param>
            <param name="DataSet">Data Set</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.AddDefaultDataSet(System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet,System.Boolean)">
            <summary>
            Adds a default data set to the query.
            </summary>
            <param name="Iri">IRI of the default data set.</param>
            <param name="DataSet">Data Set</param>
            <param name="DisposeWhenDone">If the data set should be disposed when the query is disposed (DisposeWhenDone=true),
            or if the caller should be responsible for disposing the data set (DisposeWhenDone=false, default).</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.AddNamedDataSet(System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet)">
            <summary>
            Adds a named data set to the query.
            </summary>
            <param name="Iri">IRI of the named data set.</param>
            <param name="DataSet">Data Set</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.AddNamedDataSet(System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet,System.Boolean)">
            <summary>
            Adds a named data set to the query.
            </summary>
            <param name="Iri">IRI of the named data set.</param>
            <param name="DataSet">Data Set</param>
            <param name="DisposeWhenDone">If the data set should be disposed when the query is disposed (DisposeWhenDone=true),
            or if the caller should be responsible for disposing the data set (DisposeWhenDone=false, named).</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.GetDataSet(System.String)">
            <summary>
            Gets a dataset from its Uri.
            </summary>
            <param name="Uri">DataSet URI</param>
            <returns>Data Set if found, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.GetNamedDataSets">
            <summary>
            Gets registered named data sets.
            </summary>
            <returns>Array of registered named data sets.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.String)">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraphUri">Default Graph URI, not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.String[])">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraphUris">Default Graph URIs, not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.String[],System.String[])">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraphUris">Default Graph URIs, not mentioned in the query.</param>
            <param name="NamedGraphUris">Named Graph URIs, not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet})">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraph">Default graph not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet}[])">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraphs">Default graphs not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Evaluate(System.String,System.String,Clayster.Library.Internet.Semantic.SemanticContext,System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet}[],System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.Semantic.ISemanticDataSet}[])">
            <summary>
            Evaluates a SPARQL query.
            </summary>
            <param name="Query">Query</param>
            <param name="BaseUrl">Base URI</param>
            <param name="Context">Semantic context</param>
            <param name="DefaultGraphs">Default graphs not mentioned in the query.</param>
            <param name="NamedGraphs">Named graphs not mentioned in the query.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.IsVariableObjectValue(System.String,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item@)">
            <summary>
            Checks if a variable name is defined as an object value.
            </summary>
            <param name="VariableName">Name of variable</param>
            <param name="Subject">If a subject is given for the variable definition.</param>
            <param name="Predicate">If a predicate is given for the variable definition.</param>
            <returns>If the variable name is defined as an object value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.IsVariableInScope(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Sparql.IVariableScope.IsVariableInScope(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.LoopbackUrl">
            <summary>
            Loopback URL for the SPARQL endpoint.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Query">
            <summary>
            String representation of the SPARQL Query.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.BaseIri">
            <summary>
            Base IRI, if defined in the query, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Bindings">
            <summary>
            Any available bindings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlQuery.Prefixes">
            <summary>
            Available Namespace prefixes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument">
            <summary>
            SPARQL Results Document
            
            http://www.w3.org/2001/sw/DataAccess/rf1/
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.XmlNamespace">
            <summary>
            XML Namespace of document.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.RootName">
            <summary>
            Root element name.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.#ctor(System.Boolean)">
            <summary>
            SPARQL Results Document
            </summary>
            <param name="Result">Boolean result</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.#ctor(System.String[],System.String[],Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord[])">
            <summary>
            SPARQL Results Document
            </summary>
            <param name="Variables">Variables</param>
            <param name="MetaDataLinks">Meta Data Links</param>
            <param name="Records">Records</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            SPARQL Results Document from XML
            
            http://www.w3.org/2001/sw/DataAccess/rf1/
            </summary>
            <param name="Doc">SPARQL Results XML Document</param>
            <param name="BaseUrl">Base URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.#ctor(System.Collections.Generic.SortedDictionary{System.String,System.Object},System.String)">
            <summary>
            SPARQL Results Document from JSON
            
            http://www.w3.org/TR/rdf-sparql-json-res/
            </summary>
            <param name="Json">Decoded JSON</param>
            <param name="BaseUrl">Base URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.#ctor(System.String[][],System.String)">
            <summary>
            SPARQL Results Document from TSV
            
            http://www.w3.org/TR/sparql11-results-csv-tsv/#tsv
            </summary>
            <param name="Tsv">TSV encoded result.
            
            NOTE: Does not work for CSV enccoded result, since the CSV encoding throws away important type information.</param>
            <param name="BaseUrl">Base URL</param>
            <exception cref="T:Clayster.Library.Internet.Semantic.Sparql.SparqlException">If the TSV encoded data does not conform to the SPARQL Results TSV encoding scheme.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.SaveXml(System.String)">
            <summary>
            Saves the SPARQL Results document to a file as an XML document.
            </summary>
            <param name="Path">Full path of file.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.SaveXml(System.IO.Stream)">
            <summary>
            Saves the SPARQL Results document to a stream as an XML document.
            </summary>
            <param name="SaveTo">Stream</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.SaveXml(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the SPARQL Results document to a stream as an XML document.
            </summary>
            <param name="SaveTo">Stream</param>
            <param name="Fragment">If the XML is only a fragment of a larger XML document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.SaveXml(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Saves the SPARQL Results document to a stream as an XML document.
            </summary>
            <param name="w">Output</param>
            <param name="Fragment">If the XML is only a fragment of a larger XML document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.SaveJson(Clayster.Library.Internet.JSON.JsonWriter)">
            <summary>
            Saves the SPARQL Results document to a stream as an XML document.
            </summary>
            <param name="w">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.GetEnumerator">
            <summary>
            Gets an enumerator of all records in the response.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Equals(System.Object)">
            <summary>
            Compares two SPARQL documents. They are considered the same, if they contain the same records, regardless of order.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Equals(Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument)">
            <summary>
            Compares two SPARQL documents. They are considered the same, if they contain the same records, regardless of order.
            </summary>
            <param name="Doc">Second SPARQL Result document.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Equals(Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument,System.Boolean)">
            <summary>
            Compares two SPARQL documents. They are considered the same, if they contain the same records.
            </summary>
            <param name="Doc">Second SPARQL Result document.</param>
            <param name="CheckOrder">If order is to be checked as well (less expensive). default=false.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.AssertEqual(Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument,System.Boolean)">
            <summary>
            Asserts that two SPARQL documents are equal. They are considered the same, if they contain the same records.
            </summary>
            <param name="Doc">Second SPARQL Result document.</param>
            <param name="CheckOrder">If order is to be checked as well (less expensive). default=false.</param>
            <exception cref="T:System.Exception">If they are not equal.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Variables">
            <summary>
            Variables defined in the header of the SPARQL Results Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.MetaData">
            <summary>
            Meta Data links defined in the header of the SPARQL Results Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.Records">
            <summary>
            Records found in the response (for non-boolean responses).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsDocument.BooleanResult">
            <summary>
            If the response is a boolean response, this property will contain the value.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord">
            <summary>
            SPARQL Results Record
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord.GetEnumerator">
            <summary>
            Gets an enumerator of all records in the response.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Sparql.SparqlResultsRecord.Item(System.String)">
            <summary>
            Access to individual values. If <paramref name="Name"/> is not found, null is returned.
            </summary>
            <param name="Name">Name of value.</param>
            <returns>Value, or null if not found.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TripleCollection">
            <summary>
            Contains an array of semantic triples
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.#ctor(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Patterns.SimpleGraphPattern[])">
            <summary>
            Contains an array of semantic triples
            </summary>
            <param name="Triples">Semantic triples</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets available triples.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic graph triples.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.HasTriple(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Checks is the source contains a specific semantic triple.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>If the semantic triple is available in the source.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsBySubjectAndPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Objects, having a specific Subject and Predicate.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available objects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsByPredicateAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Subjects, having a specific Predicate and Object.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available subjects matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsBySubjectAndObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available Predicates, having a specific Subject and Object.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available predicates matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsHavingSubject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Subject.
            </summary>
            <param name="Subject">Subject</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by predicate.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsHavingObject(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Object.
            </summary>
            <param name="Object">Object</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found. They will be sorted by subject.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPatternsHavingPredicate(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Returns available patterns having a specific Predicate.
            </summary>
            <param name="Predicate">Predicate</param>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Available patterns matching the search criteria, or null if none found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.ISemanticDataSet.GetPossibleNodes(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TripleCollection.Triples">
            <summary>
            Triples in the collection.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter">
            <summary>
            Interface for classes used to create Semantic documents.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.GetBlankNodeLabel">
            <summary>
            Returns a label for a new Blank Node.
            </summary>
            <returns>Blank Node Label</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePrefix(System.String,System.String)">
            <summary>
            Writes a @prefix statement.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePrefix(System.String,System.Uri)">
            <summary>
            Writes a @prefix statement.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteBase(System.String)">
            <summary>
            Writes a @base statement.
            </summary>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteBase(System.Uri)">
            <summary>
            Writes a @base statement.
            </summary>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.Uri)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.String)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.String,System.String)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectBlankNode(System.String)">
            <summary>
            Writes a subject Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.Uri)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.String)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.String,System.String)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateA">
            <summary>
            Writes the 'a' predicate. (rdf:type)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.Uri)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.String)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.String,System.String)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectBlankNode(System.String)">
            <summary>
            Writes an object Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteral(System.String)">
            <summary>
            Writes an object literal value (untyped and without language).
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="TypeUri">Type URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.String,System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Prefix">Prefix of type</param>
            <param name="LocalType">Local type name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Int32)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Double)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Decimal)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Boolean)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralLocalized(System.String,System.String)">
            <summary>
            Writes a localized object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartCollection">
            <summary>
            Starts a collection. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndCollection"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndCollection">
            <summary>
            Ends a collection. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartCollection"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartBlankNode">
            <summary>
            Starts an implicit blank node. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndBlankNode"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndBlankNode">
            <summary>
            Ends an implicit blank node. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartBlankNode"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectBag">
            <summary>
            Starts an object Bag. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectBag"/>.
            </summary>
            <returns>Blank Node label of the bag.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectBag">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectBag"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectSeq">
            <summary>
            Starts an object Seq. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectSeq"/>.
            </summary>
            <returns>Blank Node label of the bag.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectSeq">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectSeq"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectAlt">
            <summary>
            Starts an object Alt. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectAlt"/>.
            </summary>
            <returns>Blank Node label of the bag.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectAlt">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectAlt"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.Uri)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.String)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.String,System.String)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemBlankNode(System.String)">
            <summary>
            Adds an item Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteral(System.String)">
            <summary>
            Adds an item literal value (untyped and without language).
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="TypeUri">Type URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.String,System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Prefix">Prefix of type</param>
            <param name="Type">Type name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Int32)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Double)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Decimal)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Boolean)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralLocalized(System.String,System.String)">
            <summary>
            Writes a localized object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsLabelUri(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> rdfs:label Label
            </summary>
            <param name="SubjectUri">Subject URI</param>
            <param name="Label">Label</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsLabelBlankNode(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeLabel"/> rdfs:label Label
            </summary>
            <param name="SubjectBlankNodeLabel">Subject Blank Node Label</param>
            <param name="Label">Label</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsCommentUri(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> rdfs:comment Comment
            </summary>
            <param name="SubjectUri">Subject URI</param>
            <param name="Comment">Comment</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsCommentBlankNode(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeComment"/> rdfs:comment Comment
            </summary>
            <param name="SubjectBlankNodeComment">Subject Blank Node Comment</param>
            <param name="Comment">Comment</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsDatatypeUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a rdfs:Datatype
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsDatatypeBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeDatatype"/> a rdfs:Datatype
            </summary>
            <param name="SubjectBlankNodeDatatype">Subject Blank Node Datatype</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlOntologyUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a owl:Ontology
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlOntologyBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeOntology"/> a owl:Ontology
            </summary>
            <param name="SubjectBlankNodeOntology">Subject Blank Node Ontology</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlClassUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a owl:Class
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlClassBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeClass"/> a owl:Class
            </summary>
            <param name="SubjectBlankNodeClass">Subject Blank Node Class</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter">
            <summary>
            Class helping with generating arrays of semantic triples.
            
            NOTE: The following prefixes will be defined automatically: rdf, rdfs, owl, xsd, dc, dcterms.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.#ctor">
            <summary>
            Class helping with generating arrays of semantic triples.
            
            NOTE: The following prefixes will be defined automatically: rdf, rdfs, owl, xsd, dc, dcterms.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.GetBlankNodeLabel">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.GetBlankNodeLabel"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePrefix(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePrefix(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePrefix(System.String,System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePrefix(System.String,System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteBase(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteBase(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteBase(System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteBase(System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.MakeAbsolute(System.Uri)">
            <summary>
            Creates an absolute URI
            </summary>
            <param name="Uri">URI</param>
            <returns>Absolute URI</returns>
            <exception cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleException">If unable to create an Absolute URI from <paramref name="Uri"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.MakeAbsolute(System.String)">
            <summary>
            Creates an absolute URI
            </summary>
            <param name="Uri">URI</param>
            <returns>Absolute URI</returns>
            <exception cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleException">If unable to create an Absolute URI from <paramref name="Uri"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.MakeAbsolute(System.String,System.String)">
            <summary>
            Creates an absolute URI
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local Uri</param>
            <returns>Absolute URI</returns>
            <exception cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleException">If unable to create an Absolute URI from <paramref name="Prefix"/> and <paramref name="LocalUri"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.Join(System.String,System.String)">
            <summary>
            Creates an absolute URI
            </summary>
            <param name="Namespace">Namespace</param>
            <param name="Uri">Uri</param>
            <returns>Absolute URI</returns>
            <exception cref="T:Clayster.Library.Internet.Semantic.Turtle.TurtleException">If unable to create an Absolute URI from <paramref name="Namespace"/> and <paramref name="Uri"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteSubjectUri(System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteSubjectUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteSubjectUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteSubjectBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteSubjectBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePredicateUri(System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePredicateUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePredicateUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WritePredicateA">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WritePredicateA"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectUri(System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteral(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteral(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.Decimal)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Decimal)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralTyped(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralTyped(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.WriteObjectLiteralLocalized(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.WriteObjectLiteralLocalized(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartCollection">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartCollection"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartCollection(Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Items.Item,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartCollection"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.EndCollection">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndCollection"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartBlankNode">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartBlankNode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartBlankNode(System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartBlankNode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.EndBlankNode">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndBlankNode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartObjectBag">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectBag"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.EndObjectBag">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectBag"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartObjectSeq">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectSeq"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.EndObjectSeq">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectSeq"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.StartObjectAlt">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.StartObjectAlt"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.EndObjectAlt">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.EndObjectAlt"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemUri(System.Uri)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.Uri)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteral(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteral(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.String,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Double)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.Decimal)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Decimal)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralTyped(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralTyped(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.AddItemLiteralLocalized(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.AddItemLiteralLocalized(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsLabelUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsLabelUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsLabelBlankNode(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsLabelBlankNode(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsCommentUri(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsCommentUri(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsCommentBlankNode(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsCommentBlankNode(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsDatatypeUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsDatatypeUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.RdfsDatatypeBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.RdfsDatatypeBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.OwlOntologyUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlOntologyUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.OwlOntologyBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlOntologyBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.OwlClassUri(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlClassUri(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.OwlClassBlankNode(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.Semantic.Turtle.ITurtleWriter.OwlClassBlankNode(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.TryGetLocalName(System.String,System.Boolean,System.String@,System.String@,System.String@)">
            <summary>
            Tries to get the local name of a full resource IRI.
            </summary>
            <param name="FullUri">Full IRI</param>
            <param name="IncludeHashTagInNamespace">If hash tags should be included in the namespace.</param>
            <param name="Prefix">Prefix, if found, or null otherwise. <see cref="F:System.String.Empty"/> means it's the default namespace.</param>
            <param name="Namespace">Namespace</param>
            <param name="LocalName">LocalName</param>
            <returns>If a local name was found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.GetPrefixes">
            <summary>
            returns an array of registered prefixes and their corresponding namespaces.
            </summary>
            <returns>Array of registered prefixes and their corresponding namespaces.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.TryGetNamespace(System.String,System.Uri@)">
            <summary>
            Tries to get a namespace from its prefix.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace, or null if not found.</param>
            <returns>If prefix found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.ContainsPrefix(System.String)">
            <summary>
            Checks if a prefix is defined.
            </summary>
            <param name="Prefix">Prefix</param>
            <returns>If <paramref name="Prefix"/> is defined.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.Triples">
            <summary>
            Available triples.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.CurrentSubject">
            <summary>
            Current Subject
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.CurrentPredicate">
            <summary>
            Current Predicate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TriplesWriter.CurrentBase">
            <summary>
            Current Base URI
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleException">
            <summary>
            Base class for all Turtle exceptions.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleException.#ctor(System.String)">
            <summary>
            Base class for all Turtle exceptions.
            </summary>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleException.#ctor(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            Base class for all Turtle exceptions.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Content">Content to return in HTTP responses, if query result of an HTTP request.</param>
            <param name="ContentType">Content type of <paramref name="Content"/>.</param>
            <param name="ContentEncoding">Content encoding of <paramref name="Content"/>.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleSyntaxErrorException">
            <summary>
            Exception thrown when parsing an Turtle documents containing syntax errors.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleSyntaxErrorException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Exception thrown when parsing an Turtle documents containing syntax errors.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Query">Query causing the exception</param>
            <param name="Pos">Position of error.</param>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument">
            <summary>
            Contains a Turtle Document
            
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.#ctor(System.String)">
            <summary>
            Contains a Turtle Document
            
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <param name="Turtle">Turtle Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.#ctor(System.String,System.String)">
            <summary>
            Contains a Turtle Document
            
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <param name="Turtle">Turtle Document</param>
            <param name="BaseUrl">Base URL of the document. This value will be overridden if a base is provided in the document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Contains a Turtle Document
            
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <param name="Rdf">RDF over XML, as defined by 
            http://www.w3.org/TR/REC-rdf-syntax/</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            Contains a Turtle Document
            
            http://www.w3.org/TeamSubmission/turtle/
            </summary>
            <param name="Rdf">RDF over XML, as defined by 
            http://www.w3.org/TR/REC-rdf-syntax/</param>
            <param name="BaseUri">Base URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.GetTriples(Clayster.Library.Internet.Semantic.SemanticContext,Clayster.Library.Internet.Semantic.Sparql.QueryNodes.Filter.Constraint[])">
            <summary>
            Gets available triples.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <param name="ConstraintsInformational">If constraints are available later on in the processing, they will be passed to the method through this parameter.
            If no constraints are available null is returned.
            
            NOTE: The method is not required to act on these constraints. They will be checked at a later state. They might not even be defined for the
            subquery passed to the method. They are simply passed to the method as information, and the method may if it chooses act on them to restrict
            the number of records returned if it sees it fit.</param>
            <returns>Semantic graph triples.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.SaveAsHtml(System.Text.StringBuilder,System.String)">
            <summary>
            Saves the contents of the document to HTML.
            </summary>
            <param name="Output">Output.</param>
            <param name="Title">Title of document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.SaveAsHtml(System.IO.Stream,System.String)">
            <summary>
            Saves the contents of the document to HTML.
            </summary>
            <param name="Output">Output.</param>
            <param name="Title">Title of document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.SaveAsHtml(System.IO.TextWriter,System.String)">
            <summary>
            Saves the contents of the document to HTML.
            </summary>
            <param name="Output">Output.</param>
            <param name="Title">Title of document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.GetPrefixedNamespaces(Clayster.Library.Internet.Semantic.SemanticContext)">
            <summary>
            Gets registered prefixed namespaces.
            </summary>
            <param name="Context">Contains information about the current semantic context.</param>
            <returns>Array of prefixed namespaces.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.ContainsPrefix(System.String)">
            <summary>
            Checks if a prefix is registered.
            </summary>
            <param name="Prefix">Prefix</param>
            <returns>If the prefix is registered in the document.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.GetNamespace(System.String)">
            <summary>
            Gets the namespace given its prefix.
            </summary>
            <param name="Prefix">Namespace prefix.</param>
            <returns>Namespace URI if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.Equals(System.Object)">
            <summary>
            Compares two Turtle documents. They are considered the same, if they contain the same records, regardless of order.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.Equals(Clayster.Library.Internet.Semantic.Turtle.TurtleDocument)">
            <summary>
            Compares two Turtle documents. They are considered the same, if they contain the same records, regardless of order.
            </summary>
            <param name="Doc">Second Turtle document.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.Equals(Clayster.Library.Internet.Semantic.Turtle.TurtleDocument,System.Boolean)">
            <summary>
            Compares two Turtle documents. They are considered the same, if they contain the same records.
            </summary>
            <param name="Doc">Second Turtle document.</param>
            <param name="CheckOrder">If order is to be checked as well (less expensive). default=false.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.AssertEqual(Clayster.Library.Internet.Semantic.Turtle.TurtleDocument,System.Boolean)">
            <summary>
            Asserts that two Turtle documents are equal. They are considered the same, if they contain the same records.
            </summary>
            <param name="Doc">Second Turtle document.</param>
            <param name="CheckOrder">If order is to be checked as well (less expensive). default=false.</param>
            <exception cref="T:System.Exception">If they are not equal.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.InnerText">
            <summary>
            String representation of the Turtle Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleDocument.BaseUri">
            <summary>
            (Last) Base URI, if defined in the document, null otherwise.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter">
            <summary>
            Class helping with generating Turtle documents.
            
            NOTE: The following prefixes will be defined automatically: rdf, rdfs, owl, xsd, dc, dcterms.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.NamespaceRdf">
            <summary>
            RDF Namespace: http://www.w3.org/1999/02/22-rdf-syntax-ns#
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.NamespaceRdfs">
            <summary>
            RDF Schema Namespace: http://www.w3.org/2000/01/rdf-schema#
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.NamespaceOwl">
            <summary>
            OWL Namespace: http://www.w3.org/2002/07/owl#
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.NamespaceXsd">
            <summary>
            XML Schema Namespace: http://www.w3.org/2001/XMLSchema
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.NamespaceXml">
            <summary>
            XML Namespace: http://www.w3.org/XML/1998/namespace
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Class helping with generating Turtle documents.
            
            NOTE: The following prefixes will be defined automatically: rdf, rdfs, owl, xsd, dc, dcterms.
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            Class helping with generating Turtle documents.
            
            NOTE: The following prefixes will be defined automatically: rdf, rdfs, owl, xsd, dc, dcterms.
            </summary>
            <param name="Output">Output</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndStatement">
            <summary>
            Ends the current statement if possible.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.Flush">
            <summary>
            Flush pending output.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.GetBlankNodeLabel">
            <summary>
            Returns a label for a new Blank Node.
            </summary>
            <returns>Blank Node Label</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePrefix(System.String,System.String)">
            <summary>
            Writes a @prefix statement.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePrefix(System.String,System.Uri)">
            <summary>
            Writes a @prefix statement.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteBase(System.String)">
            <summary>
            Writes a @base statement.
            </summary>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteBase(System.Uri)">
            <summary>
            Writes a @base statement.
            </summary>
            <param name="Namespace">Namespace</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteSubjectRaw(System.String)">
            <summary>
            Writes a raw pre-formatted subject value to the output.
            </summary>
            <param name="s">Raw pre-formatted subject.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteSubjectUri(System.Uri)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteSubjectUri(System.String)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteSubjectUri(System.String,System.String)">
            <summary>
            Writes a subject URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteSubjectBlankNode(System.String)">
            <summary>
            Writes a subject Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePredicateRaw(System.String)">
            <summary>
            Writes a raw pre-formatted predicate value to the output.
            </summary>
            <param name="s">Raw pre-formatted predicate.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePredicateUri(System.Uri)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePredicateUri(System.String)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePredicateUri(System.String,System.String)">
            <summary>
            Writes a predicate URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WritePredicateA">
            <summary>
            Writes the 'a' predicate. (rdf:type)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectRaw(System.String)">
            <summary>
            Writes a raw pre-formatted object value to the output.
            </summary>
            <param name="s">Raw pre-formatted object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectUri(System.Uri)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectUri(System.String)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectUri(System.String,System.String)">
            <summary>
            Writes an object URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectBlankNode(System.String)">
            <summary>
            Writes an object Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteral(System.String)">
            <summary>
            Writes an object literal value (untyped and without language).
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="TypeUri">Type URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.String,System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Prefix">Prefix of type</param>
            <param name="LocalType">Local type name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.Int32)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.Double)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.Decimal)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralTyped(System.Boolean)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.WriteObjectLiteralLocalized(System.String,System.String)">
            <summary>
            Writes a localized object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartCollection">
            <summary>
            Starts a collection. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndCollection"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndCollection">
            <summary>
            Ends a collection. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartCollection"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartBlankNode">
            <summary>
            Starts an implicit blank node. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndBlankNode"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndBlankNode">
            <summary>
            Ends an implicit blank node. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartBlankNode"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectBag">
            <summary>
            Starts an object Bag. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectBag"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectBag">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectBag"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectSeq">
            <summary>
            Starts an object Seq. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectSeq"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectSeq">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectSeq"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectAlt">
            <summary>
            Starts an object Alt. Each call to this method must be ended with a call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectAlt"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.EndObjectAlt">
            <summary>
            Ends an object bag. This method has to be called once for every call to <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.StartObjectAlt"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemUri(System.Uri)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemUri(System.String)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Uri">URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemUri(System.String,System.String)">
            <summary>
            Adds an item URI.
            </summary>
            <param name="Prefix">Prefix</param>
            <param name="LocalUri">Local URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemStartBlankNode">
            <summary>
            Starts a blank node as an item.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemBlankNode(System.String)">
            <summary>
            Adds an item Blank Node.
            </summary>
            <param name="Label">Blank Node Label. New labels can be created using <see cref="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.GetBlankNodeLabel"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteral(System.String)">
            <summary>
            Adds an item literal value (untyped and without language).
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="TypeUri">Type URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.String,System.String,System.String)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Prefix">Prefix of type</param>
            <param name="Type">Type name</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.Int32)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.Double)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.Decimal)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralTyped(System.Boolean)">
            <summary>
            Writes a typed object literal value.
            </summary>
            <param name="Value">Literal value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.AddItemLiteralLocalized(System.String,System.String)">
            <summary>
            Writes a localized object literal value.
            </summary>
            <param name="Value">Literal value.</param>
            <param name="Language">Language</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsLabelUri(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> rdfs:label Label
            </summary>
            <param name="SubjectUri">Subject URI</param>
            <param name="Label">Label</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsLabelBlankNode(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeLabel"/> rdfs:label Label
            </summary>
            <param name="SubjectBlankNodeLabel">Subject Blank Node Label</param>
            <param name="Label">Label</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsCommentUri(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> rdfs:comment Comment
            </summary>
            <param name="SubjectUri">Subject URI</param>
            <param name="Comment">Comment</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsCommentBlankNode(System.String,System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeComment"/> rdfs:comment Comment
            </summary>
            <param name="SubjectBlankNodeComment">Subject Blank Node Comment</param>
            <param name="Comment">Comment</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsDatatypeUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a rdfs:Datatype
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.RdfsDatatypeBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeDatatype"/> a rdfs:Datatype
            </summary>
            <param name="SubjectBlankNodeDatatype">Subject Blank Node Datatype</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.OwlOntologyUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a owl:Ontology
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.OwlOntologyBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeOntology"/> a owl:Ontology
            </summary>
            <param name="SubjectBlankNodeOntology">Subject Blank Node Ontology</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.OwlClassUri(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectUri"/> a owl:Class
            </summary>
            <param name="SubjectUri">Subject URI</param>
        </member>
        <member name="M:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.OwlClassBlankNode(System.String)">
            <summary>
            Outputs the following triplet:
            <paramref name="SubjectBlankNodeClass"/> a owl:Class
            </summary>
            <param name="SubjectBlankNodeClass">Subject Blank Node Class</param>
        </member>
        <member name="P:Clayster.Library.Internet.Semantic.Turtle.TurtleWriter.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.DiscoveryEventHandler">
            <summary>
            Event handler for SSDP Discovery events.
            </summary>
            <param name="Sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.NotifyEventHandler">
            <summary>
            Event handler for sending SSDP notification events.
            </summary>
            <param name="Sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.MulticastPropertySetEventHandler">
            <summary>
            Event handler used when receiving multicast property set events.
            </summary>
            <param name="Sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.SsdpClient">
            <summary>
            SSDP Client.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.DefaultSsdpPort">
            <summary>
            Default SSDP Port.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpIp4MulticastAddress">
            <summary>
            SSDP IP4 Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpIp6LinkLocalMulticastAddress">
            <summary>
            SSDP IP6 Link Local Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpIp6SiteLocalMulticastAddress">
            <summary>
            SSDP IP6 Site Local Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpIp6OrganizationLocalMulticastAddress">
            <summary>
            SSDP IP6 Organization Local Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpIp6GlobalMulticastAddress">
            <summary>
            SSDP IP6 Global Local Multicast address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.UpnpRootDevice">
            <summary>
            UPnP Root Device
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SSDP.SsdpClient.SsdpAll">
            <summary>
            All interfaces
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.#ctor(Clayster.Library.Internet.HTTP.HttpServer,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            SSDP Client.
            </summary>
            <param name="HttpServer">HTTP server to use.</param>
            <param name="Ttl">Time To Live (TTL), i.e. number of router hops allowed.</param>
            <param name="Ip4">If IP4 multicast address is to be used.</param>
            <param name="Ip6LinkLocal">If IP6 link-local multicast address is to be used.</param>
            <param name="Ip6SiteLocal">If IP6 site-local multicast address is to be used.</param>
            <param name="Ip6OrganizationLocal">If IP6 organization-local multicast address is to be used.</param>
            <param name="Ip6Global">If IP6 global multicast address is to be used.</param>
            <param name="SearchIntervalSeconds">Searches the network for new devices using an interval of this number of seconds. 0=No search.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.Discover(System.String,System.Int32)">
            <summary>
            Sends an SSDP Discover message.
            </summary>
            <param name="TypeRestriction">Optional type restriction. Will only return responses of this specific SSDP type.</param>
            <param name="MaxResponseTimeSeconds">Maximum time for SSDP clients to respond.</param>
            <returns>If the Discover message was sent or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.MulticastStateVariables(System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Multicast state variables to a (multicast) addresses, on a given port.
            </summary>
            <param name="Address">IP (multicast) address</param>
            <param name="Port">Port number</param>
            <param name="UniqueServiceName">Unique Service Name for the publisher</param>
            <param name="ServiceId">ServiceID from SCPD</param>
            <param name="SequenceNr">Monotonically increasing sequence count. Originally a 32-bit unsigned integer. First event must have sequence number 0.</param>
            <param name="EventLevel">Event importance. Comes in the form DOMAIN:/LEVEL. There are some predefined event levels:
            
            upnp:/emergency = The event carries critical information that the device SHOULD act upon immediately. 
            
            upnp:/fault = The event carries information related to an error case.
            
            upnp:/warning = The event carries information that is a non-critical condition that the device MAY want to process or pass to the user.
            
            upnp:/info = The event carries information about the normal operation of the device that may be of interest to end-users.  This information is simply informative 
            and does not indicate any abnormal condition or status such as a warning or fault.  Other event levelsare defined for those purposes. 
            
            upnp:/debug = The event carries debug information typically used by programmers and test engineers to evaluate the internal operation of the device.  This information is 
            typically not displayed to end users. 
            
            upnp:/general = For events that fit into no other defined category.
            </param>
            <param name="StateVariables">State Variable values.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.MulticastStateVariables(System.String,System.String,System.Int32,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Multicast state variables to UPnP multicast addresses, on port 7900.
            </summary>
            <param name="UniqueServiceName">Unique Service Name for the publisher</param>
            <param name="ServiceId">ServiceID from SCPD</param>
            <param name="SequenceNr">Monotonically increasing sequence count. Originally a 32-bit unsigned integer. First event must have sequence number 0.</param>
            <param name="EventLevel">Event importance. Comes in the form DOMAIN:/LEVEL. There are some predefined event levels:
            
            upnp:/emergency = The event carries critical information that the device SHOULD act upon immediately. 
            
            upnp:/fault = The event carries information related to an error case.
            
            upnp:/warning = The event carries information that is a non-critical condition that the device MAY want to process or pass to the user.
            
            upnp:/info = The event carries information about the normal operation of the device that may be of interest to end-users.  This information is simply informative 
            and does not indicate any abnormal condition or status such as a warning or fault.  Other event levelsare defined for those purposes. 
            
            upnp:/debug = The event carries debug information typically used by programmers and test engineers to evaluate the internal operation of the device.  This information is 
            typically not displayed to end users. 
            
            upnp:/general = For events that fit into no other defined category.
            </param>
            <param name="StateVariables">State Variable values.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpClient.ByeBye">
            <summary>
            Sends the SSDP Bye-bye message to all registered USN's. An USN is registered if used as a 
            <see cref="F:Clayster.Library.Internet.SSDP.SsdpClient.UpnpRootDevice"/> in responses trough <see cref="M:Clayster.Library.Internet.SSDP.SsdpDiscoveryEventArgs.SendResponse(System.DateTime,System.String,System.String,System.String)"/> or
            through calls to <see cref="M:Clayster.Library.Internet.SSDP.SsdpNotifyEventArgs.SendNotification(System.DateTime,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SSDP.SsdpClient.OnUpdated">
            <summary>
            Raised when the number of devices found has changed (i.e. when devices are added or removed), or when any of the devices have been updated.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SSDP.SsdpClient.OnDiscovery">
            <summary>
            Raised when a discovery request has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SSDP.SsdpClient.OnNotify">
            <summary>
            Event raised regularly, when searching for new entities. Can be used to broadcast notifications to the network.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SSDP.SsdpClient.OnMulticastPropertySet">
            <summary>
            Event raised when multi-cast event properties have been received.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpClient.Devices">
            <summary>
            Available devices.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpClient.MulticastAddressesInUse">
            <summary>
            Multicast addresses in use.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SSDP.SsdpResource">
            <summary>
            SSDP HTTP Resource.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpResource.#ctor(Clayster.Library.Internet.SSDP.SsdpClient)">
            <summary>
            SSDP HTTP Resource.
            </summary>
            <param name="Client">SSDP Client</param>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpResource.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.NOTIFY(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SSDP.SsdpResource.MSEARCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.MSEARCH(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptPUT">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPUT"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptDELETE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptDELETE"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptTRACE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptTRACE"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptCONNECT">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptCONNECT"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptNOTIFY">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptNOTIFY"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptMSEARCH">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptMSEARCH"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptSUBSCRIBE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptSUBSCRIBE"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SSDP.SsdpResource.AcceptUNSUBSCRIBE">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptUNSUBSCRIBE"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.EpisodeType">
            <summary>
            Episode Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.EpisodeType.FirstRun">
            <summary>
            First run
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.EpisodeType.Repeat">
            <summary>
            Repeat
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ServiceName">
            <summary>
            Service Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ServiceName.AvTransport">
            <summary>
            AV Transport
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ServiceName.RenderingControl">
            <summary>
            Rendering Control
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ServiceName.Unknown">
            <summary>
            Unrecognized
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.RcsInstanceType">
            <summary>
            RCS Instance Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.RcsInstanceType.PreMix">
            <summary>
            Pre-mix
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.RcsInstanceType.PostMix">
            <summary>
            Post-mix
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.RcsInstanceType.Unknown">
            <summary>
            Unrecognized
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource">
            <summary>
            Descriptor element. Contains external information.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ResourceUrl">
            <summary>
            Resource URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ImportUrl">
            <summary>
            Import URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ProtocolInformation">
            <summary>
            Protocol Information (Method)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.BitRate">
            <summary>
            Bitrate
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.SampleFrequency">
            <summary>
            Sample frequency
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.BitsPerSample">
            <summary>
            Bits/sample
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.NrAudioChannels">
            <summary>
            Number of audio channels
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ResX">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ResY">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ColorDepth">
            <summary>
            Color depth
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Tspec">
            <summary>
            Tspec
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.AllowedUse">
            <summary>
            Allowed use
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ValidityStart">
            <summary>
            Validity, Start
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ValidityEnd">
            <summary>
            Validity, End
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.RemainingTime">
            <summary>
            Remaining Time
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.UsageInfo">
            <summary>
            Usage Information
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.RightsInfoUrl">
            <summary>
            Rights information URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.ContentInfoUrl">
            <summary>
            Content Information URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.RecordQuality">
            <summary>
            Record Quality
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Protection">
            <summary>
            Protection
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.DaylightSaving">
            <summary>
            Daylight Saving
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteResource.Tag">
            <summary>
            Tag to which the user can aggregate custom information.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDescriptor">
            <summary>
            Descriptor element. Contains external information.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDescriptor.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDescriptor.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDescriptor.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDescriptor.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteItem">
            <summary>
            DIDL-Lite item.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase">
            <summary>
            Base class for Items and Containers.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ParseNode(System.Xml.XmlNode,System.String)">
            <summary>
            Called to parse elements not defined in the base class.
            </summary>
            <param name="N">XML Node</param>
            <param name="BaseUrl">Base URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ParseDST(System.String)">
            <summary>
            Parses the Daylight Savings Time enumeration.
            </summary>
            <param name="s">String value</param>
            <returns>true if DST, false if not, null if not recognized value.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ParentId">
            <summary>
            Parent ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Restricted">
            <summary>
            Restricted
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.NeverPlayable">
            <summary>
            Never Playable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SearchClasses">
            <summary>
            Search classes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.CreateClasses">
            <summary>
            Create classes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.WriteStatus">
            <summary>
            Write status
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Artists">
            <summary>
            Artists
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Actors">
            <summary>
            Actors
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Authors">
            <summary>
            Authors
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Producers">
            <summary>
            Producers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Directors">
            <summary>
            Directors
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Contributors">
            <summary>
            Contributors
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Creators">
            <summary>
            Creators
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Languages">
            <summary>
            Languages
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Publishers">
            <summary>
            Publishers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Relations">
            <summary>
            Relations
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Genre">
            <summary>
            Genre
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Album">
            <summary>
            Album
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Playlist">
            <summary>
            Playlist
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.AlbumArtUrl">
            <summary>
            Album Art URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ArtistDiscographyUrl">
            <summary>
            Artist Discography URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.LyricsUrl">
            <summary>
            Lyrics URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StorageTotal">
            <summary>
            Storage Total
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StorageUsed">
            <summary>
            Storage Used
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StorageFree">
            <summary>
            Storage Free
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StorageMaxPartition">
            <summary>
            Storage Max Partition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StorageMedium">
            <summary>
            Storage Medium
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.LongDescription">
            <summary>
            Long Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.IconUrl">
            <summary>
            Icon URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Rights">
            <summary>
            Rights
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.PlaybackCount">
            <summary>
            Playblack count
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.LastPlaybackTime">
            <summary>
            Last Playback Time
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.LastPlaybackPosition">
            <summary>
            Last Playback Position
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RecordedStartDateTime">
            <summary>
            Recorded Start Date &amp; Time
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RecordedDuration">
            <summary>
            Recorded Duration
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RecordedDayOfWeek">
            <summary>
            Recorded Day of Week
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SrsRecordScheduleID">
            <summary>
            SRS Record Schedule ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SrsRecordTaskID">
            <summary>
            SRS Record Task ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Recordable">
            <summary>
            Recordable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ProgramTitle">
            <summary>
            Program Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SeriesTitle">
            <summary>
            Series Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ProgramID">
            <summary>
            Program ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SeriesID">
            <summary>
            Series ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ChannelID">
            <summary>
            Channel ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.EpisodeCount">
            <summary>
            Episode Count
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.EpisodeNumber">
            <summary>
            Episode Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ProgramCode">
            <summary>
            Program Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Rating">
            <summary>
            Rating
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.EpisodeType">
            <summary>
            Edpisode Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ChannelGroupName">
            <summary>
            Channel Group Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.CallSign">
            <summary>
            Call Sign
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.NetworkAffiliation">
            <summary>
            Network affiliation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ServiceProvider">
            <summary>
            Service Provider
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.PayPerView">
            <summary>
            Pay per view
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.EpgProviderName">
            <summary>
            EPG provider name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.DateTimeRangeFrom">
            <summary>
            Date &amp; Time range 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RadioCallSign">
            <summary>
            Radio call sign
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RadioStationID">
            <summary>
            Radio station ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.RadioBand">
            <summary>
            Radio Band
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ChannelNr">
            <summary>
            Channel NR
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ChannelName">
            <summary>
            Channel Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ScheduledStartTime">
            <summary>
            Scheduled Start Time
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ScheduledEndTime">
            <summary>
            Scheduled End Time
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ScheduledDuration">
            <summary>
            Scheduled Duration
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SignalStrength">
            <summary>
            Signal Strength
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.SignalLocked">
            <summary>
            Signal Locked
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Tuned">
            <summary>
            Tuned
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.BookmarkID">
            <summary>
            Bookmark ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.BookmarkedObjectID">
            <summary>
            Bookmarked Object ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.DeviceUDN">
            <summary>
            Device UDN
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.StateVariableCollection">
            <summary>
            State Variable Collection
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ForeignMetadata">
            <summary>
            Foreign Metadata
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.DvdRegionCode">
            <summary>
            DVD Region Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.OriginalTrackNumber">
            <summary>
            Original Track Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.Toc">
            <summary>
            TOC
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.UserAnnotation">
            <summary>
            User Anotation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ContainerUpdateID">
            <summary>
            Container Update ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ObjectUpdateID">
            <summary>
            Object Update ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.TotalDeletedChildCount">
            <summary>
            Total Deleted Child Count
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteItem.ParseNode(System.Xml.XmlNode,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ParseNode(System.Xml.XmlNode,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteItem.RefId">
            <summary>
            Reference ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteItem.Descriptors">
            <summary>
            Descriptors.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteItem.Resources">
            <summary>
            Resources
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer">
            <summary>
            DIDL-Lite container.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.ParseNode(System.Xml.XmlNode,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteBase.ParseNode(System.Xml.XmlNode,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Searchable">
            <summary>
            Searchable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.ChildCount">
            <summary>
            Child Count
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Containers">
            <summary>
            Sub-containers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Ordered">
            <summary>
            Items and containers in the orders defined
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Resources">
            <summary>
            Resources
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Descriptors">
            <summary>
            Descriptors.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Item(System.String)">
            <summary>
            Returns the item or container that corresponds to a given ID. If not found, null is returned.
            </summary>
            <param name="Id">ID</param>
            <returns>Container, item or null.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteContainer.Count">
            <summary>
            Number of items in result.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument">
            <summary>
            DIDL-Lite document.
            
            For schemas defining this document, see:
            http://www.upnp.org/schemas/av/didl-lite-v2.xsd
            http://www.upnp.org/schemas/av/upnp.xsd
            http://www.upnp.org/schemas/av/av.xsd
            http://dublincore.org/schemas/xmls/simpledc20021212.xsd
            http://www.w3.org/2005/08/xml.xsd
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            DIDL-Lite document.
            </summary>
            <param name="Doc">XML definition</param>
            <param name="BaseUrl">Base Url</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Containers">
            <summary>
            Sub-containers
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Ordered">
            <summary>
            Items and containers in the orders defined
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Descriptors">
            <summary>
            Descriptors.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Item(System.String)">
            <summary>
            Returns the item or container that corresponds to a given ID. If not found, null is returned.
            </summary>
            <param name="Id">ID</param>
            <returns>Container, item or null.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.DidlLite.DidlLiteDocument.Count">
            <summary>
            Number of items in result.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.SearchClass">
            <summary>
            Search Class
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.SearchClass.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.SearchClass.IncludeDerived">
            <summary>
            Include Derived
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTime">
            <summary>
            Qualified Date &amp; Time structure.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTime.Timepoint">
            <summary>
            Timepoint
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTime.DaylightSavingsTime">
            <summary>
            If Daylight Savings Time is specified:
            
            true = Daylight Savings Time
            false = Standard Time
            null = Undefined or unknown.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTimeRange">
            <summary>
            Qualified Date &amp; Time range structure.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTimeRange.From">
            <summary>
            From
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTimeRange.To">
            <summary>
            To
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.QualifiedDateTimeRange.DaylightSavingsTime">
            <summary>
            If Daylight Savings Time is specified:
            
            true = Daylight Savings Time
            false = Standard Time
            null = Undefined or unknown.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.PersonWithRole">
            <summary>
            Person with Role structure.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.PersonWithRole.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.PersonWithRole.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.Genre">
            <summary>
            Genre structure.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Genre.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Genre.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Genre.Extended">
            <summary>
            Extended
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.Price">
            <summary>
            Price structure.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Price.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Price.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ProgramId">
            <summary>
            Program ID.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProgramId.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProgramId.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ChannelId">
            <summary>
            Channel ID.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelId.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelId.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelId.NetworkName">
            <summary>
            Network Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelId.NetworkId">
            <summary>
            Network ID
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ProgramCode">
            <summary>
            Program Code.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProgramCode.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProgramCode.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.Rating">
            <summary>
            Rating.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Rating.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.Rating.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ChannelGroupName">
            <summary>
            Channel Group Name
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelGroupName.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ChannelGroupName.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.DeviceUdn">
            <summary>
            Device UDN
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.DeviceUdn.Udn">
            <summary>
            UDN
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.DeviceUdn.ServiceType">
            <summary>
            Service Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.DeviceUdn.ServiceId">
            <summary>
            Service Id
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.StateVariableCollection">
            <summary>
            State Variable Collection
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.StateVariableCollection.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.StateVariableCollection.ServiceName">
            <summary>
            Service Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.StateVariableCollection.RcsInstanceType">
            <summary>
            RCS Instance Type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.DidlLite.ProtocolInformation">
            <summary>
            Protocol Information
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProtocolInformation.Method">
            <summary>
            Method ("http-get" or "rtsp-rtp-udp")
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProtocolInformation.Accepts">
            <summary>
            Accepts
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProtocolInformation.ContentType">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.DidlLite.ProtocolInformation.Dlna">
            <summary>
            DLNA parameters
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPException">
            <summary>
            UPnP Exception
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.WebServiceException">
            <summary>
            Web Service Exception
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebServiceException.#ctor(Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Web Service Exception
            </summary>
            <param name="Code">HTTP Status Code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebServiceException.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Web Service Exception
            </summary>
            <param name="Message">Exception message</param>
            <param name="Code">HTTP Status Code.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.WebServiceException.RenderDetail(System.Text.StringBuilder)">
            <summary>
            Renders detailed information into the SOAP Fault response being generated.
            </summary>
            <param name="Response"></param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.WebServiceException.HasDetail">
            <summary>
            If the SOAP Exception has detailed information.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPException.#ctor(System.Boolean,System.Int32,System.String)">
            <summary>
            UPnP Exception
            </summary>
            <param name="ClientError">If the error is a client error (true) or a server error (false).</param>
            <param name="UPnPErrorCode">UPnP Error Code</param>
            <param name="ErrorDescription">A description of the error.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPException.RenderDetail(System.Text.StringBuilder)">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.WebServiceException.HasDetail"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPException.ErrorCode">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPException.ErrorDescription">
            <summary>
            Error Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPException.HasDetail">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.WebServiceException.HasDetail"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType">
            <summary>
            State Variable data type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.UnsignedInteger1Byte">
            <summary>
            Unsigned integer (1 byte)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.UnsignedInteger2Bytes">
            <summary>
            Unsigned integer (2 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.UnsignedInteger4Bytes">
            <summary>
            Unsigned integer (4 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.SignedInteger1Byte">
            <summary>
            Signed integer (1 byte)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.SignedInteger2Bytes">
            <summary>
            Signed integer (2 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.SignedInteger4Bytes">
            <summary>
            Signed integer (4 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.FloatingPoint4Bytes">
            <summary>
            Floating point (4 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.FloatingPoint8Bytes">
            <summary>
            Floating point (8 bytes)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Number">
            <summary>
            Same as <see cref="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.FloatingPoint8Bytes"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Fixed">
            <summary>
            Same as <see cref="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.FloatingPoint8Bytes"/>, but no more than 14 digits to the left of the decimal point, and no more than 4 to the right.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.FloatingPoint">
            <summary>
            Floating point
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Character">
            <summary>
            One unicode character
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.String">
            <summary>
            Unicode string
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Date">
            <summary>
            Date (ISO 8601)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.DateTime">
            <summary>
            Date with optional Time (ISO 8601)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.DateTimeAndZone">
            <summary>
            Date with optional Time and time zone (ISO 8601)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Time">
            <summary>
            Time (ISO 8601)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.TimeAndZone">
            <summary>
            Time with optional time zone (ISO 8601)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Boolean">
            <summary>
            Boolean value
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.BinaryBase64">
            <summary>
            Base 64-encoded binary value.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.BinaryHexadecimal">
            <summary>
            Binary value, encoded as hexadecimal bytes.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Uuid">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPStateVariableDataType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPStateVariable">
            <summary>
            UPnP State Variable
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.ParseValue(System.String)">
            <summary>
            Parses a value given as a string.
            </summary>
            <param name="Value">String representation of value.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.Encode(System.Object)">
            <summary>
            Encodes a value as a string (for inclusion in XML).
            </summary>
            <param name="Value">Value.</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.ParseBinaryHex(System.String)">
            <summary>
            Parses a binary hex string.
            </summary>
            <param name="Value">Binary Hex String</param>
            <returns>Binary data.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.ToString(System.Byte[])">
            <summary>
            Encodes a binary data block hexadecimally.
            </summary>
            <param name="Data">Binary data</param>
            <returns>Hexadecimal notation.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPStateVariable.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.DataType">
            <summary>
            Data Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.DefaultValueString">
            <summary>
            Default Value, string representation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.DefaultValue">
            <summary>
            Parsed Default Value (null if not available or unable to parse value).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.AllowedValues">
            <summary>
            For string parameter types, this property can contain an optional list of allowed values.
            If not specified, this property will be null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.Minimum">
            <summary>
            If available, this value represents the smallest value allowed. If not available, null will be returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.Maximum">
            <summary>
            If available, this value represents the largest value allowed. If not available, null will be returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.Step">
            <summary>
            If available, this value represents a recommended step size for the parameter. If not available, null will be returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.SendEvents">
            <summary>
            If the state variable supports events.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPStateVariable.Multicast">
            <summary>
            If the state variable supports multicasting.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPAction">
            <summary>
            UPnP Argument
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPAction.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPAction.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPAction.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPAction.Execute(Clayster.Library.Math.Variables)">
            <summary>
            Executes the action.
            </summary>
            <param name="Variables">Variable collection containing input values that will be used in the call. Output values (and the return value) will also be stored here.</param>
            <returns>If the action contains a return value, it will be returned here. Otherwise, null will be returned.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPAction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPAction.Arguments">
            <summary>
            Arguments
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPAction.Service">
            <summary>
            UPnP Service publishing the action.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPArgumentDirection">
            <summary>
            Argument direction
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPArgumentDirection.In">
            <summary>
            Input argument
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPArgumentDirection.Out">
            <summary>
            Output argument
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.UPnP.UPnPArgumentDirection.ReturnValue">
            <summary>
            Return value (also output argument)
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPArgument">
            <summary>
            UPnP Argument
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPArgument.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPArgument.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPArgument.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPArgument.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPArgument.RelatedStateVariable">
            <summary>
            Related State Variable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPArgument.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.IUPnPService">
            <summary>
            UPnP Service interface
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.Supports(System.String)">
            <summary>
            Checks how well the service supports a given service type.
            </summary>
            <param name="Type">Type</param>
            <returns>Support grade</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.InterpretServiceXml(Clayster.Library.Internet.UPnP.IUPnPDevice,System.Xml.XmlElement,System.String)">
            <summary>
            Interprets the device specifcation XML.
            </summary>
            <param name="Device">Device owning the service</param>
            <param name="Service">Device specification XML element.</param>
            <param name="BaseUrl">Base URL</param>
            <returns>If the device was updated</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.GetServiceVariable(System.String)">
            <summary>
            Gets a service variable from the service.
            </summary>
            <param name="Name">Name of service variable.</param>
            <returns>Service variable reference, if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.SubscribeToEvents(System.String,System.Int32@)">
            <summary>
            Subscribes to events from the service.
            </summary>
            <param name="CallbackUrl">Events will be sent to this URL. Events will be encoded into an XML document. 
            This XML document can be parsed by calling <see cref="M:Clayster.Library.Internet.UPnP.UPnPService.ParsePropertySet(System.Xml.XmlDocument)"/>.</param>
            <param name="TimeoutSeconds">Subscription Timeout, in seconds. The UPnP Service may update this value. Subscription updates must be done before this timeout occurs.</param>
            <returns>Subscription ID.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.UpdateSubscription(System.String,System.Int32@)">
            <summary>
            Updates an existing subscription to events from the service.
            </summary>
            <param name="SubscriptionId">Subscription ID. Is returned from a previous call to <see cref="M:Clayster.Library.Internet.UPnP.IUPnPService.SubscribeToEvents(System.String,System.Int32@)"/>.</param>
            <param name="TimeoutSeconds">Subscription Timeout, in seconds. The UPnP Service may update this value. Subscription updates must be done before this timeout occurs.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPService.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from an existing subscription to events from the service.
            </summary>
            <param name="SubscriptionId">Subscription ID. Is returned from a previous call to <see cref="M:Clayster.Library.Internet.UPnP.IUPnPService.SubscribeToEvents(System.String,System.Int32@)"/>.</param>
        </member>
        <member name="E:Clayster.Library.Internet.UPnP.IUPnPService.OnUpdated">
            <summary>
            Raised when the service has been updated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.Device">
            <summary>
            UPnP Device
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.ServiceType">
            <summary>
            Service Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.ServiceId">
            <summary>
            Service Id
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.ServiceDescriptionUrl">
            <summary>
            Service Description URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.ControlUrl">
            <summary>
            Control URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.EventUrl">
            <summary>
            Event URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.SpecMajorVersion">
            <summary>
            Specification Major Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.SpecMinorVersion">
            <summary>
            Specification Minor Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.Actions">
            <summary>
            Available actions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.StateVariables">
            <summary>
            Available state variables.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.Item(System.String)">
            <summary>
            Returns an action reference, given its name.
            </summary>
            <param name="Name">Action name.</param>
            <returns>Action reference, if found.</returns>
            <exception cref="T:System.NotSupportedException">Action not found on the service.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPService.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPService">
            <summary>
            UPnP Service
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.#ctor">
            <summary>
            UPnP Service
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.Supports(System.String)">
            <summary>
            Checks how well the service supports a given service type.
            </summary>
            <param name="Type">Type</param>
            <returns>Support grade</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.InterpretServiceXml(Clayster.Library.Internet.UPnP.IUPnPDevice,System.Xml.XmlElement,System.String)">
            <summary>
            Interprets the device specifcation XML.
            </summary>
            <param name="Device">Device owning the service</param>
            <param name="Service">Device specification XML element.</param>
            <param name="BaseUrl">Base URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.ContainsAction(System.String)">
            <summary>
            Checks if an action is available on the service.
            </summary>
            <param name="ActionName">Name of action.</param>
            <returns>If the action is available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.GetServiceVariable(System.String)">
            <summary>
            Gets a service variable from the service.
            </summary>
            <param name="Name">Name of service variable.</param>
            <returns>Service variable reference, if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.GetBestService(System.String)">
            <summary>
            Get best device class for a given device type.
            </summary>
            <param name="Type">Service type.</param>
            <returns>Best match</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.InterpretServiceDescriptionXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Inteprets the Service Description XML.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Url">URL of the XML Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.SubscribeToEvents(System.String,System.Int32@)">
            <summary>
            Subscribes to events from the service.
            </summary>
            <param name="CallbackUrl">Events will be sent to this URL. Events will be encoded into an XML document. 
            This XML document can be parsed by calling <see cref="M:Clayster.Library.Internet.UPnP.UPnPService.ParsePropertySet(System.Xml.XmlDocument)"/>.</param>
            <param name="TimeoutSeconds">Subscription Timeout, in seconds. The UPnP Service may update this value. Subscription updates must be done before this timeout occurs.</param>
            <returns>Subscription ID.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.UpdateSubscription(System.String,System.Int32@)">
            <summary>
            Updates an existing subscription to events from the service.
            </summary>
            <param name="SubscriptionId">Subscription ID. Is returned from a previous call to <see cref="M:Clayster.Library.Internet.UPnP.UPnPService.SubscribeToEvents(System.String,System.Int32@)"/>.</param>
            <param name="TimeoutSeconds">Subscription Timeout, in seconds. The UPnP Service may update this value. Subscription updates must be done before this timeout occurs.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from an existing subscription to events from the service.
            </summary>
            <param name="SubscriptionId">Subscription ID. Is returned from a previous call to <see cref="M:Clayster.Library.Internet.UPnP.UPnPService.SubscribeToEvents(System.String,System.Int32@)"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPService.ParsePropertySet(System.Xml.XmlDocument)">
            <summary>
            Parses an UPnP property set document.
            </summary>
            <param name="Xml">XML with property set.</param>
            <returns>State variable values in property set document.</returns>
        </member>
        <member name="E:Clayster.Library.Internet.UPnP.UPnPService.OnUpdated">
            <summary>
            Raised when the service has been updated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.Device">
            <summary>
            UPnP Device
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.ServiceType">
            <summary>
            Service Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.ServiceId">
            <summary>
            Service ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.ServiceDescriptionUrl">
            <summary>
            Service Description URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.ControlUrl">
            <summary>
            Control URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.EventUrl">
            <summary>
            Event URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.SpecMajorVersion">
            <summary>
            Specification Major Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.SpecMinorVersion">
            <summary>
            Specification Minor Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.Actions">
            <summary>
            Available actions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.StateVariables">
            <summary>
            Available state variables.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPService.Item(System.String)">
            <summary>
            Returns an action reference, given its name.
            </summary>
            <param name="Name">Action name.</param>
            <returns>Action reference, if found.</returns>
            <exception cref="T:System.NotSupportedException">Action not found on the service.</exception>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPIcon">
            <summary>
            UPnP Icon
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPIcon.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPIcon.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.Device">
            <summary>
            UPnP Device
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.MimeType">
            <summary>
            MIME Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.Url">
            <summary>
            Full URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPIcon.Depth">
            <summary>
            Bit depth
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.IUPnPDevice">
            <summary>
            UPnP Device interface
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.Supports(System.String)">
            <summary>
            Checks how well the device supports a given device type.
            </summary>
            <param name="Type">Type</param>
            <returns>Support grade</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.CheckIfUpdated(System.String)">
            <summary>
            Checks if the location has been updated, or needs to be updated (if cache expired).
            </summary>
            <param name="Location">Location URL</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.InterpretLocationXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Inteprets the Location XML.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Url">URL of the XML Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.InterpretDeviceXml(System.Xml.XmlElement,System.String)">
            <summary>
            Interprets the device specifcation XML.
            </summary>
            <param name="Device">Device specification XML element.</param>
            <param name="BaseUrl">Base URL</param>
            <returns>If the device was updated</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.GetService(System.Type)">
            <summary>
            Returns the first service implementing a specific interface.
            </summary>
            <param name="ServiceInterface">Interface</param>
            <returns>First service implementing <paramref name="ServiceInterface"/>. Null is returned if no matching services are found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.IUPnPDevice.GetServices(System.Type)">
            <summary>
            Returns the first service implementing a specific interface.
            </summary>
            <param name="ServiceInterface">Interface</param>
            <returns>First service implementing <paramref name="ServiceInterface"/>. Null is returned if no matching services are found.</returns>
        </member>
        <member name="E:Clayster.Library.Internet.UPnP.IUPnPDevice.OnUpdated">
            <summary>
            Raised when the device has been updated (or any of its services, icons or embedded devices).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.Location">
            <summary>
            Location URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.UrlBase">
            <summary>
            URL Base
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.SpecMajorVersion">
            <summary>
            Specification Major Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.SpecMinorVersion">
            <summary>
            Specification Minor Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.DeviceType">
            <summary>
            Device Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.FriendlyName">
            <summary>
            Friendly Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.Manufacturer">
            <summary>
            Manufacturer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.ManufacturerURL">
            <summary>
            Manufacturer URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.ModelDescription">
            <summary>
            Model Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.ModelName">
            <summary>
            Model Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.ModelNumber">
            <summary>
            Model Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.ModelURL">
            <summary>
            Model URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.SerialNumber">
            <summary>
            Serial Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.UDN">
            <summary>
            Unicersal Description Number (UDN)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.UPC">
            <summary>
            Universal Product Code (UPC)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.PresentationUrl">
            <summary>
            Presentation URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.DlnaDoc">
            <summary>
            DLNA Doc version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.DlnaCapabilities">
            <summary>
            DLNA Capabilities
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.EmbeddedDevices">
            <summary>
            Embedded devices
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.Services">
            <summary>
            Services
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.Icons">
            <summary>
            Icons
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.IUPnPDevice.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.UPnP.UPnPDevice">
            <summary>
            Base class for UPnP Devices
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.#ctor">
            <summary>
            Base class for UPnP Devices
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.GetService(System.Type)">
            <summary>
            Returns the first service implementing a specific interface.
            </summary>
            <param name="ServiceInterface">Interface</param>
            <returns>First service implementing <paramref name="ServiceInterface"/>. Null is returned if no matching services are found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.GetServices(System.Type)">
            <summary>
            Returns the first service implementing a specific interface.
            </summary>
            <param name="ServiceInterface">Interface</param>
            <returns>First service implementing <paramref name="ServiceInterface"/>. Null is returned if no matching services are found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.Supports(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.UPnP.IUPnPDevice.Supports(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.CheckIfUpdated(System.String)">
            <summary>
            Checks if the Location description has been updated or not.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.InterpretLocationXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Inteprets the Location XML.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Url">URL of the XML Document</param>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.InterpretDeviceXml(System.Xml.XmlElement,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.UPnP.IUPnPDevice.InterpretDeviceXml(System.Xml.XmlElement,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.GetBestDevice(System.String,Clayster.Library.Internet.UPnP.UPnPDevice)">
            <summary>
            Get best device class for a given device type.
            </summary>
            <param name="Type">Device type.</param>
            <param name="Parent">Parent object.</param>
            <returns>Best match</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.GetBestDevice(System.String,Clayster.Library.Internet.SSDP.SsdpClient)">
            <summary>
            Get best device class for a given device type.
            </summary>
            <param name="Type">Device type.</param>
            <param name="Parent">Parent object.</param>
            <returns>Best match</returns>
        </member>
        <member name="M:Clayster.Library.Internet.UPnP.UPnPDevice.GetBestDevice(System.String,Clayster.Library.Internet.UPnP.UPnPDevice,Clayster.Library.Internet.SSDP.SsdpClient)">
            <summary>
            Get best device class for a given device type.
            </summary>
            <param name="Type">Device type.</param>
            <param name="ParentDevice">Parent device, if any.</param>
            <param name="ParentClient">Parent SSDP client, if root device.</param>
            <returns>Best match</returns>
        </member>
        <member name="E:Clayster.Library.Internet.UPnP.UPnPDevice.OnUpdated">
            <summary>
            Raised when the device has been updated (or any of its services, icons or embedded devices).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.Location">
            <summary>
            Location URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.UrlBase">
            <summary>
            URL Base
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.SpecMajorVersion">
            <summary>
            Specification Major Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.SpecMinorVersion">
            <summary>
            Specification Minor Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.DeviceType">
            <summary>
            Device Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.FriendlyName">
            <summary>
            Friendly Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.Manufacturer">
            <summary>
            Manufacturer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.ManufacturerURL">
            <summary>
            Manufacturer URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.ModelDescription">
            <summary>
            Model Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.ModelName">
            <summary>
            Model Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.ModelNumber">
            <summary>
            Model Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.ModelURL">
            <summary>
            Model URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.SerialNumber">
            <summary>
            Serial Number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.UDN">
            <summary>
            Unicersal Description Number (UDN)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.UPC">
            <summary>
            Universal Product Code (UPC)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.PresentationUrl">
            <summary>
            Presentation URL
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.DlnaDoc">
            <summary>
            DLNA Doc version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.DlnaCapabilities">
            <summary>
            DLNA Capabilities
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.Xml">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.EmbeddedDevices">
            <summary>
            Embedded devices
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.Services">
            <summary>
            Services
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.UPnP.UPnPDevice.Icons">
            <summary>
            Icons
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.ComplexType">
            <summary>
            Complex Type, defined in an XML Schema
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.ComplexType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.ComplexType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.ComplexType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.ComplexType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.ComplexType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.ComplexType.IsArray">
            <summary>
            If the type represents an array.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.AnyType">
            <summary>
            Any Type, returns unparsed XML.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.AnyType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.Element">
            <summary>
            Element schema definition
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.Element.ParseDefinition(Clayster.Library.Internet.WSDL.WsdlDocument)">
            <summary>
            Called when all types in a schema have been added to the <paramref name="Document"/>, 
            enabling parsing of cross-references.
            </summary>
            <param name="Document">WSDL document</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.Element.Parse(System.Xml.XmlElement,System.String)">
            <summary>
            Parses an XML Element from its schema definition.
            </summary>
            <param name="Response">XMl Element to parse.</param>
            <param name="SchemaInstancePrefix">Schema Instance namespace prefix used in response, or null if not available.</param>
            <returns>Parsed result.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.Element.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.Element.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            Encodes an object as a SOAP parameter.
            </summary>
            <param name="w">XML Output.</param>
            <param name="Value">Value to encode</param>
            <param name="ParameterName">Name of parameter to encode.</param>
            <param name="TargetNamespace">Target namespace</param>
            <returns>String representation of value.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.Element.GetMembers(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,Clayster.Library.Internet.WSDL.Schema.SchemaType}})">
            <summary>
            Gets members of a member defined using document/literal wrapped mode.
            
            For more information:
            http://www.ibm.com/developerworks/webservices/library/ws-whichwsdl/
            </summary>
            <param name="Parameters">List of parameters</param>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.Definition">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.Name">
            <summary>
            Element Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.LocalName">
            <summary>
            Local Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.LocalNameLower">
            <summary>
            Local Name (lower case)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.Nillable">
            <summary>
            If the element is nillable.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.MinOccurs">
            <summary>
            Minimum number of occurrances.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.MaxOccurs">
            <summary>
            Maximum number of occurrances.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.Wsdl">
            <summary>
            WSDL defining the schema.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.SchemaType">
            <summary>
            Schema Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.InputParameters">
            <summary>
            Input Parameters found in type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.Element.IsComplex">
            <summary>
            If the element contains complex type information.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Schema.SimpleType">
            <summary>
            Simple Type, defined in an XML Schema
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.InputParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.InputParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.ParseDefinition">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.ParseDefinition"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.IsSimpleSchemaType(System.String,Clayster.Library.Internet.WSDL.WsdlDocument)">
            <summary>
            Checks if a simple type is one of the predefined types in XML Schema.
            </summary>
            <param name="TypeName">Type name</param>
            <param name="Wsdl">WSDL Document containing the schema.</param>
            <returns>If the type is defined in XML Schema.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.Parse(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Parse(System.Xml.XmlElement,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.Parse(System.String)">
            <summary>
            Parses a text string according to the simple type definition.
            </summary>
            <param name="Text">Text representation of value to parse.</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.ParseSimpleType(System.String,System.String,System.Object@)">
            <summary>
            Parses a simple type, given its string representation and string value.
            </summary>
            <param name="TypeName">Type Name</param>
            <param name="Response">XML Response</param>
            <param name="Parsed">Parsed response</param>
            <returns>If the type was recognized.</returns>
            <exception cref="T:Clayster.Library.Internet.WSDL.WsdlException">If the type was recognized, byt the data could not be parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.ParseXmlSchemaSimpleType(System.String,System.String,System.Object@)">
            <summary>
            Parses a simple type as defined by the XML schema.
            </summary>
            <param name="LocalTypeName">Local type name.</param>
            <param name="StringValue">String value.</param>
            <param name="Parsed">Parsed value, if successful, null otherwise.</param>
            <returns>If able to parse the value.</returns>
            <exception cref="T:Clayster.Library.Internet.WSDL.WsdlParsingException">If an error occurs in the parsing.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.Encode(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Schema.SimpleType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.Schema.SchemaType.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SimpleType.Ancestor">
            <summary>
            Ancestor
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Schema.SimpleType.Item(System.String)">
            <summary>
            Returns a enumerated value given its symbol name.
            </summary>
            <param name="Key">Symbol name of enumerated value.</param>
            <returns>String</returns>
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="Key"/> not found.</exception>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParseListen">
            <summary>
            Converts an XML Document to a WSDL Document. Also adds a line listener to the print output on the WSDL
            document, so that web method calls can be monitored. Responses to method calls are not parsed.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParseListen.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts an XML Document to a WSDL Document. Also adds a line listener to the print output on the WSDL
            document, so that web method calls can be monitored. Responses to method calls are not parsed.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParseListen.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParseListen.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParseListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParse">
            <summary>
            Converts an XML Document to a WSDL Document. Responses to method calls are not parsed.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParse.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts an XML Document to a WSDL Document. Responses to method calls are not parsed.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParse.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParse.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlNoParse.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlListen">
            <summary>
            Converts an XML Document to a WSDL Document. Also adds a line listener to the print output on the WSDL
            document, so that web method calls can be monitored.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlListen.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts an XML Document to a WSDL Document. Also adds a line listener to the print output on the WSDL
            document, so that web method calls can be monitored.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlListen.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlListen.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.ScriptExtensions.WsdlListen.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlException">
            <summary>
            Base class for WSDL Exceptions
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlException.#ctor(System.String)">
            <summary>
            Base class for WSDL Exceptions.
            </summary>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlException.#ctor(System.String,System.Exception)">
            <summary>
            Base class for WSDL Exceptions.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlParsingException">
            <summary>
            Base class for WSDL (output) parsing exceptions.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlParsingException.#ctor(System.String)">
            <summary>
            Base class for WSDL (output) parsing exceptions.
            </summary>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlParsingException.#ctor(System.String,System.Exception)">
            <summary>
            Base class for WSDL (output) parsing exceptions.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="InnerException">Inner exception.</param>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlMethod">
            <summary>
            Collection of operations forming part of a web service method.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Evaluate(System.Object[],Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.EvaluateDefinition(Clayster.Library.Math.Variables,Clayster.Library.Math.ExpressionNodes.ExpressionNode)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.Differentiate(System.String,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Differentiate(System.String,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.Copy">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMethod.GetExecutionContext">
            <summary>
            <see cref="M:Clayster.Library.Math.Interfaces.ILambdaExpression.GetExecutionContext"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.Service">
            <summary>
            WSDL Service
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.NrParameters">
            <summary>
            Number of parameters in the input messages of the mehod.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.ParametersConsistent">
            <summary>
            If the parameters are equal in all input messages of all operation bindings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.ParameterNames">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.ParameterTypes">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMethod.ParameterCount">
            <summary>
            <see cref="P:Clayster.Library.Math.Interfaces.ILambdaExpression.ParameterNames"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlPart">
            <summary>
            WSDL Message Part
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlPart.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlPart.Parse(System.Xml.XmlElement,System.String)">
            <summary>
            Parses a part of an XML response.
            </summary>
            <param name="Response">XML Element</param>
            <param name="SchemaInstancePrefix">Schema Instance namespace prefix used in response, or null if not available.</param>
            <returns>Parsed response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlPart.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            Encodes the message as a SOAP message.
            </summary>
            <param name="w">XML Output</param>
            <param name="Value">Object to encode</param>
            <param name="ParameterName">Parameter name.</param>
            <param name="TargetNamespace">Target namespace</param>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Name">
            <summary>
            Name of part (parameter name)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Element">
            <summary>
            Element in schema defining input parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Type">
            <summary>
            Name of type (if simple type)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPart.ParameterCount">
            <summary>
            Parameter Count
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlMessage">
            <summary>
            WSDL Message
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMessage.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMessage.Parse(Clayster.Library.Internet.HTTP.HttpResponse)">
            <summary>
            Parses an HTTP Response.
            </summary>
            <param name="Response">Response</param>
            <returns>Parsed response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMessage.Parse(System.Xml.XmlDocument)">
            <summary>
            Parses an XML Response.
            </summary>
            <param name="Response">Response</param>
            <returns>Parsed response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMessage.Parse(System.Xml.XmlElement)">
            <summary>
            Parses an XML Response.
            </summary>
            <param name="Root">XML Element beging the root of the response.</param>
            <returns>Parsed response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlMessage.Encode(System.Xml.XmlWriter,System.Object,System.String,System.String)">
            <summary>
            Encodes the message as a SOAP message.
            </summary>
            <param name="w">XML Output</param>
            <param name="Value">Object to encode</param>
            <param name="ParameterName">Parameter name.</param>
            <param name="TargetNamespace">Target namespace</param>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.Name">
            <summary>
            Name of message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.Parts">
            <summary>
            Parts
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.PartCount">
            <summary>
            Part count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.Parameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlMessage.ParameterCount">
            <summary>
            Part count.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Http.HttpInputOperationMode">
            <summary>
            WSDL HTTP Input Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Http.HttpInputOperationMode.UrlEncoded">
            <summary>
            URL encoded (GET)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Http.HttpInputOperationMode.Form">
            <summary>
            Form (POST)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Http.HttpInputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Http.HttpOutputOperationMode">
            <summary>
            WSDL HTTP Output Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Http.HttpOutputOperationMode.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Http.HttpOutputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Http.WsdlHttpOperationBinding">
            <summary>
            WSDL HTTP Operation Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlOperationBinding">
            <summary>
            WSDL Operation Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlOperationBinding.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Evaluate(System.Object[])">
            <summary>
            Evaluates the operation.
            </summary>
            <param name="Parameters">Input parameters</param>
            <returns>Result</returns>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Binding">
            <summary>
            Binding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperationBinding.PortType">
            <summary>
            Port Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Name">
            <summary>
            Name of operation
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Http.WsdlHttpOperationBinding.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Http.WsdlHttpOperationBinding.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Http.WsdlHttpOperationBinding.Input">
            <summary>
            Input operation mode.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Http.WsdlHttpOperationBinding.Output">
            <summary>
            Output operation mode.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap12.Soap12InputOperationMode">
            <summary>
            WSDL SOAP 1.2 Input Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap12.Soap12InputOperationMode.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap12.Soap12InputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap12.Soap12OutputOperationMode">
            <summary>
            WSDL SOAP 1.2 Output Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap12.Soap12OutputOperationMode.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap12.Soap12OutputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding">
            <summary>
            WSDL SOAP 1.2 Operation Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding.SoapAction">
            <summary>
            SOAP Action
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding.Input">
            <summary>
            Input operation mode.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12OperationBinding.Output">
            <summary>
            Output operation mode.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap.SoapInputOperationMode">
            <summary>
            WSDL SOAP Input Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap.SoapInputOperationMode.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap.SoapInputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap.SoapOutputOperationMode">
            <summary>
            WSDL SOAP Output Operation mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap.SoapOutputOperationMode.Literal">
            <summary>
            Literal
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.Soap.SoapOutputOperationMode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding">
            <summary>
            WSDL SOAP Operation Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding.Evaluate(System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlOperationBinding.Evaluate(System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding.SoapAction">
            <summary>
            SOAP Action
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding.Style">
            <summary>
            Style
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding.Input">
            <summary>
            Input operation mode.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap.WsdlSoapOperationBinding.Output">
            <summary>
            Output operation mode.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlOperation">
            <summary>
            WSDL Operation
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlOperation.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.PortType">
            <summary>
            Port Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.Name">
            <summary>
            Name of binding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.Documentation">
            <summary>
            Documentation.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.Input">
            <summary>
            Input message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlOperation.Output">
            <summary>
            Output message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlPortType">
            <summary>
            WSDL Port
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlPortType.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Name">
            <summary>
            Name of binding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Binding">
            <summary>
            Binding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Item(System.String)">
            <summary>
            Gets an operation given its name.
            </summary>
            <param name="Name">Name of operation</param>
            <returns>WSDL Operation object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If operation name not found.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlPortType.Operations">
            <summary>
            Available operations.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Http.WsdlHttpBinding">
            <summary>
            WSDL HTTP Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlBinding">
            <summary>
            WSDL Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)">
            <summary>
            Creates a corresponding Operation Binding object.
            </summary>
            <param name="E">XML Definition</param>
            <param name="Wsdl">WSDL Document</param>
            <param name="Binding">Binding object</param>
            <param name="Port">Port</param>
            <returns>Operation binding object</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlBinding.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.PortType">
            <summary>
            Port Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Name">
            <summary>
            Name of binding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Location">
            <summary>
            Location address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Item(System.String)">
            <summary>
            Gets an operation given its name.
            </summary>
            <param name="Name">Name of operation</param>
            <returns>WSDL Operation object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If operation name not found.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlBinding.Operations">
            <summary>
            Available operations.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Http.WsdlHttpBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Http.WsdlHttpBinding.Verb">
            <summary>
            HTTP Method
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12Binding">
            <summary>
            WSDL SOAP 1.2 Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12Binding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap12.WsdlSoap12Binding.Transport">
            <summary>
            SOAP 1.2 Transport
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.Soap.WsdlSoapBinding">
            <summary>
            WSDL SOAP Binding
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.Soap.WsdlSoapBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)">
            <summary>
            <see cref="M:Clayster.Library.Internet.WSDL.WsdlBinding.CreateOperationBinding(System.Xml.XmlElement,Clayster.Library.Internet.WSDL.WsdlDocument,Clayster.Library.Internet.WSDL.WsdlBinding,Clayster.Library.Internet.WSDL.WsdlPortType)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.Soap.WsdlSoapBinding.Transport">
            <summary>
            SOAP Transport
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.ScriptExtensions.Wsdl">
            <summary>
            Converts an XML Document to a WSDL Document.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.Wsdl.#ctor(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            Converts an XML Document to a WSDL Document.
            </summary>
            <param name="Parameter">Parameter</param>
            <param name="Expression">Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.Wsdl.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.EvaluateFunction(System.Object,Clayster.Library.Math.Variables)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.ScriptExtensions.Wsdl.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)">
            <summary>
            <see cref="M:Clayster.Library.Math.ExpressionNodes.Functions.FunctionSingleScalarParameter.CreateInstance(Clayster.Library.Math.ExpressionNodes.ExpressionNode,Clayster.Library.Math.Expression)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.ScriptExtensions.Wsdl.FunctionName">
            <summary>
            <see cref="P:Clayster.Library.Math.ExpressionNodes.Functions.Function.FunctionName"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlDocument">
            <summary>
            WSDL Document
            </summary>
            <example>
            SL:=Wsdl(HttpGet("http://www1.sl.se/realtidws/?wsdl"));
            Service:=SL.RealTimeService;
            </example>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceWsdl">
            <summary>
            http://schemas.xmlsoap.org/wsdl/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSoap">
            <summary>
            http://schemas.xmlsoap.org/wsdl/soap/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSoap12">
            <summary>
            http://schemas.xmlsoap.org/wsdl/soap12/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceHttp">
            <summary>
            http://schemas.xmlsoap.org/wsdl/http/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSoapEncoding">
            <summary>
            http://schemas.xmlsoap.org/soap/encoding/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceMime">
            <summary>
            http://schemas.xmlsoap.org/wsdl/mime/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSchema">
            <summary>
            http://www.w3.org/2001/XMLSchema
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSchemaInstance">
            <summary>
            http://www.w3.org/2001/XMLSchema-instance
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSoapEnvelope">
            <summary>
            http://schemas.xmlsoap.org/soap/envelope/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.WSDL.WsdlDocument.NamespaceSoap12Envelope">
            <summary>
            http://www.w3.org/2003/05/soap-envelope
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            WSDL Document
            </summary>
            <param name="Xml">WSDL XML document</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.#ctor(System.Xml.XmlDocument,Clayster.Library.Math.ExpressionNodes.ExpressionNode)">
            <summary>
            WSDL Document
            </summary>
            <param name="Xml">WSDL XML document</param>
            <param name="ExpressionNode">Expression Node creating the WSDL Document object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.GetType(System.String)">
            <summary>
            Gets a type from the schema definition.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>Schema Type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.GetType(System.Type)">
            <summary>
            Gets a type from the schema definition.
            </summary>
            <param name="Type">Type</param>
            <returns>Schema Type</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.ContainsType(System.String)">
            <summary>
            Checks if a type is defined.
            </summary>
            <param name="TypeName">Type name</param>
            <returns>If defined in the schema.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.GetElement(System.String)">
            <summary>
            Gets an element from the schema definition.
            </summary>
            <param name="ElementName">Element Name</param>
            <returns>Element Definition</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LocalName(System.String)">
            <summary>
            Returns a local name (no name space prefix), given the full name.
            </summary>
            <param name="FullName">Full Name</param>
            <returns>Local Name</returns>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlDocument.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Xml">
            <summary>
            Original XML Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.XmlNamespaceManager">
            <summary>
            XML Namespace Manager for <see cref="P:Clayster.Library.Internet.WSDL.WsdlDocument.Xml"/>, containing root element namespaces and their
            corresponding prefixes.
            
            The following namespace prefixes will be defined, if not available in <see cref="P:Clayster.Library.Internet.WSDL.WsdlDocument.Xml"/>,
            or if different prefixes are used:
            
            soap: http://schemas.xmlsoap.org/wsdl/soap/
            soap12: http://schemas.xmlsoap.org/wsdl/soap12/
            http: http://schemas.xmlsoap.org/wsdl/http/
            soapenc: http://schemas.xmlsoap.org/soap/encoding/
            mime: http://schemas.xmlsoap.org/wsdl/mime/
            s: http://www.w3.org/2001/XMLSchema
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.SchemaPrefix">
            <summary>
            Prefix used for the XML Schema namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.WsdlPrefix">
            <summary>
            Prefix used for the WSDL namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.SoapPrefix">
            <summary>
            Prefix used for the SOAP namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Soap12Prefix">
            <summary>
            Prefix used for the SOAP 1.2 namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.HttpPrefix">
            <summary>
            Prefix used for the HTTP namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.SoapEncodingPrefix">
            <summary>
            Prefix used for the SOAP encoding namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.MimePrefix">
            <summary>
            Prefix used for the MIME namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.TargetNamespacePrefix">
            <summary>
            Prefix used for the target namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.TargetNamespace">
            <summary>
            Target namespace.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Item(System.String)">
            <summary>
            Returns a service or enumeration given its name.
            </summary>
            <param name="Service">Name of the service or enumeration.</param>
            <returns>WSDL Service or Simple Type (Enumeration) Object.</returns>
            /// <exception cref="T:System.IndexOutOfRangeException">If service or enumeration name not found.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Services">
            <summary>
            Available services.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.ParseOutput">
            <summary>
            If output of method calls should be parsed (true), or if the raw response (XML) should be returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Enumerations">
            <summary>
            Available enumerations.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Credentials">
            <summary>
            HTTP Credentials. null means no credentials will be provided if user authentication
            is requested by the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.Trusted">
            <summary>
            If the server certificate should be trusted automatically or not. Default value is false, meaning
            any server certificates will be validated and an exception will be thrown if the server certificate
            is not valid.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.AllowSoap">
            <summary>
            If SOAP is allowed or not. (true by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.AllowSoap12">
            <summary>
            If SOAP v1.2 is allowed or not. (true by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.AllowHttpGet">
            <summary>
            If HTTP GET is allowed or not. (true by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.AllowHttpPost">
            <summary>
            If HTTP POST is allowed or not. (true by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlDocument.LineListeners">
            <summary>
            Registered Line Listeners
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.WSDL.WsdlService">
            <summary>
            WSDL Service
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlService.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlService.GetBinding(System.String)">
            <summary>
            Gets a binding given its name.
            </summary>
            <param name="Name">Name of binding</param>
            <returns>WSDL Binding object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If binding name not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.WSDL.WsdlService.GetMethod(System.String)">
            <summary>
            Gets a method given its name.
            </summary>
            <param name="Name">Name of method</param>
            <returns>WSDL Operation object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If method name not found.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlService.Name">
            <summary>
            Service Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlService.Wsdl">
            <summary>
            WSDL Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlService.Bindings">
            <summary>
            Available bindings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlService.Methods">
            <summary>
            Available methods.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.WSDL.WsdlService.Item(System.String)">
            <summary>
            Gets a method from the service, given its name.
            </summary>
            <param name="MethodName">Method name.</param>
            <returns>Method object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If no such method exists.</exception>
        </member>
        <member name="T:Clayster.Library.Internet.XmlTransformationChain">
            <summary>
            Chain of XML Transformations
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServerComponent">
            <summary>
            Class managing XMPP Server Component communication, according to XEP-0114.
            
            See: http://xmpp.org/extensions/xep-0114.html
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppServerComponent.DefaultPort">
            <summary>
            Default XMPP Component-to-server port.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.GetComponentSpecificIqHandler(System.String,System.String)">
            <summary>
            This method is called when an IQ stanza is received, but is not recognized by any of the global IQ Handlers registered and retrieved by
            <see cref="M:Clayster.Library.Internet.XMPP.XmppServerComponent.GetIqHandler(System.String,System.String)"/>. This allows clients to create IQ stanza handlers that are only used by the corresponding component.
            
            By default, there are no component-specific IQ stanza handlers.
            </summary>
            <param name="LocalName">Local element name.</param>
            <param name="NameSpace">Element namespace.</param>
            <returns>IQ Stanza handler, if any, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.GetClientSpecificMessageHandler(System.String,System.String)">
            <summary>
            This method is called when a message stanza is received, but is not recognized by any of the global Message Handlers registered and retrieved by
            <see cref="M:Clayster.Library.Internet.XMPP.XmppServerComponent.GetMessageHandler(System.String,System.String)"/>. This allows clients to create Message stanza handlers that are only used by the corresponding component.
            
            By default, there are no component-specific Message stanza handlers.
            </summary>
            <param name="LocalName">Local element name.</param>
            <param name="NameSpace">Element namespace.</param>
            <returns>Message Stanza handler, if any, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.AddIqHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIncomingComponentIqEventHandler,System.String[])">
            <summary>
            Registers an IQ Stanza event handler.
            </summary>
            <param name="LocalName">Local name of the element.</param>
            <param name="NameSpace">Name space of the element.</param>
            <param name="Handler">IQ Set Stanza Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.AddComponentSpecificIqHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIncomingComponentIqEventHandler,System.String[])">
            <summary>
            Registers a Component Specific IQ Stanza event handler.
            </summary>
            <param name="LocalName">Local name of the element.</param>
            <param name="NameSpace">Name space of the element.</param>
            <param name="Handler">IQ Set Stanza Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.AddApplicationSpecificMessageHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppApplicationSpecificComponentMessageEventHandler,System.String[])">
            <summary>
            Registers an application specific message event handler for a particular type of object.
            </summary>
            <param name="LocalName">Local name of the element/command.</param>
            <param name="NameSpace">Name space of the element/command.</param>
            <param name="Handler">Application specific message Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.AddComponentSpecificApplicationMessageHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppApplicationSpecificComponentMessageEventHandler,System.String[])">
            <summary>
            Registers a component specific application message event handler.
            </summary>
            <param name="LocalName">Local name of the element/command.</param>
            <param name="NameSpace">Name space of the element/command.</param>
            <param name="Handler">Application specific message Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Class managing XMPP Server Component communication, according to XEP-0114.
            
            See: http://xmpp.org/extensions/xep-0114.html
            </summary>
            <param name="ComponentAddress">Component Address</param>
            <param name="Password">Password</param>
            <param name="ServerAddress">IP Address or host name.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.Open">
            <summary>
            Connects to the XMPP server.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a recipient.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <param name="Language">Optional Language. Can be the empty string.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendMessage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message to a recipient.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Subject">Subject</param>
            <param name="Message">Message to send.</param>
            <param name="Language">Optional Language. Can be the empty string.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendMessage(System.String,System.String,System.String,System.String,Clayster.Library.Internet.XMPP.MessageType)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <param name="Language">Optional Language. Can be the empty string.</param>
            <param name="MessageType">Message Type</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendMessage(System.String,System.String,System.String,System.String,System.String,Clayster.Library.Internet.XMPP.MessageType)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Subject">Subject</param>
            <param name="Message">Message to send.</param>
            <param name="Language">Optional Language. Can be the empty string.</param>
            <param name="MessageType">Message Type</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendMessage(System.String,System.String,System.String,System.String,Clayster.Library.Internet.XMPP.MessageType,System.String)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <param name="Language">Optional Language. Can be the empty string.</param>
            <param name="MessageType">Message Type</param>
            <param name="XmlMessage">XML to embedd in message.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SetPresence(System.String,Clayster.Library.Internet.XMPP.PresenceStatus)">
            <summary>
            Sets the presence of the client on the network.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Status">Presence status.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.PresenceProbe(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentPresenceResponseEventHandler,System.Object)">
            <summary>
            Sends a presence probe.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object to pass on to <paramref name="Callback"/> method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendPresenceSubscription(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentPresenceResponseEventHandler,System.Object)">
            <summary>
            Sends a presence subscription
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object to pass on to <paramref name="Callback"/> method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendPresenceUnsubscription(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentPresenceResponseEventHandler,System.Object)">
            <summary>
            Sends a presence unsubscription
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object to pass on to <paramref name="Callback"/> method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqGet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqGet(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="To">Optional to attribute.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqGet(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String,System.Boolean)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="To">Optional to attribute.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
            <param name="Priority">If it is a priority IQ stanza. If so, it skips any bandwidth limitation imposed by the maximum number of simultaneous IQ stanzas possible.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqSet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqSet(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqSet(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler,System.Object,System.String,System.Boolean)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
            <param name="Priority">If it is a priority IQ stanza. If so, it skips any bandwidth limitation imposed by the maximum number of simultaneous IQ stanzas possible.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqResult(System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Result.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Result.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqResult(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Result.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Result.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Id">ID of IQ Stanza to which the response is referring.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqError(System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Error.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Error.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.IqError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Error.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="Xml">XML to embedd into the IQ Error.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Id">ID of IQ Stanza to which the response is referring.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscovery(System.String,System.String,System.String)">
            <summary>
            Requests a list of services available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServicesReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Node">Optional Node parameter.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryCommands(System.String,System.String)">
            <summary>
            Requests a list of client service comamnds (XEP-0050) available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServicesReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryCommands(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client service commands (XEP-0050) available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServicesReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscovery(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client services available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServicesReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Node">Optional Node parameter.</param>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryItems(System.String,System.String)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryItems(System.String,System.String,System.String)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Node">Optional Node attribute.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryItems(System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryItemsEventHandler,System.Object)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.RequestServiceDiscoveryItems(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryItemsEventHandler,System.Object)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of Recipient</param>
            <param name="Node">Optional Node attribute.</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendApplicationSpecificMessage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an application specific messate to another client.
            </summary>
            <param name="CommandName">Local name of the command element containing the command to send.</param>
            <param name="Namespace">Namespace of the command.</param>
            <param name="XmlContent">XML Content of the command.</param>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Language">Optional language of the message. Can be the empty string.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServerComponent.SendApplicationSpecificMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an application specific messate to another client.
            </summary>
            <param name="Xml">XML fragment to send.</param>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Language">Optional language of the message. Can be the empty string.</param>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnError">
            <summary>
            Raised when an error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnConnected">
            <summary>
            Raised when the component has connected.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnClosed">
            <summary>
            Raised when the component is closed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnStateChange">
            <summary>
            Raised when the component changes state.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnStanzaError">
            <summary>
            Raised when a stanza error occurrs (regardless of type).
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnMessageStanzaError">
            <summary>
            Raised when a message stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnPresenceStanzaError">
            <summary>
            Raised when a presence stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnIqStanzaError">
            <summary>
            Raised when a IQ stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnMessageReceived">
            <summary>
            Raised when an incoming message has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnPresenceReceived">
            <summary>
            Raised when an incoming presence has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServicesReceived">
            <summary>
            Raised when a service list has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnServiceDiscoveryItemsReceived">
            <summary>
            Raised when a list of entity items has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnGetSoftwareVersion">
            <summary>
            Event raised when external clients wants to know the version of the current component.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnGetServices">
            <summary>
            Event raised when external clients wants to know the services supported by the current component.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnGetServiceItems">
            <summary>
            Event raised when external clients wants to know the service items supported by the current component.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppServerComponent.OnRosterChange">
            <summary>
            Event raised when a change to the roster has occurred.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.Id">
            <summary>
            ID of session.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.From">
            <summary>
            Server name, as reported by the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.MajorVersion">
            <summary>
            XMPP Major version.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.MinorVersion">
            <summary>
            XMPP Minor version.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.ComponentAddress">
            <summary>
            Component Address.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.ServerAddress">
            <summary>
            XMPP Server address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.Port">
            <summary>
            Port number to connect to. (Default = 5275).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.Tag">
            <summary>
            Tag object. This property can be used to tag information to the client. It is not used
            in the internal workings of XmppServerComponent.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.State">
            <summary>
            Component State.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerHeartBeats">
            <summary>
            If Heart Beats should be output to line listeners or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.LineListenerEndWrite">
            <summary>
            If End Write events should be output to line listeners or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.IsEncrypted">
            <summary>
            If communication is being encrypted or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServerComponent.RemoteCertificate">
            <summary>
            Certificate used by the XMPP Server, if communication is encrypted, null otherwise.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServerComponent.WriteItem">
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormReportedReference">
            <summary>
            Represents a reported reference within an XMPP Form Page.
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPart">
            <summary>
            Abstract base class for parts of an XMPP Form layout.
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormText">
            <summary>
            Represents a text within an XMPP Form Page.
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormText.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormFieldReference">
            <summary>
            Represents a field reference within an XMPP Form Page.
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormFieldReference.Variable">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormSection">
            <summary>
            Contains a section in an XMPP data form page (XEP-0141).
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage">
            <summary>
            Contains an XMPP data form page (XEP-0141).
            
            http://xmpp.org/extensions/xep-0141.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.FieldReferences">
            <summary>
            Field References
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.Text">
            <summary>
            Text on the page or section.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.Sections">
            <summary>
            Sections on the page, or sub-sections in a section. The property <see cref="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.HasSections"/> contains information if sub-sections are defined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.HasSections">
            <summary>
            If the page/section has sections or subsections defined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.ReportedReference">
            <summary>
            If a reported reference exists on the page/section.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Layout.XmppDataFormPage.Parts">
            <summary>
            All parts of the page/section in order.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRegexValidation">
            <summary>
            Regex Field Validation, according to XEP-0122
            
            http://xmpp.org/extensions/xep-0122.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormFieldValidation">
            <summary>
            Abstract base class for XMPP data form field validation rules (XEP-0122).
            
            http://xmpp.org/extensions/xep-0122.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormFieldValidation.Parse(System.String)">
            <summary>
            Parses a string according to the data type of the field.
            </summary>
            <param name="s">String representation of data type.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormFieldValidation.DataTypeXml">
            <summary>
            XML Data Type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormFieldValidation.DataType">
            <summary>
            Type corresponding to <see cref="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormFieldValidation.DataTypeXml"/>, according to http://xmpp.org/registrar/xdv-datatypes.html
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRegexValidation.RegularExpression">
            <summary>
            Regular expression
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRangeValidation">
            <summary>
            Range Field Validation, according to XEP-0122
            
            http://xmpp.org/extensions/xep-0122.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRangeValidation.MinString">
            <summary>
            Minimum value, as string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRangeValidation.MaxString">
            <summary>
            Maximum value, as string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRangeValidation.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormRangeValidation.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormOpenValidation">
            <summary>
            Open Field Validation, according to XEP-0122
            
            http://xmpp.org/extensions/xep-0122.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.Validation.XmppDataFormBasicValidation">
            <summary>
            Basic Field Validation, according to XEP-0122
            
            http://xmpp.org/extensions/xep-0122.html
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppDataFieldOption">
            <summary>
            Contains an XMPP data field option (XEP-0004).
            
            http://xmpp.org/extensions/xep-0004.html
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppDataFieldOption.Label">
            <summary>
            Optional human readable version of the option value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppDataFieldOption.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType">
            <summary>
            Data Field Type.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.Boolean">
            <summary>
            The field enables an entity to gather or provide an either-or choice between two options. The default value is "false".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.Fixed">
            <summary>
            The field is intended for data description (e.g., human-readable text such as "section" headers) rather than data gathering 
            or provision. The <value/> child SHOULD NOT contain newlines (the \n and \r characters); instead an application SHOULD 
            generate multiple fixed fields, each with one <value/> child.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.Hidden">
            <summary>
            The field is not shown to the form-submitting entity, but instead is returned with the form. The form-submitting entity SHOULD NOT 
            modify the value of a hidden field, but MAY do so if such behavior is defined for the "using protocol".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.JidMulti">
            <summary>
            The field enables an entity to gather or provide multiple Jabber IDs. Each provided JID SHOULD be unique (as determined by 
            comparison that includes application of the Nodeprep, Nameprep, and Resourceprep profiles of Stringprep as specified in XMPP Core), 
            and duplicate JIDs MUST be ignored. 
            
            Note: Data provided for fields of type "jid-single" or "jid-multi" MUST contain one or more valid Jabber IDs, where validity is determined 
            by the addressing rules defined in XMPP Core (see the Data Validation section below).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.JidSingle">
            <summary>
            The field enables an entity to gather or provide a single Jabber ID. 
            
            Note: Data provided for fields of type "jid-single" or "jid-multi" MUST contain one or more valid Jabber IDs, where validity is determined 
            by the addressing rules defined in XMPP Core (see the Data Validation section below).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.ListMulti">
            <summary>
            The field enables an entity to gather or provide one or more options from among many. A form-submitting entity chooses one or more 
            items from among the options presented by the form-processing entity and MUST NOT insert new options. The form-submitting entity 
            MUST NOT modify the order of items as received from the form-processing entity, since the order of items MAY be significant.
            
             Note: The <option/> elements in list-multi and list-single fields MUST be unique, where uniqueness is determined by the value of the 'label'
             attribute and the XML character data of the <value/> element (i.e., both must be unique).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.ListSingle">
            <summary>
            The field enables an entity to gather or provide one option from among many. A form-submitting entity chooses one item from among 
            the options presented by the form-processing entity and MUST NOT insert new options. 
            
             Note: The <option/> elements in list-multi and list-single fields MUST be unique, where uniqueness is determined by the value of the 'label' 
             attribute and the XML character data of the <value/> element (i.e., both must be unique).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.TextMulti">
            <summary>
            The field enables an entity to gather or provide multiple lines of text. 
            
            Note: Data provided for fields of type "text-multi" SHOULD NOT contain any newlines (the \n and \r characters). Instead, the application
            SHOULD split the data into multiple strings (based on the newlines inserted by the platform), then specify each string as the XML character 
            data of a distinct <value/> element. Similarly, an application that receives multiple <value/> elements for a field of type "text-multi" 
            SHOULD merge the XML character data of the value elements into one text block for presentation to a user, with each string separated by a 
            newline character as appropriate for that platform.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.TextPrivate">
            <summary>
            The field enables an entity to gather or provide a single line or word of text, which shall be obscured in an interface 
            (e.g., with multiple instances of the asterisk character).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.TextsSingle">
            <summary>
            The field enables an entity to gather or provide a single line or word of text, which may be shown in an interface. This field type 
            is the default and MUST be assumed if a form-submitting entity receives a field type it does not understand.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType.Unknown">
            <summary>
            Unrecognized type.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldMode">
            <summary>
            How the field was reported.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldMode.Field">
            <summary>
            Form Field
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldMode.Reported">
            <summary>
            Reported Fields (table header)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldMode.Item">
            <summary>
            Item fields (table cells)
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.XmppDataField">
            <summary>
            Contains an XMPP data field (XEP-0004).
            
            http://xmpp.org/extensions/xep-0004.html
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ToString(Clayster.Library.Internet.XMPP.DataForms.XmppDataFieldType)">
            <summary>
            Returns the XML string representing the field type, acconrding to XEP-0004.
            </summary>
            <param name="FieldType">Field Type</param>
            <returns>XML string representing the field type, according to XEP-0004.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ReportedHeader">
            <summary>
            Associated header field, if any. If none, null is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Var">
            <summary>
            Variable
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Required">
            <summary>
            If the field is required or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Options">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Header">
            <summary>
            <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Label"/> if available, otherwise <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Var"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.DescriptionSingleString">
            <summary>
            Description as a single string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ValidationRule">
            <summary>
            If a field validation rule exists, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ListRangeMin">
            <summary>
            If defined, provides the smallest amount of options that can be selected, according to XEP-0122.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ListRangeMax">
            <summary>
            If defined, provides the largest amount of options that can be selected, according to XEP-0122.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.PostBack">
            <summary>
            If a post-back should be performed if the value of this field is changed by the user, according to xep-0000-DynamicForms.xml
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.ReadOnly">
            <summary>
            If the parameter should be read-only.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.NotSame">
            <summary>
            If the field contains more than one value on the back-end.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.HasError">
            <summary>
            If an error is logged on the parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.Error">
            <summary>
            Error message logged on the parameter. Is available if <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataField.HasError"/> is true.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType">
            <summary>
            Data Form Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType.Cancel">
            <summary>
            The form-submitting entity has cancelled submission of data to the form-processing entity.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType.Form">
            <summary>
            The form-processing entity is asking the form-submitting entity to complete a form.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType.Result">
            <summary>
            The form-processing entity is returning data (e.g., search results) to the form-submitting entity, or the data is a generic data set.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType.Submit">
            <summary>
            The form-submitting entity is submitting data to the form-processing entity. The submission MAY include fields 
            that were not provided in the empty form, but the form-processing entity MUST ignore any fields that it does not understand.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.DataForms.XmppDataFormType.Unknown">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm">
            <summary>
            Contains an XMPP data form (XEP-0004).
            
            http://xmpp.org/extensions/xep-0004.html
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.#ctor(System.Xml.XmlElement)">
            <summary>
            XMPP Data form.
            </summary>
            <param name="DataForm">x element, with namespace jabber:x:data, according to XEP-0004</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.ContainsField(System.String)">
            <summary>
            Checks if a variable is present in the form.
            </summary>
            <param name="Var">Variable name.</param>
            <returns>If present in the form.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Type">
            <summary>
            Data Form Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Items">
            <summary>
            Item fields (table cells). Contains an array of records, each record is an array of fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Reported">
            <summary>
            Reported Fields (table header)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Ordered">
            <summary>
            All fields from <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Fields"/>, <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Items"/> and <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Reported"/>, in the 
            order they are repotred in the form.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Instructions">
            <summary>
            Instructions
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Title">
            <summary>
            Title.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Pages">
            <summary>
            Pages on the form, if any. The property <see cref="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.HasPages"/> contains information if pages are defined in the form or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.HasPages">
            <summary>
            If the form has pages defined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.DataForms.XmppDataForm.Item(System.String)">
            <summary>
            Returns the field definition, given its variable name.
            </summary>
            <param name="Var">Field variable name.</param>
            <returns>Field definition if found, null if not.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppItem">
            <summary>
            Contains information about a Node Item.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Contains information about a Node Item.
            </summary>
            <param name="Jid">JID</param>
            <param name="Node">Node</param>
            <param name="Name">Name</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppItem.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppItem.Jid">
            <summary>
            JID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppItem.Node">
            <summary>
            Node
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs">
            <summary>
            Event arguments used in Software Version callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs.Jid">
            <summary>
            JID of client sending the information.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs.Os">
            <summary>
            OS
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventArgs.State">
            <summary>
            State object used in original call.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetSoftwareVersionEventArgs">
            <summary>
            Event arguments for events raised when clients ask the current client for its Software Version.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetSoftwareVersionEventArgs.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetSoftwareVersionEventArgs.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetSoftwareVersionEventArgs.Os">
            <summary>
            OS
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventArgs">
            <summary>
            Event arguments used in Service Discovery Items Request callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventArgs.Jid">
            <summary>
            JID of client sending the information.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventArgs.Items">
            <summary>
            Service Discovery Items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventArgs.State">
            <summary>
            State object used in original call.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs">
            <summary>
            Event arguments used in Service discovery callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs.Jid">
            <summary>
            JID of client sending the information.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs.Identities">
            <summary>
            Identities
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs.Items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventArgs.State">
            <summary>
            State object used in original call.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventArgs">
            <summary>
            Event arguments used in Service discovery request callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventArgs.Add(System.String)">
            <summary>
            Adds a feature to the list of services supported.
            </summary>
            <param name="Feature">Feature to add.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventArgs.Add(Clayster.Library.Internet.XMPP.XmppIdentity)">
            <summary>
            Adds an identity to the list of services supported.
            </summary>
            <param name="Identity">Identity to add.</param>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventArgs.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventArgs.Identities">
            <summary>
            Identities
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryItemsEventArgs">
            <summary>
            Event arguments used in Service discovery item request callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryItemsEventArgs.Items">
            <summary>
            Service Discovery Items.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppVCardEventArgs">
            <summary>
            Event arguments used in vCard request callback methods.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppVCardEventArgs.Jid">
            <summary>
            JID of client sending the information.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppVCardEventArgs.VCard">
            <summary>
            vCard. If not found, this property will be null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppVCardEventArgs.State">
            <summary>
            State object used in original call.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetVCardEventArgs">
            <summary>
            Event arguments for events raised when clients ask the current client for a vCard.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppGetVCardEventArgs.VCard">
            <summary>
            vCard
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XsltTransformation">
            <summary>
            Class representing an XSLT transformation.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.EchoServer">
            <summary>
            Simple Echo Server
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Christian Falk
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketBinary">
            <summary>
            Class handling a binary socket based server protocol.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Class handling a binary socket based server protocol.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Class handling a binary socket based server protocol.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="SendBufferSize">Socket transmission buffer size.</param>
            <param name="ReceiveBufferSize">Socket reception buffer size.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class handling a binary socket based server protocol.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class handling a binary socket based server protocol.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="SendBufferSize">Socket transmission buffer size.</param>
            <param name="ReceiveBufferSize">Socket reception buffer size.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            Method called when a client connection has been accepted.
            </summary>
            <param name="State">Basic state object representing the connection.</param>
            <returns>ClientState object for the connection.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.IsSocketConnected(System.Net.Sockets.Socket)">
            <summary>
            Checks if a socket is connected, polls the active connection and works better than 
            just asking socket.Connected.
            </summary>
            <remarks>
            Author: Christian Falk
            </remarks>
            <param name="socket">The socket to ask for connection state.</param>
            <returns>True if the socket is connected, or false if it's not connected or null.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.ClientClosed(System.Net.Sockets.Socket,System.Object)">
            <summary>
            Method called when a client connection has been closed.
            </summary>
            <param name="ClientSocket">Client socket representing the connection.</param>
            <param name="ClientState">State object for the connection.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            Method called when binary data has been received from the client.
            </summary>
            <param name="Buffer">Buffer containing received data.</param>
            <param name="NrRead">Number of bytes read.</param>
            <param name="State">State object</param>
            <returns>true if the server should continue to read data from the client.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.ServerSocketBinary.OnAccept">
            <summary>
            Event raised when a client connection has been accepted.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.ServerSocketBinary.OnReceiveBinary">
            <summary>
            Event raised when binary data has been received from a client.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.ServerSocketBinary.OnClientClosed">
            <summary>
            Event raised when a client connection is closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.ClientConnectionCount">
            <summary>
            Client connection count.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.InputBufferSize">
            <summary>
            Input buffer size.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.SendBufferSize">
            <summary>
            Get/Set the receive buffer size for new connections. <see cref="F:System.Net.Sockets.SocketOptionName.SendBuffer"/>
            Set to zero to use default.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.ReceiveBufferSize">
            <summary>
            Get/Set the receive buffer size for new connections. <see cref="F:System.Net.Sockets.SocketOptionName.SendBuffer"/>
            Set to zero to use default.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.AddressList">
            <summary>
            Address list of host.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.HostName">
            <summary>
            Name of host.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.Aliases">
            <summary>
            Aliases used by the host.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.Ssl">
            <summary>
            If the server is in SSL/TLS mode or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.ServerCertificateValidationCallback">
            <summary>
            Verifies the remote SSL/TLS certificate used for authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.Port">
            <summary>
            Listening port number.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketBinary.State">
            <summary>
            State object for a client connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.#ctor(System.Net.Sockets.Socket,System.Net.Sockets.Socket,System.Int32,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,Clayster.Library.Internet.ServerSocketBinary)">
            <summary>
            State object for a client connection.
            </summary>
            <param name="ServerSocket">Server socket</param>
            <param name="ClientSocket">Client socket</param>
            <param name="BufferSize">Buffer size</param>
            <param name="Ssl">If communication is to be done using SSL (or TLS).</param>
            <param name="RemoteCertificateValidationCallback">If a customized certificate validation method is to be used.</param>
            <param name="Server">Server object managing the communication state object.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.BeginRead(System.AsyncCallback)">
            <summary>
            Starts an asynchronous read operation on the socket.
            </summary>
            <param name="ReceiveCallback">Callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.EndRead(System.IAsyncResult)">
            <summary>
            Ends an asynchronous read operation.
            </summary>
            <param name="ar">Asynchronous state object.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.Send(System.Byte[])">
            <summary>
            Sends data back to the client. If data is currently being sent, the output data is queued.
            </summary>
            <param name="Data">Data to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.SendSynchronous(System.Byte[],System.Boolean)">
            <summary>
            Sends data back to the client in a synchronous manner.
            </summary>
            <param name="Data">Data to send.</param>
            <param name="SilenceMode">If the server should enter silence mode for the particular client.
            This means that all events are queued, and sent to the client when silence mode is ended.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.EndSilence">
            <summary>
            Ends silence mode.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.ChangeToTls">
            <summary>
            Change connection to TLS
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketBinary.State.BeginChangeToTls(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Starts changing the connection to TLS.
            </summary>
            <param name="CallbackMethod">Callback method to call when the authentication process has completed.</param>
            <param name="State">State object to pass on to <paramref name="CallbackMethod"/>.</param>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.ServerSocket">
            <summary>
            Server socket
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.ClientSocket">
            <summary>
            Client socket
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.Stream">
            <summary>
            Stream object
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.SslStream">
            <summary>
            SSL Stream. Available after TLS Negotiation has been performed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.ClientCertificate">
            <summary>
            Client Certificate if found.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.ServerCertificate">
            <summary>
            Server Certificate if used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.OutputStream">
            <summary>
            Output Stream (i.e. iether <see cref="P:Clayster.Library.Internet.ServerSocketBinary.State.SslStream"/> if in SSL/TLS mode, or <see cref="P:Clayster.Library.Internet.ServerSocketBinary.State.Stream"/> if not.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.Ssl">
            <summary>
            If the connection is done using SSL/TLS.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.ClientState">
            <summary>
            Client state, as visible to applications using the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.BufferSize">
            <summary>
            Buffer size
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.Port">
            <summary>
            Port number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketBinary.State.Buffer">
            <summary>
            Buffer
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.EchoServer.DefaultPort">
            <summary>
            Default port (7)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EchoServer.#ctor">
            <summary>
            Simple Echo Server
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EchoServer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Simple Echo Server
            </summary>
            <param name="Port">Port number</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
        </member>
        <member name="M:Clayster.Library.Internet.EchoServer.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.EchoServer.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.EchoServer.EchoDelay">
            <summary>
            The delay between the receive and the echo send. In milliseconds.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.FTP.FtpClient">
            <summary>
            FTP Client
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Freddy Jimenez
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.FTP.FtpClient.DefaultPort">
            <summary>
            Default port for FTP Clients (21)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.Int32)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="StartFolder">Starting folder.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="StartFolder">Starting folder.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.String,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="UserName">User name to use.</param>
            <param name="Password">Password to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="UserName">User name to use.</param>
            <param name="Password">Password to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="StartFolder">Starting folder.</param>
            <param name="UserName">User name to use.</param>
            <param name="Password">Password to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            FTP Client
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="StartFolder">Starting folder.</param>
            <param name="UserName">User name to use.</param>
            <param name="Password">Password to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.ListFiles">
            <summary>
            Gets a list of files in the current folder.
            </summary>
            <returns>Array of file names.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.ListFolders">
            <summary>
            Gets a list of folder in the current folder.
            </summary>
            <returns>Array of folder names.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.DeleteFile(System.String)">
            <summary>
            Deletes a file in the current folder.
            </summary>
            <param name="FileName">File name</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.DownloadFile(System.String)">
            <summary>
            Downloads a file from the current folder.
            </summary>
            <param name="FileName">Name of the file to download.</param>
            <returns>Binary representation of the file.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.DecodeFile(System.String,System.Byte[])">
            <summary>
            Decodes a file, using <see cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="FileName">Name of the file downloaded.</param>
            <param name="Data">Binary representation of the file.</param>
            <returns>Decoded file.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.GetFileTimestamp(System.String)">
            <summary>
            Gets the timestamp of a file in the current folder.
            </summary>
            <param name="FileName">Name of the file.</param>
            <returns>Timestamp of the file.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.GetFileSize(System.String)">
            <summary>
            Gets the size (in bytes) of a file in the current folder.
            </summary>
            <param name="FileName">Name of the file.</param>
            <returns>Size (in bytes) of the file.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.RenameFile(System.String,System.String)">
            <summary>
            Rename a file in the current folder.
            </summary>
            <param name="OldFileName">Old File name</param> 
            <param name="NewFileName">New File name</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.DeleteDirectory(System.String)">
            <summary>
            Delete a directory in the current folder.
            </summary>
            <param name="DirectoryName">Directory name</param>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpClient.MakeDirectory(System.String)">
            <summary>
            Make a directory in the current folder.
            </summary>
            <param name="DirectoryName">Directory name</param>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpClient.Host">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpClient.Port">
            <summary>
            Port number used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpClient.UserName">
            <summary>
            User name if authentication is required.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpClient.Password">
            <summary>
            Password if authentication is required.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpClient.Folder">
            <summary>
            Current folder
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.FTP.FtpException">
            <summary>
            Base class of all FTP Exceptions.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.FTP.FtpException.#ctor(System.Net.FtpStatusCode,System.String)">
            <summary>
            Base class of all FTP Exceptions.
            </summary>
            <param name="Code">FTP Status Code</param>
            <param name="Message">Exception message</param>
        </member>
        <member name="P:Clayster.Library.Internet.FTP.FtpException.Code">
            <summary>
            FTP Status Code
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlForm">
            <summary>
            Handles interaction with a Form stored in an HTML Page.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.#ctor(Clayster.Library.Internet.HTTP.HttpSocketClient,Clayster.Library.Internet.HTTP.HttpResponse,System.String)">
            <summary>
            Handles interaction with a Form stored in an HTML Page.
            </summary>
            <param name="Client">Client used in form communication.</param>
            <param name="Response">HTTP Response containing HTML Form.</param>
            <param name="FormFolder">Folder from where response was fetched.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.#ctor(Clayster.Library.Internet.HTTP.HttpSocketClient,Clayster.Library.Internet.HTML.HtmlDocument,System.String)">
            <summary>
            Handles interaction with a Form stored in an HTML Page.
            </summary>
            <param name="Client">Client used in form communication.</param>
            <param name="Html">HTML containing form.</param>
            <param name="FormFolder">Folder from where response was fetched.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.#ctor(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,System.String)">
            <summary>
            Handles interaction with a Form stored in an HTML Page.
            </summary>
            <param name="Client">Client used in form communication.</param>
            <param name="Html">HTML containing form.</param>
            <param name="FormFolder">Folder from where response was fetched.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.POST">
            <summary>
            Posts the contents of the form back to the server.
            </summary>
            <returns>Response form.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.POST(System.String)">
            <summary>
            Posts the contents of the form back to the server.
            </summary>
            <param name="Referer">Referer</param>
            <returns>Response form.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.GetParameterType(System.String)">
            <summary>
            Gets the type of a specific parameter.
            </summary>
            <param name="ParameterName">Name of parameter.</param>
            <returns>Type of parameter</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.Contains(System.String)">
            <summary>
            Checks if a parameter is available in the form.
            </summary>
            <param name="ParameterName">Name of parameter.</param>
            <returns>If available</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlForm.AssertParameter(System.String)">
            <summary>
            Asserts the existence of a parameter. If parameter not available, an exception is thrown.
            </summary>
            <param name="ParameterName">Name of parameter.</param>
            <exception cref="T:System.Exception">Thrown if a parameter with the given name does not exist.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.Client">
            <summary>
            Client used in form communication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.Html">
            <summary>
            HTML Document containing the form.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.Parameters">
            <summary>
            Parameters to send in the next POST.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.PostTo">
            <summary>
            Address to post to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.FormFolder">
            <summary>
            Form Folder.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.ParameterNames">
            <summary>
            Parameters found in form.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlForm.Item(System.String)">
            <summary>
            Access to parameter values.
            </summary>
            <param name="ParameterName">Parameter name.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlContentStatistics">
            <summary>
            HTML Text Content statistics.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.Export(System.Xml.XmlWriter)">
            <summary>
            Exports the content statistics to XML.
            </summary>
            <param name="w">XML Writer</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.Export">
            <summary>
            Exports the content statistics to XML.
            </summary>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.ExportToXmlString">
            <summary>
            Exports the content statistics to XML.
            </summary>
            <returns>XML String</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.MarkChild(System.String)">
            <summary>
            Marks children with a specific tag.
            </summary>
            <param name="TagName">Tag to mark.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlContentStatistics.GetChild(System.String)">
            <summary>
            Returns the statistics node for a given child (or the first child with the given tag name).
            </summary>
            <param name="TagName">Tag name of child.</param>
            <returns>First child with the given tag name.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlContentStatistics.Node">
            <summary>
            HTML Node corresponding to the statistics node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlContentStatistics.NonLinkCharacterCount">
            <summary>
            Number of text characters (displayable letters, not white space, not HTML Elements, attributes, etc.) outside
            of A-links.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlContentStatistics.LinkCharacterCount">
            <summary>
            Number of text characters (displayable letters, not white space, not HTML Elements, attributes, etc.) inside
            of A-links.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlContentStatistics.Depth">
            <summary>
            Depth of subtree spanned by node. 1=This element only, 2=Has children but children doesn't, etc.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlContentStatistics.Marked">
            <summary>
            If the node is marked or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardAdd">
            <summary>
            HPath Guard Add operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAdd.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Add operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAdd.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAdd.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardAdd.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardAttribute">
            <summary>
            HPath Guard Attribute operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAttribute.#ctor(System.String)">
            <summary>
            HPath Guard Attribute operator.
            </summary>
            <param name="AttributeName">Attribute name</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAttribute.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardDivide">
            <summary>
            HPath Guard Divide operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardDivide.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Divide operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardDivide.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardDivide.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardDouble">
            <summary>
            HPath Guard constant double
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardDouble.#ctor(System.Double)">
            <summary>
            HPath Guard constant double
            </summary>
            <param name="Value">Constant</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardDouble.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardEqual">
            <summary>
            HPath Guard Equal operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardEqual.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Equal operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardEqual.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardEqual.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardEqual.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Encoding.QuotedPrintable">
            <summary>
            Static class handling encoding and decoding of Quoted Printable text.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Encoding.QuotedPrintable.Decode(System.Byte[])">
            <summary>
            Decodes text encoded in Quoted Printable format.
            </summary>
            <param name="Data">Binary representation of encoded text.</param>
            <returns>Binary representation of decoded text.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Encoding.QuotedPrintable.Encode(System.Byte[],System.Boolean)">
            <summary>
            Encodes text to the Quoted Printable format.
            </summary>
            <param name="Data">Binary representation of uncoded text.</param>
            <param name="EncodeNewline">If New-line characters should be encoded or not.</param>
            <returns>Binary representation of encoded text.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardAnd">
            <summary>
            HPath Guard And operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAnd.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard And operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardAnd.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardExpression">
            <summary>
            Class representing an HPath Guard expression
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardExpression.#ctor(System.String)">
            <summary>
            Class representing an HPath Guard expression
            </summary>
            <param name="Expression">Guard expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardExpression.Matches(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            If the expression evaluates to true for the specified HTML Element.
            </summary>
            <param name="Element">HTML Element to use during evaluation.</param>
            <param name="NodeList">Node List</param>
            <returns>true if the expression evaluates to true for the specified HTML Element.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardGreater">
            <summary>
            HPath Guard Greater operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreater.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Greater operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreater.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreater.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardGreater.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardGreaterOrEqual">
            <summary>
            HPath Guard Greater or equal operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreaterOrEqual.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Greater or equal operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreaterOrEqual.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardGreaterOrEqual.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardGreaterOrEqual.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardLess">
            <summary>
            HPath Guard Less operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLess.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Less operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLess.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLess.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardLess.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardLessOrEqual">
            <summary>
            HPath Guard Less or equal operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLessOrEqual.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Less or equal operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLessOrEqual.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardLessOrEqual.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardLessOrEqual.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardMultiply">
            <summary>
            HPath Guard Multiplication operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardMultiply.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Multiplication operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardMultiply.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardMultiply.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardNegate">
            <summary>
            HPath Guard Negation operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator">
            <summary>
            Base class for all unary HPath Guard operators.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            Base class for all unary HPath Guard operators.
            </summary>
            <param name="Node">Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Operate(System.String)">
            <summary>
            Performs the operation on a string.
            </summary>
            <param name="Operand">String to operate on.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Operate(System.Double)">
            <summary>
            Performs the operation on a double.
            </summary>
            <param name="Operand">Double to operate on.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Operate(System.Boolean)">
            <summary>
            Performs the operation on a boolean value.
            </summary>
            <param name="Operand">Boolean value to operate on.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNegate.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Negation operator.
            </summary>
            <param name="Node">Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNegate.Operate(System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Operate(System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardNegate.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardNot">
            <summary>
            HPath Guard Not operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNot.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Not operator.
            </summary>
            <param name="Node">Operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNot.Operate(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardUnaryOperator.Operate(System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardNotEqual">
            <summary>
            HPath Guard Not equal operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNotEqual.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Not equal operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNotEqual.Operate(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardNotEqual.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardNotEqual.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardOr">
            <summary>
            HPath Guard Or operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardOr.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            HPath Guard Or operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardOr.Operate(System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardString">
            <summary>
            HPath Guard constant string operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardString.#ctor(System.String)">
            <summary>
            HPath Guard constant string operator
            </summary>
            <param name="Value">Constant value.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardString.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardNode.Evaluate(Clayster.Library.Internet.HTML.HtmlElement,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.Guard.GuardSubtract">
            <summary>
            Subtraction HPath Guard operator
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardSubtract.#ctor(Clayster.Library.Internet.HTML.Guard.GuardNode,Clayster.Library.Internet.HTML.Guard.GuardNode)">
            <summary>
            Subtraction HPath Guard operator
            </summary>
            <param name="Left">Left operand</param>
            <param name="Right">Right operand</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.Guard.GuardSubtract.Operate(System.Double,System.Double)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.Guard.GuardBinaryOperator.Operate(System.Double,System.Double)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.Guard.GuardSubtract.SupportsDouble">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.Guard.GuardOperator.SupportsDouble"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathAttribute">
            <summary>
            HPath Attribute
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathNode">
            <summary>
            Base class for all HPath Expression Nodes
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathNode.#ctor">
            <summary>
            Base class for all HPath Expression Nodes
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            Find HTML nodes from the current step.
            </summary>
            <param name="Node">HTML Node</param>
            <param name="Result">HTML Nodes matching the current HPath Node will be put in this list.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodes(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            Find HTML nodes matching this HPath Expression starting at this node.
            </summary>
            <param name="Node">HTML Node</param>
            <param name="Result">HTML Nodes matching the current HPath Node will be put in this list.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HPath.HPathNode.Next">
            <summary>
            Next HPath Node.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            HPath Attribute
            </summary>
            <param name="Name">Attribute name</param>
            <param name="CurrentLevelOnly">Current level only</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathAttribute.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathComment">
            <summary>
            HPath Comment
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathComment.#ctor(System.Boolean)">
            <summary>
            HPath Comment
            </summary>
            <param name="CurrentLevelOnly">Current level only</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathComment.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathCurrent">
            <summary>
            HPath Node representing the current HTML Element.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathCurrent.#ctor(System.Boolean,Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            HPath Node representing the current HTML Element.
            </summary>
            <param name="CurrentLevelOnly">Current level only.</param>
            <param name="Guard">Any guard expression.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathCurrent.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathElement">
            <summary>
            HPath Node representing an HTML Element.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathElement.#ctor(System.String,System.Boolean,Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            HPath Node representing an HTML Element.
            </summary>
            <param name="Name">HTML Element name.</param>
            <param name="CurrentLevelOnly">Current level only</param>
            <param name="Guard">Guard expression.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathElement.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathExpception">
            <summary>
            Base class for all HPath Expcetions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpception.#ctor(System.String)">
            <summary>
            Base class for all HPath Expcetions
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathExpressionExpception">
            <summary>
            Base class for all HPath Expression Expcetions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpressionExpception.#ctor(System.String,System.String)">
            <summary>
            Base class for all HPath Expression Expcetions
            </summary>
            <param name="Message">Exception message</param>
            <param name="Expression">Guard expression</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HPath.HPathExpressionExpception.Expression">
            <summary>
            Guard expression
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathParsingException">
            <summary>
            Base class for all HPath Parsing Expcetions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathParsingException.#ctor(System.String,System.Int32)">
            <summary>
            Base class for all HPath Parsing Expcetions
            </summary>
            <param name="Expression">Expression</param>
            <param name="Pos">Position</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathExecutionException">
            <summary>
            Base class for all HPath Execution Expcetions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExecutionException.#ctor(System.String)">
            <summary>
            Base class for all HPath Execution Expcetions
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathExpression">
            <summary>
            HPath Expression
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpression.#ctor(System.String)">
            <summary>
            HPath Expression
            </summary>
            <param name="Expression">HPath Expression</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpression.Parse(System.String)">
            <summary>
            Parses a string into an HPath Expression object.
            </summary>
            <param name="Expression">String representation of the epxression.</param>
            <returns>HPath Expression object.</returns>
            <exception cref="T:Clayster.Library.Internet.HTML.HPath.HPathParsingException">If unable to parse the expression</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpression.ParseCached(System.String)">
            <summary>
            Checks if the expression has been parsed previously. If so, returns the cached result. If not,
            parses the string and caches the result before returning it.
            </summary>
            <param name="Expression">HPath Expression</param>
            <returns>HPath Expression object.</returns>
            <exception cref="T:Clayster.Library.Internet.HTML.HPath.HPathParsingException">If unable to parse the expression</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathExpression.FindNodes(Clayster.Library.Internet.HTML.HtmlNode,System.Boolean)">
            <summary>
            Finds HTML Nodes based on the HPath Expression.
            </summary>
            <param name="Root">Starting HTML Node.</param>
            <param name="FirstOnly">If only the first found node should be returned (true) or all (false).</param>
            <returns>Nodes found.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HPath.HPathExpression.Expression">
            <summary>
            Original HPath Expression.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathParent">
            <summary>
            HPath Node representing the Parent node to the current HTML Node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathParent.#ctor(System.Boolean,Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            HPath Node representing the Parent node to the current HTML Node.
            </summary>
            <param name="ParentLevelOnly">Parent level only.</param>
            <param name="Guard">Guard expression.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathParent.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HPath.HPathText">
            <summary>
            HPath Text Node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathText.#ctor(System.Boolean)">
            <summary>
            HPath Text Node.
            </summary>
            <param name="CurrentLevelOnly">Current level only.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HPath.HPathText.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HPath.HPathNode.FindNodesThisStepOnly(Clayster.Library.Internet.HTML.HtmlNode,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlNode})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlAttribute">
            <summary>
            HTML Attribute node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlNode">
            <summary>
            Base class of all HTML Nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTML.HtmlNode.children">
            <summary>
            Available children. null if no children are available.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String)">
            <summary>
            <para>Searches the children of the node for an element with the given tag name.</para>
            </summary>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String)"/> instead.</para>
            <param name="TagName">Tag Name.</param>
            <returns>Reference to an HTML Element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String)">
            <summary>
            <para>Searches children of the node for an element with the given tag name having a specified
            attribute with a given value.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName">Name of the attribute to check.</param>
            <param name="AttributeValue">Value the attribute must have.</param>
            <returns>Reference to an HTML Element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the children of the node for an element with the given tag name having two specified
            attributes with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName1">Name of the first attribute to check.</param>
            <param name="AttributeValue1">Value the first attribute must have.</param>
            <param name="AttributeName2">Name of the second attribute to check.</param>
            <param name="AttributeValue2">Value the second attribute must have.</param>
            <returns>Reference to an HTML Element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the children of the node for an element with the given tag name having three specified
            attributes with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName1">Name of the first attribute to check.</param>
            <param name="AttributeValue1">Value the first attribute must have.</param>
            <param name="AttributeName2">Name of the second attribute to check.</param>
            <param name="AttributeValue2">Value the second attribute must have.</param>
            <param name="AttributeName3">Name of the third attribute to check.</param>
            <param name="AttributeValue3">Value the third attribute must have.</param>
            <returns>Reference to an HTML Element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String[],System.String[])">
            <summary>
            <para>Searches the children of the node for an element with the given tag name having three specified
            attributes with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeNames">Names of the attributes to check.</param>
            <param name="AttributeValues">Values the attributes must have.</param>
            <returns>Reference to an HTML Element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String)">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name to search for.</param>
            <returns>Array of HTML Elements.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name
            satisfying a guard expression.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,Clayster.Library.Internet.HTML.Guard.GuardExpression)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name to search for.</param>
            <param name="Expression">Guard expression to satisfy.</param>
            <returns>Array of HTML Elements satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String)">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name having a specified
            attribute with a given value.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName">Name of the attribute to check.</param>
            <param name="AttributeValue">Value the attribute must have.</param>
            <returns>Array of HTML Elements satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name having two specified
            attributes with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName1">Name of the first attribute to check.</param>
            <param name="AttributeValue1">Value the first attribute must have.</param>
            <param name="AttributeName2">Name of the second attribute to check.</param>
            <param name="AttributeValue2">Value the second attribute must have.</param>
            <returns>Array of HTML Elements satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name having three specified
            attributes with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeName1">Name of the first attribute to check.</param>
            <param name="AttributeValue1">Value the first attribute must have.</param>
            <param name="AttributeName2">Name of the second attribute to check.</param>
            <param name="AttributeValue2">Value the second attribute must have.</param>
            <param name="AttributeName3">Name of the third attribute to check.</param>
            <param name="AttributeValue3">Value the third attribute must have.</param>
            <returns>Array of HTML Elements satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String[],System.String[])">
            <summary>
            <para>Searches the children of the node for all elements with the given tag name having a set of attributes
            with given values.</para>
            <para>Note: This method call only searches the child nodes of the node. If you want to search the
            entire subtree below the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String[],System.String[])"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name.</param>
            <param name="AttributeNames">Names of the attributes to check.</param>
            <param name="AttributeValues">Values the attributes must have.</param>
            <returns>Array of HTML Elements satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.ForEach(Clayster.Library.Internet.HTML.ForEachMethod,System.Object[])">
            <summary>
            Loops through the node and all its children and calls a callback method for each node. The process
            can be interrupted by returning false from any of the callback method calls.
            </summary>
            <param name="Method">Method to call for each node.</param>
            <param name="Parameters">Parameters to pass on to the callback method.</param>
            <returns>true if the process was uninterrupted, false if it was interrupted.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement},Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            Searches for HTML Elements satisfying a set of conditions.
            </summary>
            <param name="TagName">Tag name of the elements.</param>
            <param name="AttributeNames">Array of attributes the elements must have. Can be null if no
            explicit attribute checks are to be performed.</param>
            <param name="AttributeValues">Array of attribute values the attribute names in <paramref name="AttributeNames"/>
            must have. Can be null if no explicit attribute checks are to be performed.</param>
            <param name="FirstOnly">If only the first element found should be returned (true) or if all elements found
            should be returned (false).</param>
            <param name="Result">Found elements are stored in this list.</param>
            <param name="Expression">Any guard expression the elements should satisfy. Can be null if no
            guard check is to be performed.</param>
            <returns>If the search was successful (true) or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name.</para>
            <para>Note: If you only want to search the child nodes of the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String)"/>
            instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name
            and satisfying a guard expression.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,Clayster.Library.Internet.HTML.Guard.GuardExpression)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="Expression">Guard expression elements must satisfy.</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name
            and a specified attribute with a certain value.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName">Name of the attribute elements must have.</param>
            <param name="AttributeValue">Required value of the attribute.</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name
            and two specified attributes with certain values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName1">Name of the first attribute elements must have.</param>
            <param name="AttributeValue1">Required value of the first attribute.</param>
            <param name="AttributeName2">Name of the second attribute elements must have.</param>
            <param name="AttributeValue2">Required value of the second attribute.</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name
            and three specified attributes with certain values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName1">Name of the first attribute elements must have.</param>
            <param name="AttributeValue1">Required value of the first attribute.</param>
            <param name="AttributeName2">Name of the second attribute elements must have.</param>
            <param name="AttributeValue2">Required value of the second attribute.</param>
            <param name="AttributeName3">Name of the third attribute elements must have.</param>
            <param name="AttributeValue3">Required value of the third attribute.</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String[],System.String[])">
            <summary>
            <para>Searches the entire subtree of nodes below this node for HTML Elements having a given Tag Name
            and a specified set of attributes with certain values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindChildElements(System.String,System.String[],System.String[])"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeNames">Array of requred attributes.</param>
            <param name="AttributeValues">Values of the corresponding attributes.</param>
            <returns>Array of elements satisfying the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for the first HTML Element having a given Tag Name.</para>
            <para>Note: If you only want to search the child nodes of the node, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String)"/>
            instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <returns>First element found satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for the first HTML Element having a given Tag Name
            and an attribute with a given value.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName">Name of the attribute the element must have.</param>
            <param name="AttributeValue">Required value of the attribute.</param>
            <returns>First element found satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for the first HTML Element having a given Tag Name
            and two attributes with given values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName1">Name of the first attribute the element must have.</param>
            <param name="AttributeValue1">Required value of the first attribute.</param>
            <param name="AttributeName2">Name of the second attribute the element must have.</param>
            <param name="AttributeValue2">Required value of the second attribute.</param>
            <returns>First element found satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Searches the entire subtree of nodes below this node for the first HTML Element having a given Tag Name
            and three attributes with given values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String,System.String,System.String,System.String,System.String,System.String)"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeName1">Name of the first attribute the element must have.</param>
            <param name="AttributeValue1">Required value of the first attribute.</param>
            <param name="AttributeName2">Name of the second attribute the element must have.</param>
            <param name="AttributeValue2">Required value of the second attribute.</param>
            <param name="AttributeName3">Name of the third attribute the element must have.</param>
            <param name="AttributeValue3">Required value of the third attribute.</param>
            <returns>First element found satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SearchSingleElement(System.String,System.String[],System.String[])">
            <summary>
            <para>Searches the entire subtree of nodes below this node for the first HTML Element having a given Tag Name
            and a set of attributes with given values.</para>
            <para>Note: If you only want to search the child nodes of the node, use 
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindSingleChildElement(System.String,System.String[],System.String[])"/> instead.</para>
            </summary>
            <param name="TagName">Tag Name</param>
            <param name="AttributeNames">Array of requred attributes.</param>
            <param name="AttributeValues">Values of the corresponding attributes.</param>
            <returns>First element found satisfying the search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SelectNodes(System.String)">
            <summary>
            Selects HTML Nodes from the subtree defined by this node using an HPath Expression.
            <seealso cref="T:Clayster.Library.Internet.HTML.HPath.HPathExpression"/>
            </summary>
            <param name="HPathExpression"><para>HPath Expression to use for selecting nodes.</para>
            <para>Note: The string will be placed in the HPath Parsing cache if not already found there.
            If you do not want the string to be stored in the cache, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SelectNodes(Clayster.Library.Internet.HTML.HPath.HPathExpression)"/>
            instead.</para></param>
            <returns>Array of nodes selected by the HPath Expression.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SelectNodes(Clayster.Library.Internet.HTML.HPath.HPathExpression)">
            <summary>
            Selects HTML Nodes from the subtree defined by this node using an HPath Expression.
            <seealso cref="T:Clayster.Library.Internet.HTML.HPath.HPathExpression"/>
            </summary>
            <param name="HPathExpression">HPath Expression to use for selecting nodes.</param>
            <returns>Array of nodes selected by the HPath Expression.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SelectSingleNode(System.String)">
            <summary>
            Selects the first HTML Node from the subtree defined by this node satisfying an HPath Expression.
            <seealso cref="T:Clayster.Library.Internet.HTML.HPath.HPathExpression"/>
            </summary>
            <param name="HPathExpression"><para>HPath Expression to use for selecting nodes.</para>
            <para>Note: The string will be placed in the HPath Parsing cache if not already found there.
            If you do not want the string to be stored in the cache, use <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SelectSingleNode(Clayster.Library.Internet.HTML.HPath.HPathExpression)"/>
            instead.</para></param>
            <returns>First node satisfying the HPath Expression, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.SelectSingleNode(Clayster.Library.Internet.HTML.HPath.HPathExpression)">
            <summary>
            Selects the first HTML Node from the subtree defined by this node satisfying an HPath Expression.
            <seealso cref="T:Clayster.Library.Internet.HTML.HPath.HPathExpression"/>
            </summary>
            <param name="HPathExpression">HPath Expression to use for selecting nodes.</param>
            <returns>First node satisfying the HPath Expression, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.FindElements(System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement})">
            <summary>
            Lists all HTML Elements found in the subtree defined by the node.
            </summary>
            <param name="Elements">Elements are stored in this list.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.RangeDeleted(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates how a deletion of text from the original HTML Text document affects another range
            in the same document.
            </summary>
            <param name="Start">Start position of the range being deleted.</param>
            <param name="Len">Length of the range being deleted.</param>
            <param name="Start2">Start position of the other range in the same document.</param>
            <param name="Len2">Length of the other range in the same document.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.Delete">
            <summary>
            Deletes the node and its subtree of nodes from the HTML Document and the original
            HTML Text Document.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.GetEnumerator">
            <summary>
            Gets an enumerator of the HTML Child Nodes of the current node.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator of the HTML Child Nodes of the current node.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlNode.GetContentStatistics">
            <summary>
            Gets content statistics for the node.
            </summary>
            <returns>Content statistics.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.HasChildren">
            <summary>
            If the element has children.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.Document">
            <summary>
            HTML Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.OuterStart">
            <summary>
            Starting position of the node, in the original HTML String.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.OuterLen">
            <summary>
            Number of characters (length) of the node, in the original HTML String.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml">
            <summary>
            Inner HTML string, i.e. HTML inside the node, excluding the node itself.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.OuterHtml">
            <summary>
            Outer HTML string, i.e. HTML inside the node, including the node itself.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.InnerText">
            <summary>
            Inner Text string, i.e. only text elements inside the node, excluding tags and their attributes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.InnerTextRecursive">
            <summary>
            Inner Text string, i.e. only text elements inside the node, excluding tags and their attributes,
            but including innser text in child elements.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlNode.HPathRootNode">
            <summary>
            Root node for use with HPath Expression.s
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlAttribute.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlAttribute.InnerHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlAttribute.Name">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlAttribute.Value">
            <summary>
            Value of attribute.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlAttribute.InnerText">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerText"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlComment">
            <summary>
            HTML Comment.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlComment.GetContentStatistics">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.GetContentStatistics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlComment.InnerHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlComment.Comment">
            <summary>
            Comment text.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlDocument">
            <summary>
            HTML Document.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.#ctor(System.String)">
            <summary>
            HTML Document.
            </summary>
            <param name="Text">HTML Text</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.#ctor(System.String,System.Boolean)">
            <summary>
            HTML Document.
            </summary>
            <param name="Text">HTML Text</param>
            <param name="AllowForbiddenNesting">If forbidden nesting is allowed or not. (Example: P tags inside of P tags.)</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.ExportToXml">
            <summary>
            Export document to XML.
            </summary>
            <returns>XML Document representing the HTML DOM.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetContentStatistics">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.GetContentStatistics"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetLinks">
            <summary>
            Gets an array of all available links.
            </summary>
            <returns>All available links.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetLinks(System.String)">
            <summary>
            Gets an array of available links of a given rel.
            </summary>
            <param name="Rel">rel</param>
            <returns>Links of rel <paramref name="Rel"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetMetas">
            <summary>
            Gets an array of all available metas.
            </summary>
            <returns>All available metas.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetMetas(System.String)">
            <summary>
            Gets an array of available metas of a given name.
            </summary>
            <param name="Name">Name</param>
            <returns>Metas of name <paramref name="Name"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetThumbnailMetas">
            <summary>
            Gets all thumbnail metas available in the page.
            </summary>
            <returns>Available thumbnail metas.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetThumbnailLinks">
            <summary>
            Gets all thumbnail links available in the page.
            </summary>
            <returns>Available thumbnail links.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetAppleTouchIcons">
            <summary>
            Gets all Apple touch icon links available in the page.
            </summary>
            <returns>Available Apple touch icon links.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetFaviconLinks">
            <summary>
            Gets all favicon-links available in the page.
            </summary>
            <returns>Available favicon links.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetShortcutLinks">
            <summary>
            Gets all shortcut-links available in the page.
            </summary>
            <returns>Available shortcut links.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetFaviconUrls(System.Boolean)">
            <summary>
            Gets available Favicon URLs.
            </summary>
            <param name="CheckRootFaviconIfNoLinks">If no favicons are found in the links, and this parameter is true
            the method will check the server if a favicon.ico file is present in the root folder. If so, that url
            will be returned.</param>
            <returns>Array of favicon urls.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDocument.GetSemanticInformation(System.String)">
            <summary>
            Extracts any semantic information stored as RDFa found in the document.
            
            Note: The method follows the procedure outlined here:
            http://www.w3.org/TR/rdfa-syntax/
            </summary>
            <param name="BaseUri">Base URI</param>
            <returns>Semantic information found</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.Url">
            <summary>
            Url from which the HTML Document is created.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.InnerHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.OuterHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.OuterHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.AllowForbiddenNesting">
            <summary>
            If forbidden nesting is allowed or not. (Example P tags inside P tags.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.HasForbiddenNesting">
            <summary>
            If forbidden nesting is found in the document. (Example P tags inside P tags.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.HtmlElement">
            <summary>
            The &lt;html> element. null if none.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.BodyElement">
            <summary>
            The &lt;body> element. null if none.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.HeadElement">
            <summary>
            The &lt;head> element. null if none.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.Title">
            <summary>
            Title of the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.WarningsFoundDuringParsing">
            <summary>
            Warning messages found during parsing of the HTML Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.HPathRootNode">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.HPathRootNode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDocument.ChildNodes">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlElement">
            <summary>
            Represents an HTML Element in an HTML Document.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.FindAttribute(System.String)">
            <summary>
            Performs a case insensitive search for an attribute.
            </summary>
            <param name="AttributeName">Case insensitive name of the attribute.</param>
            <returns>Attribute object if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.HasAttribute(System.String)">
            <summary>
            Checks if an attribute is available in the element. The name is case insensitive.
            </summary>
            <param name="AttributeName">Case insensitive name of attribute.</param>
            <returns>true if an attribute is available with the given name.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.SearchElements(System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement},Clayster.Library.Internet.HTML.Guard.GuardExpression)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.SearchElements(System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement},Clayster.Library.Internet.HTML.Guard.GuardExpression)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.FindElements(System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement})">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.FindElements(System.Collections.Generic.List{Clayster.Library.Internet.HTML.HtmlElement})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.ForEach(Clayster.Library.Internet.HTML.ForEachMethod,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.ForEach(Clayster.Library.Internet.HTML.ForEachMethod,System.Object[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.DeleteTagOnlyNotChildren">
            <summary>
            Deletes the element from the original HTML Document, without deleting the children. 
            The children are made children to the parent of the current element.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlElement.GetContentStatistics">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.GetContentStatistics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlElement.Name">
            <summary>
            Name of the element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlElement.InnerHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlElement.Attributes">
            <summary>
            Attributes available for the element.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlElement.ChildNodes">
            <summary>
            Array of child nodes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlElement.Item(System.String)">
            <summary>
            Performs a case insensitive search for an attribute, and returns its value.
            </summary>
            <param name="AttributeName">Name of the attribute.</param>
            <returns>Value of attribute if found, the empty string if not.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlException">
            <summary>
            Base class of all HTML Exceptions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlException.#ctor(System.String)">
            <summary>
            Base class of all HTML Exceptions
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlParsingException">
            <summary>
            Base class of all HTML Parsing Exceptions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlParsingException.#ctor(Clayster.Library.Internet.HTML.HtmlDocument,System.Int32)">
            <summary>
            Base class of all HTML Parsing Exceptions
            </summary>
            <param name="Doc">Original HTML Document.</param>
            <param name="Pos">Exception occurred at this position.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlParsingException.#ctor(Clayster.Library.Internet.HTML.HtmlDocument,System.Int32,System.Boolean)">
            <summary>
            Base class of all HTML Parsing Exceptions
            </summary>
            <param name="Doc">Original HTML Document.</param>
            <param name="Pos">Exception occurred at this position.</param>
            <param name="AddWarnings">If warnings are added to the message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlParsingException.#ctor(Clayster.Library.Internet.HTML.HtmlDocument,System.Int32,System.String)">
            <summary>
            Base class of all HTML Parsing Exceptions
            </summary>
            <param name="Doc">Original HTML Document.</param>
            <param name="Pos">Exception occurred at this position.</param>
            <param name="Message">Exception message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlParsingException.#ctor(Clayster.Library.Internet.HTML.HtmlDocument,System.Int32,System.String,System.Boolean)">
            <summary>
            Base class of all HTML Parsing Exceptions
            </summary>
            <param name="Doc">Original HTML Document.</param>
            <param name="Pos">Exception occurred at this position.</param>
            <param name="Message">Exception message.</param>
            <param name="AddWarnings">If warnings are added to the message.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlParsingException.Document">
            <summary>
            HTML Document.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlUnexpectedEndOfDocument">
            <summary>
            Exception thrown when an unexpected end of document occurred.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUnexpectedEndOfDocument.#ctor(Clayster.Library.Internet.HTML.HtmlDocument)">
            <summary>
            Exception thrown when an unexpected end of document occurred.
            </summary>
            <param name="Doc">HTML Document</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlUnexpectedEndOfDocument.Document">
            <summary>
            HTML Document.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.ForEachMethod">
            <summary>
            Delegate used for HTML Node Callback methods.
            </summary>
            <param name="Node">HTML Node</param>
            <param name="Parameters">Parameters</param>
            <returns>true if process should continue, false if not.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlText">
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlText.GetContentStatistics">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTML.HtmlNode.GetContentStatistics"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlText.InnerHtml">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerHtml"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlText.InnerText">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerText"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlText.InnerTextRecursive">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTML.HtmlNode.InnerTextRecursive"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlUtilities">
            <summary>
            Static class containing various HTML Utilities.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.RemoveSecondaryInformation(Clayster.Library.Internet.HTML.HtmlDocument)">
            <summary>
            Reduces and HTML Page and tries to return only "interesting" or principal information, i.e.
            the main information without banners, publicity, too much formatting, etc.
            </summary>
            <param name="Doc">HTML Document to reduce</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.RemoveSecondaryInformation(Clayster.Library.Internet.HTML.HtmlDocument,System.Boolean)">
            <summary>
            Reduces and HTML Page and tries to return only "interesting" or principal information, i.e.
            the main information without banners, publicity, too much formatting, etc.
            </summary>
            <param name="Doc">HTML Document to reduce</param>
            <param name="RemoveUninteresting">If Uninteresting HTML should also be removed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.Unescape(System.String)">
            <summary>
            Used to unescape strings encoded with the JavaScript function escape().
            </summary>
            <param name="s">Encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.Escape(System.String)">
            <summary>
            Used to escape strings equal to the JavaScript escape() function.
            </summary>
            <param name="s">String to be encoded</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.Decode(System.String)">
            <summary>
            Decodes text strings containing &amp;...; codes.
            </summary>
            <param name="s">String to decode.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.Decode(System.String,System.Boolean)">
            <summary>
            Decodes text strings containing &amp;...; codes.
            </summary>
            <param name="s">String to decode.</param>
            <param name="IncludeXml">If the 5 reserved XML &amp;-sequences are to be included (quot, amp, apos, lt, gt). Default=true.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlUtilities.Decode(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Decodes text strings containing &amp;...; codes.
            </summary>
            <param name="s">String to decode.</param>
            <param name="IncludeXml">If the 5 reserved XML &amp;-sequences are to be included (quot, amp, apos, lt, gt). Default=true.</param>
            <param name="Changed">If the string was changed.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication">
            <summary>
            Class enabling Basic Authentication in Web requests.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.#ctor(System.String,System.String)">
            <summary>
            Class enabling Basic Authentication in Web requests.
            </summary>
            <param name="UserName">User Name to use in authentication.</param>
            <param name="Password">Password to use in authentication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.CredentialDataUpdated(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.CredentialDataUpdated(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.UserName">
            <summary>
            User Name to use in authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.Password">
            <summary>
            Password to use in authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.MaxNrSteps">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.MaxNrSteps"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.BasicAuthentication.AuthorizationObject">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.AuthorizationObject"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpRangeResponse">
            <summary>
            Class representing a single ranged response.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpRangeResponse.#ctor(System.String,System.Byte[],Clayster.Library.Internet.HTTP.HttpHeader)">
            <summary>
            Class representing a single ranged response.
            </summary>
            <param name="Range">Range definition.</param>
            <param name="Data">Binary Data</param>
            <param name="Header">HTTP Header</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRangeResponse.Start">
            <summary>
            Starting position (from)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRangeResponse.End">
            <summary>
            Ending position (to). If not available in the response, it will be -1.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRangeResponse.Total">
            <summary>
            Total number of bytes of resource. If not available in the response, it will be -1.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRangeResponse.Data">
            <summary>
            Binary data read.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRangeResponse.Header">
            <summary>
            HTTP Header
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormParameters">
            <summary>
            Collection of HTML Form Parameters. These are MIME encoded using content type
            application/x-www-form-urlencoded.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.#ctor">
            <summary>
            Collection of HTML Form Parameters. These are MIME encoded using content type
            application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.#ctor(System.String)">
            <summary>
            Collection of HTML Form Parameters. These are MIME encoded using content type
            application/x-www-form-urlencoded.
            </summary>
            <param name="UrlEncodedNvp">String containing URL Encoded Name-value-pairs, i.e. the
            format defined for MIME Type application/x-www-form-urlencoded.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.Contains(System.String)">
            <summary>
            Checks if a parameter with a given name exists in the collection.
            </summary>
            <param name="Name">Parameter name</param>
            <returns>If a parameter with the given name exits or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.Remove(System.String)">
            <summary>
            Removes a parameter.
            </summary>
            <param name="Name">Parameter name.</param>
            <returns>If the parameter was found and removed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.Encode">
            <summary>
            Url Encodes the parameters.
            </summary>
            <returns>Url encoded version of the parameter set.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.GetMulticpleChoice(System.String)">
            <summary>
            Returns all values for a multiple choice parameter.
            </summary>
            <param name="ParameterName">Parameter name</param>
            <returns>Values found.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormParameters.Item(System.String)">
            <summary>
            Gets the value of a form parameter. If the parameter is not found, the empty string is returned.
            </summary>
            <param name="Name">Name of the form parameter.</param>
            <returns>Value of the form parameter. If the parameter is not found, the empty string is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParameters.Enum.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.OnRecordingTimeout">
            <summary>
            Delegate used for recording timeout events
            </summary>
            <param name="Xml">Generated XML</param>
            <param name="Tag">Tag object used to tag the recording</param>
            <param name="AuthorizationObject">Authorization object.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpCookie">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.#ctor(System.String,System.String)">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <param name="Name">Name of cookie.</param>
            <param name="Value">Value of cookie.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <param name="Name">Name of cookie.</param>
            <param name="Value">Value of cookie.</param>
            <param name="Path">Path</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <param name="Name">Name of cookie.</param>
            <param name="Value">Value of cookie.</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.#ctor(System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <param name="Name">Name of cookie.</param>
            <param name="Value">Value of cookie.</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
            <param name="Expires">Expires</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.#ctor(System.String,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Class representing a single HTTP Cookie.
            </summary>
            <param name="Name">Name of cookie.</param>
            <param name="Value">Value of cookie.</param>
            <param name="Path">Path</param>
            <param name="Domain">Domain</param>
            <param name="Expires">Expires</param>
            <param name="Comment">Comment</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpCookie.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Expires">
            <summary>
            Expires
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpCookie.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpSocketClient">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> (which is based on sockets) to perform communication, while 
            <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses a HttpWebRequest object. This removes any restrictions on 
            concurrent requests implicitly imposed on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.TelnetClient">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Karin Forsell, Freddy Jimenez
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetClient.DefaultTelnetPort">
            <summary>
            Default Telnet port (23)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Int32)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Encoding">Text encoding to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Boolean)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Ssl">If SSL/TLS is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL/TLS is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Int32,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL/TLS is to be used.</param>
            <param name="RemoteCertificateValidationCallback">Verifies the remote SSL certificate used for authentication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.#ctor(System.String,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Class handling Telnet client communication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Encoding">Text encoding to use.</param>
            <param name="Ssl">If SSL/TLS is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ChangeAddress(System.String,System.Int32)">
            <summary>
            Change address.
            </summary>
            <param name="Address">IP Address or port number.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ChangeAddress(System.String)">
            <summary>
            Change address.
            </summary>
            <param name="Address">IP Address or port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ChangeToTls">
            <summary>
            Change connection to TLS
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerMessage(System.String)">
            <summary>
            Records a message to registered line listeners.
            </summary>
            <param name="Message">Message to record.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerError(System.String)">
            <summary>
            Records an error message to registered line listeners.
            </summary>
            <param name="Message">Error Message to record.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.BufferOutputStart">
            <summary>
            Starts buffered output.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.BufferOutputEnd">
            <summary>
            Ends buffered output and sends any buffered output.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.AssertOpen">
            <summary>
            Asserts an open connection
            </summary>
            <exception cref="T:System.Exception">Thrown if the connection is not open.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.WriteLine">
            <summary>
            Writes an empty line to the server.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.WriteLine(System.String)">
            <summary>
            Writes a line of text to the server.
            </summary>
            <param name="s">Line of text to write.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.WriteLiteral(System.Byte[])">
            <summary>
            Writes a block of binary data to the server.
            </summary>
            <param name="Buffer">Block of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.WriteLiteral(System.Byte[],System.Text.Encoding)">
            <summary>
            Writes a block of binary data to the server.
            </summary>
            <param name="Buffer">Block of binary data.</param>
            <param name="Encoding">Text encoding to use for line listener logging purposes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            Records written data to registered line listeners.
            </summary>
            <param name="Id">Client ID</param>
            <param name="Data">Data written.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            Records read data to registered line listeners.
            </summary>
            <param name="Id">Client ID</param>
            <param name="Data">Data read.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerDataWritten(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            Records written data to registered line listeners.
            </summary>
            <param name="Id">Client ID</param>
            <param name="Data">Data written.</param>
            <param name="Encoding">Text encoding to use for line listener purposes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerDataRead(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            Records read data to registered line listeners.
            </summary>
            <param name="Id">Client ID</param>
            <param name="Data">Data read.</param>
            <param name="Encoding">Text encoding to use for line listener purposes.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadFromStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads binary data from the server.
            </summary>
            <param name="Buffer">Buffer to read to.</param>
            <param name="Offset">Start at this offset.</param>
            <param name="Count">Number of bytes to read</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadFromStream(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads binary data from the server.
            </summary>
            <param name="Buffer">Buffer to read to.</param>
            <param name="Offset">Start at this offset.</param>
            <param name="Count">Number of bytes to read</param>
            <param name="Encoding">Text encoding to use for line listener purposes.</param>
            <returns>Number of bytes read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadLiteral(System.Byte[])">
            <summary>
            Reads a block of binary data from the server.
            </summary>
            <param name="Buffer">Buffer to read to.</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadLine">
            <summary>
            Reads a line of text from the server.
            </summary>
            <returns>Line read.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadLine(System.Boolean)">
            <summary>
            Reads a line of text from the server.
            </summary>
            <returns>Line read.</returns>
            <param name="CheckForNegotiation">If a negotiation check should be performed first (true) or not (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadToEnd">
            <summary>
            Reads all available characters to a string.
            </summary>
            <returns>Read text</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.ReadToEnd(System.Boolean)">
            <summary>
            Reads all available characters to a string.
            </summary>
            <param name="CheckForNegotiation">If a negotiation check should be performed first (true) or not (false).</param>
            <returns>Read text</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.GetLineListeners">
            <summary>
            Gets an array of registered Line Listeners.
            </summary>
            <returns>Array of line listeners.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.CheckForNegotiation">
            <summary>
            Performs a Telnet negotiation check.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.TelnetClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnLiteralSent">
            <summary>
            Event raised when literal data has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnLiteralReceived">
            <summary>
            Event raised when literal data has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnRowSent">
            <summary>
            Event raised when a text row has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnRowReceived">
            <summary>
            Event raised when a text row has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnError">
            <summary>
            Event raised when an error has occurred.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnMessage">
            <summary>
            Event raised when a message has been recorded.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnOpening">
            <summary>
            Event raised when opening a connection.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnOpened">
            <summary>
            Event raised when a connection has been opened.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnClosing">
            <summary>
            Event raised when closing a connection.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.TelnetClient.OnClosed">
            <summary>
            Event raised when a connection has been closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.Encoding">
            <summary>
            Text encoding.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.ServerCertificateValidationCallback">
            <summary>
            Verifies the remote SSL/TLS certificate used for authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.Address">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.Ssl">
            <summary>
            If SSL or TLS is to be used or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.ReceiveTimeout">
            <summary>
            Reception timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.SendTimeout">
            <summary>
            Transmission timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.ConnectionTimeout">
            <summary>
            Connection timeout in milliseconds. 0 = Default timeout (controlled by the TCP layer).
            
            NOTE: If setting a connection timeout larger than the connection timeout set in the
            operating system TCP layer, the later will be used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.NewLine">
            <summary>
            New-line character sequence to use when transmitting rows.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.Port">
            <summary>
            Port number to use.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.Tag">
            <summary>
            Tag value. Can be used by the user of the object, to attach information to the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.IsOpen">
            <summary>
            If the connection is open.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.HasData">
            <summary>
            If data is available to be read.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.NoDelay">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.NoDelay"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.LineListeners">
            <summary>
            Registered linelisteners
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.TelnetClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpSocketClient.DefaultHttpPort">
            <summary>
            Default HTTP Port (80).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpSocketClient.DefaultHttpsPort">
            <summary>
            Default HTTPS Port (443)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a HttpWebRequest object. This removes any restrictions on concurrent requests implicitly imposed
            on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <param name="Address">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a HttpWebRequest object. This removes any restrictions on concurrent requests implicitly imposed
            on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Boolean)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a HttpWebRequest object. This removes any restrictions on concurrent requests implicitly imposed
            on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Ssl">If HTTPS (SSL/TLS) is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a HttpWebRequest object. This removes any restrictions on concurrent requests implicitly imposed
            on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If HTTPS (SSL/TLS) is to be used.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a HttpWebRequest object. This removes any restrictions on concurrent requests implicitly imposed
            on <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/>, but disallows use of NT Authentication.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If HTTPS (SSL/TLS) is to be used.</param>
            <param name="RemoteCertificateValidationCallback">Verifies the remote SSL certificate used for authentication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a WebRequest object.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Credentials">Any user credentials to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a WebRequest object.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If HTTPS is to be used or not.</param>
            <param name="Credentials">Any user credentials to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.#ctor(System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            HTTP Socket-based Client class. This differs from <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> in that this class
            uses a <see cref="T:Clayster.Library.Internet.TelnetClient"/> to perform communication, while <see cref="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient"/> uses
            a WebRequest object.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If HTTPS is to be used or not.</param>
            <param name="Credentials">Any user credentials to use.</param>
            <param name="RemoteCertificateValidationCallback">Verifies the remote SSL certificate used for authentication.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.RegisterRedirectionDatabase(Clayster.Library.Internet.HTTP.IRedirectionDatabase,System.Boolean)">
            <summary>
            Registers a redirection database. This interface will be used to persist permanant redirections, and to
            check URLs before fetching resources.
            </summary>
            <param name="RedirectionDatabase">Redirection Database</param>
            <param name="Lock">If the redirection database should be locked, and not be able to be changed for the rest of the run-time of the application.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.IsRedirectionDatabaseRegistered">
            <summary>
            True if redirection database is registered and locked, false otherwise
            </summary>
            <returns>True if redirection database is registered and locked, false otherwise</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.CheckRedirection(System.String@)">
            <summary>
            Checks if the URL has been redirected somewhere else previously.
            </summary>
            <param name="Url">URL to check. If redirected previously, the URL will be changed to the new URL.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.RegisterHttpCache(Clayster.Library.Internet.HTTP.IHttpCache,System.Boolean)">
            <summary>
            Registers an HTTP Cache. This interface will be used to cache HTTP responses, to avoid spamming remote resources.
            </summary>
            <param name="HttpCache">HTTP Cache</param>
            <param name="Lock">If the HTTP Cache should be locked, and not be able to be changed for the rest of the run-time of the application.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.IsHttpCacheRegistered">
            <summary>
            True if http cache is registered and locked, false otherwise.
            </summary>
            <returns>True if http cache is registered and locked, false otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.RegisterHttpProxyUse(System.Boolean,System.Boolean)">
            <summary>
            Defines how the client should handle web proxies in the network.
            </summary>
            <param name="CheckProxy">If automatic proxy detection should be used.</param>
            <param name="Lock">If the proxy settings should be locked.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.IsHttpProxyUseRegistered">
            <summary>
            True if http proxy use is locked, false otherwise.
            </summary>
            <returns>True if http proxy is locked, false otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.Terminate">
            <summary>
            Terminate system, does clean up
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.TryGetFromCache(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,Clayster.Library.Internet.HTTP.HttpResponse@)">
            <summary>
            Tries to get content from the HTTP cache.
            </summary>
            <param name="Url">URL of the content.</param>
            <param name="GetHeader">GET Header</param>
            <param name="MimeTypeOverride">If not empty, it will override the Content Type header in the response.</param>
            <param name="Response">Cached response if found, null otherwise.</param>
            <returns>If content was found in the HTTP cache.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.TryGetHeaderFromCache(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpResponse@)">
            <summary>
            Tries to get a header from the HTTP cache.
            </summary>
            <param name="Url">URL of the content.</param>
            <param name="GetHeader">GET Header</param>
            <param name="Response">Cached response if found (with only the header), null otherwise.</param>
            <returns>If header was found in the HTTP cache.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.AddToCache(System.String,Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[])">
            <summary>
            Adds a response to the Cache.
            </summary>
            <param name="Url">URL of the content.</param>
            <param name="Header">HTTP Header</param>
            <param name="Data">Data</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.ParseUrl(System.String,System.String@,System.String@,System.Int32@,System.Boolean@,Clayster.Library.Internet.HTTP.HttpCredentials@)">
            <summary>
            Parses an url into components. It also checks for proxies automatically, and returns proxy addresses where needed.
            </summary>
            <param name="Url">Url to parse.</param>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If SSL is used or not.</param>
            <param name="Credentials">Any credentials found in the url.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SerializeAccess(System.String)">
            <summary>
            Serializes access to a given resource. All access to this resource using <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> will
            be serialized, to decrease the load on the resource.
            
            Use <see cref="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UnserializeAccess(System.String)"/> to allow for parallell execution (default) again.
            </summary>
            <param name="Address">Address</param>
            <returns>true=<paramref name="Address"/> is registered. false=<paramref name="Address"/> was already registered.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UnserializeAccess(System.String)">
            <summary>
            Unserializes access to a given resource (default). All access to this resource using <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> 
            can again be made using parallell instances of <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/>.
            
            Use <see cref="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SerializeAccess(System.String)"/> to disallow parallell access to a resource using <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/>.
            </summary>
            <param name="Address">Address</param>
            <returns>true=<paramref name="Address"/> was unregistered. false=<paramref name="Address"/> was not registered.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.IsAccessSerialized(System.String)">
            <summary>
            If access to <paramref name="Address"/> is serialized or not.
            </summary>
            <param name="Address">Address</param>
            <returns>If access to <paramref name="Address"/> is serialized or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetCharacterSet(System.String)">
            <summary>
            Finds the specified character set, if available.
            </summary>
            <param name="CharacterSetName">Name of the character set.</param>
            <returns>Text encoding corresponding to the character set.</returns>
            <exception cref="T:System.Exception">If the character set was not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodeContent(System.String,System.Byte[])">
            <summary>
            Decodes content, encoded using some encoding mechanism (quoted printable, base64, binary).
            </summary>
            <param name="ContentTransferEncoding">Content Transfer Encoding</param>
            <param name="Data">Binary Data</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodeResponse(Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[],Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Decodes an HTTP Response.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Data">Binary content.</param>
            <param name="ResponseCode">HTTP Response Code</param>
            <returns>Decoded HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodeResponse(Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[],System.String,Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Decodes an HTTP Response.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Data">Binary content.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <param name="ResponseCode">HTTP Response Code</param>
            <returns>Decoded HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodeResponse(Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[],System.String,System.String,Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Decodes an HTTP Response.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Data">Binary content.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <param name="Url">Url of content.</param>
            <param name="ResponseCode">HTTP Response Code</param>
            <returns>Decoded HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String,System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GET(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">HTTP Headers to use in request.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String,System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.HEAD(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.String,System.String,System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <param name="Headers">Additional Headers</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.POST(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DELETE(System.String)">
            <summary>
            <para>Performs a DELETE to the server.</para>
            </summary>
            <param name="PathAndQuery">Resource to DELETE from.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DELETE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a DELETE to the server.</para>
            </summary>
            <param name="PathAndQuery">Resource to DELETE from.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DELETE(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            <para>Performs a DELETE to the server.</para>
            </summary>
            <param name="PathAndQuery">Resource to DELETE from.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="RecursionsLeft">Number of attempts left.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.PUT(System.String,System.Object)">
            <summary>
            Performs a PUT to the server.
            </summary>
            <param name="PathAndQuery">Resource to PUT to</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.PUT(System.String,System.String,System.Object)">
            <summary>
            Performs a PUT to the server.
            </summary>
            <param name="PathAndQuery">Resource to PUT to</param>
            <param name="Referer">Referer</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.PUT(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Performs a PUT to the server.
            </summary>
            <param name="PathAndQuery">Resource to PUT to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.PUT(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Int32)">
            <summary>
            Performs a PUT to the server.
            </summary>
            <param name="PathAndQuery">Resource to PUT to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <param name="RecursionsLeft">Number of recursions left.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.NOTIFY(System.String,System.Object)">
            <summary>
            Performs a NOTIFY to the server.
            </summary>
            <param name="PathAndQuery">Resource to NOTIFY to</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.NOTIFY(System.String,System.String,System.Object)">
            <summary>
            Performs a NOTIFY to the server.
            </summary>
            <param name="PathAndQuery">Resource to NOTIFY to</param>
            <param name="Referer">Referer</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.NOTIFY(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Performs a NOTIFY to the server.
            </summary>
            <param name="PathAndQuery">Resource to NOTIFY to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.NOTIFY(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object,System.Int32)">
            <summary>
            Performs a NOTIFY to the server.
            </summary>
            <param name="PathAndQuery">Resource to NOTIFY to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <param name="RecursionsLeft">Number of recursions left.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SUBSCRIBE(System.String)">
            <summary>
            Performs a SUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to SUBSCRIBE to</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SUBSCRIBE(System.String,System.String)">
            <summary>
            Performs a SUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to SUBSCRIBE to</param>
            <param name="Referer">Referer</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a SUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to SUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Performs a SUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to SUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <param name="RecursionsLeft">Number of recursions left.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UNSUBSCRIBE(System.String)">
            <summary>
            Performs a UNSUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to UNSUBSCRIBE to</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UNSUBSCRIBE(System.String,System.String)">
            <summary>
            Performs a UNSUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to UNSUBSCRIBE to</param>
            <param name="Referer">Referer</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UNSUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a UNSUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to UNSUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.UNSUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            Performs a UNSUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to UNSUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <param name="RecursionsLeft">Number of recursions left.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetObject(System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET, decoding the response
            and returning the decoded object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetResource(System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetResource(System.String,System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetResource(System.String,System.String,System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <param name="Accept">Accept header.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetResource(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <param name="Accept">Accept header.</param>
            <param name="Credentials">Credentials</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.GetResource(System.String,System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to get the object from.</param>
            <param name="MimeTypeOverride">If the MIME Type available in the header should be overridden.</param>
            <param name="Accept">Accept header.</param>
            <param name="AcceptLanguage">Languages to accept.</param>
            <param name="Credentials">Credentials</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.PostResource(System.String,System.String,System.Object)">
            <summary>
            <para>Posts an object to a server using HTTP. This is the same as performing a POST and
            returning the decoded response object.</para>
            <para>Objects are encoded and decoded using MIME Encoders and Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to post the object to.</param>
            <param name="Referer">Referer (i.e. form page etc).</param>
            <param name="Data">Object to POST.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.SetCookie(Clayster.Library.Internet.HTTP.HttpCookie)">
            <summary>
            Sets a cookie.
            </summary>
            <param name="Cookie">Cookie to set.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.RemoveCookie(System.String)">
            <summary>
            Removes a cookie.
            </summary>
            <param name="Name">Name of the cookie.</param>
            <returns>If the cookie was removed or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.ChangeAddress(System.String,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.TelnetClient.ChangeAddress(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSocketClient.Trusted(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Trusts all certificates
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="certificate">The certificate used to authenticate the remote party.</param>
            <param name="chain">The chain of certificate authorities associated with the remote certificate.</param>
            <param name="sslPolicyErrors">One or more errors associated with the remote certificate.</param>
            <returns>Returns true, regardless of what certificate is used.</returns>
        </member>
        <member name="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnHeaderReceived">
            <summary>
            Event raised whan an HTTP Header has been received.
            
            NOTE: Cached responses do not raise this event.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnDataReceived">
            <summary>
            Event raised whan data has been received.
            
            NOTE: Cached responses do not raise this event.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.EncodeTextInPost">
            <summary>
            If text in POST messages should be encoded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.Credentials">
            <summary>
            HTTP Credentials
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.UserAgent">
            <summary>
            User Agent.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.IgnoreCookies">
            <summary>
            If cookies are to be ignored. (Default=false.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.IgnoreData">
            <summary>
            If the Data part should be ignored in the response. (Default=false.)
            
            This parameter can be used if the data is extracted using the events
            <see cref="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnHeaderReceived"/> and <see cref="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnDataReceived"/> for
            instance.
            
            NOTE: Make sure to take <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentTransferEncoding"/> into
            accound when parsing data received using <see cref="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnHeaderReceived"/> and 
            <see cref="E:Clayster.Library.Internet.HTTP.HttpSocketClient.OnDataReceived"/>. Use <see cref="M:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodeContent(System.String,System.Byte[])"/>
            if you want to decode the content encded using <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentTransferEncoding"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.DecodingMimeTypeOverride">
            <summary>
            If you know the MIME Type of the resulting HTTP Header is wrong and does not match the data received,
            you can set this field to the correct Content Type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.DefaultEncoding">
            <summary>
            Default encoding to use when sending/posting text-based content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpSocketClient.Cookies">
            <summary>
            Available cookies.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication">
            <summary>
            Class enabling NT Authentication in Web requests. The user used running the application
            will be used in the request.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.#ctor">
            <summary>
            Class enabling NT Authentication in Web requests. The user used running the application
            will be used in the request.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.Copy">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.SetCredentials(Clayster.Library.Internet.HTTP.HttpWebRequestClient,System.Net.HttpWebRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.WriteCredentials(Clayster.Library.Internet.HTTP.HttpSocketClient,System.String,Clayster.Library.Internet.HTTP.Method)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.CredentialDataUpdated(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpCredentials.CredentialDataUpdated(System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.MaxNrSteps">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.MaxNrSteps"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.ClientCredentials.NtAuthentication.AuthorizationObject">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.HttpCredentials.AuthorizationObject"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpRange">
            <summary>
            Class representing a single range in an HTTP resource.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpRange.#ctor(System.String)">
            <summary>
            Class representing a single range in an HTTP resource.
            </summary>
            <param name="Range">Range definition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpRange.#ctor(System.Int64,System.Int64)">
            <summary>
            Class representing a single range in an HTTP resource.
            </summary>
            <param name="From">From</param>
            <param name="To">Tp</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpRange.#ctor(System.Int64)">
            <summary>
            Class representing a single range in an HTTP resource.
            </summary>
            <param name="From">From</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpRange.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRange.Start">
            <summary>
            Starting position (from)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRange.End">
            <summary>
            Ending position (to)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRange.NrBytes">
            <summary>
            Number of bytes in range.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpRange.OpenEnded">
            <summary>
            If the range is open ended or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServer">
            <summary>
            HTTP Server.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketTerminal">
            <summary>
            Class handling text row based server socket protocols.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketText">
            <summary>
            Class handling text based server socket protocols.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketText.#ctor(System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Class handling text based server socket protocols.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="Encoding">Text encoding to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketText.#ctor(System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class handling text based server socket protocols.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="Encoding">Text encoding to use.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketText.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketText.ReceiveText(System.Net.Sockets.Socket,System.String,System.Object)">
            <summary>
            Method called when text has been received from the client.
            </summary>
            <param name="ClientSocket">Client socket representing the connection.</param>
            <param name="Text">Received text.</param>
            <param name="ClientState">State object for the connection.</param>
        </member>
        <member name="E:Clayster.Library.Internet.ServerSocketText.OnReceiveText">
            <summary>
            Event raised when text has been received from the client.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.ServerSocketText.Encoding">
            <summary>
            Text encoding to use for decoding incoming data to text.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.#ctor(System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Class handling text row based server socket protocols.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="Encoding">Text encoding to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.#ctor(System.Int32,System.Int32,System.Int32,System.Text.Encoding,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Class handling text row based server socket protocols.
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="InputBufferSize">Input buffer size</param>
            <param name="Encoding">Text encoding to use.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.CreateClientTerminalState(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            Creates a state object for use with a client connection.
            </summary>
            <param name="State">Underlying binary socket state.</param>
            <returns>State object to use for the connection, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.ReceiveText(System.Net.Sockets.Socket,System.String,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketText.ReceiveText(System.Net.Sockets.Socket,System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketTerminal.ReceiveRow(System.Net.Sockets.Socket,System.String,System.Object)">
            <summary>
            Method called when a row of text has been received.
            </summary>
            <param name="ClientSocket">Client socket representing the connection.</param>
            <param name="Row">Row of text received.</param>
            <param name="ClientState">State object for the connection.</param>
        </member>
        <member name="E:Clayster.Library.Internet.ServerSocketTerminal.OnReceiveRow">
            <summary>
            Event raised when a row of text has been received.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Header_JID_From">
            <summary>
            Header Name for XMPP Address (JID) of client (from).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Header_JID_To">
            <summary>
            Header Name for XMPP Address (JID) of server (to).
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="PlatformInstance">Platform Instance used by performance counters, 
            the counter instance for this http server will then be PlatformInstance appended with port number.</param>		
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
            <param name="PlatformInstance">Platform Instance used by performance counters, 
            the counter instance for this http server will then be PlatformInstance appended with port number.</param>		
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="AllowPut">If PUTs are allowed.</param>
            <param name="AllowDelete">If DELETEs are allowed.</param>
            <param name="AllowTrace">If TRACEs are allowed.</param>
            <param name="AllowConnect">If CONNECTs are allowed.</param>
            <param name="AllowNotify">If NOTIFYs are allowed.</param>
            <param name="AllowMSearch">If M-SEARCHs are allowed.</param>
            <param name="AllowPatch">If PATCHs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="AllowPut">If PUTs are allowed.</param>
            <param name="AllowDelete">If DELETEs are allowed.</param>
            <param name="AllowTrace">If TRACEs are allowed.</param>
            <param name="AllowConnect">If CONNECTs are allowed.</param>
            <param name="AllowNotify">If NOTIFYs are allowed.</param>
            <param name="AllowMSearch">If M-SEARCHs are allowed.</param>
            <param name="AllowPatch">If PATCHs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="PlatformInstance">Platform Instance used by performance counters, 
            the counter instance for this http server will then be PlatformInstance appended with port number.</param>		
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="AllowPut">If PUTs are allowed.</param>
            <param name="AllowDelete">If DELETEs are allowed.</param>
            <param name="AllowTrace">If TRACEs are allowed.</param>
            <param name="AllowConnect">If CONNECTs are allowed.</param>
            <param name="AllowNotify">If NOTIFYs are allowed.</param>
            <param name="AllowMSearch">If M-SEARCHs are allowed.</param>
            <param name="AllowPatch">If PATCHs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="AllowPut">If PUTs are allowed.</param>
            <param name="AllowDelete">If DELETEs are allowed.</param>
            <param name="AllowTrace">If TRACEs are allowed.</param>
            <param name="AllowConnect">If CONNECTs are allowed.</param>
            <param name="AllowNotify">If NOTIFYs are allowed.</param>
            <param name="AllowMSearch">If M-SEARCHs are allowed.</param>
            <param name="AllowPatch">If PATCHs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
            <param name="PlatformInstance">Platform Instance used by performance counters, 
            the counter instance for this http server will then be PlatformInstance appended with port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            HTTP Server.
            </summary>
            <param name="Port">Listening port accepting client connections.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="AllowGet">If GETs are allowed.</param>
            <param name="AllowPost">If POSTs are allowed.</param>
            <param name="AllowPut">If PUTs are allowed.</param>
            <param name="AllowDelete">If DELETEs are allowed.</param>
            <param name="AllowTrace">If TRACEs are allowed.</param>
            <param name="AllowConnect">If CONNECTs are allowed.</param>
            <param name="AllowNotify">If NOTIFYs are allowed.</param>
            <param name="AllowMSearch">If M-SEARCHs are allowed.</param>
            <param name="AllowPatch">If PATCHs are allowed.</param>
            <param name="AllowSubscribe">If SUBSCRIBEs are allowed.</param>
            <param name="AllowUnsubscribe">If UNSUBSCRIBEs are allowed.</param>
            <param name="ThreadPoolSize">Thread Pool Size for synchronous resources.</param>
            <param name="Ssl">If communication is to be done using SSL/TLS.</param>
            <param name="ClientCertificatesRequired">If Client Certificates are required or not.</param>
            <param name="Certificate">Server certificate to use in SSL/TLS communications.</param>
            <param name="PlatformInstance">Platform Instance used by performance counters, 
            the counter instance for this http server will then be PlatformInstance appended with port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="PostHandler">HTTP POST Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="Synchronous">If the resource is registered as a synchronous resource (executed from a separate thread), or asynchronous 
            (where the HTTP Handler is responsible for sending the response, possible after the HTTP Handler returns).</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="PostHandler">HTTP POST Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="Synchronous">If the resource is registered as a synchronous resource (executed from a separate thread), or asynchronous 
            (where the HTTP Handler is responsible for sending the response, possible after the HTTP Handler returns).</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[],System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[],System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="PostHandler">HTTP POST Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[],System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
            <param name="Synchronous">If the resource is registered as a synchronous resource (executed from a separate thread), or asynchronous 
            (where the HTTP Handler is responsible for sending the response, possible after the HTTP Handler returns).</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(System.String,Clayster.Library.Internet.HTTP.HttpHandler,Clayster.Library.Internet.HTTP.HttpHandler,System.Boolean,Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod[],System.Boolean,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Name">Resource Name</param>
            <param name="GetHandler">HTTP GET Handler.</param>
            <param name="PostHandler">HTTP POST Handler.</param>
            <param name="RequiresAuthentication">If authentication is required to access this resource.</param>
            <param name="AuthenticationMethods">Authentication Methods to use, in addition to those available on the HTTP Server.</param>
            <param name="Synchronous">If the resource is registered as a synchronous resource (executed from a separate thread), or asynchronous 
            (where the HTTP Handler is responsible for sending the response, possible after the HTTP Handler returns).</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>The implicitly created resource object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(Clayster.Library.Internet.HTTP.IHttpServerResource,System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Resource">Resource to register</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Register(Clayster.Library.Internet.HTTP.IHttpServerResource,System.Nullable{System.Boolean},System.String[])">
            <summary>
            Registers an HTTP Resource with the HTTP Server.
            </summary>
            <param name="Resource">Resource to register</param>
            <param name="RequiresAuthenticationOverride">Overrides the authentication requirement defined by the resource.</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.IsRegistered(System.String)">
            <summary>
            If a resource is registered on the server.
            </summary>
            <param name="Name">Resource name.</param>
            <returns>If <paramref name="Name"/> is registered on the server.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Unregister(Clayster.Library.Internet.HTTP.IHttpServerResource,System.String[])">
            <summary>
            Removes an HTTP Resource from the HTTP Server
            </summary>
            <param name="Resource">Resource to remove</param>
            <param name="AlternativeNames">Alternative names of the resource.</param>
            <returns>true iff the resource was found and removed. The resources are identified
            not by reference but by <see name="IHttpServerResource.Name"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.FindResource(System.String@,Clayster.Library.Internet.HTTP.HttpServer.Method,System.String@)">
            <summary>
            Searches for a resource on the server.
            
            NOTE: Since no HTTP Session is assumed when this method is called, HTTP authentication will not be performed.
            </summary>
            <param name="Item">URI</param>
            <param name="HttpMethod">HTTP Method</param>
            <param name="SubItem">Sub Item</param>
            <returns>Resource found.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">If the resource was not found, or if the method is not allowed.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.FindResource(System.String@,Clayster.Library.Internet.HTTP.HttpHeader,Clayster.Library.Internet.HTTP.HttpServer.Method,System.Net.EndPoint,System.String@)">
            <summary>
            Searches for a resource on the server.
            </summary>
            <param name="Item">URI</param>
            <param name="Header">HTTP Header</param>
            <param name="HttpMethod">HTTP Method</param>
            <param name="RemoteEndPoint">Remote End Point</param>
            <param name="SubItem">Sub Item</param>
            <returns>Resource found.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">If the resource was not found, or if the method is not allowed.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.CreateClientTerminalState(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketTerminal.CreateClientTerminalState(Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.ReceiveRow(System.Net.Sockets.Socket,System.String,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketTerminal.ReceiveRow(System.Net.Sockets.Socket,System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.ParseQueryParameters(System.String@,System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            Extracts query parameters from an URL
            </summary>
            <param name="Url">URL</param>
            <param name="QueryParameters">Query Parameters will be stored here. If a query parameter is used more than once in the URL
            they are listed using the original name suffixed by space and an ordinal number, except the first parameter that retains
            the original name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.Dispose">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.RegisterAuthenticationMethod(Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod)">
            <summary>
            Registers an authentication method. This method will be used as a default authentication method
            for web resources requiring authentication, but not specifying their own authentication methods
            explicitly. (It will not affect unauthenticaated web resources.)
            </summary>
            <param name="Method">Method to register.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.UnregisterAuthenticationMethod(Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod)">
            <summary>
            Unregisters an authentication method previously registered using <see cref="M:Clayster.Library.Internet.HTTP.HttpServer.RegisterAuthenticationMethod(Clayster.Library.Internet.HTTP.HttpServerAuthenticationMethod)"/>.
            </summary>
            <param name="Method">Method to unregister</param>
            <returns>If the method was found and removed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.GetResources">
            <summary>
            Gets an array of Registered Resources.
            </summary>
            <returns>Registered resources.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.RegisterHttpOverXmppSupport(System.Int32,System.Int32)">
            <summary>
            Registers HTTP Over XMPP support. HTTP requests made to the application from anywhere to any XMPP Client will be directed to this
            HTTP Server.
            
            NOTE: This can only be done on one HTTP Server object.
            </summary>
            <param name="HttpChunkLimit">Any HTTP content sent over XMPP larger or equal to this number of bytes in size, will be partitioned into chunks.
            Note that this is the size limit of the content, not of the resulting XMPP messages sent.
            Default value is 6000 bytes.</param>
            <param name="HttpStreamLimit">Any HTTP audio or video content sent over XMPP larger or equal to this number of bytes in size, will be sent using streaming mode instead of chunked mode.
            Note that this is the size limit of the content, not of the resulting XMPP messages sent.
            Default value is 1048576 (1 Mb).</param>
            <exception cref="T:System.Exception">If calling this method more than once during the life time of the application, an exception will be
            thrown.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.HttpRequest(Clayster.Library.Internet.XMPP.XmppClient,System.Xml.XmlElement,Clayster.Library.Internet.XMPP.IqType,System.String,System.String,System.String)">
            <summary>
            Incoming HTTP request over XMPP, to the server
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServer.HttpClose(Clayster.Library.Internet.XMPP.XmppClient,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Incoming Close command, to close a stream being sent by the server to a client.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.LocalEndPoint">
            <summary>
            Local loopback endpoint.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowGET">
            <summary>
            If GET is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowPOST">
            <summary>
            If POST is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowPUT">
            <summary>
            If PUT is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowDELETE">
            <summary>
            If DELETE is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowTRACE">
            <summary>
            If TRACE is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowCONNECT">
            <summary>
            If CONNECT is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowNOTIFY">
            <summary>
            If NOTIFY is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowMSEARCH">
            <summary>
            If M-SEARCH is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowPATCH">
            <summary>
            If PATCH is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowOPTIONS">
            <summary>
            If OPTIONS is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowSUBSCRIBE">
            <summary>
            If SUBSCRIBE is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AllowUNSUBSCRIBE">
            <summary>
            If UNSUBSCRIBE is allowed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AuthenticateAllResources">
            <summary>
            If all resources should be authenticated or not. Default is false (i.e. determined at resource level).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.UseSpecialEscapeSequences">
             <summary>
             If special Escape Sequences should be handled or not. Some clients do not allow the use
             of ? and &amp; in url:s to provide the server with parameters. For resources to work anyway,
             special escape sequences can be used to circumnavigate this problem.
            
             __QUESTION__    is replaced with ?
             __AND__         is replaced with &amp;
             __EQ__          is replaced with =
             __SL__          is replaced with /
             __BSL__         is replaced with \
             __IGNOREREST__  ignores the rest of the url.
             
             Example: So, in the case of a troublesome client the following url could be used
             
             http://server/resource__QUESTION__Param1__EQ__Value1__AND__Param2__EQ__Value2__IGNOREREST__.html
             
             to activelly retrieve
             
             http://server/resource?Param1=Value1&amp;Param2=Value2
             </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AppendRedirectionParameter">
            <summary>
            If a redirection parameter should be added to the url in temporary mirror redirections (i.e.
            if &amp;Redirected=1 should be appended). Default is false.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AuthenticationMethods">
            <summary>
            Registered authentication methods.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.AuthenticationMethodsRegistered">
            <summary>
            If there are any authentication methods registered on the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.OccupiedThreads">
            <summary>
            Number of currently occupied threads
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.QueueSize">
            <summary>
            Size of queued requests
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServer.RequestsProcessed">
            <summary>
            Number of requests processed since server start
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServer.Method">
            <summary>
            HTTP Method
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.GET">
            <summary>
            HTTP GET
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.HEAD">
            <summary>
            HTTP HEAD
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.POST">
            <summary>
            HTTP POST
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.PUT">
            <summary>
            HTTP PUT
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.DELETE">
            <summary>
            HTTP DELETE
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.TRACE">
            <summary>
            HTTP TRACE
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.CONNECT">
            <summary>
            HTTP CONNECT
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.MSEARCH">
            <summary>
            SSDP M-SEARCH
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.NOTIFY">
            <summary>
            SSDP NOTIFY
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.SUBSCRIBE">
            <summary>
            SSDP SUBSCRIBE
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.UNSUBSCRIBE">
            <summary>
            SSDP UNSUBSCRIBE
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.OPTIONS">
            <summary>
            HTTP OPTIONS
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpServer.Method.PATCH">
            <summary>
            HTTP PATCH
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerResourceFolder">
            <summary>
            HTTP Resource giving access to files in a folder or its subfolders..
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.#ctor(System.String,System.String)">
            <summary>
            HTTP Resource giving access to files in a folder or its subfolders..
            </summary>
            <param name="VirtualFolder">Virtual folder, as available through HTTP GET statements.</param>
            <param name="PhysicalFolder">Physical folder containing files.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.AssertFileNameOk(System.String)">
            <summary>
            Checks if the file name is OK. If not, an exception is thrown.
            </summary>
            <param name="FileName">File name to check.</param>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">If file name contains illegal constructs.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.CalcRangeSize(Clayster.Library.Internet.HTTP.HttpRange,System.Int64)">
            <summary>
            Calculates the size of a range request.
            </summary>
            <param name="Range">HTTP GET Range</param>
            <param name="FileSize">Size of the file.</param>
            <returns>Number of bytes in the range.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.CalcContentLength(Clayster.Library.Internet.HTTP.HttpRange[],System.Int64)">
            <summary>
            Calculates the content length of a ranged request.
            </summary>
            <param name="Ranges">HTTP Ranges</param>
            <param name="FileSize">File size</param>
            <returns>Content length of request.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.GET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.IHttpServerResource.PartialGET(Clayster.Library.Internet.HTTP.HttpServerResponse,Clayster.Library.Internet.HTTP.HttpServerRequest)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.AcceptGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.AcceptPartialGET">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPartialGET"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResourceFolder.AcceptPOST">
            <summary>
            <see cref="P:Clayster.Library.Internet.HTTP.IHttpServerResource.AcceptPOST"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpResponseEventHandler">
            <summary>
            Delegate for response sent events.
            </summary>
            <param name="Response"></param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpServerResponseProxy">
            <summary>
            Class collecting information about an HTTP Response based on a response received from another
            HTTP Server.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.#ctor(System.Web.HttpContext,Clayster.Library.Internet.HTTP.HttpHeader,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource)">
            <summary>
            Class collecting information about an HTTP Response based on a response received from another
            HTTP Server.
            </summary>
            <param name="Context">HTTP Context containing the response from the second HTTP Server.</param>
            <param name="Header">HTTP Header received.</param>
            <param name="HeaderOnly">If only the header should be returned.</param>
            <param name="Resource">HTTP Resource sending the response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.#ctor(System.Web.HttpContext,Clayster.Library.Internet.HTTP.HttpHeader,System.IAsyncResult,System.AsyncCallback,System.Boolean,Clayster.Library.Internet.HTTP.IHttpServerResource)">
            <summary>
            Class collecting information about an HTTP Response based on a response received from another
            HTTP Server.
            </summary>
            <param name="Context">HTTP Context containing the response from the second HTTP Server.</param>
            <param name="Header">HTTP Header received.</param>
            <param name="AsychResult">Object controlling asynchronous operations.</param>
            <param name="Callback">Callback method when done.</param>
            <param name="HeaderOnly">If only the header should be returned.</param>
            <param name="Resource">HTTP Resource sending the response.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.SendHeader(System.Int64,System.Int64,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendHeader(System.Int64,System.Int64,Clayster.Library.Internet.HTTP.HttpRange[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.SendContent(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendContent(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.ContentSent">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.ContentSent"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.SendError(Clayster.Library.Internet.HTTP.HttpException)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(Clayster.Library.Internet.HTTP.HttpException)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.SendError(System.Exception)">
            <summary>
            <see cref="M:Clayster.Library.Internet.HTTP.HttpServerResponse.SendError(System.Exception)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpServerResponseProxy.ResponseSent">
            <summary>
            If the response has been sent.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.XmlDocumentCallback">
            <summary>
            Delegate for callback methods returning XML Documents after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="Doc">XML Document</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.TurtleDocumentCallback">
            <summary>
            Delegate for callback methods returning Turtle Documents after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="Doc">Turtle Document</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ImageCallback">
            <summary>
            Delegate for callback methods returning Images after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="Image">Image</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.TextCallback">
            <summary>
            Delegate for callback methods returning Text strings after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="Text">Text string.</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.RssCallback">
            <summary>
            Delegate for callback methods returning RSS Documents after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="RssDoc">RSS Document</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.AtomCallback">
            <summary>
            Delegate for callback methods returning ATOM Documents after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="AtomDoc">ATOM Document</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HtmlCallback">
            <summary>
            Delegate for callback methods returning HTML Documents after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="HtmlDoc">HTML Document</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.ObjectCallback">
            <summary>
            Delegate for callback methods returning an unspecified decoded object after asynchronous HTTP operations.
            </summary>
            <param name="Ok">If the operation was successful (true) or not (false).</param>
            <param name="Response">HTTP Response</param>
            <param name="state">A state parameter provided to the fetch method.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpUtilities">
            <summary>
            Class containing methods for simple access to the HTTP protocol.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.MakeCompliantXml(System.String)">
            <summary>
            Converts any XML specifics not compatible with the .NET XML DOM.
            </summary>
            <param name="s">XML String.</param>
            <returns>Compatible XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetXml(System.String)">
            <summary>
            Gets an xml document from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>Xml Document</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an XML document.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetXml(System.String,System.Boolean)">
            <summary>
            Gets an xml document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an XML document.</param>
            <returns>Xml Document, or null if not an xml document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an XML document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetXml(System.String,System.Boolean,System.String)">
            <summary>
            Gets an xml document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an XML document.</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <returns>Xml Document, or null if not an xml document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an XML document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetXml(System.String,Clayster.Library.Internet.HTTP.XmlDocumentCallback,System.Object)">
            <summary>
            Gets an xml document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetXml(System.String,System.String,Clayster.Library.Internet.HTTP.XmlDocumentCallback,System.Object)">
            <summary>
            Gets an xml document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String)">
            <summary>
            Gets a turtle document from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>Turtle Document</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an Turtle document.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.Boolean)">
            <summary>
            Gets a turtle document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an Turtle document.</param>
            <returns>Turtle Document, or null if not an turtle document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an Turtle document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.Boolean,System.String)">
            <summary>
            Gets a turtle document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an Turtle document.</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <returns>Turtle Document, or null if not an turtle document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an Turtle document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.Boolean,System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            Gets a turtle document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an Turtle document.</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="Credentials">Credentials</param>
            <returns>Turtle Document, or null if not an turtle document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an Turtle document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.Boolean,System.String,System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            Gets a turtle document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an Turtle document.</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="AcceptLanguage">Accepted language.</param>
            <param name="Credentials">Credentials</param>
            <returns>Turtle Document, or null if not an turtle document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an Turtle document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,Clayster.Library.Internet.HTTP.TurtleDocumentCallback,System.Object)">
            <summary>
            Gets a turtle document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.String,Clayster.Library.Internet.HTTP.TurtleDocumentCallback,System.Object)">
            <summary>
            Gets a turtle document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetTurtle(System.String,System.String,Clayster.Library.Internet.HTTP.HttpCredentials,Clayster.Library.Internet.HTTP.TurtleDocumentCallback,System.Object)">
            <summary>
            Gets a turtle document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="Credentials">Credentials to use for federated requests.</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetImage(System.String)">
            <summary>
            Gets an image from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>Image</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an image.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetImage(System.String,System.Boolean)">
            <summary>
            Gets an image from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an image.</param>
            <returns>Image, or null if not an image.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an image, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetImage(System.String,Clayster.Library.Internet.HTTP.ImageCallback,System.Object)">
            <summary>
            Gets an image from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetText(System.String)">
            <summary>
            Gets a text document from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>Text document</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not a text document.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetText(System.String,System.Boolean)">
            <summary>
            Gets a text document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not a text document.</param>
            <returns>String, or null if not a text document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not a text document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetText(System.String,Clayster.Library.Internet.HTTP.TextCallback,System.Object)">
            <summary>
            Gets a text document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetAtom(System.String)">
            <summary>
            Gets an Atom document from the gicen url
            </summary>
            <param name="url">Url</param>
            <returns>Atom document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetAtom(System.String,System.Boolean)">
            <summary>
            Gets an Atom document from the given url
            </summary>
            <param name="url">url</param>
            <param name="ThrowExceptionIfWrongType">If an exception whould be thrown if it's not an atom document</param>
            <returns>Atom document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetAtom(System.String,Clayster.Library.Internet.HTTP.HttpCredentials,System.Boolean)">
            <summary>
            Gets an Atom document from the given url with given credentials.
            </summary>
            <param name="url">url</param>
            <param name="credentials">http credentials</param>
            <param name="ThrowExceptionIfWrongType">If an exception whould be thrown if it's not an atom document</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetAtom(System.String,Clayster.Library.Internet.HTTP.AtomCallback,System.Object)">
            <summary>
            Gets an atom document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetRss(System.String)">
            <summary>
            Gets an RSS document from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>RSS document</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an rss document.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetRss(System.String,System.Boolean)">
            <summary>
            Gets an rss document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an rss document.</param>
            <returns>RSS Document, or null if not an rss document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an rss document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetRss(System.String,Clayster.Library.Internet.HTTP.RssCallback,System.Object)">
            <summary>
            Gets an rss document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetHtml(System.String)">
            <summary>
            Gets an HTML document from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>HTML document</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an html document.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetHtml(System.String,System.Boolean)">
            <summary>
            Gets an html document from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource is not an html document.</param>
            <returns>HTML Document, or null if not an html document.</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that is not an html document, and
            ThrowExceptionIfWrongType is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.GetHtml(System.String,Clayster.Library.Internet.HTTP.HtmlCallback,System.Object)">
            <summary>
            Gets an html document from the given url asynchronuously.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.Get(System.String)">
            <summary>
            Gets an object from the given url.
            </summary>
            <param name="Url">Url</param>
            <returns>Decoded object</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that cannot be loaded or parsed.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.Get(System.String,System.Boolean)">
            <summary>
            Gets an object from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="ThrowExceptionIfWrongType">If an exception should be thrown if
            resource cannot be loaded.</param>
            <returns>Decoded object</returns>
            <exception cref="T:System.Net.WebException">If url points to a resource that cannot be loaded.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.Get(System.String,Clayster.Library.Internet.HTTP.ObjectCallback,System.Object)">
            <summary>
            Gets an object from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.Get(System.String,System.String,Clayster.Library.Internet.HTTP.ObjectCallback,System.Object)">
            <summary>
            Gets an object from the given url.
            </summary>
            <param name="Url">Url</param>
            <param name="MimeTypeOverride">MIME Type Override</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State parameter that will be used in the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.ParseContentType(System.String@,System.String@)">
            <summary>
            Parses a Content-Type header value.
            </summary>
            <param name="ContentType">Original value.</param>
            <param name="CharacterSet">Character set found.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.ParseContentType(System.String@,System.String@,System.String@)">
            <summary>
            Parses a Content-Type header value.
            </summary>
            <param name="ContentType">Original value.</param>
            <param name="CharacterSet">Character set found.</param>
            <param name="Method">Method found.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.ParseContentType(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Parses a Content-Type header value.
            </summary>
            <param name="ContentType">Original value.</param>
            <param name="CharacterSet">Character set found.</param>
            <param name="Method">Method found.</param>
            <param name="Boundary">Boundary found.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.ParseContentDisposition(System.String@,System.String@,System.String@)">
            <summary>
            Parses a Content-Disposition header value.
            </summary>
            <param name="ContentDisposition">Content disposition.</param>
            <param name="PartName">Name of content element.</param>
            <param name="FileName">File Name of element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.UrlEncode(System.String)">
            <summary>
            Perform URL encoding on a string.
            </summary>
            <param name="s">String to URL encode.</param>
            <returns>URL encoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.UrlDecode(System.String)">
            <summary>
            Perform URL decoding on a string.
            </summary>
            <param name="s">String to URL decode.</param>
            <returns>URL decoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpUtilities.CreateFullUrl(System.String,System.String)">
            <summary>
            Creates a full URL from a base url and an uri.
            </summary>
            <param name="BaseUrl">Base URL</param>
            <param name="Uri">URI</param>
            <returns>Full URL</returns>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpUtilities.GetThreadParams`1">
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.Method">
            <summary>
            HTTP Methods
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.GET">
            <summary>
            Gets a document from the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.POST">
            <summary>
            Sends a document to the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.HEAD">
            <summary>
            Gets the header of a document on the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.DELETE">
            <summary>
            Deletes a file on the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.PUT">
            <summary>
            Puts a file on the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.NOTIFY">
            <summary>
            Notifies the server of something
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.SUBSCRIBE">
            <summary>
            Subscribes to something on the server
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.Method.UNSUBSCRIBE">
            <summary>
            Unsubscribes from something on the server
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpWebRequestClient">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Int32)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Boolean)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Ssl">If SSL is to be used (true) or not (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is to be used (true) or not (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Int32,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Credentials">Any credentials to use. Can be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Credentials">Any credentials to use. Can be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Ssl">If SSL is to be used (true) or not (false).</param>
            <param name="Credentials">Any credentials to use. Can be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.#ctor(System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            HTTP Client class.
            
            Note: This class uses the HttpWebRequest class to get data from the web using HTTP. This allows
            for SSL and NT authentication, but puts restrictions and the number of concurrent requests allowed.
            
            For most HTTP requests, SSL and/or NT authentication is not necessary. To increase performance when
            concurrent requests is important (for instance when serving multiple clients), use the
            <see cref="T:Clayster.Library.Internet.HTTP.HttpSocketClient"/> instead.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is to be used (true) or not (false).</param>
            <param name="Credentials">Any credentials to use. Can be null.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.ChangeAddress(System.String,System.Int32)">
            <summary>
            Changes the address and port number of the connection.
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.ChangeAddress(System.String)">
            <summary>
            Changes the address of the connection.
            </summary>
            <param name="Address">IP Address or host name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String,System.String)">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GET(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a GET</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to GET from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial GET).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String,System.String)">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String,System.String,Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HEAD(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},Clayster.Library.Internet.HTTP.HttpRange[])">
            <summary>
            <para>Performs a HEAD</para>
            </summary>
            <param name="PathAndQuery">Resource to HEAD from.</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="Ranges">What ranges of the response to get (i.e. using partial HEAD).</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.POST(System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.POST(System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.POST(System.String,System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.POST(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Referer">Referer of the POST (i.e. form page etc.)</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.POST(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            <para>Performs a POST to the server.</para>
            <para>Objects in responses are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="PathAndQuery">Resource to POST to.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <param name="Data">Object to POST to the server. This object will be encoded using
            MIME Encoders available in the library.</param>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.DELETE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>Performs a DELETE to the server.</para>
            </summary>
            <param name="PathAndQuery">Resource to DELETE from.</param>
            <param name="Headers">Custom HTTP Headers.</param>
            <returns>Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.PUT(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Performs a PUT to the server.
            </summary>
            <param name="PathAndQuery">Resource to PUT to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.NOTIFY(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Object)">
            <summary>
            Performs a NOTIFY to the server.
            </summary>
            <param name="PathAndQuery">Resource to NOTIFY to</param>
            <param name="Headers">Custom Headers</param>
            <param name="Data">Object to Put</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.SUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a SUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to SUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.UNSUBSCRIBE(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a UNSUBSCRIBE to the server.
            </summary>
            <param name="PathAndQuery">Resource to UNSUBSCRIBE to</param>
            <param name="Headers">Custom Headers</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetObject(System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET, decoding the response
            and returning the decoded object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to load the object from.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetObject(System.String,System.String,System.Int32)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET, decoding the response
            and returning the decoded object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetObject(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET, decoding the response
            and returning the decoded object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used (HTTPS).</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetObject(System.String,System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET, decoding the response
            and returning the decoded object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used (HTTPS).</param>
            <param name="Credentials">Any credentials to use.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to load the object from.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String,System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to load the object from.</param>
            <param name="MimeTypeOverride">If the response should be decoded using another
            MIME Type than the one returned in the HTTP header.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String,Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to load the object from.</param>
            <param name="Credentials">Credentials to use if authenticated service is required.</param>
            <param name="MimeTypeOverride">MIME-type override</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String,System.String,System.Int32)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String,System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used (HTTPS).</param>
            <param name="Credentials">Credentials to use if authenticated service is required.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetResource(System.String,System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials,System.String)">
            <summary>
            <para>Gets an object from a server using HTTP. This is the same as performing a GET and
            returning the decoded response object.</para>
            <para>Objects are decoded using MIME Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to GET from.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used (HTTPS).</param>
            <param name="Credentials">Credentials to use if authenticated service is required.</param>
            <param name="MimeTypeOverride">If you know the MIME Type beforehand, and want to override the MIME Type
            returned from the server, you can specify it here.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.PostResource(System.String,System.String,System.Object)">
            <summary>
            <para>Posts an object to a server using HTTP. This is the same as performing a POST and
            returning the decoded response object.</para>
            <para>Objects are encoded and decoded using MIME Encoders and Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Url">Url to post the object to.</param>
            <param name="Referer">Referer (i.e. form page etc).</param>
            <param name="Data">Object to POST.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.PostResource(System.String,System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials,System.String,System.Object)">
            <summary>
            <para>Posts an object to a server using HTTP. This is the same as performing a POST and
            returning the decoded response object.</para>
            <para>Objects are encoded and decoded using MIME Encoders and Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to POST to.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used or not.</param>
            <param name="Credentials">Credentials to use if authenticated service is required.</param>
            <param name="Referer">Referer (i.e. form page etc).</param>
            <param name="Data">Object to POST.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.PostResource(System.String,System.String,System.Int32,System.Boolean,Clayster.Library.Internet.HTTP.HttpCredentials,System.String,System.String,System.String,System.Object)">
            <summary>
            <para>Posts an object to a server using HTTP. This is the same as performing a POST and
            returning the decoded response object.</para>
            <para>Objects are encoded and decoded using MIME Encoders and Decoders available in the library.</para>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)"/>
            <seealso cref="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)"/>
            </summary>
            <param name="Address">IP Address or host name.</param>
            <param name="PathAndQuery">Path and query to POST to.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL is used or not.</param>
            <param name="Credentials">Credentials to use if authenticated service is required.</param>
            <param name="Referer">Referer (i.e. form page etc).</param>
            <param name="Accept">What types of responses to accept.</param>
            <param name="AcceptLanguage">What languages to accept.</param>
            <param name="Data">Object to POST.</param>
            <returns>HTTP Response.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerMessage(System.String)">
            <summary>
            Records a message to registered line listeners.
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerError(System.String)">
            <summary>
            Records an error message to registered line listeners.
            </summary>
            <param name="Message">Error message</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowSent(System.String)">
            <summary>
            Records a row being sent to registered line listeners.
            </summary>
            <param name="Row">Row being sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowsSent(System.String)">
            <summary>
            Records a set of rows being sent to registered line listeners.
            </summary>
            <param name="Rows">Set of Rows being sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowReceived(System.String)">
            <summary>
            Records a row being received to registered line listeners.
            </summary>
            <param name="Row">Row being received.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowsReceived(System.String)">
            <summary>
            Records a set of rows being received to registered line listeners.
            </summary>
            <param name="Rows">Rows being received.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerLiteralSent(System.Byte[])">
            <summary>
            Records a set of binary data being sent to registered line listeners.
            </summary>
            <param name="Data">Binary data being sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerLiteralReceived(System.Byte[])">
            <summary>
            Records a set of binary data being received to registered line listeners.
            </summary>
            <param name="Data">Binary data being received.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.GetLineListeners">
            <summary>
            Gets an array of registered line listeners.
            </summary>
            <returns>Array of registered line listeners.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.SetCookie(Clayster.Library.Internet.HTTP.HttpCookie)">
            <summary>
            Sets a cookie.
            </summary>
            <param name="Cookie">Cookie to set.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpWebRequestClient.RemoveCookie(System.String)">
            <summary>
            Removes a cookie.
            </summary>
            <param name="Name">Name of the cookie.</param>
            <returns>If the cookie was removed or not.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.EncodeTextInPost">
            <summary>
            If text is POST Messages should be encoded or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Credentials">
            <summary>
            Any Credentials to use if authenticated service is required.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.UserAgent">
            <summary>
            What User Agent string to use.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.ReceiveTimeout">
            <summary>
            Receive timeout in milliseconds.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Ssl">
            <summary>
            If SSL is to be used (true) or not (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.DecodingMimeTypeOverride">
            <summary>
            If you know the MIME Type of the resulting HTTP Header is wrong and does not match the data received,
            you can set this field to the correct Content Type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Address">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.LineListeners">
            <summary>
            Registered linelisteners
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpWebRequestClient.Cookies">
            <summary>
            Available cookies.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpStatusCode">
            <summary>
            HTTP Status Codes, as defined in http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Informational_Continue">
            <summary>
            The client SHOULD continue with its request. This interim response is used to inform the client that the 
            initial part of the request has been received and has not yet been rejected by the server. The client SHOULD 
            continue by sending the remainder of the request or, if the request has already been completed, ignore this 
            response. The server MUST send a final response after the request has been completed. See section 8.2.3 for 
            detailed discussion of the use and handling of this status code. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Informational_SwitchingProtocols">
            <summary>
            <para>The server understands and is willing to comply with the client's request, via the Upgrade message 
            header field (section 14.42), for a change in the application protocol being used on this connection. The 
            server will switch protocols to those defined by the response's Upgrade header field immediately after the 
            empty line which terminates the 101 response.</para>
            <para>The protocol SHOULD be switched only when it is advantageous to do so. For example, switching to a 
            newer version of HTTP is advantageous over older versions, and switching to a real-time, synchronous protocol 
            might be advantageous when delivering resources that use such features.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_OK">
            <summary>
            <para>The request has succeeded. The information returned with the response is dependent on the method used in 
            the request, for example:</para>
            <para>GET an entity corresponding to the requested resource is sent in the response;</para>
            <para>HEAD the entity-header fields corresponding to the requested resource are sent in the response without 
            any message-body;</para>
            <para>POST an entity describing or containing the result of the action;</para>
            <para>TRACE an entity containing the request message as received by the end server.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_Created">
            <summary>
            <para>The request has been fulfilled and resulted in a new resource being created. The newly created resource can 
            be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource 
            given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics 
            and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified 
            by the media type given in the Content-Type header field. The origin server MUST create the resource before returning 
            the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) 
            response instead.</para>
            <para>A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for 
            the requested variant just created, see section 14.19.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_Accepted">
            <summary>
            <para>The request has been accepted for processing, but the processing has not been completed. The request might or 
            might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no 
            facility for re-sending a status code from an asynchronous operation such as this.</para>
            <para>The 202 response is intentionally non-committal. Its purpose is to allow a server to accept a request for 
            some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user 
            agent's connection to the server persist until the process is completed. The entity returned with this response 
            SHOULD include an indication of the request's current status and either a pointer to a status monitor or some 
            estimate of when the user can expect the request to be fulfilled.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_NonAuthoritativeInformation">
            <summary>
            <para>The returned metainformation in the entity-header is not the definitive set as available from the origin 
            server, but is gathered from a local or a third-party copy. The set presented MAY be a subset or superset of the 
            original version. For example, including local annotation information about the resource might result in a 
            superset of the metainformation known by the origin server. Use of this response code is not required and is only 
            appropriate when the response would otherwise be 200 (OK).</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_NoContent">
            <summary>
            <para>The server has fulfilled the request but does not need to return an entity-body, and might want to return 
            updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, 
            which if present SHOULD be associated with the requested variant.</para>
            <para>If the client is a user agent, it SHOULD NOT change its document view from that which caused the request 
            to be sent. This response is primarily intended to allow input for actions to take place without causing a change 
            to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the 
            document currently in the user agent's active view.</para>
            <para>The 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line 
            after the header fields.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_ResetContent">
            <summary>
            <para>The server has fulfilled the request and the user agent SHOULD reset the document view which caused the
            request to be sent. This response is primarily intended to allow input for actions to take place via user input, 
            followed by a clearing of the form in which the input is given so that the user can easily initiate another input 
            action. The response MUST NOT include an entity.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Successful_PartialContent">
            <summary>
            <para>The server has fulfilled the partial GET request for the resource. The request MUST have included a Range 
            header field (section 14.35) indicating the desired range, and MAY have included an If-Range header field (section 
            14.27) to make the request conditional.</para>
            <para>The response MUST include the following header fields:</para>
            <para>- Either a Content-Range header field (section 14.16) indicating the range included with this response, 
            or a multipart/byteranges Content-Type including Content-Range fields for each part. If a Content-Length header 
            field is present in the response, its value MUST match the actual number of OCTETs transmitted in the 
            message-body.</para>
            <para>- Date</para>
            <para>- ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request</para>
            <para>- Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous 
            response for the same variant</para>
            <para>If the 206 response is the result of an If-Range request that used a strong cache validator (see section 
            13.3.3), the response SHOULD NOT include other entity-headers. If the response is the result of an If-Range 
            request that used a weak validator, the response MUST NOT include other entity-headers; this prevents 
            inconsistencies between cached entity-bodies and updated headers. Otherwise, the response MUST include all of 
            the entity-headers that would have been returned with a 200 (OK) response to the same request.</para>
            <para>A cache MUST NOT combine a 206 response with other previously cached content if the ETag or Last-Modified 
            headers do not match exactly, see 13.5.4.</para>
            <para>A cache that does not support the Range and Content-Range headers MUST NOT cache 206 (Partial) responses.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_MultipleChoices">
            <summary>
            <para>The requested resource corresponds to any one of a set of representations, each with its own specific location, 
            and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a 
            preferred representation and redirect its request to that location.</para>
            <para>Unless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics 
            and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified 
            by the media type given in the Content- Type header field. Depending upon the format and the capabilities of the user 
            agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not 
            define any standard for such automatic selection.</para>
            <para>If the server has a preferred choice of representation, it SHOULD include the specific URI for that representation
            in the Location field; user agents MAY use the Location field value for automatic redirection. This response is 
            cacheable unless indicated otherwise.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_MovedPermanently">
            <summary>
            <para>The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD 
            use one of the returned URIs. Clients with link editing capabilities ought to automatically re-link references to the 
            Request-URI to one or more of the new references returned by the server, where possible. This response is cacheable 
            unless indicated otherwise.</para>
            <para>The new permanent URI SHOULD be given by the Location field in the response. Unless the request method was 
            HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).</para>
            <para>If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT 
            automatically redirect the request unless it can be confirmed by the user, since this might change the conditions 
            under which the request was issued.</para>
            <para>Note: When automatically redirecting a POST request after receiving a 301 status code, some existing HTTP/1.0 
            user agents will erroneously change it into a GET request.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_Found">
            <summary>
            <para>The requested resource resides temporarily under a different URI. Since the redirection might be altered on 
            occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if 
            indicated by a Cache-Control or Expires header field.</para>
            <para>The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, 
            the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).</para>
            <para>If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT 
            automatically redirect the request unless it can be confirmed by the user, since this might change the conditions 
            under which the request was issued.</para>
            <para>Note: RFC 1945 and RFC 2068 specify that the client is not allowed to change the method on the redirected 
            request.  However, most existing user agent implementations treat 302 as if it were a 303 response, performing a 
            GET on the Location field-value regardless of the original request method. The status codes 303 and 307 have been 
            added for servers that wish to make unambiguously clear which kind of reaction is expected of the client.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_SeeOther">
            <summary>
            <para>The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on 
            that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent 
            to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 
            response MUST NOT be cached, but the response to the second (redirected) request might be cacheable.</para>
            <para>The different URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, 
            the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).</para>
            <para>Note: Many pre-HTTP/1.1 user agents do not understand the 303 status. When interoperability with such clients 
            is a concern, the 302 status code may be used instead, since most user agents react to a 302 response as described 
            here for 303.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_NotModified">
            <summary>
            <para>If the client has performed a conditional GET request and access is allowed, but the document has not been 
            modified, the server SHOULD respond with this status code. The 304 response MUST NOT contain a message-body, and thus 
            is always terminated by the first empty line after the header fields.</para>
            <para>The response MUST include the following header fields:</para>
            <para>- Date, unless its omission is required by section 14.18.1 If a clockless origin server obeys these rules, and 
            proxies and clients add their own Date to any response received without one (as already specified by [RFC 2068], 
            section 14.19), caches will operate correctly.</para>
            <para>- ETag and/or Content-Location, if the header would have been sent in a 200 response to the same request</para>
            <para>- Expires, Cache-Control, and/or Vary, if the field-value might differ from that sent in any previous response 
            for the same variant</para>
            <para>If the conditional GET used a strong cache validator (see section 13.3.3), the response SHOULD NOT include 
            other entity-headers. Otherwise (i.e., the conditional GET used a weak validator), the response MUST NOT include 
            other entity-headers; this prevents inconsistencies between cached entity-bodies and updated headers.</para>
            <para>If a 304 response indicates an entity not currently cached, then the cache MUST disregard the response and 
            repeat the request without the conditional.</para>
            <para>If a cache uses a received 304 response to update a cache entry, the cache MUST update the entry to reflect 
            any new field values given in the response.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_UseProxy">
            <summary>
            <para>The requested resource MUST be accessed through the proxy given by the Location field. The Location field gives 
            the URI of the proxy. The recipient is expected to repeat this single request via the proxy. 305 responses MUST only be 
            generated by origin servers.</para>
            <para>Note: RFC 2068 was not clear that 305 was intended to redirect a single request, and to be generated by origin 
            servers only.  Not observing these limitations has significant security consequences.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.Redirection_TemporaryRedirect">
            <summary>
            <para>The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, 
            the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by 
            a Cache-Control or Expires header field.</para>
            <para>The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the 
            entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many 
            pre-HTTP/1.1 user agents do not understand the 307 status. Therefore, the note SHOULD contain the information 
            necessary for a user to repeat the original request on the new URI.</para>
            <para>If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT 
            automatically redirect the request unless it can be confirmed by the user, since this might change the conditions 
            under which the request was issued.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_BadRequest">
            <summary>
            The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request 
            without modifications. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_Unauthorized">
            <summary>
            The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) 
            containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable 
            Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 
            response indicates that authorization has been refused for those credentials. If the 401 response contains the same 
            challenge as the prior response, and the user agent has already attempted authentication at least once, then the 
            user SHOULD be presented the entity that was given in the response, since that entity might include relevant 
            diagnostic information. HTTP access authentication is explained in "HTTP Authentication: Basic and Digest Access 
            Authentication" [43]. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_PaymentRequired">
            <summary>
            This code is reserved for future use. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_Forbidden">
            <summary>
            The server understood the request, but is refusing to fulfill it. Authorization will not help and the request 
            SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request 
            has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish 
            to make this information available to the client, the status code 404 (Not Found) can be used instead. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_NotFound">
            <summary>
            The server has not found anything matching the Request-URI. No indication is given of whether the condition is 
            temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally 
            configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status 
            code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no 
            other response is applicable.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_MethodNotAllowed">
            <summary>
            The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response
            MUST include an Allow header containing a list of valid methods for the requested resource.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_NotAcceptable">
            <summary>
            <para>The resource identified by the request is only capable of generating response entities which have content 
            characteristics not acceptable according to the accept headers sent in the request.</para>
            <para>Unless it was a HEAD request, the response SHOULD include an entity containing a list of available entity 
            characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity 
            format is specified by the media type given in the Content-Type header field. Depending upon the format and the 
            capabilities of the user agent, selection of the most appropriate choice MAY be performed automatically. However, 
            this specification does not define any standard for such automatic selection.</para>
            <para>Note: HTTP/1.1 servers are allowed to return responses which are not acceptable according to the accept 
            headers sent in the request. In some cases, this may even be preferable to sending a 406 response. User agents are 
            encouraged to inspect the headers of an incoming response to determine if it is acceptable.</para>
            <para>If the response could be unacceptable, a user agent SHOULD temporarily stop receipt of more data and query 
            the user for a decision on further actions.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_ProxyAuthenticationRequired">
            <summary>
            This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the 
            proxy. The proxy MUST return a Proxy-Authenticate header field (section 14.33) containing a challenge applicable 
            to the proxy for the requested resource. The client MAY repeat the request with a suitable Proxy-Authorization 
            header field (section 14.34). HTTP access authentication is explained in "HTTP Authentication: Basic and Digest 
            Access Authentication" [43]. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_RequestTimeout">
            <summary>
            The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat
            the request without modifications at any later time. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_Conflict">
            <summary>
            <para>The request could not be completed due to a conflict with the current state of the resource. This code is 
            only allowed in situations where it is expected that the user might be able to resolve the conflict and resubmit 
            the request. The response body SHOULD include enough information for the user to recognize the source of the 
            conflict. Ideally, the response entity would include enough information for the user or user agent to fix the 
            problem; however, that might not be possible and is not required.</para>
            <para>Conflicts are most likely to occur in response to a PUT request. For example, if versioning were being 
            used and the entity being PUT included changes to a resource which conflict with those made by an earlier 
            (third-party) request, the server might use the 409 response to indicate that it can't complete the request. 
            In this case, the response entity would likely contain a list of the differences between the two versions in 
            a format defined by the response Content-Type.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_Gone">
            <summary>
            <para>The requested resource is no longer available at the server and no forwarding address is known. This 
            condition is expected to be considered permanent. Clients with link editing capabilities SHOULD delete references 
            to the Request-URI after user approval. If the server does not know, or has no facility to determine, whether or 
            not the condition is permanent, the status code 404 (Not Found) SHOULD be used instead. This response is cacheable 
            unless indicated otherwise.</para>
            <para>The 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that 
            the resource is intentionally unavailable and that the server owners desire that remote links to that resource be 
            removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals 
            no longer working at the server's site. It is not necessary to mark all permanently unavailable resources as "gone" 
            or to keep the mark for any length of time -- that is left to the discretion of the server owner.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_LengthRequired">
            <summary>
            The server refuses to accept the request without a defined Content- Length. The client MAY repeat the request if it 
            adds a valid Content-Length header field containing the length of the message-body in the request message. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_PreconditionFailed">
            <summary>
            The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server. 
            This response code allows the client to place preconditions on the current resource metainformation (header field data) 
            and thus prevent the requested method from being applied to a resource other than the one intended. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_RequestEntityTooLarge">
            <summary>
            <para>The server is refusing to process a request because the request entity is larger than the server is willing or 
            able to process. The server MAY close the connection to prevent the client from continuing the request.</para>
            <para>If the condition is temporary, the server SHOULD include a Retry- After header field to indicate that it is 
            temporary and after what time the client MAY try again.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_RequestUriTooLong">
            <summary>
            The server is refusing to service the request because the Request-URI is longer than the server is willing to 
            interpret. This rare condition is only likely to occur when a client has improperly converted a POST request to a 
            GET request with long query information, when the client has descended into a URI "black hole" of redirection 
            (e.g., a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client 
            attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating 
            the Request-URI. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_UnsupportedMediaType">
            <summary>
            The server is refusing to service the request because the entity of the request is in a format not supported by 
            the requested resource for the requested method. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_RequestedRangeNotSatisfiable">
            <summary>
            <para>A server SHOULD return a response with this status code if a request included a Range request-header field 
            (section 14.35), and none of the range-specifier values in this field overlap the current extent of the selected 
            resource, and the request did not include an If-Range request-header field. (For byte-ranges, this means that the 
            first- byte-pos of all of the byte-range-spec values were greater than the current length of the selected resource.)</para>
            <para>When this status code is returned for a byte-range request, the response SHOULD include a Content-Range 
            entity-header field specifying the current length of the selected resource (see section 14.16). This response 
            MUST NOT use the multipart/byteranges content- type.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ClientError_ExpectationFailed">
            <summary>
            The expectation given in an Expect request-header field (see section 14.20) could not be met by this server, or, 
            if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_InternalServerError">
            <summary>
            The server encountered an unexpected condition which prevented it from fulfilling the request. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_NotImplemented">
            <summary>
            The server does not support the functionality required to fulfill the request. This is the appropriate response 
            when the server does not recognize the request method and is not capable of supporting it for any resource. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_BadGateway">
            <summary>
            The server, while acting as a gateway or proxy, received an invalid response from the upstream server it 
            accessed in attempting to fulfill the request. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_ServiceUnavailable">
            <summary>
            <para>The server is currently unable to handle the request due to a temporary overloading or maintenance of the 
            server. The implication is that this is a temporary condition which will be alleviated after some delay. If known, 
            the length of the delay MAY be indicated in a Retry-After header. If no Retry-After is given, the client SHOULD 
            handle the response as it would for a 500 response.</para>
            <para>Note: The existence of the 503 status code does not imply that a server must use it when becoming overloaded. 
            Some servers may wish to simply refuse the connection.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_GatewayTimeout">
            <summary>
            <para>The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server 
            specified by the URI (e.g. HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed to access in 
            attempting to complete the request.</para>
            <para>Note: Note to implementors: some deployed proxies are known to return 400 or 500 when DNS lookups time out.</para>
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.HttpStatusCode.ServerError_HttpVersionNotSupported">
            <summary>
            <para>The server does not support, or refuses to support, the HTTP protocol version that was used in the request 
            message. The server is indicating that it is unable or unwilling to complete the request using the same major 
            version as the client, as described in section 3.1, other than with this error message. The response SHOULD contain 
            an entity describing why that version is not supported and what other protocols are supported by that server.</para>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpAccessDeniedException">
            <summary>
            HTTP Access Denied Exception.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpAccessDeniedException.#ctor(System.String,System.String[])">
            <summary>
            HTTP Access Denied Exception.
            </summary>
            <param name="Message">Excepton message.</param>
            <param name="AuthenticationMechanisms">Authentication Mechanisms available.</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpAccessDeniedException.AuthenticationMechanisms">
            <summary>
            Authentication mechanisms available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect">
            <summary>
            Temporary Mirror redirection. The same URI is to be attempted on a new
            server, and a new port number.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect.#ctor(System.String,System.Int32)">
            <summary>
            Temporary Mirror redirection. The same URI is to be attempted on a new
            server, and a new port number.
            </summary>
            <param name="IpAddress">IP Address of mirror.</param>
            <param name="PortNumber">Port number of mirror.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Temporary Mirror redirection. The same URI is to be attempted on a new
            server, and a new port number.
            </summary>
            <param name="IpAddress">IP Address of mirror.</param>
            <param name="PortNumber">Port number of mirror.</param>
            <param name="AppendRedirected">If the Redirected parameter can be appended to the redirection URL.
            (Default value is true.)</param>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect.IpAddress">
            <summary>
            Mirror IP Address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect.HttpPortNumber">
            <summary>
            Mirror HTTP port number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpMirrorTemporaryRedirect.AppendRedirected">
            <summary>
            If the Redirected parameter can be appended to the redirection URL.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpSeeOtherException">
            <summary>
            HTTP See Other URL.
            </summary>
            <remarks>
            © Clayster, 2011-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpSeeOtherException.#ctor(System.String)">
            <summary>
            HTTP See Other URL.
            </summary>
            <param name="NewUrl">New URL.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpTemporaryRedirectException">
            <summary>
            HTTP Temporary Redirection to another URL.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpTemporaryRedirectException.#ctor(System.String)">
            <summary>
            HTTP Temporary Redirection to another URL.
            </summary>
            <param name="NewUrl">New URL.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpPermanentRedirectException">
            <summary>
            HTTP Permanent Redirection to another URL.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpPermanentRedirectException.#ctor(System.String)">
            <summary>
            HTTP Permanent Redirection to another URL.
            </summary>
            <param name="NewUrl">New URL.</param>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpHeader">
            <summary>
            Class containing information about an HTTP Header.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},Clayster.Library.Internet.HTTP.HttpUriScheme)">
            <summary>
            Class containing information about an HTTP Header.
            </summary>
            <param name="Header">HTTP Header as a list of key value pairs.</param>
            <param name="UriScheme">URI Scheme of protocol used to send the HTTP message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.#ctor(System.Collections.Specialized.NameValueCollection,Clayster.Library.Internet.HTTP.HttpUriScheme)">
            <summary>
            Class containing information about an HTTP Header.
            </summary>
            <param name="Headers">HTTP Header as a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <param name="UriScheme">URI Scheme of protocol used to send the HTTP message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.#ctor(System.String,Clayster.Library.Internet.HTTP.HttpUriScheme)">
            <summary>
            Class containing information about an HTTP Header.
            </summary>
            <param name="Headers">HTTP Header as a <see cref="T:System.String"/>.</param>
            <param name="UriScheme">URI Scheme of protocol used to send the HTTP message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.Contains(System.String)">
            <summary>
            Checks if a header key is available in the HTTP Header.
            </summary>
            <param name="Key">Header Key</param>
            <returns>If <paramref name="Key"/> is available in the HTTP Header.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.HasCookie(System.String)">
            <summary>
            If a specific cookie is available.
            </summary>
            <param name="Name">Name of the cookie.</param>
            <returns>true iff available.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetCookie(System.String)">
            <summary>
            Gets the value of a specific cookie, or the empty string if not found.
            </summary>
            <param name="Name">Name of the cookie.</param>
            <returns>Value of the cookie, or the empty string if not found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetClientSideHostName(System.Int32@)">
            <summary>
            Gets the client side Host Name used to access the resource. If the call passes through proxies, the name of the first proxy
            will be returned here, instead of the host name used in the final host header.
            </summary>
            <param name="Port">Port used</param>
            <returns>Host Name used by the client.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredContentType(System.String[])">
            <summary>
            Gets the preferred content type, based on the Accept header and its quality settings.
            </summary>
            <param name="PossibleContentTypes">Possible content types.</param>
            <returns>The preferred content type, if possible. The empty string if no contet types in
            <paramref name="PossibleContentTypes"/> match.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">Is thrown if no content type is acceptable.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredContentType(System.Boolean,System.String[])">
            <summary>
            Gets the preferred content type, based on the Accept header and its quality settings.
            </summary>
            <param name="ThrowExceptionIfNoneFound">If an exception should be thrown if no content type
            is accepted. (default=true)</param>
            <param name="PossibleContentTypes">Possible content types.</param>
            <returns>The preferred content type, if possible. The empty string if no contet types in
            <paramref name="PossibleContentTypes"/> match.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">Is thrown if no content type is acceptable and <paramref name="ThrowExceptionIfNoneFound"/> is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredContentType(System.Boolean,System.Double@,System.String[])">
            <summary>
            Gets the preferred content type, based on the Accept header and its quality settings.
            </summary>
            <param name="ThrowExceptionIfNoneFound">If an exception should be thrown if no content type
            is accepted. (default=true)</param>
            <param name="Quality">Quality of best content type.</param>
            <param name="PossibleContentTypes">Possible content types.</param>
            <returns>The preferred content type, if possible. The empty string if no contet types in
            <paramref name="PossibleContentTypes"/> match.</returns>
            <exception cref="T:Clayster.Library.Internet.HTTP.HttpException">Is thrown if no content type is acceptable and <paramref name="ThrowExceptionIfNoneFound"/> is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredLanguage">
            <summary>
            Gets the preferred language, based on the Accept-Language header field in the request and
            available languages in the <see cref="T:Clayster.Library.Language.Translator"/>.
            </summary>
            <returns>Preferred language if found, or the system default language if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredLanguage(System.String)">
            <summary>
            Gets the preferred language, based on the Accept-Language header field in the request and
            available languages in the <see cref="T:Clayster.Library.Language.Translator"/>.
            </summary>
            <param name="LanguageModuleName">Only return languages for which this language module is defined.</param>
            <returns>Preferred language if found, or the system default language if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredLanguage(System.Double@)">
            <summary>
            Gets the preferred language, based on the Accept-Language header field in the request and
            available languages in the <see cref="T:Clayster.Library.Language.Translator"/>.
            </summary>
            <param name="Quality">Quality of the selected language.</param>
            <returns>Preferred language if found, or the system default language if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetPreferredLanguage(System.String,System.Double@)">
            <summary>
            Gets the preferred language, based on the Accept-Language header field in the request and
            available languages in the <see cref="T:Clayster.Library.Language.Translator"/>.
            </summary>
            <param name="LanguageModuleName">Only return languages for which this language module is defined.</param>
            <param name="Quality">Quality of the selected language.</param>
            <returns>Preferred language if found, or the system default language if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.GetEnumerator">
            <summary>
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpHeader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.HeaderRecords">
            <summary>
            Header records, in the order they were reported.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Item(System.String)">
            <summary>
            Gets the HTTP Header Value given its key.
            </summary>
            <param name="Key">HTTP Header key</param>
            <returns>Corresponding HTTP Header value, or the empty string if none found.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Expires">
            <summary>
            Expires
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Location">
            <summary>
            Location
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Referer">
            <summary>
            Referer
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentType">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentTypeFull">
            <summary>
            Full Content Type, including character set definitions, boundaries, etc.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentLength">
            <summary>
            Content Length
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ContentTransferEncoding">
            <summary>
            Content Transfer Encoding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.TransferEncoding">
            <summary>
            Transfer Encoding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.UserAgent">
            <summary>
            User Agent
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Browser">
            <summary>
            Browser
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Port">
            <summary>
            Port number
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ViaString">
            <summary>
            Via Header String. Defined in §14.45:
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.KeepAlive">
            <summary>
            Connection keep-alive
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.ExpiresSpecified">
            <summary>
            If the Expires Header is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.HasRanges">
            <summary>
            If ranges are available (i.e. partial GET requested).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Ranges">
            <summary>
            Requested Ranges (i.e. partial GET requested).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Items">
            <summary>
            Available headers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsText">
            <summary>
            If the content is a text-based format.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsPlainText">
            <summary>
            If the content is plain text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsHtml">
            <summary>
            If the content is HTML text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsXml">
            <summary>
            If the content is XML text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsRss">
            <summary>
            If the content is an RSS Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsAtom">
            <summary>
            If the content is an ATOM Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsStyleSheet">
            <summary>
            If the content is a CSS document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsImage">
            <summary>
            If the content is an image.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsAudio">
            <summary>
            If the content is an audio file.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsVideo">
            <summary>
            If the content is a video file.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.IsJson">
            <summary>
            If the content is a JSON encoded object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Charset">
            <summary>
            Character set used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthenticationMechanisms">
            <summary>
            Authentication mechanisms available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Authorization">
            <summary>
            If a client authorization string is sent in the header.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.AuthorizationObject">
            <summary>
            Authorization object. If the resource has been authorized, this property contains the authorization object returned
            by the authorization method.
            
            Note: If the call is made through IIS, the authorization object will only be a string containing the user name of
            the call, as reported by IIS.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.RefererResource">
            <summary>
            Referer resource name (i.e. query parameters removed from <see name="Referer"/>).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.RefererPath">
            <summary>
            Referer Path (i.e. file name removed from <see name="RefererResource"/>).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.RefererFolder">
            <summary>
            Referer Folder (i.e. server and protocol information removed from <see name="RefererPath"/>).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Cookies">
            <summary>
            Available cookies
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.SetCookies">
            <summary>
            Cookies marked for update on the client. (Subset of <see cref="P:Clayster.Library.Internet.HTTP.HttpHeader.Cookies"/>.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.Accept">
            <summary>
            Returns what content types are accepted by the client, if any specified.
            
            NOTE: If no Accept header is found, an array with one item (*/*;q=0.5)
            is returned.
            
            NOTE 2: Content types may contain wild cards (*).
            
            NOTE 3: Each content type in the array have an associated quality number.
            The higher the number, the more desirable. If no quality number is
            provided in the header, 0.5 is returned.
            
            NOTE 4: The array is sorted by quality order, i.e. the most desired first.
            
            NOTE 5: Use <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Matches(System.String,System.String)"/>
            to check if two strings optionally containing wildcards (*) match.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.HasAccept">
            <summary>
            If the Accept header is defined.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpHeader.AcceptLanguage">
            <summary>
            Returns what languages are desired by the client, if any specified.
            
            NOTE: If no Accept-Language header is found, an empty array is returned.
            
            NOTE 2: Languages may contain wild cards (*).
            
            NOTE 3: Each language in the array have an associated quality number.
            The higher the number, the more desirable. If no quality number is
            provided in the header, 0.5 is returned.
            
            NOTE 4: The array is sorted by quality order, i.e. the most desired first.
            
            NOTE 5: Use <see cref="M:Clayster.Library.Math.ExpressionNodes.Operators.Logical.Like.Matches(System.String,System.String)"/>
            to check if two strings optionally containing wildcards (*) match.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.HttpResponse">
            <summary>
            Contains a HTTP Response received from an HTTP Server.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpResponse.#ctor(Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[],System.Object,Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Contains a HTTP Response received from an HTTP Server.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Data">Binary data</param>
            <param name="DecodedObject">Data as a decoded object.</param>
            <param name="ResponseCode">Response Code</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpResponse.#ctor(Clayster.Library.Internet.HTTP.HttpHeader,System.Byte[],System.Object,System.String,Clayster.Library.Internet.HTTP.HttpStatusCode)">
            <summary>
            Contains a HTTP Response received from an HTTP Server.
            </summary>
            <param name="Header">HTTP Header</param>
            <param name="Data">Binary data</param>
            <param name="DecodedObject">Data as a decoded object.</param>
            <param name="Text">Text representation of the data (for logging purposes).</param>
            <param name="ResponseCode">Response Code</param>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpResponse.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.HttpResponse.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Header">
            <summary>
            HTTP Header
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Data">
            <summary>
            Binary data
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.DecodedObject">
            <summary>
            Decoded version of <see name="Data"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Text">
            <summary>
            Text representation of <see name="Data"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.ResponseCode">
            <summary>
            HTTP Response Code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Html">
            <summary>
            HTML Document if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Xml">
            <summary>
            XML Document if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Xslt">
            <summary>
            XSLT Document if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Atom">
            <summary>
            Atom Document if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Rss">
            <summary>
            RSS Document if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.HttpResponse.Image">
            <summary>
            Image if <see name="DecodedObject"/> is one, otherwise null.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Interfaces.IXmlExportable">
            <summary>
            An interface to export an object to xml format.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Christian Falk
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Interfaces.IXmlExportable.Export(System.Xml.XmlWriter,System.String)">
            <summary>
            Exports the object to the XmlWriter w. If a namespace should be inserted in the
            object's element, specify ns, otherwise set to null.
            </summary>
            <param name="w">Export to this xml writer.</param>
            <param name="ns">Insert this namespace definition in the object's element. (xmlns=...)</param>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.DebugConsoleLineListenerSink">
            <summary>
            A Line Listener that outputs communication to the Debug output stream.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.DebugConsoleLineListenerSink.#ctor">
            <summary>
            A Line Listener that outputs communication to the Debug output stream.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.DebugConsoleLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            A Line Listener that outputs communication to the Debug output stream.
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.DebugConsoleLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.DebugConsoleLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.FileLineListenerSink">
            <summary>
            Base class of all Line Listeners that store incoming Line Listener Records to Files.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FileLineListenerSink.#ctor(System.String,System.Int32,Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Base class of all Line Listeners that store incoming Line Listener Records to Files.
            </summary>
            <param name="BasePath">Base path. Line Listener files are stored in subfolders to this folder.</param>
            <param name="KeepDays">Keep written files this number of days.</param>
            <param name="BinaryFormat">Format to use for binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FileLineListenerSink.#ctor(System.String,Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Base class of all Line Listeners that store incoming Line Listener Records to Files.
            </summary>
            <param name="BasePath">Base path. Line Listener files are stored in subfolders to this folder.</param>
            <param name="BinaryFormat">Format to use for binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FileLineListenerSink.#ctor(System.Xml.XmlElement)">
            <summary>
            Base class of all Line Listeners that store incoming Line Listener Records to Files.
            </summary>
            <param name="E">XML Element defining the Line Listener.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FileLineListenerSink.CheckDeleteOldFiles">
            <summary>
            Checks for old files to delete.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.FileLineListenerSink.BasePath">
            <summary>
            Base path. Line Listener files are stored in subfolders to this folder.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor(System.Boolean)">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <param name="ServerSide">If the line listener is used on the server side.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat,System.Boolean)">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
            <param name="ServerSide">If the line listener is used on the server side.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor(System.Boolean,System.Boolean)">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <param name="ServerSide">If the line listener is used on the server side.</param>
            <param name="PrintIds">If IDs are to be printed (default=false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.#ctor(Clayster.Library.Internet.LineListeners.BinaryFormat,System.Boolean,System.Boolean)">
            <summary>
            A Line Listener that outputs communication to the Console output stream (standard output).
            </summary>
            <param name="BinaryFormat">Format of binary data.</param>
            <param name="ServerSide">If the line listener is used on the server side.</param>
            <param name="PrintIds">If IDs are to be printed (default=false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.OnDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.OnDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.OnDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.OnDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.OnRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.OnRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.OnRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.PrintIds">
            <summary>
            If IDs are to be printed (default=false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.ConsoleOutLineListenerSink.Output">
            <summary>
            Output is sent to this <see cref="T:System.IO.TextWriter"/> object. Set this property to a custom <see cref="T:System.IO.TextWriter"/> object
            if you want to redirect the output somewhere else than <see cref="P:System.Console.Out"/>.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink">
            <summary>
            Line Listeners that stores incoming Line Listener Records to HTML Files.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.#ctor(System.Int32,System.String)">
            <summary>
            Line Listeners that stores incoming Line Listener Records to HTML Files.
            </summary>
            <param name="MaxCountPerFile">Maximum number of records per file.</param>
            <param name="BasePath">Base path. Line Listener files are stored in subfolders to this folder.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Line Listeners that stores incoming Line Listener Records to HTML Files.
            </summary>
            <param name="MaxCountPerFile">Maximum number of records per file.</param>
            <param name="BasePath">Base path. Line Listener files are stored in subfolders to this folder.</param>
            <param name="IncludeId">If record IDs should be included in the Files.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.#ctor(System.Int32,System.String,System.Boolean,Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Line Listeners that stores incoming Line Listener Records to HTML Files.
            </summary>
            <param name="MaxCountPerFile">Maximum number of records per file.</param>
            <param name="BasePath">Base path. Line Listener files are stored in subfolders to this folder.</param>
            <param name="IncludeId">If record IDs should be included in the Files.</param>
            <param name="BinaryFormat">Format to use for binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.Flush">
            <summary>
            Flushes records in memory to file.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.Terminate">
            <summary>
            Terminates the line listener. 
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.TerminateAll">
            <summary>
            Terminates all line listeners.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.HtmlFileLineListenerSink.Dispose">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Dispose"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink">
            <summary>
            Contains a finite number of records in an in-memory Line Listener.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.#ctor(System.Int32)">
            <summary>
            Contains a finite number of records in an in-memory Line Listener.
            </summary>
            <param name="MaxCount">Maximum number of records to hold in memory.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.#ctor(System.Int32,Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Contains a finite number of records in an in-memory Line Listener.
            </summary>
            <param name="MaxCount">Maximum number of records to hold in memory.</param>
            <param name="BinaryFormat">Format of binary data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)">
            <summary>
             <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.Add(Clayster.Library.Internet.LineListeners.LineListenerRecord)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])">
            <summary>
             <see cref="M:Clayster.Library.Internet.LineListeners.LineListener.ForEach(Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler,System.Object[])"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.Count">
            <summary>
            Get the number of linelistenerrecords on the listener, Note the maximum
            count, this value can not be bigger than MaxCount.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.FiniteInMemoryLineListenerSink.MaxCount">
            <summary>
            The maximum size of the buffer. If more than this is added, the first 
            record is removed.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.OnLineListenerRegistrationEventHandler">
            <summary>
            Delegate for line listener registration events.
            </summary>
            <param name="Listener">Line Listener</param>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.OnHasLineListenersEventHandler">
            <summary>
            Delegate for line listener existance events.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.OnLineListenerMessageEventHandler">
            <summary>
            Delegate for line listener message events.
            </summary>
            <param name="Message">Message</param>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.OnLineListenerRowEventHandler">
            <summary>
            Delegate for line listener row events.
            </summary>
            <param name="Id">ID Attached to the row.</param>
            <param name="Row">Text row.</param>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.OnLineListenerDataEventHandler">
            <summary>
            Delegate for line listener data events.
            </summary>
            <param name="Id">ID Attached to the data.</param>
            <param name="Data">Binary data</param>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapClient">
            <summary>
            IMAP Client. Implements the IMAP Protocol.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.Inbox">
            <summary>
            Default inbox name.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.DefaultPort">
            <summary>
            Default TCP Port.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.DefaultPortSsl">
            <summary>
            Default TCP Port when using SSL/TLS.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.#ctor(System.String,System.String,System.String)">
            <summary>
            IMAP Client. Implements the IMAP Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">IMAP Account user name</param>
            <param name="Password">IMAP Account password</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            IMAP Client. Implements the IMAP Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">IMAP Account user name</param>
            <param name="Password">IMAP Account password</param>
            <param name="Port">Port number to use.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            IMAP Client. Implements the IMAP Protocol.
            </summary>
            <param name="Host">IP Address or host name</param>
            <param name="UserName">IMAP Account user name</param>
            <param name="Password">IMAP Account password</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL/TLS is to be used when connecting to the server.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Reopen">
            <summary>
            Reopen the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Open">
            <summary>
            Open the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.ImapUtf7Encode(System.String)">
            <summary>
            Perform the special IMAP UTF-7 Encoding on a string.
            </summary>
            <param name="s">String to encode.</param>
            <returns>Encoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Close">
            <summary>
            Close the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.NoOperation">
            <summary>
            Execute a "No Operation" instruction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Poll">
            <summary>
            Poll the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.GetCapabilities">
            <summary>
            Get an array of server capabilities.
            </summary>
            <returns>Capabilities</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.OpenMailbox(System.String)">
            <summary>
            Opens a mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox to open.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.OpenMailbox">
            <summary>
            Opens the default mailbox.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.ExamineMailbox(System.String)">
            <summary>
            Examines a mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.ExamineMailbox">
            <summary>
            Examines the default mailbox.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.OpenMailbox(System.String,System.Boolean)">
            <summary>
            Opens a mailbox.
            </summary>
            <param name="MailboxName">Name of the mailbox.</param>
            <param name="ReadOnly">If the mailbox should be opened in a read-only state (true) or not (false).</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.CreateMailbox(System.String)">
            <summary>
            Creates a new mailbox.
            </summary>
            <param name="MailboxName">Name of new mailbox.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.DeleteMailbox(System.String)">
            <summary>
            Deletes a mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox to delete.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.RenameMailbox(System.String,System.String)">
            <summary>
            Renames a mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox to rename.</param>
            <param name="NewMailboxName">New name of mailbox.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.SubscribeToMailbox">
            <summary>
            Subscribes to the default mailbox.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.SubscribeToMailbox(System.String)">
            <summary>
            Subscribes to a given mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.UnsubscribeFromMailbox">
            <summary>
            Unsubscribes to the default mailbox.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.UnsubscribeFromMailbox(System.String)">
            <summary>
            Unsubscribes from a mailbox.
            </summary>
            <param name="MailboxName">Name of mailbox to unsubscribe from.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List">
            <summary>
            List items in the default mailbox.
            </summary>
            <returns>List of items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List(System.Boolean)">
            <summary>
            List items in the default mailbox.
            </summary>
            <param name="SubscribedOnly">If only subscribed items should be returned.</param>
            <returns>List of items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List(System.String)">
            <summary>
            List items in the default mailbox.
            </summary>
            <param name="ReferenceName">Reference name.</param>
            <returns>List if items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List(System.String,System.Boolean)">
            <summary>
            List items in the default mailbox.
            </summary>
            <param name="SubscribedOnly">If only subscribed items should be returned.</param>
            <param name="ReferenceName">Reference name.</param>
            <returns>List if items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List(System.String,System.String)">
            <summary>
            List items in a mailbox.
            </summary>
            <param name="ReferenceName">Reference name.</param>
            <param name="MailboxNameWithWildcards">Name of mailbox including wild cards.</param>
            <returns>List if items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.List(System.String,System.String,System.Boolean)">
            <summary>
            List items in a mailbox.
            </summary>
            <param name="ReferenceName">Reference name.</param>
            <param name="MailboxNameWithWildcards">Name of mailbox including wild cards.</param>
            <param name="SubscribedOnly">If only subscribed items should be returned.</param>
            <returns>List if items.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.CloseMailboxAndRemoveDeleted">
            <summary>
            Closes the mailbox and removes deleted items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.RemoveDeleted">
            <summary>
            Removes deleted items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Search(Clayster.Library.Internet.IMAP.SearchCondition[])">
            <summary>
            Search for messages in the mailbox.
            </summary>
            <param name="SearchConditions">Search conditions.</param>
            <returns>IMAP Messages found according to search conditions.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnRowSent">
            <summary>
            Event raised when a row has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnRowReceived">
            <summary>
            Event raised when a row has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnMessage">
            <summary>
            Event raised when an informative message has been repored.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnError">
            <summary>
            Event raised when an error has occurred.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnOpening">
            <summary>
            Event raised when the connection is openeing.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnOpened">
            <summary>
            Event raised when the connection has opened.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnClosing">
            <summary>
            Event raised when the connection is closing.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.IMAP.ImapClient.OnClosed">
            <summary>
            Event raised when the connection has closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Host">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.UserName">
            <summary>
            IMAP Account user name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Password">
            <summary>
            IMAP Account password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Port">
            <summary>
            Port number to use.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Ssl">
            <summary>
            If SSL/TLS is to be used when connecting to the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_IMAPv4">
            <summary>
            If the server supports IMAP v4.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_IMAPv4rev1">
            <summary>
            If the server supports UMAP v4 revision 1.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_CHILDREN">
            <summary>
            If the server supports the CHILDREN command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_IDLE">
            <summary>
            If the server supports the IDLE command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_QUOTA">
            <summary>
            If the server supports the QUOTA command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_SORT">
            <summary>
            If the server supports the SORT command.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.Supports_Authentication">
            <summary>
            If the server supports authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.NrMessagesInMailbox">
            <summary>
            Number of messages in mailbox.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.NrNewMessagesInMailbox">
            <summary>
            Number of new messages in mailbox
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.IsMailboxReadOnly">
            <summary>
            If the mailbox is read-only.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.HierarchySeparator">
            <summary>
            Mailbox hierarchy separator.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapClient.IMAPState">
            <summary>
            IMAP State
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.IMAPState.NonAuthenticated">
            <summary>
            Not authenticated
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.IMAPState.Authenticated">
            <summary>
            Authenticated
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.IMAP.ImapClient.IMAPState.Selected">
            <summary>
            Selected
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapException">
            <summary>
            Base class for all IMAP Exception
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapException.#ctor(Clayster.Library.Internet.IMAP.ImapClient,System.String)">
            <summary>
            Base class for all IMAP Exception
            </summary>
            <param name="Client">IMAP Client</param>
            <param name="Message">Exception message</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapException.Client">
            <summary>
            IMAP Client
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapFailureException">
            <summary>
            When an IMAP command failed
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapFailureException.#ctor(Clayster.Library.Internet.IMAP.ImapClient,System.String,System.String,System.String)">
            <summary>
            When an IMAP command failed
            </summary>
            <param name="Client">IMAP Client</param>
            <param name="Message">Exception message</param>
            <param name="Command">IMAP Command</param>
            <param name="Response">Resoinde from server.</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFailureException.Command">
            <summary>
            IMAP Command
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFailureException.Response">
            <summary>
            IMAP Response.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapErrorException">
            <summary>
            Whan an IMAP command was bad
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapErrorException.#ctor(Clayster.Library.Internet.IMAP.ImapClient,System.String,System.String,System.String)">
            <summary>
            Whan an IMAP command was bad
            </summary>
            <param name="Client">IMAP Client</param>
            <param name="Message">Exception message</param>
            <param name="Command">IMAP Command</param>
            <param name="Response">Resoinde from server.</param>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapInvalidStateException">
            <summary>
            When an IMAP command was issued in a state where the command is not available.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapInvalidStateException.#ctor(Clayster.Library.Internet.IMAP.ImapClient,System.String,Clayster.Library.Internet.IMAP.ImapClient.IMAPState)">
            <summary>
            When an IMAP command was issued in a state where the command is not available.
            </summary>
            <param name="Client">IMAP Client</param>
            <param name="Message">Exception message</param>
            <param name="CurrentState">Current state</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapInvalidStateException.CurrentState">
            <summary>
            Current IMAP State
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapFlags">
            <summary>
            IMAP Message flags.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Flags">
            <summary>
            Dictionary of available flags.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Seen">
            <summary>
            If the Seen flag is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Deleted">
            <summary>
            If the Deleted flag is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Answered">
            <summary>
            If the Answered flag is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Flagged">
            <summary>
            If the Flagged flag is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Draft">
            <summary>
            If the Draft flag is available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapFlags.Recent">
            <summary>
            If the Recent flag is available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapHeader">
            <summary>
            IMAP Header Class
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapHeader.#ctor(System.String)">
            <summary>
            IMAP Header Class
            </summary>
            <param name="Header">String representation of the header.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapHeader.ExtractName(System.String)">
            <summary>
            Extracts the name of an address.
            </summary>
            <param name="Address">Address</param>
            <returns>Name part of the address.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapHeader.ExtractAddress(System.String)">
            <summary>
            Extracts the e-mail address of an address.
            </summary>
            <param name="Address">Address</param>
            <returns>E-mail address part of the address.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Header">
            <summary>
            Header string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Items">
            <summary>
            Items as a sorted dictionary.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Item(System.String)">
            <summary>
            Index array into the header items.
            </summary>
            <param name="Key">Item key</param>
            <returns>Item value</returns>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.ReturnPath">
            <summary>
            Return path of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.MessageId">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.From">
            <summary>
            Message sent from.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.FromName">
            <summary>
            Name of sender.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.FromAddress">
            <summary>
            Address of sender.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.To">
            <summary>
            Message sent to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Bcc">
            <summary>
            Blind copy sent to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Cc">
            <summary>
            Carbon copy sent to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Subject">
            <summary>
            Message subject.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.MimeVersion">
            <summary>
            MIME Version of message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Date">
            <summary>
            Timepoint of message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.ContentType">
            <summary>
            Type of content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.ContentTransferEncoding">
            <summary>
            Content Transfer Encoding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Importance">
            <summary>
            Importance of message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.IsHighPriority">
            <summary>
            If the message is of high importance.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.IsLowPriority">
            <summary>
            If the message is of low importance.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.IsMultipart">
            <summary>
            If the message contains multi-part  content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.Boundary">
            <summary>
            Boundary string used in multi-part messages.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapHeader.TextEncoding">
            <summary>
            Text encoding defined by the header.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapMessage">
            <summary>
            Class representing a complete message read from an IMAP Server using the
            <see cref="T:Clayster.Library.Internet.IMAP.ImapClient"/> class.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.DoSplit(System.Byte[],System.String,System.Text.Encoding,System.Collections.Generic.List{Clayster.Library.Internet.MIME.MimeHeader}@,System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            Splits a multipart message.
            </summary>
            <param name="Raw">Binary version of the message.</param>
            <param name="Boundary">Boundary</param>
            <param name="DefaultEncoding">Default text encoding.</param>
            <param name="Headers">Headers found.</param>
            <param name="Parts">Decoded parts</param>
            <param name="PartsRaw">Raw data of the individual parts.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.Delete">
            <summary>
            Flags the message for deletion. Messages are later deleted with the mailbox is closed
            or whan a purge message is sent to the server.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.Undelete"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.Undelete">
            <summary>
            Removes any deletion flags from the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.Delete"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsSeen">
            <summary>
            Marks the message as having been seen.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnseen"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnseen">
            <summary>
            Removes any seen flags from the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsSeen"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsAnswered">
            <summary>
            Marks the message as having been answered.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnanswered"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnanswered">
            <summary>
            Removes any answered flags from the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsAnswered"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsFlagged">
            <summary>
            Marks the message as having been flagged.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnflagged"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnflagged">
            <summary>
            Removes any flagged flags rom the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsFlagged"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsDraft">
            <summary>
            Marks the message as begin a draft.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsNondraft"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsNondraft">
            <summary>
            Removes any draft flags from the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsDraft"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsRecent">
            <summary>
            Marks the message as begin a recent message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnrecent"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsUnrecent">
            <summary>
            Removes any recent flags from the message.
            <seealso cref="M:Clayster.Library.Internet.IMAP.ImapMessage.MarkAsRecent"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapMessage.CreateSmtpMessage(System.String,System.String)">
            <summary>
            Creates an SMTP Message (for sending) containing the information found in the message.
            </summary>
            <param name="SubjectPrefix">Subject prefix to use. Examples: "FW" for forwarded messages, "RE" for
            replies, etc.</param>
            <param name="From">Future sender of message.</param>
            <returns>New SMTP Mail message object.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Uid">
            <summary>
            Unique identifier of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Header">
            <summary>
            IMAP Header of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Envelope">
            <summary>
            Complete envelope (structure or composition) of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.BodyStructure">
            <summary>
            The body structure (layout or disposition) of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Flags">
            <summary>
            Message flags.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.InternalDate">
            <summary>
            The internal date of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.TextBase">
            <summary>
            The text representation of the contents of the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.TextRaw">
            <summary>
            Binary version of <see cref="P:Clayster.Library.Internet.IMAP.ImapMessage.TextBase"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Size">
            <summary>
            Size of the message in bytes.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.Parts">
            <summary>
            The different parts of the message. Each part is defined by its own MIME Header found
            in <see name="MimeHeaders"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.PartsRaw">
            <summary>
            Binary version of the different parts of the message. Each part is defined by its own MIME Header found
            in <see name="MimeHeaders"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapMessage.MimeHeaders">
            <summary>
            MIME Headers for the different parts found in <see name="Parts"/>.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapTreeNode">
            <summary>
            IMAP Tree Node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.GetEnumerator">
            <summary>
            Gets an enumerator of the children of the node.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.NextSibling">
            <summary>
            Next sibling node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.FirstChild">
            <summary>
            First child node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.Depth">
            <summary>
            Depth of the current node.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.Count">
            <summary>
            Number of child nodes.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator">
            <summary>
            Enumerator class for IMAP Tree Node children.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.#ctor(Clayster.Library.Internet.IMAP.ImapTreeNode)">
            <summary>
            Enumerator class for IMAP Tree Node children.
            </summary>
            <param name="Parent">Parent node.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.MoveNext">
            <summary>
            <see cref="M:System.Collections.IEnumerator.MoveNext"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.Reset">
            <summary>
            <see cref="M:System.Collections.IEnumerator.Reset"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.Current">
            <summary>
            <see cref="P:System.Collections.IEnumerator.Current"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.ImapTreeNode.IMapTreeNodeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            <see cref="P:System.Collections.Generic.IEnumerator`1.Current"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchAll">
            <summary>
            Search for all items
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchCondition">
            <summary>
            Base class for all search condition nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchCondition.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchAll.#ctor">
            <summary>
            Search for all items
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchAll.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchAnswered">
            <summary>
            Search for answered items
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchAnswered.#ctor">
            <summary>
            Search for answered items
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchAnswered.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchBcc">
            <summary>
            Search for items having a certain bcc field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionString">
            <summary>
            Base class for all string based search conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionString.#ctor(System.String)">
            <summary>
            Base class for all string based search conditions.
            </summary>
            <param name="Parameter">Parameter value</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionString.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionString.Parameter">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchBcc.#ctor(System.String)">
            <summary>
            Search for items having a certain bcc field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchBcc.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchBefore">
            <summary>
            Search for items before a specific timepoint.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionDate">
            <summary>
            Base class for all DateTime based search conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionDate.#ctor(System.DateTime)">
            <summary>
            Base class for all DateTime based search conditions.
            </summary>
            <param name="Parameter">Parameter value</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionDate.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Parameter">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchBefore.#ctor(System.DateTime)">
            <summary>
            Search for items before a specific timepoint.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchBefore.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchBody">
            <summary>
            Search for items containing specific text in its body
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchBody.#ctor(System.String)">
            <summary>
            Search for items containing specific text in its body
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchBody.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchCc">
            <summary>
            Search for items having a certain cc field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchCc.#ctor(System.String)">
            <summary>
            Search for items having a certain cc field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchCc.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionBinary">
            <summary>
            Base class for all binary search conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionUnary">
            <summary>
            Base class for all unary search conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionUnary.#ctor(Clayster.Library.Internet.IMAP.SearchCondition)">
            <summary>
            Base class for all unary search conditions.
            </summary>
            <param name="Condition">Search condition.</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionUnary.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionUnary.Attribute">
            <summary>
            Name of the attribute.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionBinary.#ctor(Clayster.Library.Internet.IMAP.SearchCondition,Clayster.Library.Internet.IMAP.SearchCondition)">
            <summary>
            Base class for all binary search conditions.
            </summary>
            <param name="Condition">Condition 1</param>
            <param name="Condition2">Condition 2</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionBinary.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionInteger">
            <summary>
            Base class for all integer based search conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionInteger.#ctor(System.Int32)">
            <summary>
            Base class for all integer based search conditions.
            </summary>
            <param name="Parameter">Parameter value</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionInteger.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionInteger.Parameter">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionInteger.Attribute">
            <summary>
            Name of the attribute
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchConditionString2">
            <summary>
            Base class for all search operators using two string parameters.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionString2.#ctor(System.String,System.String)">
            <summary>
            Base class for all search operators using two string parameters.
            </summary>
            <param name="Parameter">Search parameter</param>
            <param name="Parameter2">Second search parameter</param>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchConditionString2.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchConditionString2.Parameter2">
            <summary>
            Second parameter value.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchDeleted">
            <summary>
            Searches for deleted items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchDeleted.#ctor">
            <summary>
            Searches for deleted items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchDeleted.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchDraft">
            <summary>
            Searches for draft items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchDraft.#ctor">
            <summary>
            Searches for draft items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchDraft.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchFlagged">
            <summary>
            Searches for flagged items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchFlagged.#ctor">
            <summary>
            Searches for flagged items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchFlagged.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchFrom">
            <summary>
            Search for items having a certain from field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchFrom.#ctor(System.String)">
            <summary>
            Search for items having a certain from field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchFrom.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchHeader">
            <summary>
            Searches for header items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchHeader.#ctor(System.String,System.String)">
            <summary>
            Searches for header items.
            </summary>
            <param name="Parameter">First search parameter</param>
            <param name="Parameter2">Second search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchHeader.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchKeyword">
            <summary>
            Search for items having a certain keyword.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchKeyword.#ctor(System.String)">
            <summary>
            Search for items having a certain keyword.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchKeyword.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchLarger">
            <summary>
            Searches for items larger than a specified size.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchLarger.#ctor(System.Int32)">
            <summary>
            Searches for items larger than a specified size.
            </summary>
            <param name="Octets">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchLarger.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionInteger.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchNew">
            <summary>
            Searches for new items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchNew.#ctor">
            <summary>
            Searches for new items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchNew.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchNot">
            <summary>
            Negates a search condition
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchNot.#ctor(Clayster.Library.Internet.IMAP.SearchCondition)">
            <summary>
            Negates a search condition
            </summary>
            <param name="Condition">Search condition to negate</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchNot.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionUnary.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchOld">
            <summary>
            Searches for old items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchOld.#ctor">
            <summary>
            Searches for old items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchOld.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchOn">
            <summary>
            Search for items on a specific timepoint.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchOn.#ctor(System.DateTime)">
            <summary>
            Search for items on a specific timepoint.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchOn.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchOr">
            <summary>
            Searches for items satisfying at least one of two conditions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchOr.#ctor(Clayster.Library.Internet.IMAP.SearchCondition,Clayster.Library.Internet.IMAP.SearchCondition)">
            <summary>
            Searches for items satisfying at least one of two conditions.
            </summary>
            <param name="Condition">Search condition 1</param>
            <param name="Condition2">Search condition 2</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchOr.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionUnary.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchRecent">
            <summary>
            Searches for recent items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchRecent.#ctor">
            <summary>
            Searches for recent items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchRecent.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSeen">
            <summary>
            Searches for seen items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSeen.#ctor">
            <summary>
            Searches for seen items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSeen.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSentBefore">
            <summary>
            Search for items having been sent before a specific time point.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSentBefore.#ctor(System.DateTime)">
            <summary>
            Search for items having been sent before a specific time point.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSentBefore.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSentOn">
            <summary>
            Search for items having been sent on a specific date.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSentOn.#ctor(System.DateTime)">
            <summary>
            Search for items having been sent on a specific date.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSentOn.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSentSince">
            <summary>
            Search for items having been sent since a specific timepoint.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSentSince.#ctor(System.DateTime)">
            <summary>
            Search for items having been sent since a specific timepoint.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSentSince.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSince">
            <summary>
            Search for items newer than a specific timepoint.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSince.#ctor(System.DateTime)">
            <summary>
            Search for items newer than a specific timepoint.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSince.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionDate.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSmaller">
            <summary>
            Searches for items smaller than a specified size.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSmaller.#ctor(System.Int32)">
            <summary>
            Searches for items smaller than a specified size.
            </summary>
            <param name="Octets">Search condition</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSmaller.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionInteger.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchSubject">
            <summary>
            Search for items having a certain subject field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchSubject.#ctor(System.String)">
            <summary>
            Search for items having a certain subject field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchSubject.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchText">
            <summary>
            Search for items having a certain text field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchText.#ctor(System.String)">
            <summary>
            Search for items having a certain text field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchText.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchTo">
            <summary>
            Search for items having a certain to field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchTo.#ctor(System.String)">
            <summary>
            Search for items having a certain to field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchTo.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUid">
            <summary>
            Search for items having a certain uid field.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUid.#ctor(System.String)">
            <summary>
            Search for items having a certain uid field.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchUid.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUnanswered">
            <summary>
            Searches for unanswered items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnanswered.#ctor">
            <summary>
            Searches for unanswered items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnanswered.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUndeleted">
            <summary>
            Searches for undeleted items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUndeleted.#ctor">
            <summary>
            Searches for undeleted items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUndeleted.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUndraft">
            <summary>
            Searches for undrafted items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUndraft.#ctor">
            <summary>
            Searches for undrafted items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUndraft.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUnflagged">
            <summary>
            Searches for unflagged items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnflagged.#ctor">
            <summary>
            Searches for unflagged items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnflagged.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUnkeyword">
            <summary>
            Search for items not having a certain keyword.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnkeyword.#ctor(System.String)">
            <summary>
            Search for items not having a certain keyword.
            </summary>
            <param name="Parameter">Search parameter</param>
        </member>
        <member name="P:Clayster.Library.Internet.IMAP.SearchUnkeyword.Attribute">
            <summary>
            <see cref="P:Clayster.Library.Internet.IMAP.SearchConditionString.Attribute"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.IMAP.SearchUnseen">
            <summary>
            Searches for unseen items.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnseen.#ctor">
            <summary>
            Searches for unseen items.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.IMAP.SearchUnseen.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.ForEachLineListenerRecordEventHandler">
            <summary>
            Delegate for Line Listener recursion callback methods.
            </summary>
            <param name="Record">Line Listener record.</param>
            <param name="Parameters">Tunneled parameters.</param>
            <returns>true if the process should continue, false if it should be aborted.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerBinaryRecord">
            <summary>
            Base class of all binary Line Listener records.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerRecord">
            <summary>
            Base class for all Line Listener records.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerRecord.#ctor(System.String)">
            <summary>
            Base class for all Line Listener records.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerRecord.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRecord.Timepoint">
            <summary>
            Timepoint of record.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRecord.Id">
            <summary>
            ID of item corresponding to the record.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerBinaryRecord.#ctor(System.String,System.Byte[],Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Base class of all binary Line Listener records.
            </summary>
            <param name="Id">ID Attached to the record.</param>
            <param name="Data">Binary data</param>
            <param name="BinaryFormat">Binary format for presentation.</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerBinaryRecord.Data">
            <summary>
            Binary data.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerDataReadRecord">
            <summary>
            Line Listener Data Read record.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerDataReadRecord.#ctor(System.String,System.Byte[],Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Line Listener Data Read record.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Data">Data to record.</param>
            <param name="BinaryFormat">Format of the data.</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerDataReadRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerDataReadRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerDataWrittenRecord">
            <summary>
            Line Listener Data Written record.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerDataWrittenRecord.#ctor(System.String,System.Byte[],Clayster.Library.Internet.LineListeners.BinaryFormat)">
            <summary>
            Line Listener Data Written record.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Data">Data to record.</param>
            <param name="BinaryFormat">Format of the data.</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerDataWrittenRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerDataWrittenRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerErrorRecord">
            <summary>
            Line Listener Error record.</summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerStringRecord">
            <summary>
            Base class for all Line Listener records based on text rows.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerStringRecord.#ctor(System.String,System.String)">
            <summary>
            Base class for all Line Listener records based on text rows.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Row">Text row</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerStringRecord.Row">
            <summary>
            Text row corresponding to record.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerErrorRecord.#ctor(System.String,System.String)">
            <summary>
            Line Listener Error record.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Message">Message text.</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerErrorRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerErrorRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerMessageRecord">
            <summary>
            Line Listener Message record.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerMessageRecord.#ctor(System.String,System.String)">
            <summary>
            Line Listener Message record.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Message">Message text.</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerMessageRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerMessageRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.BinaryFormat">
            <summary>
            Binary format to use for line listeners.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.LineListeners.BinaryFormat.Hexadecimal">
            <summary>
            Binary data is output in hexadecimal form.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.LineListeners.BinaryFormat.Base64">
            <summary>
            Binary data is output using Base-64 encoding.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.LineListeners.BinaryFormat.ByteCount">
            <summary>
            Binary data is not output in itself. Instead, a byte count is output for each block of
            binary data received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerRowReadRecord">
            <summary>
            Class representing a single row having been read.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerRowReadRecord.#ctor(System.String,System.String)">
            <summary>
            Class representing a single row having been read.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Row">Text row</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRowReadRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRowReadRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LineListeners.LineListenerRowWrittenRecord">
            <summary>
            Class representing a single row having been written.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LineListeners.LineListenerRowWrittenRecord.#ctor(System.String,System.String)">
            <summary>
            Class representing a single row having been written.
            </summary>
            <param name="Id">ID of item corresponding to the record.</param>
            <param name="Row">Text row</param>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRowWrittenRecord.TextColor">
            <summary>
            TextColor of the message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.LineListeners.LineListenerRowWrittenRecord.BackgroundColor">
            <summary>
            The background color of the message
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.AudioDecoder">
            <summary>
            Decodes audio objects
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.AudioDecoder.#ctor">
            <summary>
            Decodes audio objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.AudioDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.AudioDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.AudioDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.AudioDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.AudioDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormParametersDecoder">
            <summary>
            Decodes form parameters
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.FormParametersDecoder.MimeType">
            <summary>
            MIME Type for Form Parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersDecoder.#ctor">
            <summary>
            Decodes form parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormParametersDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTTP.FormParametersEncoder">
            <summary>
            Encodes Form parameters
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.HTTP.FormParametersEncoder.MimeTypeName">
            <summary>
            MIME Type for form parameters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.#ctor">
            <summary>
            Encodes Form parameters
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTTP.FormParametersEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTTP.FormParametersEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.VideoDecoder">
            <summary>
            Decodes video objects
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.VideoDecoder.#ctor">
            <summary>
            Decodes video objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.VideoDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.VideoDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.VideoDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.VideoDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.VideoDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.XmlEncoder">
            <summary>
            Encodes xml documents (and SOAP Envelopes)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.#ctor">
            <summary>
            Encodes xml documents (and SOAP Envelopes)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.IsSoapEnvelope(System.Xml.XmlDocument,System.Double@)">
            <summary>
            Checks if an XML Document is a SOAP Envelope document.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="SoapVersion">SOAP Version, if detected.</param>
            <returns>If it is a SOAP Envelope document.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.Encodes(System.Object,System.UInt32@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encodes(System.Object,System.UInt32@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.EncodesSpecificType(System.Object,System.UInt32)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodesSpecificType(System.Object,System.UInt32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.Encode(System.Object,System.UInt32@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.EncodeSpecificType(System.Object,System.UInt32,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XmlEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XmlEncoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapEncoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ImageEncoder">
            <summary>
            Encodes image objects
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.#ctor">
            <summary>
            Encodes image objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetMimeType(System.Drawing.Image)">
            <summary>
            Gets the MIME Type of an Image.
            </summary>
            <param name="Image">Image</param>
            <returns>MIME Type of the specific image.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetMimeType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the MIME Type images having a specified image format.
            </summary>
            <param name="ImageFormat">Image format</param>
            <returns>MIME Type of the specific image format.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetMimeType(System.Guid)">
            <summary>
            Gets the MIME Type images having a specified image format.
            </summary>
            <param name="Format">Image format GUID</param>
            <returns>MIME Type of the specific image format.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetFormat(System.String)">
            <summary>
            Gets the Image Format from a specific MIME Type.
            </summary>
            <param name="MimeType">MIME Type</param>
            <returns>Image format.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetEncoderInfo(System.String)">
            <summary>
            Gets inforamtion about an Image Codec given its MIME Type.
            </summary>
            <param name="MimeType">MIME Type</param>
            <returns>Image Codec information if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.Encodes(System.Object,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encodes(System.Object,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.EncodesSpecificType(System.Object,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodesSpecificType(System.Object,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.Encode(System.Object,System.String@,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.EncodeSpecificType(System.Object,System.String,Clayster.Library.Internet.MIME.MimeEncoderSupportGrade@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageEncoder.GetDefaultFileExtension(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeEncoder.GetDefaultFileExtension(System.Object)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ImageEncoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeEncoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.ImageDecoder">
            <summary>
            Decodes image objects
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageDecoder.#ctor">
            <summary>
            Decodes image objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.ImageDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.ImageDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.XmlDecoder">
            <summary>
            Decodes xml documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.#ctor">
            <summary>
            Decodes xml documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.DecodeXml(System.Byte[],System.Text.Encoding,System.String,System.String@)">
            <summary>
            Decodes XML
            </summary>
            <param name="Data">Data</param>
            <param name="TextEncoding">Text encoding</param>
            <param name="SourceUrl">URL of resource, or the empty string if not available.</param>
            <param name="TextBase">Text base</param>
            <returns>Decoded XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.XmlDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XmlDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XmlDecoder.ContentTypes">
            <summary>
            XML Content Types.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.XmlDecoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssDecoder">
            <summary>
            Decodes rss documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDecoder.#ctor">
            <summary>
            Decodes rss documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDecoder.ContentTypes">
            <summary>
            RSS Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.HTML.HtmlDecoder">
            <summary>
            Decodes html documents
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDecoder.#ctor">
            <summary>
            Decodes html documents
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.HTML.HtmlDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.HTML.HtmlDecoder.ContentTypes">
            <summary>
            HTML Content Types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.MimeHeader">
            <summary>
            Class representing a MIME Header.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeHeader.#ctor(System.String)">
            <summary>
            Class representing a MIME Header.
            </summary>
            <param name="Header">MIME Header</param>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeHeader.Decode(System.String)">
            <summary>
            Decodes an object.
            </summary>
            <param name="s">String containing object.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeHeader.Decode(System.String,System.Byte[]@)">
            <summary>
            Decodes an object.
            </summary>
            <param name="s">String containing object. Can be null, if not available and <paramref name="Data"/> is provided.</param>
            <param name="Data">Raw data of object. Can be null, if not available. It will be set to the decoded contents.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeHeader.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.Header">
            <summary>
            Original MIME Header, as a string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.Items">
            <summary>
            Sorted header items.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.Item(System.String)">
            <summary>
            Gets the value of a header, given its key name.
            </summary>
            <param name="Key">Header key name.</param>
            <returns>Header value.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentType">
            <summary>
            Content type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentTypeFull">
            <summary>
            Content type, including character set definitions, boundaries, etc.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.CharacterSet">
            <summary>
            Character set used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.Method">
            <summary>
            Method if any.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentEncoding">
            <summary>
            Content encoding
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentId">
            <summary>
            Content ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentDisposition">
            <summary>
            Content Disposition.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsText">
            <summary>
            If the content is a text document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsPlainText">
            <summary>
            If the content is plain text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsHtml">
            <summary>
            If the content is html text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsXml">
            <summary>
            If the content is xml text.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsCalendar">
            <summary>
            If the content is a vCalendar entry.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsCard">
            <summary>
            If the content is a vCard entry.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsImage">
            <summary>
            If the content is an image.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsAudio">
            <summary>
            If the content is an audio file.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.IsMultipart">
            <summary>
            If the content is a multi-part message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.Boundary">
            <summary>
            Boundary string used in multipart messages.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.FileName">
            <summary>
            File name used by the content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.ContentDispositionType">
            <summary>
            Content Disposition type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeHeader.TextEncoding">
            <summary>
            Text Encoding used by the content.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade">
            <summary>
            How well an encoder encodes the data.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade.NotAtAll">
            <summary>
            Not at all
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade.Barely">
            <summary>
            Barely.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade.Ok">
            <summary>
            Ok
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade.Well">
            <summary>
            Well
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.MIME.MimeEncoderSupportGrade.Perfect">
            <summary>
            Perfect
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.MimeUtilities">
            <summary>
            Utilities for MIME decoding and encoding of objects.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Unload">
            <summary>
            Unloads all MIME encoders and decoders. If new MIME encodings or decodings are performed, the current application domain 
            will be scanned again for available encoders and decoders. Call this method after dynamically loading assemblies into the 
            application domain.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String,System.String)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object.</param>
            <param name="SourceUrl">File name or URL</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object.</param>
            <param name="TextEncoding">Text Encoding to use, if needed.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String,System.String,System.Text.Encoding)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object.</param>
            <param name="SourceUrl">File Name or URL</param>
            <param name="TextEncoding">Text Encoding to use, if needed.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String,System.Text.Encoding,System.String@)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object.</param>
            <param name="TextEncoding">Text Encoding to use, if needed.</param>
            <param name="TextBase">If the object has a string representation, it is output in this
            variable.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Decode(System.Byte[],System.String,System.String,System.Text.Encoding,System.String@)">
            <summary>
            Decodes a binary representation of an object.
            </summary>
            <param name="Data">Binary representation of the object.</param>
            <param name="MimeType">MIME Type of the object, including eventual character set definitions, boundaries, etc.</param>
            <param name="SourceUrl">File Name or URL</param>
            <param name="TextEncoding">Text Encoding to use, if needed.</param>
            <param name="TextBase">If the object has a string representation, it is output in this
            variable.</param>
            <returns>Decoded object.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetDecoder(System.String)">
            <summary>
            Gets a MIME Decoder corresponding to a given MIME Type of File Name.
            </summary>
            <param name="MimeType">MIME Type</param>
            <returns>MIME decoder, if found, or null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetDecoder(System.String,System.String)">
            <summary>
            Gets a MIME Decoder corresponding to a given MIME Type of File Name.
            </summary>
            <param name="MimeType">MIME Type</param>
            <param name="FileName">File Name</param>
            <returns>MIME decoder, if found, or null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetDefaultFileExtension(System.String)">
            <summary>
            Gets the default file extension of a given MIME Type.
            </summary>
            <param name="MimeType">MIME Type</param>
            <returns>Default file extension.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetEncodingMimeType(System.Object)">
            <summary>
            Gets the MIME Type of an object. If no MIME Encoder can be found supporting the
            object type, the empty string is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>MIME Type of an object. If no MIME Encoder can be found supporting the
            object type, the empty string is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Encodes(System.Object)">
            <summary>
            If an object can be encoded with any of the MIME Encoders available.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>true if the object can be encoded, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Encodes(System.Object,System.String@)">
            <summary>
            If an object can be encoded with any of the MIME Encoders available.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="MimeType">If the object can be encoded, the corresponding
            MIME Type will be output into this variable. If the object cannot be
            encoded, the empty string is output.</param>
            <returns>true if the object can be encoded, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.EncodesSpecificType(System.Object,System.String)">
            <summary>
            If an object can be encoded using a specific MIME Type.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredMimeType">MIME Type to use.</param>
            <returns>true if the object can be encoded using the specified MIME Type, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object)">
            <summary>
            Tries to encode an object. If no encoder was found to encode the object, null is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>Encoded object. If no encoder was found to encode the object, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.Encode(System.Object,System.String@)">
            <summary>
            Tries to encode an object. If no encoder was found to encode the object, null is returned.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="MimeType">If the object is encoded, the corresponding MIME Type is output to this
            variable. If not encoded, the empty string is output.</param>
            <returns>Encoded object. If no encoder was found to encode the object, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.EncodeSpecificType(System.Object,System.String)">
            <summary>
            Tries to encode an object using a specified MIME Type.
            </summary>
            <param name="Object">Object to encode.</param>
            <param name="DesiredMimeType">MIME Type to use for encoding.</param>
            <returns>Encoded object if possible to encode, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            Gets the MIME Type from a file extension.
            </summary>
            <param name="FileName">Name of the file to encode.</param>
            <returns>MIME Type.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.MimeUtilities.GetDefaultFileExtension(System.Object)">
            <summary>
            Gets the default file extension for an object.
            </summary>
            <param name="Object">Object to encode.</param>
            <returns>File exitension if the object can be encoded. If not, the empty string
            is returned.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeUtilities.RegisteredDecoderMimeTypes">
            <summary>
            Returns an array of registered decoder MIME Types 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeUtilities.RegisteredEncoderMimeTypes">
            <summary>
            Returns an array of registered encoder MIME Types 
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.MimeUtilities.RegisteredFileExtensions">
            <summary>
            Returns an array of registered file extensions, together with their corresponding mime types.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.MIME.TextDecoder">
            <summary>
            Decodes text objects
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.#ctor">
            <summary>
            Decodes text objects
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.Decode(System.Byte[],System.Text.Encoding,System.String,System.String,System.String@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.DecodeString(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes text.
            </summary>
            <param name="Data">Data</param>
            <param name="TextEncoding">Desired text encoding. If null, <see cref="P:System.Text.Encoding.Default"/> will be used.</param>
            <returns>Decoded string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.HasByteOrderMarks(System.Byte[])">
            <summary>
            Checks if the binary representation of a string begins with a Byte Order Mark (BOM), specifying the text encoding to use.
            </summary>
            <param name="Data">Binary representation of a string.</param>
            <returns>If <paramref name="Data"/> begins with a BOM.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.GetEncoderFromByteOrderMark(System.Byte[])">
            <summary>
            Returns the Text Encoding specified by the Byte Order Mark (BOM) of the binary representation of a string.
            </summary>
            <param name="Data">Binary representation of a string.</param>
            <returns>Text encoding used to encode the string, or null if no Byte Order Mark found or recognized.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.GetMimeTypeFromFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetMimeTypeFromFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.GetDefaultFileExtension(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetDefaultFileExtension(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.GetRecognizedFileExtensions">
            <summary>
            <see cref="M:Clayster.Library.Internet.MIME.IMimeDecoder.GetRecognizedFileExtensions"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.MIME.TextDecoder.Decode(System.Byte[],System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.Decode(System.Byte[],System.String)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TextDecoder.MimeTypes">
            <summary>
            <see cref="P:Clayster.Library.Internet.MIME.IMimeDecoder.MimeTypes"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.MIME.TextDecoder.ContentFormat">
            <summary>
            <see cref="P:Clayster.Library.Internet.CoAP.Encoding.ICoapDecoder.ContentFormat"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.IpAddressRange">
            <summary>
            IP Address Range
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.IpAddressRange.#ctor(System.String)">
            <summary>
            IP Address Range
            </summary>
            <param name="Range">IP Address Range. Examples: "192.168.1.10", "192.168.1.10-50", "192.168.1.10,11,20-25".</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.IpAddressRange.GetNext">
            <summary>
            Gets the next IP Address in the range. If no more addresses are to be found, null is returned.
            </summary>
            <returns>Next IP Address in the range. If no more addresses are to be found, null is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.IpAddressRange.Reset">
            <summary>
            Resets the IP Range.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.IpAddressRange.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.IpAddressRange.Contains(System.Net.IPAddress)">
            <summary>
            If the IP Address is contained in the IP address range.
            </summary>
            <param name="Address">IP Address</param>
            <returns>If the address is contained in the IP Address range.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.IpAddressRange.Count">
            <summary>
            Number of IP Addresses
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortRange">
            <summary>
            IP Port Range
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortRange.#ctor(System.String)">
            <summary>
            IP Port Range
            </summary>
            <param name="Range">Port Range. Examples: "80", "1000-2000", "80,443,1000-2000".</param>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortRange.Reset">
            <summary>
            Resets the port range.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortRange.GetNext">
            <summary>
            Gets the next port number in the range. If no more port numbers are availale, 0 is returned.
            </summary>
            <returns>Next port number in the range. If no more port numbers are availale, 0 is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Port_Scanner.PortRange.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.Port_Scanner.PortRange.Count">
            <summary>
            Number of port numbers.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.PortFoundEventHandler">
            <summary>
            Delegate for event handlers used when IP Ports have been found open.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event Arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.Port_Scanner.ScanProgressEventHandler">
            <summary>
            Delegate for scan progress event handlers.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event Arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.OnBinaryCommandReceivedDelegate">
            <summary>
            Delegate used for binary command receiption events.
            </summary>
            <param name="Server">Binary command server receiving the command.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.BinaryCommandServer">
            <summary>
            Binary Command Server
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Binary Command Server
            </summary>
            <param name="Port">Listening port.</param>
            <param name="Backlog">Connection backlog</param>
            <param name="BufferSize">Input buffer size</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.RegisterCommand(System.Int32,Clayster.Library.Internet.OnBinaryCommandReceivedDelegate)">
            <summary>
            Registers a binary command with the server.
            </summary>
            <param name="Command">Command number.</param>
            <param name="EventHandler">Event handler to handle the particular command.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.RegisterCommand(System.Int32,Clayster.Library.Internet.OnBinaryCommandReceivedDelegate,System.Boolean)">
            <summary>
            Registers a binary command with the server.
            </summary>
            <param name="Command">Command number.</param>
            <param name="EventHandler">Event handler to handle the particular command.</param>
            <param name="ContinueToRead">If the server should continue to read data from the client
            when this command has been received.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.ClientClosed(System.Net.Sockets.Socket,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientClosed(System.Net.Sockets.Socket,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.Dispose">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.ReceiveCommand(Clayster.Library.Internet.ServerSocketBinary.State,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Binary command received.
            </summary>
            <param name="State">Internal Client connection state.</param>
            <param name="Command">Command index.</param>
            <param name="SequenceNr">Sequence number.</param>
            <param name="Data">Binary Data</param>
            <returns>If the server should continue to read data from the client.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.SendCommandToClient(Clayster.Library.Internet.ServerSocketBinary.State,System.Int32,System.Int32,Clayster.Library.Internet.BinaryCommandOutgoing)">
            <summary>
            Sends a command to a client.
            </summary>
            <param name="State">State object of client connection.</param>
            <param name="Command">Command</param>
            <param name="SequenceNr">Sequence number</param>
            <param name="Outgoing">Binary data</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.SendCommandToClientSynchronous(Clayster.Library.Internet.ServerSocketBinary.State,System.Int32,System.Int32,Clayster.Library.Internet.BinaryCommandOutgoing,System.Boolean)">
            <summary>
            Sends a command to a client in a synchronous manner.
            </summary>
            <param name="State">State object of client connection.</param>
            <param name="Command">Command</param>
            <param name="SequenceNr">Sequence number</param>
            <param name="Outgoing">Binary data</param>
            <param name="SilenceMode">If the server should enter silence mode for the particular client.
            This means that all events are queued, and sent to the client when silence mode is ended.</param>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.BinaryCommandServer.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.BinaryCommandServer.OnBinaryCommandReceived">
            <summary>
            Event raised when a binary command has been received from the client.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandServer.RegisteredCommands">
            <summary>
            The commands registered at ths server
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.BinaryCommandServer.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssCategory">
            <summary>
            Represents an RSS Category.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssCategory.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCategory.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCategory.Name">
            <summary>
            Category Name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCategory.Domain">
            <summary>
            Category Domain.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCategory.Element">
            <summary>
            XML Definition
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssChannel">
            <summary>
            Represents an RSS Channel.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssChannel.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Title">
            <summary>
            Channel title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Link">
            <summary>
            Channel link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Docs">
            <summary>
            Documentation
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Generator">
            <summary>
            Generator
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.ManagingEditor">
            <summary>
            Managing editor
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.WebMaster">
            <summary>
            Webmaster
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Parent">
            <summary>
            Parent RSS Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Items">
            <summary>
            List of items
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Copyright">
            <summary>
            Copyright statement
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Categories">
            <summary>
            Categories
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Rating">
            <summary>
            Rating
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Cloud">
            <summary>
            Cloud
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.TextInput">
            <summary>
            Text input
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.TtlMinutes">
            <summary>
            Time to live in minutes
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.SkipHours">
            <summary>
            Array of boolean values representing what hours to skip.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.SkipDays">
            <summary>
            Array of boolean values representing what days to skip.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.PubDate">
            <summary>
            Publishing date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.LastBuildDate">
            <summary>
            Last build date.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssChannel.FirstCategory">
            <summary>
            First category
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssCloud">
            <summary>
            Represents information about an RSS Cloud.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.RegisterProcedure">
            <summary>
            Register procedure
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.Protocol">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssCloud.Element">
            <summary>
            XML Element definition.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssDocument">
            <summary>
            Class containing an RSS Document.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDocument.CalcNewCount(System.String,System.Boolean@)">
            <summary>
            Calculates the number of new entries up to a given item ID (GUID).
            Only GUIDs with permanent links are counted.
            </summary>
            <param name="LastId">Last permanent GUID.</param>
            <param name="LastIdFound">If the last id was found.</param>
            <returns>Number of new entries found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDocument.GetLatestId">
            <summary>
            Gets the ID of the latest item having a permalink.
            </summary>
            <returns>ID of latest item having a permalink.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDocument.LoadFromFile(System.String)">
            <summary>
            Loads an RSS Document from a file.
            </summary>
            <param name="FileName">File Name of the RSS Document.</param>
            <returns>RSS Document object instance.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDocument.LoadFromHttp(System.String)">
            <summary>
            Loads an RSS Document from an HTTP Server.
            </summary>
            <param name="Url">Url to the RSS resource.</param>
            <returns>RSS Document object instance.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Class containing an RSS Document.
            </summary>
            <param name="Doc">XML Document containing the RSS document.</param>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Version">
            <summary>
            Version of the RSS Document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.HasVersion">
            <summary>
            If the document has a version (true) or not (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Rdf">
            <summary>
            If the document is an RDF Document (true) or not (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Rss">
            <summary>
            If the document is an RSS Document (true) or not (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Url">
            <summary>
            Resource URL if available, otherwise the empty string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Channels">
            <summary>
            List of channels available in the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.Items">
            <summary>
            Gets an array of RSS Items from all available Channels.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.ChannelCount">
            <summary>
            Number of channels available in the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.ItemCount">
            <summary>
            Number of items in all channels in the document.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssDocument.XmlSource">
            <summary>
            XML Source document.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssEnclosure">
            <summary>
            Represents an RSS Item Enclosure.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssEnclosure.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssEnclosure.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssEnclosure.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssEnclosure.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssEnclosure.Element">
            <summary>
            XML Element containing definition.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssException">
            <summary>
            Base class for all RSS Exceptions
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssException.#ctor(System.Int32,System.String)">
            <summary>
            Base class for all RSS Exceptions
            </summary>
            <param name="StringId">String ID for <paramref name="Message"/> for localization purposes.</param>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssGuid">
            <summary>
            Represents an RSS Guid.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssGuid.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssGuid.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssGuid.IsPermanentLink">
            <summary>
            If it is a permanent link (true) or not (false).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssGuid.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssImage">
            <summary>
            Represents an image shown for an item or channel.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Url">
            <summary>
            Image url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Title">
            <summary>
            Image title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Link">
            <summary>
            Link when clicking on the image
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Width">
            <summary>
            Image width in pixels
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Height">
            <summary>
            Image height in pixels
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssImage.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssItem">
            <summary>
            Represents an RSS Channel Item.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssItem.#ctor(System.Xml.XmlElement,Clayster.Library.Internet.RSS.RssChannel)">
            <summary>
            Represents an RSS Channel Item.
            </summary>
            <param name="Element">XML Element defining the item.</param>
            <param name="Parent">Channel publishing the item.</param>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssItem.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Author">
            <summary>
            Author
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Categories">
            <summary>
            Categories
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Comments">
            <summary>
            Comments
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Copyright">
            <summary>
            Copyright
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.PubDate">
            <summary>
            Publishing date
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Enclosure">
            <summary>
            Enclosure
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Guid">
            <summary>
            GUID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Parent">
            <summary>
            Channel publishing the item
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssItem.FirstCategory">
            <summary>
            First category
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssSource">
            <summary>
            Represents an RSS Source.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RSS.RssSource.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssSource.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssSource.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssSource.Url">
            <summary>
            Source url
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssSource.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RSS.RssTextInput">
            <summary>
            Represents text input information for the rss document or for a channel.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.WellFormed">
            <summary>
            If the record is well formed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.Name">
            <summary>
            Name of the text input
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.RSS.RssTextInput.Element">
            <summary>
            XML Element
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientEventArgs">
            <summary>
            Event arguments for client socket events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SocketClientEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Contructor.
            </summary>
            <param name="ClientSocket">Client socket.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SocketClientEventArgs.ClientSocket">
            <summary>
            Client socket representing the connection.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientAcceptEventArgs">
            <summary>
            Event arguments for client socket accept events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SocketClientAcceptEventArgs.#ctor(System.Net.Sockets.Socket,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            Contructor.
            </summary>
            <param name="ClientSocket">Client socket.</param>
            <param name="ConnectionState">Connection state object, handling communication with the socket.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SocketClientAcceptEventArgs.State">
            <summary>
            State object used for the client connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SocketClientAcceptEventArgs.ConnectionState">
            <summary>
            Connection state object, handling communication with the socket.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientStateEventArgs">
            <summary>
            Event arguments for client socket events where state objects are available.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SocketClientStateEventArgs.#ctor(System.Net.Sockets.Socket,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="ClientSocket">Client socket.</param>
            <param name="ClientState">Client state object.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SocketClientStateEventArgs.State">
            <summary>
            State object used by the connection.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketReceiveBinaryEventArgs">
            <summary>
            Event arguments for data reception events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SocketReceiveBinaryEventArgs.#ctor(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Object)">
            <summary>
            Contructor.
            </summary>
            <param name="ClientSocket">Client socket.</param>
            <param name="Buffer">Buffer used for receiving data.</param>
            <param name="NrBytesReceived">Number of bytes received.</param>
            <param name="ClientState">State object used for the client connection.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SocketReceiveBinaryEventArgs.Buffer">
            <summary>
            Buffer used for reception of data.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SocketReceiveBinaryEventArgs.NrBytesReceived">
            <summary>
            Number of bytes received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientHandler">
            <summary>
            Delegate for client socket events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientStateHandler">
            <summary>
            Delegate for client socket events where a client state object is available.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.SocketClientAcceptHandler">
            <summary>
            Delegate for client socket accept events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.SocketReceiveBinaryHandler">
            <summary>
            Delegate for data reception events.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
            <returns>If a new read operation should be started (true), or if reading should be (temporarily) stopped (false).</returns>
        </member>
        <member name="T:Clayster.Library.Internet.SocketReceiveTextEventArgs">
            <summary>
            Event arguments for text received events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SocketReceiveTextEventArgs.#ctor(System.Net.Sockets.Socket,System.String,System.Object)">
            <summary>
            Event arguments for text received events.
            </summary>
            <param name="ClientSocket">Client Socket</param>
            <param name="Text">Text received.</param>
            <param name="ClientState">State object.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SocketReceiveTextEventArgs.Text">
            <summary>
            Text received.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SocketReceiveTextHandler">
            <summary>
            Delegate for Text received method calls.
            </summary>
            <param name="Sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.ReceiveMode">
            <summary>
            Reception mode
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ReceiveMode.Binary">
            <summary>
            Binary
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.ReceiveMode.Row">
            <summary>
            Text rows
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketToggleException">
            <summary>
            Exception caused by the ServerSocketToggle class
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggleException.#ctor(System.String)">
            <summary>
            Exception caused by the ServerSocketToggle class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.ServerSocketToggle">
            <summary>
            A Server socket that is able to toggle between binary and row receiving mode.
            Inherit this class to build your own server, override the method's RecieveBinary() and RecieveRow()
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Christian Falk
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.#ctor(System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            A Server socket that is able to toggle between binary and row receiving mode.
            Inherit this class to build your own server, override the method's RecieveBinary() and RecieveRow()
            </summary>
            <param name="Port">Port number used for listening to client socket connections.</param>
            <param name="Backlog">Connection backlog.</param>
            <param name="InputBufferSize">Input buffer size in bytes.</param>
            <param name="Encoding">Encoding to use for text decoding.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ClientAccepted(Clayster.Library.Internet.ServerSocketBinary.State,Clayster.Library.Internet.ReceiveMode@)">
            <summary>
            Method called when a client connection has been accepted.
            </summary>
            <param name="State">Client connection state.</param>
            <param name="InitMode">Initial reception mode.</param>
            <returns>State object to use for the connection.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ReceiveBinary(System.Byte[],System.Int32,Clayster.Library.Internet.ServerSocketBinary.State)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ReceiveBinary(System.Net.Sockets.Socket,System.Byte[],System.Int32@,System.Int32,System.Object,Clayster.Library.Internet.ReceiveMode@)">
            <summary>
            Method called when binary data has been read.
            </summary>
            <param name="ClientSocket">Client socket where data are available to be read.</param>
            <param name="Buffer">Input buffer.</param>
            <param name="processedOffset">Offset into buffer where data are available.</param>
            <param name="NrRead">Number of bytes read.</param>
            <param name="ClientState">Client state object.</param>
            <param name="newMode">Receiption mode after readout.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ReceiveRow(System.Net.Sockets.Socket,System.String,System.Object,Clayster.Library.Internet.ReceiveMode@)">
            <summary>
            Method called when a row of text has been received.
            </summary>
            <param name="ClientSocket">Client connection reporting the row.</param>
            <param name="Row">Row received.</param>
            <param name="ClientState">Client state object.</param>
            <param name="newMode">Reception mode after readout.</param>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.ClientClosed(System.Net.Sockets.Socket,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Internet.ServerSocketBinary.ClientClosed(System.Net.Sockets.Socket,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.ServerSocketToggle.SocketClosed(System.Net.Sockets.Socket,System.Object)">
            <summary>
            Method called when a client socket has been closed.
            </summary>
            <param name="ClientSocket">Client socket.</param>
            <param name="ClientState">State object.</param>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SMTP.MessageType.PlainText">
            <summary>
            Play text message.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SMTP.MessageType.Html">
            <summary>
            HTML Formatted message.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.SMTP.MessageType.Calendar">
            <summary>
            vCalendar message.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.MailMessage">
            <summary>
            Outgoing (SMTP) Mail Message.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.#ctor">
            <summary>
            Outgoing (SMTP) Mail Message.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a plain text message.
            </summary>
            <param name="To">Send message to this address.</param>
            <param name="Subject">Messsage Subject</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.#ctor(System.String,System.String,System.String,Clayster.Library.Internet.SMTP.MessageType)">
            <summary>
            Creates a message.
            </summary>
            <param name="To">Send message to this address.</param>
            <param name="Subject">Messsage Subject</param>
            <param name="Body">Message body.</param>
            <param name="Type">Message type.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.#ctor(System.String[],System.String,System.String)">
            <summary>
            Creates a plain text message.
            </summary>
            <param name="To">Send message to these addresses.</param>
            <param name="Subject">Messsage Subject</param>
            <param name="Body">Message body.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.#ctor(System.String[],System.String,System.String,Clayster.Library.Internet.SMTP.MessageType)">
            <summary>
            Creates a message.
            </summary>
            <param name="To">Send message to these addresses.</param>
            <param name="Subject">Messsage Subject</param>
            <param name="Body">Message body.</param>
            <param name="Type">Message type.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.EmbedImage(System.Drawing.Image)">
            <summary>
            Embeds an image in the Message. The message has to be of HTML Type for this
            to work.
            </summary>
            <param name="Image">Image to embed.</param>
            <returns>ID of the embedded image.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.EmbedImage(System.Drawing.Image,System.Boolean)">
            <summary>
            Embeds an image in the Message. The message has to be of HTML Type for this
            to work.
            </summary>
            <param name="Image">Image to embed.</param>
            <param name="MarkAsInternal">If the image should be marked as internal or not.
            Internal images get a content id starting with "internalImage", while public
            images get a content id starting with "image".</param>
            <returns>ID of the embedded image.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.EmbedImage(System.String,System.Drawing.Image)">
            <summary>
            Embeds an image in the Message. The message has to be of HTML Type for this
            to work.
            </summary>
            <param name="Id">ID of the embedded image.</param>
            <param name="Image">Image to embed.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.AttachObject(System.String,System.Object)">
            <summary>
            Attaches an object to the mail. The mail type must be HTML.
            </summary>
            <param name="FileName">File name of the object.</param>
            <param name="Obj">Object to attach.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.AttachObject(System.String,System.Object,System.Text.Encoding)">
            <summary>
            Attaches an object to the mail. The mail type must be HTML.
            </summary>
            <param name="FileName">File name of the object.</param>
            <param name="Obj">Object to attach.</param>
            <param name="Encoding">Encoding to use, when encoding text-base objects (Strings, XML Documents)</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.AttachObject(System.String,System.String,System.Byte[])">
            <summary>
            Attaches an encoded object to the mail.
            </summary>
            <param name="FileName">File name</param>
            <param name="ContentType">Content Type</param>
            <param name="EncodedData">Encoded data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.EmbedObject(System.String,System.String,System.Byte[])">
            <summary>
            Attaches an encoded object to the mail.
            </summary>
            <param name="Id">ID of the embedded object.</param>
            <param name="ContentType">Content Type</param>
            <param name="EncodedData">Encoded data.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.Serialize(System.IO.Stream)">
            <summary>
            Serializes the message to a stream.
            </summary>
            <param name="Output">Output stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the object from a stream.
            </summary>
            <param name="Input">Input stream.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.Save(System.String)">
            <summary>
            Saves the message to a file.
            </summary>
            <param name="FileName">File name.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.Save">
            <summary>
            Saves the message to the default file name (i.e. the SMTP Outbox).
            <seealso cref="P:Clayster.Library.Internet.SMTP.MailMessage.DefaultFileName"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.Load(System.String)">
            <summary>
            Loads a mail message from a file.
            </summary>
            <param name="FileName">File name.</param>
            <returns>Mail Message</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.DeleteFile">
            <summary>
            Deletes the corresponding file name (i.e. the default file name in the SMTP Outbox)
            <seealso cref="P:Clayster.Library.Internet.SMTP.MailMessage.DefaultFileName"/>
            </summary>
            <returns>true if the file was deleted, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.MailMessage.LoadNext">
            <summary>
            Loads the next message available in the SMTP outbox.
            </summary>
            <returns>Mailmessage if found, null if no messages in the outbox.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Version">
            <summary>
            File format version.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.CreationTime">
            <summary>
            Creation Time.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.To">
            <summary>
            List of addresses to send the message to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Cc">
            <summary>
            List of addresses to send carbon copies of the message to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Bcc">
            <summary>
            List of addresses to send blind carbon copies of the message to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Subject">
            <summary>
            Message subject.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Sender">
            <summary>
            Sender of message
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.MessageType">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.From">
            <summary>
            From address.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.InResponseTo">
            <summary>
            In Response To.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Id">
            <summary>
            ID of message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.Body">
            <summary>
            Message body.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.ToStr">
            <summary>
            A string representation of the addresses in <see name="To"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.CcStr">
            <summary>
            A string representation of the addresses in <see name="Cc"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.BccStr">
            <summary>
            A string representation of the addresses in <see name="Bcc"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.EmbeddedImages">
            <summary>
            Array of embedded images.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.AttachedSerializableObjects">
            <summary>
            Attached objects.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.AttachedMimeEncodedObjects">
            <summary>
            Attached MIME Encoded objects.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.EmbeddedMimeEncodedObjects">
            <summary>
            Embedded MIME Encoded objects.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.AttachedImages">
            <summary>
            Attached images.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.AttachedStrings">
            <summary>
            Attached strings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.AttachedXmlDocuments">
            <summary>
            Attached XML Documents.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MailMessage.DefaultFileName">
            <summary>
            Default file name of the message. This file name consists of the <see name="Id"/> suffixed by
            ".bin", all stored in the <see cref="P:Clayster.Library.Internet.SMTP.SmtpOutbox.OutboxPath"/> folder.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.MessageProcessedEventArgs">
            <summary>
            Event arguments used in events when Messages have been processed.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MessageProcessedEventArgs.SentOk">
            <summary>
            If the message was sent OK or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MessageProcessedEventArgs.Parameters">
            <summary>
            Any parameter provided when queueing the message.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.MessageProcessedEventArgs.Message">
            <summary>
            Message text.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.MessageRecord">
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpEventLog">
            <summary>
            Event Sink that sends HTML-based e-mail reports on incoming events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Stellan Bergström, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpEventLog.#ctor(System.String[],System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,Clayster.Library.EventLog.EventLevel,System.TimeSpan,System.Boolean,Clayster.Library.EventLog.EventLevel,System.TimeSpan,System.Boolean,Clayster.Library.EventLog.EventLevel,System.TimeSpan,System.Boolean,Clayster.Library.EventLog.EventLevel,System.TimeSpan)">
            <summary>
            Event Sink that sends HTML-based e-mail reports on incoming events.
            </summary>
            <param name="SendTo">E-mail addresses to send the reports to.</param>
            <param name="Subject">Subject for the reports.</param>
            <param name="AppendHostName">If the host name should be appended to the subject of the mail.</param>
            <param name="MaxCountPerType">Maximum number of records per event type in each report.</param>
            <param name="MaxObjPerMessage">Maximum number of objects per message in each report.</param>
            <param name="LogExceptions">If Exceptions are to be logged in the report.</param>
            <param name="ExceptionsFromLevel">From which event level should exceptions be included.</param>
            <param name="MaxDelayExceptions">Maximum time span to wait from the first incoming exception until the 
            mail report is sent.</param>
            <param name="LogErrors">If Errors are to be logged in the report.</param>
            <param name="ErrorsFromLevel">From which event level should errors be included.</param>
            <param name="MaxDelayErrors">Maximum time span to wait from the first incoming error until the 
            mail report is sent.</param>
            <param name="LogWarnings">If Warnings are to be logged in the report.</param>
            <param name="WarningsFromLevel">From which event level should warnings be included.</param>
            <param name="MaxDelayWarnings">Maximum time span to wait from the first incoming warning until the 
            mail report is sent.</param>
            <param name="LogInformations">If Informative events are to be logged in the report.</param>
            <param name="InformationsFromLevel">From which event level should informative events be included.</param>
            <param name="MaxDelayInformations">Maximum time span to wait from the first incoming informative event until the 
            mail report is sent.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpEventLog.Open">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Open"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpEventLog.Close">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Close"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpEventLog.Store(Clayster.Library.EventLog.Event)">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Store(Clayster.Library.EventLog.Event)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpEventLog.Flush">
            <summary>
            <see cref="M:Clayster.Library.EventLog.EventSinks.EventSink.Flush"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.EMailMessageProcessedEvent">
            <summary>
            Delegate for events when EMail Messages have been processed.
            </summary>
            <param name="Message">EMail message</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.EMailMessageEvent">
            <summary>
            Delegate for EMail message events.
            </summary>
            <param name="Message">EMail message</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpOutbox">
            <summary>
            Static class maintaining an SMTP Outbox.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Registers a line listener with the SMTP Outbox.
            </summary>
            <param name="Listener">Line Listener to register.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            Unregisters a line listener from the SMTP Outbox.
            </summary>
            <param name="Listener">Line Listener to unregister.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.Terminate">
            <summary>
            Terminates the SMTP Outbox and associated threads.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.SendMail(Clayster.Library.Internet.SMTP.MailMessage,System.String)">
            <summary>
            Put an EMail message on the outbox queue.
            </summary>
            <param name="Message">Message to send.</param>
            <param name="Sender">Sender of the message (for logging purposes).</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.Start(System.String)">
            <summary>
            Starts the SMTP Outbox, initializes resources, starts threads, etc.
            </summary>
            <param name="ProgramDataFolder">Path to the Program Data folder.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.SendMail(Clayster.Library.Internet.SMTP.MailMessage,Clayster.Library.Internet.SMTP.EMailMessageProcessedEvent,System.String,System.Object[])">
            <summary>
            Put an EMail message on the outbox queue.
            </summary>
            <param name="Message">Message to send.</param>
            <param name="ProcessedEvent">Method to call when the message has been processed.</param>
            <param name="Sender">Sender of the message (for logging purposes).</param>
            <param name="Parameters">Parameters to relay to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpOutbox.WaitQueueEmpty(System.Int32)">
            <summary>
            Waits for the queue to become empty.
            </summary>
            <param name="Timeout">Timeout</param>
            <returns>true iff the queue is empty.</returns>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpOutbox.OnMailSent">
            <summary>
            Event raised when an EMail has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpOutbox.OnMailFailure">
            <summary>
            Event raised when an EMail failed to be sent.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.OutboxPath">
            <summary>
            Outbox path where unsent messages are saved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.Host">
            <summary>
            SMTP Host Name or IP Address
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.From">
            <summary>
            Default From address of outgoing mail.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.User">
            <summary>
            SMTP User Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.Password">
            <summary>
            SMTP Password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.Ssl">
            <summary>
            SSL/TLS
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.LineListenerFolder">
            <summary>
            Line Listener folder.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.RetryTimeout">
            <summary>
            Retry timeout. The outbox will try to send the message
            until this amount of time has passed. If unable to send the message before this
            time expires, the sending will be considered a failure.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpOutbox.Started">
            <summary>
            If the SMTP Outbox has been started or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpClient">
            <summary>
            Class handling SMTP client communication.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Freddy Jimenez
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.SMTP.SmtpClient.DefaultPort">
            <summary>
            Default SMTP port (25)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Class handling SMTP client communication.
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="From">Name of sender.</param>
            <param name="UserName">SMTP Account User name.</param>
            <param name="Password">SMTP Account Password.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Class handling SMTP client communication.
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="From">Name of sender.</param>
            <param name="UserName">SMTP Account User name.</param>
            <param name="Password">SMTP Account Password.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Class handling SMTP client communication.
            </summary>
            <param name="Host">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Ssl">If SSL/TLS should be used.</param>
            <param name="From">Name of sender.</param>
            <param name="UserName">SMTP Account User name.</param>
            <param name="Password">SMTP Account Password.</param>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.Reopen">
            <summary>
            Reopens the connection again, i.e. closes the connection and reopens it.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.Hello">
            <summary>
            Performs a Hello command.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.NoOperation">
            <summary>
            Performs a No Operation command.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.SendMessage(Clayster.Library.Internet.SMTP.MailMessage)">
            <summary>
            Sends a message.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnRowSent">
            <summary>
            Event raised when a text row has been sent.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnRowReceived">
            <summary>
            Event raised when a text row has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnError">
            <summary>
            Event raised when an error has occurred.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnOpening">
            <summary>
            Event raised when opening a connection.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnOpened">
            <summary>
            Event raised when a connection has been opened.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnClosing">
            <summary>
            Event raised when closing a connection.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.SMTP.SmtpClient.OnClosed">
            <summary>
            Event raised when a connection has been closed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.Host">
            <summary>
            IP Address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.From">
            <summary>
            Name of sender.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.UserName">
            <summary>
            SMTP Account User Name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.Password">
            <summary>
            SMTP Account Password.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.Ssl">
            <summary>
            If SSL/TLS is to be used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.ServerCertificateValidationCallback">
            <summary>
            Verifies the remote SSL certificate used for authentication.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpException">
            <summary>
            Base class for all SMTP Exception
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpException.#ctor(System.String)">
            <summary>
            Base class for all SMTP Exception
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpFailureException">
            <summary>
            When an SMTP command failed
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpFailureException.#ctor(System.String,System.String,System.String)">
            <summary>
            When an SMTP command failed
            </summary>
            <param name="Message">Exception message</param>
            <param name="Command">SMTP Command that failed.</param>
            <param name="Response">Response returned.</param>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpFailureException.Command">
            <summary>
            SMTP Command that failed.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.SMTP.SmtpFailureException.Response">
            <summary>
            Response returned.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpErrorException">
            <summary>
            Whan an SMTP command was bad
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpErrorException.#ctor(System.String,System.String,System.String)">
            <summary>
            Whan an SMTP command was bad
            </summary>
            <param name="Message">Exception message</param>
            <param name="Command">SMTP Command that failed.</param>
            <param name="Response">Response returned.</param>
        </member>
        <member name="T:Clayster.Library.Internet.SMTP.SmtpMailboxException">
            <summary>
            Mailbox errors.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.SMTP.SmtpMailboxException.#ctor(System.String,System.String,System.String)">
            <summary>
            Mailbox errors.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Command">SMTP Command that failed.</param>
            <param name="Response">Response returned.</param>
        </member>
        <member name="T:Clayster.Library.Internet.RowEventArgs">
            <summary>
            Event arguments for Telnet text row events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.RowEventArgs.#ctor(System.String)">
            <summary>
            Event arguments for Telnet text row events.
            </summary>
            <param name="Row">Row</param>
        </member>
        <member name="P:Clayster.Library.Internet.RowEventArgs.Row">
            <summary>
            Row
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.LiteralEventArgs">
            <summary>
            Event arguments for Telnet literal events.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.LiteralEventArgs.#ctor(System.Byte[])">
            <summary>
            Event arguments for Telnet literal events.
            </summary>
            <param name="Data">Binary data</param>
        </member>
        <member name="P:Clayster.Library.Internet.LiteralEventArgs.Data">
            <summary>
            Binary data
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.RowEventHandler">
            <summary>
            Delegates for Telnet row events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.LiteralEventHandler">
            <summary>
            Delegates for Telnet literal events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Internet.TelnetCommand">
            <summary>
            Telnet commands
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.EndOfSubnegotiation">
            <summary>
            End of subnegotiation
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.NOP">
            <summary>
            No operation
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.DataMark">
            <summary>
            Data mark
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Break">
            <summary>
            Break
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.InterruptProcess">
            <summary>
            Interrupt process
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.AbortOutput">
            <summary>
            Abort output
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.AreYouThere">
            <summary>
            Are you there?
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.EraseCharacter">
            <summary>
            Erase character
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.EraseLine">
            <summary>
            Erase line
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.GoAhead">
            <summary>
            Go ahead
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Subnegotiation">
            <summary>
            Subnegotiation
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Will">
            <summary>
            Will
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Wont">
            <summary>
            Won't
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Do">
            <summary>
            Do
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.Dont">
            <summary>
            Don't
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.TelnetCommand.IAC">
            <summary>
            IAC
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.Web">
            <summary>
            Static class with miscelaneous Web utilities.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.Web.ParseDouble(System.String)">
            <summary>
            Parses a double from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the double.</param>
            <returns>Parsed double</returns>
            <exception cref="T:System.FormatException">If unable to parse the string.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Web.TryParseDouble(System.String,System.Double@)">
            <summary>
            Tries to parse a double from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the double.</param>
            <param name="d">Output if successful.</param>
            <returns>true if the string could be parsed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.TryParseDouble(System.String,System.Double@,System.Int32@)">
            <summary>
            Tries to parse a double from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the double.</param>
            <param name="d">Output if successful.</param>
            <param name="NrDecimals">Number of decimals found.</param>
            <returns>true if the string could be parsed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.ParseDecimal(System.String)">
            <summary>
            Parses a decimal from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <returns>Parsed decimal</returns>
            <exception cref="T:System.FormatException">If unable to parse the string.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.Web.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Tries to parse a decimal from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <param name="d">Output if successful.</param>
            <returns>true if the string could be parsed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.TryParseDecimal(System.String,System.Decimal@,System.Int32@)">
            <summary>
            Tries to parse a decimal from a string having been formatted for use on the Web.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <param name="d">Output if successful.</param>
            <param name="NrDecimals">Number of decimals found.</param>
            <returns>true if the string could be parsed.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.DoubleToString(System.Double)">
            <summary>
            Converts a double to a string for use in Web-based protocols.
            </summary>
            <param name="d">Double</param>
            <returns>String representation of <paramref name="d"/></returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.DoubleToString(System.Double,System.String)">
            <summary>
            Converts a double to a string using a specific format, for use in Web-based protocols.
            </summary>
            <param name="d">Double</param>
            <param name="Format">Format</param>
            <returns>String representation of <paramref name="d"/></returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.DecimalToString(System.Decimal)">
            <summary>
            Converts a decimal to a string for use in Web-based protocols.
            </summary>
            <param name="d">Decimal</param>
            <returns>String representation of <paramref name="d"/></returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.DecimalToString(System.Decimal,System.String)">
            <summary>
            Converts a decimal to a string using a specific format, for use in Web-based protocols.
            </summary>
            <param name="d">Decimal</param>
            <param name="Format">Format</param>
            <returns>String representation of <paramref name="d"/></returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.DateTimeToStringRfc822(System.DateTime)">
            <summary>
            Converts a DateTime to a string according to RFC 822.
            </summary>
            <param name="TP">DateTime to convert.</param>
            <returns>String according to RFC 822</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.ParseDateTimeRfc822(System.String)">
            <summary>
            <para>Parses a string to a DateTime according to formatting rules laid out in RFC 822.</para>
            <para>Note: If unable to parse the string, DateTime.MinValue is returned.</para>
            </summary>
            <param name="s">String to parse.</param>
            <returns>Parsed DateTime or <see cref="F:System.DateTime.MinValue"/> if unable to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.FromBase64String(System.String)">
            <summary>
            Converts a string in Base-64 format to its binary representation.
            </summary>
            <param name="s">Base-64 encoded string.</param>
            <returns>Decoded data.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.ParseUriScheme(System.String)">
            <summary>
            Finds the URI scheme that corresponds to a given URI. It also checks for redirections automatically, and returns redirected addresses where needed.
            </summary>
            <param name="Uri">URI</param>
            <returns>URI Scheme, if found, null otherwise.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.ParseUri(System.String)">
            <summary>
            Parses an URI into components. It also checks for redirections automatically, and returns redirected addresses where needed.
            </summary>
            <param name="Uri">URI to parse.</param>
        </member>
        <member name="M:Clayster.Library.Internet.Web.GetUriSchemes">
            <summary>
            Gets an unsorted list of available URI schemes found in the system.
            </summary>
            <returns>Unsorted list of available URI schemes found in the system.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.GetLocalMachineIPAddresses(System.Boolean,System.Boolean)">
            <summary>
            Gets an array of IP Addresses held by the local machine.
            </summary>
            <param name="IncludeIp4">If IPv4 addresses are to be included.</param>
            <param name="IncludeIp6">If IPv6 addresses are to be included.</param>
            <returns>Array of IP Addresses</returns>
        </member>
        <member name="M:Clayster.Library.Internet.Web.GetLocalMachineIPAddresses(System.Boolean,System.Boolean,System.String@,System.String[]@)">
            <summary>
            Gets an array of IP Addresses held by the local machine.
            </summary>
            <param name="IncludeIp4">If IPv4 addresses are to be included.</param>
            <param name="IncludeIp6">If IPv6 addresses are to be included.</param>
            <param name="HostName">Host name of the local machine.</param>
            <param name="Aliases">Aliases of corresponding IP addresses.</param>
            <returns>Array of IP Addresses</returns>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.XmlRpcException">
            <summary>
            Base class of all XML-RPC Exceptions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcException.#ctor(System.String)">
            <summary>
            Base class of all XML-RPC Exceptions.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.XmlRpcFaultException">
            <summary>
            XML-RPC Fault Exception
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcFaultException.#ctor(System.Int32,System.String)">
            <summary>
            XML-RPC Fault Exception
            </summary>
            <param name="Code">Fault code</param>
            <param name="FaultText">Fault description</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcFaultException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            XML-RPC Fault Exception
            </summary>
            <param name="Message">Exception message.</param>
            <param name="Code">Fault code</param>
            <param name="FaultText">Fault description</param>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcFaultException.FaultCode">
            <summary>
            Fault code
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcFaultException.FaultText">
            <summary>
            Fault text.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.XmlRpcFault">
            <summary>
            XML-RPC fault structure.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XmlRpc.XmlRpcFault.faultCode">
            <summary>
            Fault code.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlRpc.XmlRpcFault.faultString">
            <summary>
            Fault string.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcFault.#ctor">
            <summary>
            XML-RPC fault structure.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.GetErrorMessageDelegate">
            <summary>
            Delegate used for call back methods used when finding a more humar readable error message when
            errors are returned from the XML RPC Server.
            </summary>
            <param name="Code">Error code returned.</param>
            <param name="FaultText">Fault text.</param>
            <returns>Error message to use.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.XmlRpcClient">
            <summary>
            XML-RPC Client, as defined in: http://www.xmlrpc.com/spec
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.#ctor(System.String,System.Int32,Clayster.Library.Internet.XmlRpc.GetErrorMessageDelegate)">
            <summary>
            XML-RPC Client, as defined in: http://www.xmlrpc.com/spec
            </summary>
            <param name="HostAddress">Host IP-Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="ErrorMessageCallback">Callback method that is called whenever an XMP RPC error occurs. It is
            used to get a human readable error message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.#ctor(System.String,System.Int32,System.String,Clayster.Library.Internet.XmlRpc.GetErrorMessageDelegate)">
            <summary>
            XML-RPC Client, as defined in: http://www.xmlrpc.com/spec
            </summary>
            <param name="HostAddress">Host IP-Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Folder">HTTP Folder to use for XML-RPC-posts. (Default is "/".)</param>
            <param name="ErrorMessageCallback">Callback method that is called whenever an XMP RPC error occurs. It is
            used to get a human readable error message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.#ctor(System.String,System.Int32,System.Boolean,System.String,Clayster.Library.Internet.XmlRpc.GetErrorMessageDelegate)">
            <summary>
            XML-RPC Client, as defined in: http://www.xmlrpc.com/spec
            </summary>
            <param name="HostAddress">Host IP-Address or host name.</param>
            <param name="Port">Port number to use.</param>
            <param name="Ssl">If SSL/TLS (HTTPS) is to be used.</param>
            <param name="Folder">HTTP Folder to use for XML-RPC-posts. (Default is "/".)</param>
            <param name="ErrorMessageCallback">Callback method that is called whenever an XMP RPC error occurs. It is
            used to get a human readable error message.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcClient.Call(System.String,System.Object[])">
            <summary>
            Performs an XML-based RPC call.
            </summary>
            <param name="Method">Name of method.</param>
            <param name="Parameters">Array of parameters</param>
            <returns>Return value of remote procedure call.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcClient.DefaultEncoding">
            <summary>
            Default encoding to use when sending/posting text-based content.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlRpc.XmlRpcStruct">
            <summary>
            XML-RPC struct.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcStruct.#ctor">
            <summary>
            XML-RPC struct.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlRpc.XmlRpcStruct.Populate(System.Object)">
            <summary>
            Tries to populate a destination object with properties from the structure.
            </summary>
            <param name="Destination">Destination object</param>
            <exception cref="T:System.Exception">If a field or property is not found in <paramref name="Destination"/>,
            or if the field or property types does not match the corresponding value in the struct.</exception>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcStruct.Item(System.String)">
            <summary>
            Gets the value of a specific member.
            </summary>
            <param name="Name">Name of member.</param>
            <returns>Value of member, or null if not available.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcStruct.Members">
            <summary>
            Array of member names.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XmlRpc.XmlRpcStruct.Values">
            <summary>
            Array of member values.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XmlUtilities">
            <summary>
            XML &amp; Schema Utilities
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Olof Zandrén, Tina Beckman
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_BaseChar">
            <summary>
            BaseChar, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_Ideographic">
            <summary>
            Ideographic, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_Letter">
            <summary>
            Letter, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NameStartChar">
            <summary>
            NameStartChar, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NameChar">
            <summary>
            NameChar, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_Name">
            <summary>
            Name, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_Names">
            <summary>
            Names, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NmToken">
            <summary>
            NmToken, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NmTokens">
            <summary>
            NmTokens, as per http://www.w3.org/TR/REC-xml/
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NCNameStartChar">
            <summary>
            NCNameStartChar, as per http://www.w3.org/TR/REC-xml-names/#NT-NCName
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NCNameChar">
            <summary>
            NCNameChar, as per http://www.w3.org/TR/REC-xml-names/#NT-NCName
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NCName">
            <summary>
            NCName, as per http://www.w3.org/TR/REC-xml-names/#NT-NCName
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XmlUtilities.ValidationString_NCName_Optional">
            <summary>
            Optional NCName, as per http://www.w3.org/TR/REC-xml-names/#NT-NCName
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetFileName(System.String,System.String,System.Boolean)">
            <summary>
            Searches for a local file, and returns the full path to the file if found.
            </summary>
            <param name="LocalFileName">Local file</param>
            <param name="ApplicationDataFolder">Application data folder.</param>
            <param name="ThrowNotFoundException">If an exception should be thrown if not found.</param>
            <returns>Full path to the file, or null if not found and <paramref name="ThrowNotFoundException"/>
            is true.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If file not found, and <paramref name="ThrowNotFoundException"/> is true.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocument(System.String,System.String,System.Boolean)">
            <summary>
            Loads a local XML File. If not (or it does not exist and <paramref name="ThrowNotFoundException"/> is false) null is returned.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ThrowNotFoundException">If true, an exception is thrown if the resource is not found.
            Otherwise, null is returned.</param>
            <returns>Loaded XML Document.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If <paramref name="ThrowNotFoundException"/> is set to true and
            the file is not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String)">
            <summary>
            Loads a local XML File if it is newer than the given time point. If not (or it does not exist)
            null is returned.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.Boolean)">
            <summary>
            Loads a local XML File if it is newer than the given time point. If not (or it does not exist)
            null is returned.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ThrowNotFoundException">If true, an exception is thrown if the resource is not found.
            Otherwise, null is returned.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If <paramref name="ThrowNotFoundException"/> is set to true and
            the file is not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.Xml.Schema.XmlSchema,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="Schema">XML Schema used to validate the XML File.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocument(System.String,System.String,System.String,System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads a local XML File. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the XML File does not exist.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Xml.Schema.XmlSchema[],System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedSchemas">Imported schemas used by the main schema to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Type,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Type,System.String,System.String)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Reflection.Assembly,System.String,System.String,System.Boolean)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="Assembly">Assembly containing the schema resource.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.Xml.Schema.XmlSchema,System.String,System.String,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="Schema">XML Schema used to validate the XML File.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocument(System.String,System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Loads a local XML File. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the XML File does not exist.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Xml.Schema.XmlSchema[],System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedSchemas">Imported schemas used by the main schema to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Reflection.Assembly,System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.String[],System.Type,System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource names for the imported schemas used by the main schema to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlDocumentIfNewer(System.String,System.DateTime@,System.String,System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Loads a local XML File if it is newer than given time point. If not (or it does not exist)
            null is returned. The method also validates the XML File against the specified XML Schema
            before returning the document. If the document is not valid an exception is thrown.
            </summary>
            <param name="LocalFileName">Local file name.</param>
            <param name="PreviousTimepoint">Time point to compare against.</param>
            <param name="ApplicationDataFolder">Full path to the application data folder.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ThrowNotFoundException">Set to true if the function should throw a FileNotFoundException 
            if the file is not found. If set to false, it will return null if the file is not found.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
            <returns>Loaded XML Document if the file exists and is newer than the specified
            time point.</returns>
            <exception cref="T:System.Exception">If the XML File is not valid.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlFromResource(System.String,System.Type)">
            <summary>
            Loads an embedded XML Document from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the resource.</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadXmlFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Loads an embedded XML Document from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="Assembly">Assembly containing the resource.</param>
            <returns>XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.AppendBackslash(System.String)">
            <summary>
            Appends a Directory Separator Character at the end of a string (if not already one there).
            </summary>
            <param name="s">String to suffix with a directory separator character.</param>
            <returns><paramref name="s"/> suffixed by a directory separator character.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Registers an XML Transform. This transformation will be used when trying to load and validate an XML Document,
            and the document is of a different namespace than expected.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -> ns2, and one from ns2->ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            </summary>
            <param name="FromNamespace">From Namespace</param>
            <param name="ToNamespace">To Namespace</param>
            <param name="Transform">XSLT Transform to convert from namespace <paramref name="FromNamespace"/> to
            <paramref name="ToNamespace"/>.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Registers an XML Transform. This transformation will be used when trying to load and validate an XML Document,
            and the document is of a different namespace than expected.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -> ns2, and one from ns2->ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            </summary>
            <param name="FromNamespace">From Namespace</param>
            <param name="ToNamespace">To Namespace</param>
            <param name="ResourceId">Resource name for the XSLT Transformation used to transform XML Files.</param>
            <param name="Assembly">Assembly containing the XSLT Transformation.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.String,System.Type)">
            <summary>
            Registers an XML Transform. This transformation will be used when trying to load and validate an XML Document,
            and the document is of a different namespace than expected.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -> ns2, and one from ns2->ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            </summary>
            <param name="FromNamespace">From Namespace</param>
            <param name="ToNamespace">To Namespace</param>
            <param name="ResourceId">Resource name for the XSLT Transformation used to transform XML Files.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the XSLT Transformation.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Registers an XML Transform that is merely a namespace change. This transformation will be used when trying to load and validate an XML Document,
            and the document is of a different namespace than expected.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -> ns2, and one from ns2->ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            </summary>
            <param name="FromNamespace">From Namespace</param>
            <param name="ToNamespace">To Namespace</param>
            <param name="ImportedNamespaceChanges">If imported namespaces have changed as well.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument@,System.String)">
            <summary>
            Transforms the XML Document, using registered XML Transformations, to a desired namespace.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -&gt; ns2, and one from ns2-&gt;ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            <seealso cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>
            </summary>
            <param name="Doc">XML Document to transform.</param>
            <param name="ToNamespace">Transforms the document to this name space.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TransformAllNamespaceChanges(System.String)">
            <summary>
            Make all registered namespace changes transformations for an XML string. 
            </summary>
            <param name="Xml">XML to transform</param>
            <returns>New XML string where all namespace changes have been transformed</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument@,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Transforms the XML Document, using registered XML Transformations, to a desired namespace.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -&gt; ns2, and one from ns2-&gt;ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            <seealso cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>
            </summary>
            <param name="Doc">XML Document to transform.</param>
            <param name="ToNamespace">Transforms the document to this name space.</param>
            <param name="XsltParameters">Any XSLT Parameters</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument@,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms the XML Document, using registered XML Transformations, to a desired namespace.
            
            NOTE: Transformation of XML Documents is done in several steps if necessary. I.e. if there's a transform registered
            for ns1 -&gt; ns2, and one from ns2-&gt;ns3, and an XML Document of ns1 is loaded, but ns3 is expected, both transforms
            are used in sequence.
            <seealso cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>
            </summary>
            <param name="Doc">XML Document to transform.</param>
            <param name="ToNamespace">Transforms the document to this name space.</param>
            <param name="XsltParameters">Any XSLT Parameters</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TransformsAvailableTo(System.String)">
            <summary>
            List all To Namespaces that transformation is registered to transfor to from the specified namespace.
            </summary>
            <param name="FromNamespace">Query if Transform exist from this namespace</param>
            <returns>Array of available To namespaces for the specified ToNamespace</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.Xml.Schema.XmlSchema,System.String,System.String)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="Schema">XML Schema to validate against.</param>
            <param name="ExpectedRoot">Expected root element.</param>
            <param name="ExpectedNamespace">Expected name space used for the root element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.Xml.Schema.XmlSchema,System.String,System.String,System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="Schema">XML Schema to validate against.</param>
            <param name="ExpectedRoot">Expected root element.</param>
            <param name="ExpectedNamespace">Expected name space used for the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.Xml.Schema.XmlSchema,System.String,System.String,System.Xml.Schema.XmlSchema[])">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="Schema">XML Schema to validate against.</param>
            <param name="ExpectedRoot">Expected root element.</param>
            <param name="ExpectedNamespace">Expected name space used for the root element.</param>
            <param name="ImportedSchemas">Imported XML Schemas used in validation</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.Xml.Schema.XmlSchema,System.String,System.String,System.Xml.Schema.XmlSchema[],System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="Schema">XML Schema to validate against.</param>
            <param name="ExpectedRoot">Expected root element.</param>
            <param name="ExpectedNamespace">Expected name space used for the root element.</param>
            <param name="ImportedSchemas">Imported XML Schemas used in validation</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.String[],System.Reflection.Assembly,System.String,System.String,System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource name for the imported schemas used in the main schema used to validate the XML file</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.Type,System.String,System.String,System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.String[],System.Type,System.String,System.String,System.Boolean@)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource name for the imported schemas used in the main schema used to validate the XML file</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
            <param name="Transformed">If the XML document was transformed during load.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.String[],System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource name for the imported schemas used in the main schema used to validate the XML file</param>
            <param name="Assembly">Assembly containing the XML Schema.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.Type,System.String,System.String)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ValidateXml(System.Xml.XmlDocument@,System.String,System.String[],System.Type,System.String,System.String)">
            <summary>
            Validates an XML Document using a specified XML Schema.
            </summary>
            <param name="Doc">XML Document to validate. If the document is of an old format, it will be automatically
            transformed into a new format, using registered XML Transforms. Such transforms are registered using
            <see cref="M:Clayster.Library.Internet.XmlUtilities.RegisterXmlTransform(System.String,System.String,System.Xml.Xsl.XslCompiledTransform)"/>.</param>
            <param name="ResourceId">Resource name for the schema used to validate the XML File.</param>
            <param name="ImportedResourcesId">Resource name for the imported schemas used in the main schema used to validate the XML file</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the schema resource.</param>
            <param name="ExpectedRoot">Expected name of the root element.</param>
            <param name="ExpectedNamespace">Expected namepsace of the root element.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetResourceNameEmbeddedTransformations">
            <summary>
            Gets available resource names of embedded and loaded transformations.
            </summary>
            <returns>Array of resource names for embedded and loaded transformation.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadTransformFromResource(System.String)">
            <summary>
            Loads an XSLT Transformation from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <returns>XSLT Transformation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadTransformFromResource(System.String,System.Type)">
            <summary>
            Loads an XSLT Transformation from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the resource.</param>
            <returns>XSLT Transformation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadTransformFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Loads an XSLT Transformation from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="Assembly">Assembly containing the resource.</param>
            <returns>XSLT Transformation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadTransformFromFile(System.String,System.String)">
            <summary>
            Loads an XSLT Transformation from a file.
            </summary>
            <param name="LocalFileName">Local file name</param>
            <param name="ApplicationDataFolder">Application data folder.</param>
            <returns>XSLT Transformation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadTransformFromFile(System.String)">
            <summary>
            Loads an XSLT Transformation from a file.
            </summary>
            <param name="FileName">File name</param>
            <returns>XSLT Transformation</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Type)">
            <summary>
            Loads a schema file from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the resource.</param>
            <returns>XML Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)">
            <summary>
            Loads a schema file from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="Assembly">Assembly containing the resource.</param>
            <returns>XML Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Type,System.String@,System.String@)">
            <summary>
            Loads a schema file from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="TypeInSameAssembly">Type in the same assembly as the resource.</param>
            <param name="RootElement">Name of the root element required, if possible to deduce.</param>
            <param name="Namespace">Namespace of the root element, if possible to deduce.</param>
            <returns>XML Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)">
            <summary>
            Loads a schema file from a resource.
            </summary>
            <param name="ResourceId">Name of the resource.</param>
            <param name="Assembly">Assembly containing the resource.</param>
            <param name="RootElement">Name of the root element required, if possible to deduce.</param>
            <param name="Namespace">Namespace of the root element, if possible to deduce.</param>
            <returns>XML Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetLoadedEmbeddedSchemaNamespaces">
            <summary>
            Gets available namespaces of embedded and loaded schemas. Use <see cref="M:Clayster.Library.Internet.XmlUtilities.GetResourceNameForEmbeddedSchema(System.String)"/>
            to get the corresponding resource names.
            </summary>
            <returns>Array of target namespaces of embedded and loaded schemas.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetResourceNameForEmbeddedSchema(System.String)">
            <summary>
            Returns the Resource Name of an embedded schema, if found and loaded. If not found, or
            not loaded yet, the empty string is returned.
            </summary>
            <param name="Namespace">Namespace</param>
            <returns>Resource Name of the schema, or the empty string if not found or loaded.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromSchemaId(System.String)">
            <summary>
            Returns a schema from a given schema ID. (First: Scheme ID, second Schema URI - namespace).
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.
            </summary>
            <param name="SchemaId">Schema ID</param>
            <returns>Schema</returns>
            <exception cref="T:System.Exception">If schema ID not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromNamespace(System.String)">
            <summary>
            Returns a schema from a given its namespace.
            
            NOTE: The schema has to be loaded using <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly)"/> or
            <see cref="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromResource(System.String,System.Reflection.Assembly,System.String@,System.String@)"/> first, so the system
            is aware of the schema resource and its corresponding Schema ID.
            </summary>
            <param name="Namespace">Schema namepsace</param>
            <returns>Schema</returns>
            <exception cref="T:System.Exception">If namespace not found.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromFile(System.String,System.String)">
            <summary>
            Loads a Schema from a file.
            </summary>
            <param name="LocalFileName">Local file name</param>
            <param name="ApplicationDataFolder">Application data folder.</param>
            <returns>Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.LoadSchemaFromFile(System.String)">
            <summary>
            Loads a Schema from a file.
            </summary>
            <param name="FileName">File name.</param>
            <returns>Schema</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DoubleToString(System.Double)">
            <summary>
            Converts a double to a string corresponding to the xs:double type.
            </summary>
            <param name="x">Double</param>
            <returns>String representation of the double</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DoubleToString(System.Double,System.Int32)">
            <summary>
            Converts a double to a string corresponding to the xs:double type.
            </summary>
            <param name="x">Double</param>
            <param name="NrDecimals">Number of decimals to use in output.</param>
            <returns>String representation of the double</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DecimalToString(System.Decimal)">
            <summary>
            Converts a decimal to a string corresponding to the xs:decimal type.
            </summary>
            <param name="x">Decimal</param>
            <returns>String representation of the decimal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DecimalToString(System.Decimal,System.Int32)">
            <summary>
            Converts a decimal to a string corresponding to the xs:decimal type.
            </summary>
            <param name="x">Decimal</param>
            <param name="NrDecimals">Number of decimals to use in output.</param>
            <returns>String representation of the decimal</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.FloatToString(System.Single)">
            <summary>
            Converts a float to a string corresponding to the xs:float type.
            </summary>
            <param name="x">float</param>
            <returns>String representation of the float</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DateTimeToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string corresponding to the xs:datetime type.
            </summary>
            <param name="TP">DateTime</param>
            <returns>String representation of the DateTime</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DateToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string corresponding to the xs:date type.
            </summary>
            <param name="TP">DateTime</param>
            <returns>String representation of the DateTime (date part only).</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.DateTimeToString(System.DateTimeOffset)">
            <summary>
            Converts a DateTime to a string corresponding to the xs:datetime type.
            </summary>
            <param name="TP">DateTime</param>
            <returns>String representation of the DateTime</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TimeToString(System.TimeSpan)">
            <summary>
            Creates a string representation of a timestamp, according to the xs:time datatype.
            </summary>
            <param name="TS">TimeSpan. 00:00:00 &lt;= TS &lt;= 23:59:59.999.</param>
            <returns>String representation of <paramref name="TS"/> according to xs:time.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDateTimeXml(System.String)">
            <summary>
            Parses a DateTime from a string corresponding to the xs:datetime type.
            </summary>
            <param name="s">String representation of the DateTime.</param>
            <returns>DateTime if possible, DateTime.MinValue if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDateTimeOffsetXml(System.String)">
            <summary>
            Parses a DateTimeOffset from a string corresponding to the xs:datetime type.
            </summary>
            <param name="s">String representation of the DateTimeOffset.</param>
            <returns>DateTimeOffset if possible, DateTimeOffset.MinValue if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDouble(System.String)">
            <summary>
            Parses a double from a string corresponding to the xs:double type.
            </summary>
            <param name="s">String representation of the double.</param>
            <returns>double if possible, 0 if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseFloat(System.String)">
            <summary>
            Parses a float from a string corresponding to the xs:float type.
            </summary>
            <param name="s">String representation of the float.</param>
            <returns>float if possible, 0 if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDecimal(System.String)">
            <summary>
            Parses a decimal from a string corresponding to the xs:decimal type.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <returns>decimal if possible, 0 if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.BooleanToString(System.Boolean)">
            <summary>
            Converts a boolean value to a string corresponding to the xs:boolean type.
            </summary>
            <param name="b">Boolean value</param>
            <returns>String representation of <paramref name="b"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseBoolean(System.String)">
            <summary>
            Parses a boolean value from a string corresponding to the xs:boolean type.
            </summary>
            <param name="s">String representation of the boolean value.</param>
            <returns>Boolean value if possible, false if not able to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDouble(System.String,System.Double@)">
            <summary>
            Tries to parse a double from a string corresponding to the xs:double type.
            </summary>
            <param name="s">String representation of the double.</param>
            <param name="Result">Double, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDouble(System.String,System.Double@,System.Int32@)">
            <summary>
            Tries to parse a double from a string corresponding to the xs:double type.
            </summary>
            <param name="s">String representation of the double.</param>
            <param name="Result">Double, if parsed.</param>
            <param name="NrDecimals">Number of decimals found.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Tries to parse a decimal from a string corresponding to the xs:decimal type.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <param name="Result">Decimal, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDecimal(System.String,System.Decimal@,System.Int32@)">
            <summary>
            Tries to parse a decimal from a string corresponding to the xs:decimal type.
            </summary>
            <param name="s">String representation of the decimal.</param>
            <param name="Result">Decimal, if parsed.</param>
            <param name="NrDecimals">Number of decimals found.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseFloat(System.String,System.Single@)">
            <summary>
            Tries to parse a float from a string corresponding to the xs:float type.
            </summary>
            <param name="s">String representation of the float.</param>
            <param name="Result">Float, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ColorToString(System.Drawing.Color)">
            <summary>
            Converts a color to a string.
            </summary>
            <param name="Color">Color</param>
            <returns>String representation of color.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseColor(System.String,System.Drawing.Color@)">
            <summary>
            Tries to parse a color.
            </summary>
            <param name="s">String representation of color.</param>
            <param name="Result">Parsed color.</param>
            <returns>If able to parse a color or not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseBoolean(System.String,System.Boolean@)">
            <summary>
            Tries to parse a bool from a string corresponding to the xs:boolean type.
            </summary>
            <param name="s">String representation of the bool.</param>
            <param name="Result">Bool, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Tries to parse a GUID from a string.
            </summary>
            <param name="s">String representation of the GUID.</param>
            <param name="Guid">GUID, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDateTimeXml(System.String,System.DateTime@)">
            <summary>
            Tries to parse a DateTime from a string corresponding to the xs:datetime type.
            </summary>
            <param name="s">String representation of the DateTime.</param>
            <param name="Result">DateTime, if parsed.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDateTimeOffsetXml(System.String,System.Nullable{System.DateTime}@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to parse a DateTimeOffset from a string corresponding to the xs:datetime type.
            </summary>
            <param name="s">String representation of the DateTimeOffset.</param>
            <param name="ResultWitoutTimeZone">Result, if string lacks time zone information.</param>
            <param name="ResultWithTimeZone">Result, if string contains time zone information.</param>
            <returns>true if parse successful, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.String,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Drawing.Color)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Drawing.Color,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Int32,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Double)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Double,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Double,System.Int32@)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="NrDecimals">Number of decimals in attribute.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Double,System.Int32@,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="NrDecimals">Number of decimals in attribute.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="AttributeName">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Boolean,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="AttributeName">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Enum)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="AttributeName">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Enum,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="AttributeName">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.DateTime)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.DateTime,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.TimeSpan)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.TimeSpan,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,Clayster.Library.Internet.Duration)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,Clayster.Library.Internet.Duration,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,Clayster.Library.Internet.DayTimeDuration)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,Clayster.Library.Internet.DayTimeDuration,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Int64)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetAttribute(System.Xml.XmlElement,System.String,System.Int64,System.Char,System.Char,Clayster.Library.Math.Variables,Clayster.Library.Math.ScriptCompatibilityMode)">
            <summary>
            Gets an attribute from an XML Element.
            </summary>
            <param name="E">XML Element.</param>
            <param name="Name">Name of attribute.</param>
            <param name="DefaultValue">Default value if not found.</param>
            <param name="StartDelimiter">Start expression delimiter.</param>
            <param name="EndDelimiter">End expression delimiter.</param>
            <param name="Variables">Variables used in transformation of attribute values.</param>
            <param name="Mode">Script mode</param>
            <returns>Value of attribute.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseColor(System.String)">
            <summary>
            Tries to parse a color definition from a string.
            </summary>
            <param name="s">String containing color definition.</param>
            <returns>Parsed color or Color.Black if unable to parse the string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Encode(System.Drawing.Size)">
            <summary>
            Encode a size
            </summary>
            <param name="size">Size to encode.</param>
            <returns>Encoded size.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Encode(System.Drawing.SizeF)">
            <summary>
            Encode SizeF
            </summary>
            <param name="size">Size to encode.</param>
            <returns>Encoded size.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Encode(System.Drawing.Rectangle)">
            <summary>
            Encode Rectangle
            </summary>
            <param name="rect">Rectangle to encode.</param>
            <returns>Encoded rectangle.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Escape(System.String)">
            <summary>
            Replaces invalid XML characters in a string with their valid XML equivalent.
            </summary>
            <param name="Text">The string within which to escape invalid characters.</param>
            <returns>The input string with invalid characters replaced.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.String)">
            <summary>
            Transforms a document by an embedded XSLT transform. (The transform is compiled and cached to
            increase performance.)
            </summary>
            <param name="Xml">XML String to transform</param>
            <param name="XsltResourceName">Full resource name of the XSLT transform</param>
            <returns>Transformed XML String</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.String,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms a document by an embedded XSLT transform. (The transform is compiled and cached to
            increase performance.)
            </summary>
            <param name="Xml">XML String to transform</param>
            <param name="XsltResourceName">Full resource name of the XSLT transform</param>
            <param name="XsltParameters">XSLT Parameters</param>
            <returns>Transformed XML String</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.IsNCName(System.String)">
            <summary>
            Checks if a string is an NCName.
            </summary>
            <param name="s">String to check.</param>
            <returns>true iff the string is an NCName.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.MakeNCName(System.String)">
            <summary>
            Replaces all characters not compliant with NCName with underscore characters (_).
            </summary>
            <param name="s">String to make NCName compliant.</param>
            <returns>NCName compliant string.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument,System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Transforms an XML Document using a compiled XSL Transform.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Transform">XSL Transform</param>
            <returns>Transformed XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument,System.Xml.Xsl.XslCompiledTransform,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Transforms an XML Document using a compiled XSL Transform.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Transform">XSL Transform</param>
            <param name="Parameters">XSLT Parameters</param>
            <returns>Transformed XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.Xml.XmlDocument,System.Xml.Xsl.XslCompiledTransform,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms an XML Document using a compiled XSL Transform.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="Transform">XSL Transform</param>
            <param name="XsltParameters">XSLT Parameters</param>
            <returns>Transformed XML Document</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform)">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="Transform">XSL Transform</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform,System.Boolean)">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="Transform">XSL Transform</param>
            <param name="IndentOutput">If output should be indented. (Default=false).</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="Transform">XSL Transform</param>
            <param name="Parameters">XSLT parameters</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform,System.Boolean,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="Transform">XSL Transform</param>
            <param name="IndentOutput">If output should be indented. (Default=false).</param>
            <param name="Parameters">XSLT parameters</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="XslTransform">XSL Transform</param>
            <param name="XsltParameters">XSLT parameters</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.Transform(System.String,System.Xml.Xsl.XslCompiledTransform,System.Xml.Xsl.XsltArgumentList,System.Boolean)">
            <summary>
            Transforms an XML String using a compiled XSL Transform.
            </summary>
            <param name="Xml">XML String</param>
            <param name="Transform">XSL Transform</param>
            <param name="XsltParameters">XSLT parameters</param>
            <param name="IndentOutput">If output should be indented. (Default=false).</param>
            <returns>Transformed XML</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetXmlWriterSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an XML Writer Settings object.
            </summary>
            <param name="IndentOutput">If output should be indented or not.</param>
            <param name="XmlFragment">If XML fragments are to be output (true), or an XML document (false).</param>
            <param name="OmitXmlDeclaration">If the XML declaration should be omitted.</param>
            <returns>XML Writer Settings.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.SetAttribute(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Sets an attribute on the given element. Element must belong to a Document.
            </summary>
            <param name="E">Element</param>
            <param name="AttributeName">Name</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.CreateAndAppendElement(System.Xml.XmlElement,System.String)">
            <summary>
            Creates a child element and append it to parent. Parent must belong to a Document.
            </summary>
            <param name="Parent">Parent element</param>
            <param name="ElementName">Name</param>
            <returns>XML Element</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetRootNamespaces(System.Xml.XmlDocument)">
            <summary>
            Creates an XML Namespace Manager containing the namespaces and their prefixes
            as defined in the root element of the XML Document.
            
            Any default namespaces are defined using the 'default' prefix.
            </summary>
            <param name="Xml">XML Document</param>
            <returns>XML Namespace Manager</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetChild(System.Xml.XmlElement,System.String)">
            <summary>
            Returns the child element of a parent, given only its local name.
            </summary>
            <param name="Parent">Parent element.</param>
            <param name="LocalName">Local name of element.</param>
            <returns>Child element if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetFirstChildElement(System.Xml.XmlElement)">
            <summary>
            Gets the first child element of an XML Element.
            </summary>
            <param name="Parent">Parent XML Element.</param>
            <returns>First Child XML Element, or null if not found.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDuration(System.String,Clayster.Library.Internet.Duration@)">
            <summary>
            Tries to parse an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <param name="s">String representation of duration.</param>
            <param name="Result">Result, if successful.</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDuration(System.String)">
            <summary>
            Parses an xsd:duration parameter. Lexical definition is described here:
            http://www.w3.org/TR/xmlschema-2/#duration
            </summary>
            <param name="s">String representation of duration.</param>
            <returns>Parsed duration.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is not a valid duration according to http://www.w3.org/TR/xmlschema-2/#duration</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.TryParseDayTimeDuration(System.String,Clayster.Library.Internet.DayTimeDuration@)">
            <summary>
            Tries to parse an xsd:dayTimeDuration parameter. Lexical definition is described here:
            http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration
            </summary>
            <param name="s">String representation of duration.</param>
            <param name="Result">Result, if successful.</param>
            <returns>If successful.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.ParseDayTimeDuration(System.String)">
            <summary>
            Parses an xsd:dayTimeDuration parameter. Lexical definition is described here:
            http://www.w3.org/TR/2006/REC-xforms-20060314/slice5.html#dt-dayTimeDuration
            </summary>
            <param name="s">String representation of duration.</param>
            <returns>Parsed duration.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="s"/> is not a valid duration according to http://www.w3.org/TR/xmlschema-2/#duration</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XmlUtilities.GetEncoding(System.Xml.XmlDocument,System.Text.Encoding)">
            <summary>
            Gets the text encoding used by the XML Document.
            </summary>
            <param name="Doc">XML Document</param>
            <param name="DefaultEncoding">Encoding to use if no encoding specified in the XML document.</param>
            <returns>Text encoding.</returns>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClient">
            <summary>
            Class managing XMPP Client to Server communication.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceClient">
            <summary>
            Jabber Client Namespace
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceComponentAccept">
            <summary>
            Jabber Component Accept Namespace
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceRoster">
            <summary>
            Jabber Roster Namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceRegister">
            <summary>
            Register Namespace. (XEP-0077)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespacePrivacy">
            <summary>
            Privacy Namespace.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceData">
            <summary>
            Data Namespace (XEP-0004)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceRpc">
            <summary>
            RPC Namespace (XEP-0009)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceSoftwareVersion">
            <summary>
            Software Version (XEP-0092)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceSearch">
            <summary>
            Search (XEP-0055): http://xmpp.org/extensions/xep-0055.html
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceDiscovery">
            <summary>
            Discovery Namespace (XEP-0030)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceDiscoveryItems">
            <summary>
            Items Discovery Namespace (XEP-0030)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceVCard">
            <summary>
            vCard Namespace (XEP-0054)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceInBandBytestream">
            <summary>
            In-band Bytestream Namespace (XEP-0047)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXmppDataValidate">
            <summary>
            XMPP x-data namespace for validation:
            http://jabber.org/protocol/xdata-validate
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXmppDataLayout">
            <summary>
            XMPP x-data namespace for layout:
            http://jabber.org/protocol/xdata-layout
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXmppDataDynamic">
            <summary>
            XMPP x-data namespace for dynamic forms:
            urn:xmpp:xdata:dynamic
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXmppDataColor">
            <summary>
            XMPP x-data namespace for color parameter:
            urn:xmpp:xdata:color
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXmppSipub">
            <summary>
            XMPP namespace for stream initiation for file upload.
            'http://jabber.org/protocol/sipub'
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceClaysterObjectTransfer">
            <summary>
            Clayster Object Transfer
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceXhtmlIm">
            <summary>
            XMPP namespace for XHTML-IM, as defined in XEP-0071.
            'http://jabber.org/protocol/xhtml-im'
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NodeAdvancedMessageProcessing">
            <summary>
            A node for all Advanced Message Processing conditions and actions supported by an entity.
            </summary>
            <remarks>
            XEP-0079: Advanced Message Processing
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NodeCommands">
            <summary>
            A node for all ad-hoc commands provided by an entity.
            </summary>
            <remarks>
            XEP-0050: Ad-Hoc Commands
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NodeChatRooms">
            <summary>
            A node for discovery of the rooms in which a user is an occupant.
            </summary>
            <remarks>
            XEP-0045: Multi-User Chat
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NodeChatRoomTraffic">
            <summary>
            A node for discovery of the namespaces that are allowed in traffic sent through a room. 
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.NodeRoomNickname">
            <summary>
            A node by which a user can discover his or her reserved room nickname.
            </summary>
            <remarks>
            XEP-0045: Multi-User Chat
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.PublishedNodes">
            <summary>
            A "meta-node" for all pubsub nodes hosted by a publish-subscribe service.
            </summary>
            <remarks>
            XEP-0060: Publish-Subscribe
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClient.DefaultPort">
            <summary>
            Default XMPP Client-to-server port.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddApplicationSpecificObjectHandler(System.String,Clayster.Library.Internet.XMPP.XmppAppSpecObjectReceivedEventHandler)">
            <summary>
            Registers an application specific object reception event handler for a particular namespace.
            </summary>
            <param name="NameSpace">Name space of the handler.</param>
            <param name="Handler">Application specific object reception Event handler.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendApplicationSpecificObject(System.String,System.Object,System.String,System.String,Clayster.Library.Internet.XMPP.XmppAppSpecObjectEventHandler,Clayster.Library.Internet.XMPP.XmppAppSpecObjectEventHandler,System.Int32,System.Object)">
            <summary>
            Starts sending an application specific object across the XMPP network.
            </summary>
            <remarks>
            This is a Clayster extension to the XMPP Protocol.
            </remarks>
            <param name="To">JID of the recipient of the object.</param>
            <param name="Object">Object to transfer. Must be MIME encodable.</param>
            <param name="ObjectNamespace">Object namespace.</param>
            <param name="XmlContent">Any XML Content that will be sent together with the object to the client.</param>
            <param name="CallbackSuccess">Callback if transfer successful.</param>
            <param name="CallbackFailure">Callback if transfer failed.</param>
            <param name="Timeout">Timeout in milliseconds.</param>
            <param name="State">State object used in callback methods.</param>
            <exception cref="T:Clayster.Library.Internet.XMPP.XmppException">If the object cannot be encoded.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendApplicationSpecificObject(System.String,System.Byte[],System.String,System.String,System.String,Clayster.Library.Internet.XMPP.XmppAppSpecObjectEventHandler,Clayster.Library.Internet.XMPP.XmppAppSpecObjectEventHandler,System.Int32,System.Object)">
            <summary>
            Starts sending an application specific object across the XMPP network.
            </summary>
            <remarks>
            This is a Clayster extension to the XMPP Protocol.
            </remarks>
            <param name="To">JID of the recipient of the object.</param>
            <param name="EncodedObject">Encoded object.</param>
            <param name="MimeType">MIME Type of object.</param>
            <param name="ObjectNamespace">Object namespace.</param>
            <param name="XmlContent">Any XML Content that will be sent together with the object to the client.</param>
            <param name="CallbackSuccess">Callback if transfer successful.</param>
            <param name="CallbackFailure">Callback if transfer failed.</param>
            <param name="Timeout">Timeout in milliseconds.</param>
            <param name="State">State object used in callback methods.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.GetClientSpecificIqHandler(System.String,System.String)">
            <summary>
            This method is called when an IQ stanza is received, but is not recognized by any of the global IQ Handlers registered and retrieved by
            <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.GetIqHandler(System.String,System.String)"/>. This allows clients to create IQ stanza handlers that are only used by the corresponding client.
            
            By default, there are no client-specific IQ stanza handlers.
            </summary>
            <param name="LocalName">Local element name.</param>
            <param name="NameSpace">Element namespace.</param>
            <returns>IQ Stanza handler, if any, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.GetClientSpecificMessageHandler(System.String,System.String)">
            <summary>
            This method is called when a message stanza is received, but is not recognized by any of the global Message Handlers registered and retrieved by
            <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.GetMessageHandler(System.String,System.String)"/>. This allows clients to create Message stanza handlers that are only used by the corresponding client.
            
            By default, there are no client-specific Message stanza handlers.
            </summary>
            <param name="LocalName">Local element name.</param>
            <param name="NameSpace">Element namespace.</param>
            <returns>Message Stanza handler, if any, or null if none.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddIqHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIncomingIqEventHandler,System.String[])">
            <summary>
            Registers an IQ Stanza event handler.
            </summary>
            <param name="LocalName">Local name of the element.</param>
            <param name="NameSpace">Name space of the element.</param>
            <param name="Handler">IQ Set Stanza Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddClientSpecificIqHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIncomingIqEventHandler,System.String[])">
            <summary>
            Registers a Client Specific IQ Stanza event handler.
            </summary>
            <param name="LocalName">Local name of the element.</param>
            <param name="NameSpace">Name space of the element.</param>
            <param name="Handler">IQ Set Stanza Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddApplicationSpecificMessageHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppApplicationSpecificMessageEventHandler,System.String[])">
            <summary>
            Registers an application specific message event handler for a particular type of object.
            </summary>
            <param name="LocalName">Local name of the element/command.</param>
            <param name="NameSpace">Name space of the element/command.</param>
            <param name="Handler">Application specific message Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddClientSpecificApplicationMessageHandler(System.String,System.String,Clayster.Library.Internet.XMPP.XmppApplicationSpecificMessageEventHandler,System.String[])">
            <summary>
            Registers a client specific application message event handler.
            </summary>
            <param name="LocalName">Local name of the element/command.</param>
            <param name="NameSpace">Name space of the element/command.</param>
            <param name="Handler">Application specific message Event handler.</param>
            <param name="Features">Any features to be added to the list of services handled by the library.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Class managing XMPP Client to Server communication.
            </summary>
            <param name="XmppAddress">XMPP Address</param>
            <param name="Password">Password</param>
            <param name="ServerAddress">IP Address or host name.</param>
            <param name="Port">Port number.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.#ctor(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Class managing XMPP Client to Server communication.
            </summary>
            <param name="XmppAddress">XMPP Address</param>
            <param name="Password">Password</param>
            <param name="ServerAddress">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Language">Language to use according to ISO 639.2. (Default="en").</param>
            <remarks>
            For a complete list of language codes, see:
            http://www.loc.gov/standards/iso639-2/php/code_list.php
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Class managing XMPP Client to Server communication.
            </summary>
            <param name="XmppAddress">XMPP Address</param>
            <param name="Password">Password</param>
            <param name="ServerAddress">IP Address or host name.</param>
            <param name="Port">Port number.</param>
            <param name="Language">Language to use according to ISO 639.2. (Default="en").</param>
            <param name="AutoCreateIfAccountDoesNotExist">If an account should be created if it does
            not exist.</param>
            <remarks>
            For a complete list of language codes, see:
            http://www.loc.gov/standards/iso639-2/php/code_list.php
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.Open(System.Boolean)">
            <summary>
            Connects to the XMPP server.
            </summary>
            <param name="AutoCreateIfAccountDoesNotExist">If an account is to be created if not found.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.Open">
            <summary>
            Connects to the XMPP server.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.Terminate">
            <summary>
            Waits for the heart beat thread to terminate.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.RegisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.UnregisterLineListener(Clayster.Library.Internet.LineListeners.ILineListener)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerMessage(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerMessage(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerError(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerError(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerRowWritten(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowWritten(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerRowRead(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerRowRead(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerDataWritten(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataWritten(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.LineListenerDataRead(System.String,System.Byte[])">
            <summary>
            <see cref="M:Clayster.Library.Internet.LineListeners.ILineListenable.LineListenerDataRead(System.String,System.Byte[])"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.CompareJid(System.String,System.String)">
            <summary>
            Compares two JIDs with each other, removing and resource info and
            ignoring case.
            </summary>
            <param name="Jid1">First JID</param>
            <param name="Jid2">Second JID</param>
            <returns>If they are equal.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.StripResource(System.String)">
            <summary>
            Removes the Resource part of a JID, if available.
            </summary>
            <param name="Jid">JID</param>
            <returns>Bare JID.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendMessage(System.String,System.String)">
            <summary>
            Sends a message to a recipient.
            </summary>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendMessage(System.String,System.String,System.String)">
            <summary>
            Sends a message to a recipient.
            </summary>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Subject">Subject</param>
            <param name="Message">Message to send.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendMessage(System.String,System.String,Clayster.Library.Internet.XMPP.MessageType)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <param name="MessageType">Message Type</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendMessage(System.String,System.String,System.String,Clayster.Library.Internet.XMPP.MessageType)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Subject">Subject</param>
            <param name="Message">Message to send.</param>
            <param name="MessageType">Message Type</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendMessage(System.String,System.String,Clayster.Library.Internet.XMPP.MessageType,System.String)">
            <summary>
            Sends a message to a recipient
            </summary>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Message">Message to send.</param>
            <param name="MessageType">Message Type</param>
            <param name="XmlMessage">XML to embedd in message.</param>
            <returns>Sequence number (id-field) used when sending the message.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SetPresence(Clayster.Library.Internet.XMPP.PresenceStatus)">
            <summary>
            Sets the presence of the client on the network.
            </summary>
            <param name="Status">Presence status.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqGet(System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqGet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="To">Optional to attribute.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqGet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String,System.Boolean)">
            <summary>
            Performs an IQ Get operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Get.</param>
            <param name="To">Optional to attribute.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
            <param name="Priority">If it is a priority IQ stanza. If so, it skips any bandwidth limitation imposed by the maximum number of simultaneous IQ stanzas possible.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqSet(System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqSet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqSet(System.String,System.String,Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler,System.Object,System.String,System.Boolean)">
            <summary>
            Performs an IQ Set operation.
            </summary>
            <param name="Xml">XML to embedd into the IQ Set.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="ResponseCallback">Method to call when a response is returned.</param>
            <param name="State">State object.</param>
            <param name="LLMessage">Line Listener Message</param>
            <param name="Priority">If it is a priority IQ stanza. If so, it skips any bandwidth limitation imposed by the maximum number of simultaneous IQ stanzas possible.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqResult(System.String,System.String,System.String)">
            <summary>
            Returns an IQ Result.
            </summary>
            <param name="Xml">XML to embedd into the IQ Result.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqResult(System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Result.
            </summary>
            <param name="Xml">XML to embedd into the IQ Result.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="Id">ID of IQ Stanza to which the response is referring.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqError(System.String,System.String,System.String)">
            <summary>
            Returns an IQ Error.
            </summary>
            <param name="Xml">XML to embedd into the IQ Error.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.IqError(System.String,System.String,System.String,System.String)">
            <summary>
            Returns an IQ Error.
            </summary>
            <param name="Xml">XML to embedd into the IQ Error.</param>
            <param name="To">Recipient, if not the server itself.</param>
            <param name="Id">ID of IQ Stanza to which the response is referring.</param>
            <param name="LLMessage">Line Listener Message</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestRoster">
            <summary>
            Requests the roster from the server. The roster is returned through
            <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnRosterReceived"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AddToOrUpdateContact(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Adds or updates a contact to/in the roster.
            </summary>
            <param name="Contact">Contact to add</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.DeleteContact(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Deletes a contact from the roster.
            </summary>
            <param name="Contact">Contact to delete</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.DeleteContact(System.String)">
            <summary>
            Deletes a contact from the roster.
            </summary>
            <param name="ContactJid">JID of Contact to delete</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestPresenceSubscription(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Requests presence subscription for a given contact.
            </summary>
            <param name="Contact">Contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestPresenceSubscription(System.String)">
            <summary>
            Requests presence subscription for a given contact.
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestPresenceUnsubscription(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Requests presence subscription for a given contact.
            </summary>
            <param name="Contact">Contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestPresenceUnsubscription(System.String)">
            <summary>
            Requests presence subscription for a given contact.
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AcceptPresenceUnsubscription(System.String)">
            <summary>
            Accepts a presence unsubscription
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.CancelPresenceSubscription(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Cancels a presence subscription from a contact.
            </summary>
            <param name="Contact">Contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.CancelPresenceSubscription(System.String)">
            <summary>
            Cancels a presence subscription from a contact.
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AcceptPresenceSubscription(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Accepts a presence subscription
            </summary>
            <param name="Contact">Contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.AcceptPresenceSubscription(System.String)">
            <summary>
            Accepts a presence subscription
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RefusePresenceSubscription(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Refuses a presence subscription
            </summary>
            <param name="Contact">Contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RefusePresenceSubscription(System.String)">
            <summary>
            Refuses a presence subscription
            </summary>
            <param name="ContactJid">JID of contact</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestPrivacyLists">
            <summary>
            Requests ones privacy lists.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(System.String)">
            <summary>
            Requests a list of services available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Node">Optional Node parameter.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryCommands">
            <summary>
            Requests a list of client service comamnds (XEP-0050) available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(System.String,Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client services available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Node">Optional Node parameter.</param>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryCommands(Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client service commands (XEP-0050) available on the domain.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(System.String,System.String)">
            <summary>
            Requests a list of client services available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Jid">Contact JID</param>
            <param name="Node">Optional Node parameter.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryCommands(System.String)">
            <summary>
            Requests a list of client service commands (XEP-0050) available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Jid">Contact JID</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(System.String,System.String,Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client services available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Jid">Contact JID</param>
            <param name="Node">Optional Node parameter.</param>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryCommands(System.String,Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventHandler,System.Object)">
            <summary>
            Requests a list of client service commands (XEP-0050) available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Jid">Contact JID</param>
            <param name="Callback">Optional callback method</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(Clayster.Library.Internet.XMPP.XmppContact,System.String)">
            <summary>
            Requests a list of client services available for a specific contact.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived"/>.
            </summary>
            <param name="Contact">Contact</param>
            <param name="Node">Optional Node parameter.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(System.String)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Jid">JID</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(Clayster.Library.Internet.XMPP.XmppContact)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Contact">Contact</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(Clayster.Library.Internet.XMPP.XmppContact,System.String)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Contact">Contact</param>
            <param name="Node">Optional Node attribute.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(System.String,System.String)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Jid">JID</param>
            <param name="Node">Optional Node attribute.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(System.String,Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventHandler,System.Object)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Jid">JID</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(System.String,System.String,Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventHandler,System.Object)">
            <summary>
            Requests a list of items associated with a Service Discovery Item.
            Response is returned through <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived"/>.
            </summary>
            <param name="Jid">JID</param>
            <param name="Node">Optional Node attribute.</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State object passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0030.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestRegistrationFormForNewAccount">
            <summary>
            Requests reigistration fields for a new account from the domain
            </summary>
            <remarks>
            Defined in XEP-0077
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RegisterAccount(Clayster.Library.Internet.XMPP.XmppRegistrationForm)">
            <summary>
            Requests a registration of a new account.
            </summary>
            <param name="Form">Form with registration parameters set.</param>
            <remarks>
            Defined in XEP-0077
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.DeleteAccount">
            <summary>
            Requests the deletion of an account.
            </summary>
            <remarks>
            Defined in XEP-0077
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.ChangePassword(System.String)">
            <summary>
            Changes the password of the current account.
            </summary>
            <param name="NewPassword">New Password</param>
            <remarks>
            Defined in XEP-0077
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.GetLocalContact(System.String)">
            <summary>
            Gets the local contact identified with a given JID. If not found, null is returned.
            </summary>
            <param name="Jid">JID of contact.</param>
            <returns>Contact if found, null if not.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendApplicationSpecificMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an application specific messate to another client.
            </summary>
            <param name="CommandName">Local name of the command element containing the command to send.</param>
            <param name="Namespace">Namespace of the command.</param>
            <param name="XmlContent">XML Content of the command.</param>
            <param name="To">To which client to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.SendApplicationSpecificMessage(System.String,System.String)">
            <summary>
            Sends an application specific messate to another client.
            </summary>
            <param name="Xml">XML fragment to send.</param>
            <param name="To">To which client to send.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestVCard">
            <summary>
            Requests a vCard from ones own account (if available).
            <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnVCardReceived"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestVCard(System.String)">
            <summary>
            Requests a vCard from a contact (if available).
            <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnVCardReceived"/>.
            <param name="Jid">JID of contact to get vCard from.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestVCard(System.String,Clayster.Library.Internet.XMPP.XmppVCardEventHandler,System.Object)">
            <summary>
            Requests a vCard from a contact (if available).
            <see cref="E:Clayster.Library.Internet.XMPP.XmppClient.OnVCardReceived"/>.
            <param name="Jid">JID of contact to get vCard from.</param>
            <param name="Callback">Callback method</param>
            <param name="State">State object passed on to <paramref name="Callback"/>.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.UpdateVCard(Clayster.Library.Internet.Contacts.vCard)">
            <summary>
            Updates the vCard of one's own account (if supported).
            </summary>
            <param name="vCard">vCard</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.BeginCreateInBandBytestream(System.String,Clayster.Library.Internet.XMPP.XmppInBandBytestreamEventHandler,Clayster.Library.Internet.XMPP.XmppInBandBytestreamEventHandler)">
            <summary>
            Tries to create an in-band bytestream to another client.
            </summary>
            <param name="To">JID of the receiving client.</param>
            <param name="CallbackSuccess">Callback method if the bytestream was successfully created.</param>
            <param name="CallbackFailure">Callback method if the bytestream was unable to be created.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.RequestSoftwareVersion(System.String,Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventHandler,System.Object)">
            <summary>
            Requests the software version from a device.
            
            Namespace: <see cref="F:Clayster.Library.Internet.XMPP.XmppClient.NamespaceSoftwareVersion"/>.
            </summary>
            <param name="Jid">JID</param>
            <param name="Callback">Callback method.</param>
            <param name="State">State object that will be passed on to the callback method.</param>
            <remarks>
            Defined in XEP-0092.
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.GetLastPresenceJid(System.String)">
            <summary>
            JID of entity sending last presence from a specific XMPP address.
            </summary>
            <param name="Jid">XMPP address.</param>
            <returns>JID of entity sending last presence from a specific XMPP address.</returns>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppClient.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnError">
            <summary>
            Raised when an error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnConnected">
            <summary>
            Raised when the client has connected.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnClosed">
            <summary>
            Raised when the client is closed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnStateChange">
            <summary>
            Raised when the client changes state.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnStanzaError">
            <summary>
            Raised when a stanza error occurrs (regardless of type).
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnMessageStanzaError">
            <summary>
            Raised when a message stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnPresenceStanzaError">
            <summary>
            Raised when a presence stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnIqStanzaError">
            <summary>
            Raised when a IQ stanza error occurrs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnMessageReceived">
            <summary>
            Raised when an incoming message has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnPresenceReceived">
            <summary>
            Raised when an incoming presence has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnRosterReceived">
            <summary>
            Raised when a roster has been received. You request a roster using
            <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RequestRoster"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnServicesReceived">
            <summary>
            Raised when a service list has been received. A service list is requested
            using <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscovery(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnServiceDiscoveryItemsReceived">
            <summary>
            Raised when a list of entity items has been received. Such a list can be
            requested using <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RequestServiceDiscoveryItems(System.String)"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnRegistrationFormReceived">
            <summary>
            Raised when a registration form has been received. Such a form can be requested
            using <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RequestRegistrationFormForNewAccount"/>
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnAccountRegistrationSuccessful">
            <summary>
            Raised when an account registration has been successful. Account registration is performed through
            <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RegisterAccount(Clayster.Library.Internet.XMPP.XmppRegistrationForm)"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnAccountRegistrationFailed">
            <summary>
            Raised when an account registration has failed. Account registration is performed through
            <see cref="M:Clayster.Library.Internet.XMPP.XmppClient.RegisterAccount(Clayster.Library.Internet.XMPP.XmppRegistrationForm)"/>.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnPasswordChanged">
            <summary>
            Raised when the password has been successfully updated.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnPasswordChangeFailed">
            <summary>
            Raised when a change password request fails.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnContactAdded">
            <summary>
            Raised when a contact has been added.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnContactUpdated">
            <summary>
            Raised when a contact has been updated.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnContactRemoved">
            <summary>
            Raised when a contact has been removed.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnVCardReceived">
            <summary>
            Raised when a vCard has been received.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnVCardUpdated">
            <summary>
            Raised when a vCard has been updated.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnGetSoftwareVersion">
            <summary>
            Event raised when external clients wants to know the version of the current client/application.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnGetServices">
            <summary>
            Event raised when external clients wants to know the services supported by the current client/application.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnGetServiceItems">
            <summary>
            Event raised when external clients wants to know the service items supported by the current client/application.
            </summary>
        </member>
        <member name="E:Clayster.Library.Internet.XMPP.XmppClient.OnGetVCard">
            <summary>
            Event raised when external clients wants to get a vCard for the current client/application.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Id">
            <summary>
            ID of session.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.From">
            <summary>
            Server name, as reported by the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.MajorVersion">
            <summary>
            XMPP Major version.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.MinorVersion">
            <summary>
            XMPP Minor version.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.AuthenticationMechanisms">
            <summary>
            Mechanisms.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Resource">
            <summary>
            Resource to bind to.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.ServerAddress">
            <summary>
            XMPP Server address or host name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Port">
            <summary>
            Port number to connect to. (Default = 5222).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Language">
            <summary>
            Language to use according to ISO 639.2. (Default="en").
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Jid">
            <summary>
            Jabber ID. This is the ID of the currently connected and bound resource.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsRegistration">
            <summary>
            If the server supports registration of new accounts.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.Tag">
            <summary>
            Tag object. This property can be used to tag information to the client. It is not used
            in the internal workings of XmppClient.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.TrustCertificates">
            <summary>
            If server certificates are to be trusted by default, or if struct certificate validation is to be performed.
            By default, this property is false, meaning strict certificate validation is used.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.State">
            <summary>
            Client State.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.IsOpen">
            <summary>
            If the connection is open or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.HeartBeatTimeout">
            <summary>
            Heart beat timeout.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.LineListenerHeartBeats">
            <summary>
            If Heart Beats should be output to line listeners or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.LineListenerEndWrite">
            <summary>
            If End Write events should be output to line listeners or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.RequestRosterOnConnect">
            <summary>
            If the Roster should be requested on connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.HasLineListeners">
            <summary>
            <see cref="P:Clayster.Library.Internet.LineListeners.ILineListenable.HasLineListeners"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.ContactsByJid">
            <summary>
            Array of locally maintained contacts in JID order
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.IsEncrypted">
            <summary>
            If communication is being encrypted or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.RemoteCertificate">
            <summary>
            Certificate used by the XMPP Server, if communication is encrypted, null otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsScramSha1">
            <summary>
            If SCRAM-SHA-1 authentication method is allowed or not. (Allowed by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsDigestMD5">
            <summary>
            If DIGEST-MD5 authentication method is allowed or not. (Allowed by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsCramMD5">
            <summary>
            If CRAM-MD5 authentication method is allowed or not. (Allowed by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsPlain">
            <summary>
            If PLAIN authentication method is allowed or not. (Allowed with warnings by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SupportsAnonymous">
            <summary>
            If ANONYMOUS authentication method is allowed or not. (Disallowed by default.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SignatureKey">
            <summary>
            Signature key used when creating an account (oauth_consumer_key in XEP-0348).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppClient.SignatureSecret">
            <summary>
            Signature secret used when creating an account (oauth_consumer_secret in XEP-0348).
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClient.AppSpecObjState">
            <summary>
            Application-specific object state
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClient.WriteItem">
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClient.CreateIbbState">
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppErrorEventHandler">
            <summary>
            Delegate for XMPP Error Events.
            </summary>
            <param name="Client">Client</param>
            <param name="ErrorMessage">Error message</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClientEventHandler">
            <summary>
            Delegate for XMPP Client Events.
            </summary>
            <param name="Client">Client</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppStanzaErrorEventHandler">
            <summary>
            Delegate for XMPP Stanza Error Events.
            </summary>
            <param name="Client">Client</param>
            <param name="Error">Stanza Error</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppMessageEventHandler">
            <summary>
            Delegate for XMPP Message Events.
            </summary>
            <param name="Client">Client</param>
            <param name="Message">Message</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppPresenceEventHandler">
            <summary>
            Delegate for XMPP Presence Events.
            </summary>
            <param name="Client">Client</param>
            <param name="Presence">Presence</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppIqResponseEventHandler">
            <summary>
            Delegate for IQ responses.
            </summary>
            <param name="Client">Client</param>
            <param name="Type">Type of response.</param>
            <param name="Response">IQ Response (excluding the iq parent element.) if successful response.
            null if error occurred.</param>
            <param name="Error">Error if any, null if successful. To suppress default error handling, set this to null in callback methods.</param>
            <param name="State">State object</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppIncomingIqEventHandler">
            <summary>
            Delegate for incoming IQ stanzas.
            </summary>
            <param name="Client">Client</param>
            <param name="Element">Element within IQ Stanza.</param>
            <param name="IqType">Type of IQ Stanza received</param>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="Id">IQ Stanza ID. Responses should use the same ID.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppApplicationSpecificMessageEventHandler">
            <summary>
            Delegate for application specific message handlers.
            </summary>
            <param name="Client">Client</param>
            <param name="Element">Element within Message Stanza.</param>
            <param name="From">From</param>
            <param name="To">To</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppRosterEventHandler">
            <summary>
            Delegate for Roster responses.
            </summary>
            <param name="Client">Client.</param>
            <param name="Roster">Roster</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppContactEventHandler">
            <summary>
            Delegate for Contact events.
            </summary>
            <param name="Client">Client.</param>
            <param name="Contact">Contact</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServicesEventHandler">
            <summary>
            Delegate for Services responses.
            </summary>
            <param name="Client">Client</param>
            <param name="Services">Services</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppRegistrationFormEventHandler">
            <summary>
            Delegate for Registration Form responses.
            </summary>
            <param name="Client">Client</param>
            <param name="Form">Registration form.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppVCardReceivedEventHandler">
            <summary>
            Delegate for vCard reception responses.
            </summary>
            <param name="Client">Client.</param>
            <param name="vCard">vCard, if any, or null if none available (but vCards supported).</param>
            <param name="FromJid">vCard is received from this JID. If received from one's own account, this
            is the empty string.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppVCardUpdatedEventHandler">
            <summary>
            Delegate for vCard update responses.
            </summary>
            <param name="Client">Client.</param>
            <param name="vCard">vCard updated.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppInBandBytestreamEventHandler">
            <summary>
            Delegate for In Band Byte Stream Event Handlers.
            </summary>
            <param name="Client">Client</param>
            <param name="Jid">JID of the other client.</param>
            <param name="Sid">Stream ID</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppAppSpecObjectEventHandler">
            <summary>
            Delegate for Application Specific Object Transfers
            </summary>
            <param name="Client">Client</param>
            <param name="Jid">JID of the other client.</param>
            <param name="Namespace">Namespace of object.</param>
            <param name="State">State object</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppAppSpecObjectReceivedEventHandler">
            <summary>
            Delegate for Application Specific Object Trasfer Reception events handlers.
            </summary>
            <param name="Client">Client</param>
            <param name="From">JID of sender</param>
            <param name="Object">Object received.</param>
            <param name="Namespace">Namespace of object</param>
            <param name="Content">Content sent together with object.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppSoftwareVersionEventHandler">
            <summary>
            Delegate for Software Version callback methods.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetSoftwareVersionEventHandler">
            <summary>
            Delegate for events raised when clients ask the current client for its Software Version.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItemsEventHandler">
            <summary>
            Delegate for Service Discovery Items callback methods.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryEventHandler">
            <summary>
            Delegate for Service Discovery callback methods.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryEventHandler">
            <summary>
            Delegate for events raised when clients ask the current client for its features and identities.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetServiceDiscoveryItemsEventHandler">
            <summary>
            Delegate for events raised when clients ask the current client for its service discovery items.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppVCardEventHandler">
            <summary>
            Delegate for vCard request callback methods.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetVCardEventHandler">
            <summary>
            Delegate for events raised when clients ask the current client for a vCard.
            </summary>
            <param name="Client">XMPP Client used.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentErrorEventHandler">
            <summary>
            Delegate for XMPP Error Events.
            </summary>
            <param name="Component">Server Component</param>
            <param name="ErrorMessage">Error message</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentEventHandler">
            <summary>
            Delegate for XMPP Server Component Events.
            </summary>
            <param name="Component">Server Component</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentStanzaErrorEventHandler">
            <summary>
            Delegate for XMPP Stanza Error Events.
            </summary>
            <param name="Component">Server Component</param>
            <param name="Error">Stanza Error</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentMessageEventHandler">
            <summary>
            Delegate for XMPP Message Events.
            </summary>
            <param name="Component">Server Component</param>
            <param name="Message">Message</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentPresenceEventHandler">
            <summary>
            Delegate for XMPP Presence Events.
            </summary>
            <param name="Component">Component</param>
            <param name="Presence">Presence</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentIqResponseEventHandler">
            <summary>
            Delegate for IQ responses.
            </summary>
            <param name="Component">Component</param>
            <param name="From">XMPP Address of sender.</param>
            <param name="To">XMPP Address of recipient.</param>
            <param name="Type">Type of response.</param>
            <param name="Response">IQ Response (excluding the iq parent element.) if successful response.
            null if error occurred.</param>
            <param name="Error">Error if any, null if successful. To suppress default error handling, set this to null in callback methods.</param>
            <param name="State">State object</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentPresenceResponseEventHandler">
            <summary>
            Delegate for IQ responses.
            </summary>
            <param name="Component">Component</param>
            <param name="Presence">Presence</param>
            <param name="Error">Error if any, null if successful. To suppress default error handling, set this to null in callback methods.</param>
            <param name="State">State object</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppIncomingComponentIqEventHandler">
            <summary>
            Delegate for incoming IQ stanzas.
            </summary>
            <param name="Component">Server Component</param>
            <param name="Element">Element within IQ Stanza.</param>
            <param name="IqType">Type of IQ Stanza received</param>
            <param name="From">From</param>
            <param name="To">To</param>
            <param name="Id">IQ Stanza ID. Responses should use the same ID.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppApplicationSpecificComponentMessageEventHandler">
            <summary>
            Delegate for application specific message handlers.
            </summary>
            <param name="Component">Server Component</param>
            <param name="Element">Element within Message Stanza.</param>
            <param name="From">From</param>
            <param name="To">To</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentServicesEventHandler">
            <summary>
            Delegate for Services responses.
            </summary>
            <param name="Component">Component</param>
            <param name="Services">Services</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetComponentSoftwareVersionEventHandler">
            <summary>
            Delegate for events raised when clients ask the current component for its Software Version.
            </summary>
            <param name="Component">Server Component</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryItemsEventHandler">
            <summary>
            Delegate for Service Discovery Items callback methods.
            </summary>
            <param name="Component">Server Component</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentServiceDiscoveryEventHandler">
            <summary>
            Delegate for Service Discovery callback methods.
            </summary>
            <param name="Component">Server Component</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetComponentServiceDiscoveryEventHandler">
            <summary>
            Delegate for events raised when clients ask the current component for its features and identities.
            </summary>
            <param name="Component">Server Component</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppGetComponentServiceDiscoveryItemsEventHandler">
            <summary>
            Delegate for events raised when clients ask the current component for its service discovery items.
            </summary>
            <param name="Component">Server Component</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppComponentContactEventHandler">
            <summary>
            Delegate for Contact events.
            </summary>
            <param name="Component">Server Component</param>
            <param name="Contact">Contact</param>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppRegistrationForm">
            <summary>
            Contains information about what fields need to be provided when registering an new account.
            (As defined in XEP-0077)
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_UserName">
            <summary>
            Registration parameter: User Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_NickName">
            <summary>
            Registration parameter: Nick Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Password">
            <summary>
            Registration parameter: Password
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Name">
            <summary>
            Registration parameter: Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_FirstName">
            <summary>
            Registration parameter: First Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_LastName">
            <summary>
            Registration parameter: Last Name
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_EMail">
            <summary>
            Registration parameter: EMail
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Address">
            <summary>
            Registration parameter: Address
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_City">
            <summary>
            Registration parameter: City
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_State">
            <summary>
            Registration parameter: State
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Zip">
            <summary>
            Registration parameter: Zip
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Phone">
            <summary>
            Registration parameter: Phone
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Url">
            <summary>
            Registration parameter: Url
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Date">
            <summary>
            Registration parameter: Date
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Miscelaneous">
            <summary>
            Registration parameter: Miscelaneous
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ParameterName_Text">
            <summary>
            Registration parameter: Text
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppRegistrationForm.#ctor">
            <summary>
            Contains information about what fields need to be provided when registering an new account.
            (As defined in XEP-0077)
            </summary>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppRegistrationForm.ContainsKey(System.String)">
            <summary>
            Checks if a parameter exists in the registration form.
            </summary>
            <param name="Parameter">Parameter name.</param>
            <returns>If parameter exists in the form.</returns>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Instructions">
            <summary>
            Registration instructions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Error">
            <summary>
            Any errors reported by the servern when trying to register an account using this form.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Item(System.String)">
            <summary>
            Parameters needed for account registration. If <see cref="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Form"/> is not null, use the XMPP data form instead.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Parameters">
            <summary>
            Parameter names in the order they were listed by the server.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppRegistrationForm.Form">
            <summary>
            XMPP Data Form. This is an optional way of providing registration parameters, according to XEP-0077.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem">
            <summary>
            Contains information about an Service Discovery Item, as defined in XEP-0030.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Contains information about an Service Discovery Item.
            </summary>
            <param name="Jid">JID</param>
            <param name="Name">Name</param>
            <param name="Node">Node</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Jid">
            <summary>
            JID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Node">
            <summary>
            Node
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Features">
            <summary>
            Placeholder for feature information. null by default. Needs to be manually populated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Identities">
            <summary>
            Placeholder for identity information. null by default. Needs to be manually populated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.Commands">
            <summary>
            Placeholder for command information. null by default. Needs to be manually populated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServiceDiscoveryItem.SearchForm">
            <summary>
            Placeholder for a search form. null by default. Needs to be manually populated.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppServices">
            <summary>
            Contains information about available XMPP Services.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppServices.#ctor(Clayster.Library.Internet.XMPP.XmppIdentity[],System.String[])">
            <summary>
            Contains information about available XMPP Services.
            </summary>
            <param name="Identities">Identities</param>
            <param name="Features">Features</param>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServices.Identities">
            <summary>
            Identities
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppServices.Features">
            <summary>
            Features
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppIdentity">
            <summary>
            Contains information about Service Identity.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppIdentity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Contains information about Service Identity.
            </summary>
            <param name="Category">Category</param>
            <param name="Type">Type</param>
            <param name="Name">Name</param>
            <param name="Language">Language according to ISO 639.2. The empty string if not specified.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppIdentity.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppIdentity.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppIdentity.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppIdentity.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppIdentity.Language">
            <summary>
            Language according to ISO 639.2. The empty string if not specified.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppContact">
            <summary>
            Contains information about a contact in the roster.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.#ctor(System.String,System.String,System.String[],Clayster.Library.Internet.XMPP.RosterItemSubscription,Clayster.Library.Internet.XMPP.RosterItemAsk)">
            <summary>
            Contains information about a contact in the roster.
            </summary>
            <param name="Jid">JID</param>
            <param name="Name">Name</param>
            <param name="Groups">Groups</param>
            <param name="Subscription">Subscription</param>
            <param name="Ask">Ask</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.#ctor(System.String,System.String,System.String[])">
            <summary>
            Contains information about a contact in the roster.
            </summary>
            <param name="Jid">JID</param>
            <param name="Name">Name</param>
            <param name="Groups">Groups</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.#ctor(System.String,System.String,Clayster.Library.Internet.Contacts.vCard,System.String[])">
            <summary>
            Contains information about a contact in the roster.
            </summary>
            <param name="Jid">JID</param>
            <param name="Name">Name</param>
            <param name="vCard">vCard</param>
            <param name="Groups">Groups</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.#ctor(System.Xml.XmlElement)">
            <summary>
            Contains information about a contact in the roster.
            </summary>
            <param name="Item">XML Element</param>
            <exception cref="T:Clayster.Library.Internet.XMPP.XmppException">If not a valid XML Element.</exception>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.RequestvCard(Clayster.Library.Internet.XMPP.XmppClient)">
            <summary>
            Requests a vCard from the client.
            </summary>
            <param name="Client">XMPP Client.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppContact.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.Jid">
            <summary>
            JID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.Groups">
            <summary>
            Groups
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.Subscription">
            <summary>
            Subscription
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.Ask">
            <summary>
            Ask
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.vCard">
            <summary>
            vCard from contact, if available.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.vCardRequested">
            <summary>
            If a vCard has been requested or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.LastPresence">
            <summary>
            Last reported presence for contact. If no precense has been reported, null is returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppContact.LastPresenceJid">
            <summary>
            JID from where the last presence was sent.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppPresence">
            <summary>
            Contains information about a Message.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppPresence.#ctor(System.String,System.String,System.String,System.String,Clayster.Library.Internet.XMPP.PresenceType,Clayster.Library.Internet.XMPP.PresenceStatus,System.Int16,System.Xml.XmlElement[],System.String)">
            <summary>
            Contains information about a Message.
            </summary>
            <param name="Id">Id</param>
            <param name="To">To</param>
            <param name="From">From</param>
            <param name="StatusText">Status text</param>
            <param name="Type">Type</param>
            <param name="Status">Status</param>
            <param name="Priority">Priority (-128..127)</param>
            <param name="ApplicationSpecifics">Application specific elements</param>
            <param name="Language">Language according to ISO 639.2. The empty string if not specified.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppPresence.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.To">
            <summary>
            To
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.StatusText">
            <summary>
            Status Text
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.ApplicationSpecifics">
            <summary>
            Application specific elements
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.Priority">
            <summary>
            Priority (-128..127)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppPresence.Language">
            <summary>
            Language according to ISO 639.2. The empty string if not specified.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppMessage">
            <summary>
            Contains information about a Message.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppMessage.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlElement[],Clayster.Library.Internet.XMPP.MessageType,System.String,System.String)">
            <summary>
            Contains information about a Message.
            </summary>
            <param name="Id">Id</param>
            <param name="To">To</param>
            <param name="From">From</param>
            <param name="Body">Body</param>
            <param name="Subject">Subject</param>
            <param name="Thread">Thread</param>
            <param name="ApplicationSpecifics">Application specific elements</param>
            <param name="MessageType">Message type</param>
            <param name="Language">Language according to ISO 639.2. The empty string if not specified.</param>
            <param name="NickName">Nick Name (if available).</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppMessage.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.To">
            <summary>
            To
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.Thread">
            <summary>
            Thread
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.ApplicationSpecifics">
            <summary>
            Application specific elements
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.MessageType">
            <summary>
            Message Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.Language">
            <summary>
            Language according to ISO 639.2. The empty string if not specified.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.XmppMessage.NickName">
            <summary>
            Nick Name if available.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.GoogleTalkClient">
            <summary>
            Google Talk Client
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.GoogleTalkClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Google Talk Client
            </summary>
            <param name="XmppAddress">XMPP Address</param>
            <param name="Password">Password</param>
            <param name="Language">Language to use according to ISO 639.2. (Default="en").</param>
            <remarks>
            For a complete list of language codes, see:
            http://www.loc.gov/standards/iso639-2/php/code_list.php
            </remarks>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.StanzaError">
            <summary>
            Contains information about a Stanza Error.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.StanzaError.#ctor(System.Xml.XmlElement,Clayster.Library.Internet.XMPP.StanzaErrorType,Clayster.Library.Internet.XMPP.StanzaErrorCondition,System.String,System.String,System.String,System.Xml.XmlElement[],System.String,System.String)">
            <summary>
            Contains information about a Stanza Error.
            </summary>
            <param name="OriginalRequest">Original request (or null if not available).</param>
            <param name="Type">Error Type</param>
            <param name="Condition">Error condition</param>
            <param name="Text">Error text (if available)</param>
            <param name="Code">Error code (if available)</param>
            <param name="ConditionString">Condition String.</param>
            <param name="ApplicationSpecific">Application specific information.</param>
            <param name="From">JID of sender.</param>
            <param name="To">JID of receiver.</param>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.StanzaError.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.OriginalRequest">
            <summary>
            Original request (or null if not available).
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.Type">
            <summary>
            Error Type
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.Text">
            <summary>
            Error text (if available)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.Code">
            <summary>
            Error code (if available)
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.Condition">
            <summary>
            Condition
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.ConditionString">
            <summary>
            Condition String.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.ApplicationSpecific">
            <summary>
            Application specific error.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.From">
            <summary>
            JID of sender.
            </summary>
        </member>
        <member name="P:Clayster.Library.Internet.XMPP.StanzaError.To">
            <summary>
            JID of receiver.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.SaslMethodSupport">
            <summary>
            Support lever of SASL authentication methods.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.SaslMethodSupport.Allowed">
            <summary>
            SASL method is allowed.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.SaslMethodSupport.AllowedWithWarning">
            <summary>
            SASL method is allowed, but a warning message will be logged if required to use it.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.SaslMethodSupport.Disallowed">
            <summary>
            SASL method is disallowed, even if the server supports it.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppClientState">
            <summary>
            XMPP Client State
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClientState.Offline">
            <summary>
            XMPP Client is offline.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClientState.Connecting">
            <summary>
            XMPP Client is connecting to the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClientState.Authenticating">
            <summary>
            XMPP Client is authenticating itself with the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClientState.Connected">
            <summary>
            XMPP Client has been successfully connected and authenticated with the server.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.XmppClientState.Error">
            <summary>
            The XMPP Client encountered an error and was disconnected.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.StanzaErrorType">
            <summary>
            Stanza Error Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Cancel">
            <summary>
            Do not retry (the error is unrecoverable)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Continue">
            <summary>
            Proceed (the condition was only a warning)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Modify">
            <summary>
            Retry after changing the data sent
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Auth">
            <summary>
            Retry after providing credentials
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Wait">
            <summary>
            Retry after waiting (the error is temporary)
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorType.Unknown">
            <summary>
            Unknown error type
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.StanzaErrorCondition">
            <summary>
            Stanza Error Condition
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.BadRequest">
            <summary>
            The sender has sent XML that is malformed or that cannot be processed (e.g., an IQ stanza 
            that includes an unrecognized value of the 'type' attribute); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.Conflict">
            <summary>
            Access cannot be granted because an existing resource or session exists with the same name or address; the
            associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.FeatureNotImplemented">
            <summary>
            The feature requested is not implemented by the recipient or server and therefore cannot be processed; the 
            associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.Forbidden">
            <summary>
            The requesting entity does not possess the required permissions to perform the action; the associated error
            type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.Gone">
            <summary>
            The recipient or server can no longer be contacted at this address (the error stanza MAY contain a new 
            address in the XML character data of the <gone/> element); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.InternalServerError">
            <summary>
            The server could not process the stanza because of a misconfiguration or an otherwise-undefined internal 
            server error; the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.ItemNotFound">
            <summary>
            The addressed JID or item requested cannot be found; the associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.JidMalformed">
            <summary>
            The sending entity has provided or communicated an XMPP address (e.g., a value of the 'to' attribute)
            or aspect thereof (e.g., a resource identifier) that does not adhere to the syntax defined in Addressing 
            Scheme (Section 3); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.NotAcceptable">
            <summary>
            The recipient or server understands the request but is refusing to process it because it does not meet
            criteria defined by the recipient or server (e.g., a local policy regarding acceptable words in messages); 
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.NotAllowed">
            <summary>
            The recipient or server does not allow any entity to perform the action; the associated error type SHOULD be
            "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.NotAuthorized">
            <summary>
            The sender must provide proper credentials before being allowed to perform the action, or has provided improper 
            credentials; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.PaymentRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because payment is required; the associated 
            error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.RecipientUnavailable">
            <summary>
            The intended recipient is temporarily unavailable; the associated error type SHOULD be "wait" (note: an application 
            MUST NOT return this error if doing so would provide information about the intended recipient's network availability to
            an entity that is not authorized to know such information).
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.Redirect">
            <summary>
            The recipient or server is redirecting requests for this information to another entity, usually temporarily (the error
            stanza SHOULD contain the alternate address, which MUST be a valid JID, in the XML character data of the &lt;redirect/> 
            element); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.RegistrationRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because registration is required; the associated 
            error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.RemoteServerNotFound">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient does not exist; the associated 
            error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.RemoteServerTimeout">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient (or required to fulfill a 
            request) could not be contacted within a reasonable amount of time; the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.ResourceConstraint">
            <summary>
            The server or recipient lacks the system resources necessary to service the request; the associated error type 
            SHOULD be "wait".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.ServiceUnavailable">
            <summary>
            The server or recipient does not currently provide the requested service; the associated error type SHOULD be 
            "cancel".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.SubscriptionRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because a subscription is required; the 
            associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.UndefinedCondition">
            <summary>
            The error condition is not one of those defined by the other conditions in this list; any error type may be 
            associated with this condition, and it SHOULD be used only in conjunction with an application-specific condition.
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.UnexpectedRequest">
            <summary>
            The recipient or server understood the request but was not expecting it at this time (e.g., the request was out 
            of order); the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.StanzaErrorCondition.Other">
            <summary>
            Other error condition - might be application specific.
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.MessageType">
            <summary>
            XMPP Message type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.MessageType.Chat">
            <summary>
            Chat
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.MessageType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.MessageType.GroupChat">
            <summary>
            Group Chat
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.MessageType.Headline">
            <summary>
            Headline
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.MessageType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.PresenceStatus">
            <summary>
            Presence status
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.Away">
            <summary>
            Away
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.Chat">
            <summary>
            Chat
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.DoNotDisturb">
            <summary>
            Do not disturb
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.ExtendedAway">
            <summary>
            Extended Away
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceStatus.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.PresenceType">
            <summary>
            Presence Type
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Probe">
            <summary>
            Probe
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Subscribed">
            <summary>
            Subscrubed
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Unavailable">
            <summary>
            Unavailable
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Unsubscribe">
            <summary>
            Unsubscribe
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Unsubscribed">
            <summary>
            Unsubscribed
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.PresenceType.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.RosterItemSubscription">
            <summary>
            Roster Item Subscription
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.Both">
            <summary>
            both the user and the contact have subscriptions to each other's presence information
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.From">
            <summary>
            the contact has a subscription to the user's presence information, but the user does not have a 
            subscription to the contact's presence information
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.None">
            <summary>
            the user does not have a subscription to the contact's presence information, and the contact 
            does not have a subscription to the user's presence information
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.Remove">
            <summary>
            Remove roster item
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.To">
            <summary>
            the user has a subscription to the contact's presence information, but the contact does not have a 
            subscription to the user's presence information
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemSubscription.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.RosterItemAsk">
            <summary>
            Roster Item Ask
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemAsk.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.RosterItemAsk.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.IqType">
            <summary>
            Type of IQ Stanza received
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.IqType.Set">
            <summary>
            IQ Set
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.IqType.Get">
            <summary>
            IQ Get
            </summary>
        </member>
        <member name="F:Clayster.Library.Internet.XMPP.IqType.Result">
            <summary>
            IQ Result
            </summary>
        </member>
        <member name="T:Clayster.Library.Internet.XMPP.XmppException">
            <summary>
            Base class of all XMPP Exceptions.
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Internet.XMPP.XmppException.#ctor(System.String)">
            <summary>
            Base class of all XMPP Exceptions.
            </summary>
            <param name="Message">Exception message</param>
        </member>
    </members>
</doc>
