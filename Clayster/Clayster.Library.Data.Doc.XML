<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Clayster.Library.Data</name>
    </assembly>
    <members>
        <member name="T:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <remarks>
            © Clayster, 2014-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.DBAttribute">
            <summary>
            Base class of all object database attributes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
            <param name="PropertyName6">Name of sixth field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
            <param name="PropertyName6">Name of sixth field or property in the index.</param>
            <param name="PropertyName7">Name of seventh field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
            <param name="PropertyName6">Name of sixth field or property in the index.</param>
            <param name="PropertyName7">Name of seventh field or property in the index.</param>
            <param name="PropertyName8">Name of eigth field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
            <param name="PropertyName6">Name of sixth field or property in the index.</param>
            <param name="PropertyName7">Name of seventh field or property in the index.</param>
            <param name="PropertyName8">Name of eigth field or property in the index.</param>
            <param name="PropertyName9">Name of ninth field or property in the index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Tells the object database that a class stored in dedicated tables should have an index over two or more fields or properties.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/> for more information.
            </summary>
            <param name="PropertyName1">Name of first field or property in the index.</param>
            <param name="PropertyName2">Name of second field or property in the index.</param>
            <param name="PropertyName3">Name of third field or property in the index.</param>
            <param name="PropertyName4">Name of fourth field or property in the index.</param>
            <param name="PropertyName5">Name of fifth field or property in the index.</param>
            <param name="PropertyName6">Name of sixth field or property in the index.</param>
            <param name="PropertyName7">Name of seventh field or property in the index.</param>
            <param name="PropertyName8">Name of eigth field or property in the index.</param>
            <param name="PropertyName9">Name of ninth field or property in the index.</param>
            <param name="PropertyNames">Names of third and following fields or propertys in the index following.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBDedicatedMultiPropertyIndexAttribute.PropertyNames">
            <summary>
            Property names over which the index will be constructed.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBDedicatedIndexAttribute">
            <summary>
            Tells the object database that the field or property should have an index.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/>
            for more information.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedIndexAttribute.#ctor">
            <summary>
            Tells the object database that the field or property should have an index.
            
            NOTE: This only works for classes with dedicated tables. <see cref="T:Clayster.Library.Data.DBDedicatedTableAttribute"/>
            for more information.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBDedicatedTableAttribute">
            <summary>
            Tells the object database that the class marked with this attribute should
            be stored in a dedicated table.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedTableAttribute.#ctor">
            <summary>
            Tells the object database that the class marked with this attribute should
            be stored in a dedicated table.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedTableAttribute.#ctor(System.Int32)">
            <summary>
            Tells the object database that the class marked with this attribute should
            be stored in a dedicated table.
            </summary>
            <param name="Partitions">Number of partitions of, or number of dedicated tables for the class.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBDedicatedTableAttribute.#ctor(System.Int32,System.String)">
            <summary>
            Tells the object database that the class marked with this attribute should
            be stored in a dedicated table.
            </summary>
            <param name="Partitions">Number of partitions of, or number of dedicated tables for the class.</param>
            <param name="PartitionOnField">Partition on this field/property name. If not specified, the Object ID will
            be used for partitioning.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBDedicatedTableAttribute.Partitions">
            <summary>
            Number of partitions of, or number of dedicated tables for the class.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBDedicatedTableAttribute.PartitionOnField">
            <summary>
            Partition on this field/property name. If not specified, the Object ID will
            be used for partitioning.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBCreatedAttribute">
            <summary>
            Tells the object database that the field contains the Created
            DateTime parameter. This parameter will be set to the date and
            time when the object was created.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBCreatedAttribute.#ctor">
            <summary>
            Tells the object database that the field contains the Created
            DateTime parameter. This parameter will be set to the date and
            time when the object was created.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBDefaultAttribute">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.Int64)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.Char)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.Boolean)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.TimeSpan)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.Double)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.String)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.DateTime)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.#ctor(System.Object)">
            <summary>
            Default value attribute. If the parameter has this
            value, it will not be stored in the object database.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.Int64)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.GetDefaultValue">
            <summary>
            Gets the default value stored in the attribute.
            </summary>
            <returns>Default value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.TimeSpan)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.Double)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.DateTime)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.String)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultAttribute.HasDefaultValue(System.Object)">
            <summary>
            Checks if the value provided is the default value as stored in the attribute.
            </summary>
            <param name="Value">Value to check.</param>
            <returns>true iff <paramref name="Value">Value</paramref> is equal to teh default
            value stored in the attribute or not (false).</returns>
        </member>
        <member name="T:Clayster.Library.Data.DBDefaultEmptyStringAttribute">
            <summary>
            Defines the default value of the parameter to be
            String.Empty.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultEmptyStringAttribute.#ctor">
            <summary>
            Defines the default value of the parameter to be
            String.Empty.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBDefaultMaxDateTimeAttribute">
            <summary>
            Defines the default value of the parameter to be
            DateTime.MaxValue.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultMaxDateTimeAttribute.#ctor">
            <summary>
            Defines the default value of the parameter to be
            DateTime.MaxValue.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBDefaultMinDateTimeAttribute">
            <summary>
            Defines the default value of the parameter to be
            DateTime.MinValue.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBDefaultMinDateTimeAttribute.#ctor">
            <summary>
            Defines the default value of the parameter to be
            DateTime.MinValue.
            
            NOTE: Default attributes has no meaning in classes with dedicated tables.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBEncryptedLongStringAttribute">
            <summary>
            Tells the object database that the string should be stored
            as encrypted long string.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.DBStringAttribute">
            <summary>
            Base class of all object database string attributes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBEncryptedLongStringAttribute.#ctor">
            <summary>
            Tells the object database that the string should be stored
            as crypted long string.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBEncryptedShortStringAttribute">
            <summary>
            Tells the object database that the string should be stored
            as encrypted short string.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBEncryptedShortStringAttribute.#ctor">
            <summary>
            Tells the object database that the string should be stored
            as crypted short string.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBIgnoreAttribute">
            <summary>
            Tells the object database to skip the fields or properties
            having this attribute.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBIgnoreAttribute.#ctor">
            <summary>
            Tells the object database to skip the fields or properties
            having this attribute.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBLongStringAttribute">
            <summary>
            Tells the object database that the string should be stored
            as a long string, i.e. it will not be indexed in the database,
            but may contain large string values.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBLongStringAttribute.#ctor">
            <summary>
            Tells the object database that the string should be stored
            as a long string, i.e. it will not be indexed in the database,
            but may contain large string values.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBObjectIdAttribute">
            <summary>
            Tells the object database that the field contains the ObjectId
            in the database. When an object is loaded or created, its ObjectId 
            is stored in this field or property. When an object is updated or
            deleted it takes the value stored in this field or property to
            find the object to update or delete in the database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBObjectIdAttribute.#ctor">
            <summary>
            Tells the object database that the field contains the ObjectId
            in the database. When an object is loaded or created, its ObjectId 
            is stored in this field or property. When an object is updated or
            deleted it takes the value stored in this field or property to
            find the object to update or delete in the database.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBObsoleteAttribute">
            <summary>
            Tells the object database that the attribute is obsolete. The field or
            property will still be set if data is available in the database, but
            when saving the object, the field or property will be skipped.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBObsoleteAttribute.#ctor">
            <summary>
            Tells the object database that the attribute is obsolete. The field or
            property will still be set if data is available in the database, but
            when saving the object, the field or property will be skipped.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBOnLoadedMethodAttribute">
            <summary>
            Tells the object database that the method should be called after
            the object has been loaded. This provides the object with the
            possibility to initialize itself after loading.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBOnLoadedMethodAttribute.#ctor">
            <summary>
            Tells the object database that the method should be called after
            the object has been loaded. This provides the object with the
            possibility to initialize itself after loading.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBOwnerIdAttribute">
            <summary>
            Tells the Object database that the field contains the OwnerId
            in the database. When an Object is loaded or created, its OwnerId 
            is stored in this field or property. When an Object is updated or
            deleted it takes the value stored in this field or property to
            find the Object to update or delete in the database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBOwnerIdAttribute.#ctor">
            <summary>
            Tells the Object database that the field contains the OwnerId
            in the database. When an Object is loaded or created, its OwnerId 
            is stored in this field or property. When an Object is updated or
            deleted it takes the value stored in this field or property to
            find the Object to update or delete in the database.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBShortStringAttribute">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) an exception will be thrown if trying
            to save the parameter to the database.
            
            If the object has a dedicated table, you can set the maximum length
            yourself using this attribute, using the <see name="DBShortStringAttribute.MaxLength"/>
            parameter.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBShortStringAttribute.#ctor(System.Boolean)">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) an exception will be thrown if trying
            to save the parameter to the database.
            </summary>
            <param name="Normalized">If the string should be normalized
            in the database or not. If the string parameter takes on a few
            common string values, the parameter should be normalized. If the
            values are most often unique, no benefit comes of normalizing the string
            and database performance decreases.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBShortStringAttribute.#ctor(System.Int32)">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) an exception will be thrown if trying
            to save the parameter to the database.
            
            If the object has a dedicated table, you can set the maximum length
            yourself using this attribute, using the <paramref name="MaxLength"/>
            parameter.
            </summary>
            <param name="MaxLength">Maximum length of the short string parameter.
            Only works for classes with dedicated tables, and automatically
            implies an unnormalized string.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBShortStringAttribute.Normalized">
            <summary>
            If the string parameter should be normalized or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBShortStringAttribute.MaxLength">
            <summary>
            Maximum length of the string. Only works for classes with dedicated
            tables, and only for unnormalized strings.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBShortStringClippedAttribute">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) the string will be clipped to fit the
            database. This means that information at the end of the string
            will be lost.
            
            If the object has a dedicated table, you can set the maximum length
            yourself using this attribute, using the <see name="DBShortStringAttribute.MaxLength"/>
            parameter.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBShortStringClippedAttribute.#ctor(System.Boolean)">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) the string will be clipped to fit the
            database. This means that information at the end of the string
            will be lost.
            </summary>
            <param name="Normalized">If the string should be normalized
            in the database or not. If the string parameter takes on a few
            common string values, the parameter should be normalized. If the
            values are most often unique, no benefit comes of normalizing the string
            and database performance decreases.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBShortStringClippedAttribute.#ctor(System.Int32)">
            <summary>
            Tells the object database that the string should be stored
            as a short string, i.e. it can be indexed in the database.
            
            If the string length exceeds the maximum length allowed by the
            database (250 characters) the string will be clipped to fit the
            database. This means that information at the end of the string
            will be lost.
            
            If the object has a dedicated table, you can set the maximum length
            yourself using this attribute, using the <paramref name="MaxLength"/>
            parameter.
            </summary>
            <param name="MaxLength">Maximum length of the short string parameter.
            Only works for classes with dedicated tables, and automatically
            implies an unnormalized string.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBShortStringClippedAttribute.Normalized">
            <summary>
            If the string parameter should be normalized or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBShortStringClippedAttribute.MaxLength">
            <summary>
            Maximum length of the string. Only works for classes with dedicated
            tables, and only for unnormalized strings.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBUpdatedAttribute">
            <summary>
            Tells the object database that the field contains the Updated
            DateTime parameter. This parameter will be set to the date and
            time when the object was last updated.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBUpdatedAttribute.#ctor">
            <summary>
            Tells the object database that the field contains the Updated
            DateTime parameter. This parameter will be set to the date and
            time when the object was last updated.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBUpgradesAttribute">
            <summary>
            Tells the object database that the class marked with this attribute upgrades
            the class specified in the parameter.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBUpgradesAttribute.#ctor(System.String)">
            <summary>
            Tells the object database that the class marked with this attribute upgrades
            the class specified in the parameter.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBUpgradesAttribute.TypeName">
            <summary>
            Type name of object that should be upgraded to the class having this attribute.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBValidationMethodAttribute">
            <summary>
            Tells the object database that the method can be used to
            validate the consistancy of the object. The method will be
            called before persisting the object. If inconsistancies are
            found, exceptions should be thrown.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBValidationMethodAttribute.#ctor">
            <summary>
            Tells the object database that the method can be used to
            validate the consistancy of the object. The method will be
            called before persisting the object. If inconsistancies are
            found, exceptions should be thrown.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.BackupRestoreProgressEventArgs">
            <summary>
            Event arguments for backup/restore progress callback events.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.BackupRestoreProgressEventArgs.#ctor(System.String,System.Int32,System.Int64,System.Object)">
            <summary>
            Event arguments for backup/restore progress callback events.
            </summary>
            <param name="Message">Progress message</param>
            <param name="Owners">Number of object database owners copied.</param>
            <param name="Objects">Number of objects copied.</param>
            <param name="State">State object passed in the original backup/restore method call.</param>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreProgressEventArgs.State">
            <summary>
            State object passed in the original backup/restore method call.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreProgressEventArgs.Owners">
            <summary>
            Number of object database owners copied.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreProgressEventArgs.Objects">
            <summary>
            Number of objects copied.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreProgressEventArgs.Message">
            <summary>
            Progress message
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.BackupRestoreErrorEventArgs">
            <summary>
            Event arguments for backup/restore error callback events.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.BackupRestoreErrorEventArgs.#ctor(System.Int32,System.Int64,Clayster.Library.Data.DBTypeInfo,System.Exception,System.Object)">
            <summary>
            Event arguments for backup/restore error callback events.
            </summary>
            <param name="OwnerId">Owner ID of object that could not be loaded.</param>
            <param name="ObjectId">Object ID of object that could not be loaded.</param>
            <param name="TypeInfo">Type information of object that could not be loaded.</param>
            <param name="ex">Exception raised when trying to load the object.</param>
            <param name="State">State object passed in the original backup/restore method call.</param>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreErrorEventArgs.State">
            <summary>
            State object passed in the original backup/restore method call.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreErrorEventArgs.OwnerId">
            <summary>
            Owner ID of object that could not be loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreErrorEventArgs.ObjectId">
            <summary>
            Object ID of object that could not be loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreErrorEventArgs.TypeInfo">
            <summary>
            Type information of object that could not be loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.BackupRestoreErrorEventArgs.Exception">
            <summary>
            Exception raised when trying to load the object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBImportField">
            <summary>
            Class handling fields for export/import.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBImportField.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Class handling fields for export/import.
            </summary>
            <param name="Id">Field ID</param>
            <param name="Name">Field Name</param>
            <param name="DataType">Field Data type</param>
        </member>
        <member name="P:Clayster.Library.Data.DBImportField.FieldId">
            <summary>
            Field ID (-1 = information missing)
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBImportField.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBImportField.DataType">
            <summary>
            Field Datatype
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBImportObject">
            <summary>
            Class containing information about an object that is to be imported into the database.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBImportObject.#ctor(System.Int64,System.Object,System.DateTime,System.DateTime)">
            <summary>
            Class containing information about an object that is to be imported into the database.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="Object">Object</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBImportObject.Created">
            <summary>
            When the object was created.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBImportObject.Updated">
            <summary>
            When the object was updated.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBImportObject.ObjectId">
            <summary>
            Object ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBImportObject.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType">
            <summary>
            Array value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.DataType">
            <summary>
            Base class of data types handled by search expressions.
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the content of a node to a given data type, and outputs it to dynamic SQL.
            </summary>
            <param name="sb">Dynamic SQL Output</param>
            <param name="Node">Node to convert</param>
            <param name="TypeInfo">Database type information.</param>
            <param name="Parent">Parent node.</param>
            <param name="ConvertedType">Type to convert. Converts default and constant values of the type.</param>
            <param name="Partition">Current partition.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            Outputs the default value to the dynamic SQL Output
            </summary>
            <param name="sb">Dynamic SQL Output</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the content of a node to a given data type, and outputs it to dynamic SQL.
            </summary>
            <param name="sb">Dynamic SQL Output</param>
            <param name="Node">Node to convert</param>
            <param name="TypeInfo">Database type information.</param>
            <param name="Parent">Parent node.</param>
            <param name="ConvertedType">Type to convert. Converts default and constant values of the type.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            Outputs the default value to the dynamic SQL Output
            </summary>
            <param name="sb">Dynamic SQL Output</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the content of a node to a given data type, and outputs it to dynamic SQL.
            </summary>
            <param name="sb">Dynamic SQL Output</param>
            <param name="Node">Node to convert</param>
            <param name="TypeInfo">Database type information.</param>
            <param name="Parent">Parent node.</param>
            <param name="ConvertedType">Type to convert. Converts default and constant values of the type.</param>
            <param name="Partition">Current partition.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            Outputs the default value to the dynamic SQL Output
            </summary>
            <param name="sb">Dynamic SQL Output</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.#ctor">
            <summary>
            Base class of data types handled by search expressions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            Checks if the datatype is compatible with a given type.
            </summary>
            <param name="Type2">Other type.</param>
            <returns>If the type is compatible with the other type.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            Checks if the current type can be converted from another
            </summary>
            <param name="Type2">Other data type</param>
            <returns>true iff the type can be converted from <paramref name="Type2"/>.</returns>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.HasDefaultValue">
            <summary>
            If the parameter has a default value or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.HasConstantValue">
            <summary>
            If the parameter has a constant value or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.ConstantValue">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsEquality">
            <summary>
            If equality is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsGreaterThan">
            <summary>
            If greater than is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsGreaterThanOrEqualTo">
            <summary>
            If greater than or equal to is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLesserThan">
            <summary>
            If lesser than is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLesserThanOrEqualTo">
            <summary>
            If lesser than or equal to is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLike">
            <summary>
            If like is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsNotEqualTo">
            <summary>
            If not equal to is supported by the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsNotLike">
            <summary>
            If not like is supported by the type.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.#ctor(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            Blob value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.ArrayDataType.InnerType">
            <summary>
            Inner data type.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.IObjectSink">
            <summary>
            Interface for object sinks. Object sinks receive streams of objects.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IObjectSink.ObjectsReceived(System.Int32,Clayster.Library.Data.DBImportObject[],System.Object[])">
            <summary>
            Is called when a set of objects have been received or loaded.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Objects">Set of objects with corresponding Object IDs, created and updated timepoints.</param>
            <param name="Parameters">Parameters sent to the original object database request.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IObjectSink.ObjectError(System.Int32,System.Int64,Clayster.Library.Data.DBTypeInfo,System.Exception,System.Object[])">
            <summary>
            Called whenever an object could not be loaded.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID of object.</param>
            <param name="TypeInfo">Information about the type that was attempted to be loaded.</param>
            <param name="ex">Error thrown during load attempt.</param>
            <param name="Parameters">Parameters sent to the original object database request.</param>
        </member>
        <member name="T:Clayster.Library.Data.DBTypeInfo">
            <summary>
            Extentions for the My SQL provider.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Tina Beckman
            </remarks>
            <summary>
            Class containing information about how to treat a specific
            type in the object database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedInsert(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@)">
            <summary>
            Performs a dedicated insert.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">When the object was created.</param>
            <returns>Object ID in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedImport(System.Object,System.Int32,System.Int64,System.DateTime,System.DateTime,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated import.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedBulkInsert(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk insert.
            </summary>
            <param name="Objects">Objects to bulk insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object IDs and created time stamps of the inserted objects in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedBulkImport(Clayster.Library.Data.DBImportObject[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk import.
            </summary>
            <param name="Objects">Objects to bulk import.</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedBulkUpdate(Clayster.Library.Data.DBTypeInfo,System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk update.
            </summary>
            <param name="TypeInfo">Type Info</param>
            <param name="Objects">Objects to bulk update.</param>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedBulkDelete(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk delete.
            </summary>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedBulkDelete(System.Int64[],System.Int32,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk delete for objects in a specific partition.
            </summary>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="Partition">Partition for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedUpdate(System.Object,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated update.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>When the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedLoad(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Performs a dedicated load.
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">null if a new object is to be created, pointer to an object of the correct type if
            updating an existing object.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedGetDates(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@,System.DateTime@)">
            <summary>
            Performs a dedicated GetDates()
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">Creation date of object.</param>
            <param name="Updated">Update date of object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedDelete(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated Delete
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MySqlDoDedicatedDelete(System.Int32,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated Delete
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="Partition">Partition of the objects</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedInsert(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@)">
            <summary>
            Performs a dedicated insert.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">When the object was created.</param>
            <returns>Object ID in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedImport(System.Object,System.Int32,System.Int64,System.DateTime,System.DateTime,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated import.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Object ID in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedBulkInsert(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk insert.
            </summary>
            <param name="Objects">Objects to bulk insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object IDs and created time stamps of the inserted objects in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedBulkImport(Clayster.Library.Data.DBImportObject[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk import.
            </summary>
            <param name="Objects">Objects to bulk import.</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedUpdate(System.Object,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated update.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>When the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedLoad(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.String)">
            <summary>
            Performs a dedicated load.
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">null if a new object is to be created, pointer to an object of the correct type if
            updating an existing object.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedGetDates(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@,System.DateTime@)">
            <summary>
            Performs a dedicated GetDates()
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">Creation date of object.</param>
            <param name="Updated">Update date of object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.SQLiteServerDoDedicatedDelete(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated Delete
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedInsert(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@)">
            <summary>
            Performs a dedicated insert.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">When the object was created.</param>
            <returns>Object ID in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedImport(System.Object,System.Int32,System.Int64,System.DateTime,System.DateTime,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated import.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Object ID in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedBulkInsert(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk insert.
            </summary>
            <param name="Objects">Objects to bulk insert.</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object IDs and created time stamps of the inserted objects in the dedicated table.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedBulkImport(Clayster.Library.Data.DBImportObject[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk import.
            </summary>
            <param name="Objects">Objects to bulk import.</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.Escape(System.String)">
            <summary>
            Replaces invalid XML characters in a string with their valid XML equivalent.
            </summary>
            <param name="Text">The string within which to escape invalid characters.</param>
            <returns>The input string with invalid characters replaced.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedBulkUpdate(Clayster.Library.Data.DBTypeInfo,System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk update.
            </summary>
            <param name="TypeInfo">Type Info</param>
            <param name="Objects">Objects to bulk update.</param>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedUpdate(System.Object,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated update.
            </summary>
            <param name="Object">Object to insert.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>When the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedLoad(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.String)">
            <summary>
            Performs a dedicated load.
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">null if a new object is to be created, pointer to an object of the correct type if
            updating an existing object.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedGetDates(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime@,System.DateTime@)">
            <summary>
            Performs a dedicated GetDates()
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Created">Creation date of object.</param>
            <param name="Updated">Update date of object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedDelete(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated Delete
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedDelete(System.Int32,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated Delete
            </summary>
            <param name="ObjectId">Object ID of the object.</param>
            <param name="Partition">Partition of the objects</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedBulkDelete(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk delete.
            </summary>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.MsSqlServerDoDedicatedBulkDelete(System.Int64[],System.Int32,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Performs a dedicated bulk delete for objects in a specific partition.
            </summary>
            <param name="ObjectIds">Object IDs for objects</param>
            <param name="Partition">Partition for objects</param>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.#ctor(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Class containing information about how to treat a specific
            type in the object database.
            </summary>
            <param name="Type">Information record based on this type.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.Create">
            <summary>
            Creates an instance of the type using the default constructor.
            </summary>
            <returns>Newly created object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.TryGetFieldInfo(System.String,Clayster.Library.Data.DBFieldInfo@)">
            <summary>
            Tries to get the field named <paramref name="FieldName"/>.
            </summary>
            <param name="FieldName">Name of the field.</param>
            <param name="FieldInfo">If found, the field information will be output to this variable.</param>
            <returns>If the field was found.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.FieldByFieldId(System.Int32)">
            <summary>
            Returns the DBFieldInfo object corresponding to the FieldId for this type.
            If no such field is available, null is returned.
            </summary>
            <param name="FieldId">FieldId value.</param>
            <returns>DBFieldInfo object describing the field.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeInfo.GetPartition(System.Object)">
            <summary>
            Gets the partition of a specific object.
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.MySqlTableName">
            <summary>
            Name of the dedicated table in MySQL (if class has a dedicated table).
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Type">
            <summary>
            Type corresponding to the information in this object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.FullName">
            <summary>
            Full name of the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.TableName">
            <summary>
            Name of the dedicated table (if class has a dedicated table).
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Partitions">
            <summary>
            Number of partitions of (or number of dedicated tables for) the type.
            (Only applicable if the type has dedicated tables.)
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.PartitionOnFieldName">
            <summary>
            Partition on this field/property name. If not specified, the Object ID will
            be used for partitioning.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.PartitionOnField">
            <summary>
            Partition on this field/property name. If not specified, the Object ID will
            be used for partitioning.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.TypeId">
            <summary>
            The TypeId of the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ParentId">
            <summary>
            The ParentId of the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Compatible">
            <summary>
            If the type is compatible with the object database or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ReasonIfNot">
            <summary>
            If not compatible, this string contains the reason why.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasShortStrings">
            <summary>
            If the type has short string parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasLongStrings">
            <summary>
            If the type has long string parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasObjects">
            <summary>
            If the type has object parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasBlobs">
            <summary>
            If the type has large binary objects (Blob) parameters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasIntegers">
            <summary>
            If the type has integers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasDoubles">
            <summary>
            If the type has double fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasDateTimes">
            <summary>
            If the type has DateTime fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasEnums">
            <summary>
            If the type has Enum fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasCollections">
            <summary>
            If the type has collection fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.IsCollection">
            <summary>
            If the type is a collection of objects.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasEncryptedShortStrings">
            <summary>
            If the type has encrypted short string fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasEncryptedStrings">
            <summary>
            If the type has encrypted short or long strings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasEncryptedLongStrings">
            <summary>
            If the type has encrypted long string fields.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Objects">
            <summary>
            Object fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Enums">
            <summary>
            Enum fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Bytes">
            <summary>
            Byte fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Int16s">
            <summary>
            Int16 fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Int32s">
            <summary>
            Int32 fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Int64s">
            <summary>
            Int64 fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Chars">
            <summary>
            Char fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Booleans">
            <summary>
            Boolean fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ShortStrings">
            <summary>
            Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ShortStringsNormalized">
            <summary>
            Normalized Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ShortClippedStrings">
            <summary>
            Clipped Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ShortClippedStringsNormalized">
            <summary>
            Normalized Clipped Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.LongStrings">
            <summary>
            Long String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Singles">
            <summary>
            Single fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Doubles">
            <summary>
            Double fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.TimeSpans">
            <summary>
            TimeSpan fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.DateTimes">
            <summary>
            DateTime fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Blobs">
            <summary>
            Blob fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.EncryptedShortStrings">
            <summary>
            Encrypted Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.EncryptedLongStrings">
            <summary>
            Encrypted Short String fields available on the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Constructor">
            <summary>
            Default constructor of the type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Item(System.String)">
            <summary>
            Returns the DBFieldInfo object corresponding to the named field for this type.
            If no such field is available, null is returned.
            </summary>
            <param name="FieldName">Name of the field.</param>
            <returns>DBFieldInfo object describing the field.</returns>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ObjectIdField">
            <summary>
            Field containing the object id of the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.OwnerIdField">
            <summary>
            Field containing the owner id of the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.CreatedField">
            <summary>
            Field containing the Created Date Time of the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.UpdatedField">
            <summary>
            Field containing the Updated Date Time of the object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.ValidationMethod">
            <summary>
            Method that can be used to validate an object of the given type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.OnLoadedMethod">
            <summary>
            Method that should be called when the object has been loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.AddMethod">
            <summary>
            Method that can be used to add objects to the collection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.DedicatedTable">
            <summary>
            If the type has a dedicated table or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.Fields">
            <summary>
            Fields
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.DedicatedDeleteMethod">
            <summary>
            If the type has a dedicated delete method. This means it's derived from
            <see cref="T:Clayster.Library.Data.DBObject"/> and has overridden the <see cref="M:Clayster.Library.Data.DBObject.Delete(Clayster.Library.Data.Providers.IProviderConnectionState)"/> method.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.HasDedicatedMultiPropertyIndex">
            <summary>
            If the type has an index over two or more fields or properties (it only works for classes with dedicated tables).
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.DedicatedMultiPropertyIndexes">
            <summary>
            The field names for the properties for each index.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBTypeInfo.DedicatedMultiPropertyIndexFields">
            <summary>
            The field information for the properties for each index.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Ands">
            <summary>
            List of And operators.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.NodeList">
            <summary>
            Base class of all expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Node">
            <summary>
            Base class of all expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates Dynamic SQL Search conditions (where clauses) corresponding to the search node.
            </summary>
            <param name="sb">StringBuilder used to build up the XML.</param>
            <param name="TypeInfo">Type Information for the Type the search is being performed on. null if not available.</param>
            <param name="DefaultDataType">Default data type for parameters.</param>
            <param name="Parent">Parent Search node.</param>
            <param name="Partition">Current partition.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates Dynamic SQL Search conditions (where clauses) corresponding to the search node.
            </summary>
            <param name="sb">StringBuilder used to build up the XML.</param>
            <param name="TypeInfo">Type Information for the Type the search is being performed on. null if not available.</param>
            <param name="DefaultDataType">Default data type for parameters.</param>
            <param name="Parent">Parent Search node.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates Dynamic SQL Search conditions (where clauses) corresponding to the search node.
            </summary>
            <param name="sb">StringBuilder used to build up the XML.</param>
            <param name="TypeInfo">Type Information for the Type the search is being performed on. null if not available.</param>
            <param name="DefaultDataType">Default data type for parameters.</param>
            <param name="Parent">Parent Search node.</param>
            <param name="Partition">Current partition.</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.#ctor">
            <summary>
            Base class of all expression nodes.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the data type returned by the expression node.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="Variables">Search variables.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)">
            <summary>
            Function that calls a method for the node and each child, grandchild, etc.
            </summary>
            <param name="Function">Method to be called for each node.</param>
            <param name="Level">Starting depth.</param>
            <returns>true if the method was called for all nodes, false if the process
            was interrupted.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.CreateInstance">
            <summary>
            Creates a new object instance of the same type as the current node.
            </summary>
            <returns>New object instance.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.Copy">
            <summary>
            Makes a copy of the node, its properties and children.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.InvalidSearchExpression">
            <summary>
            Throws an exception if the search expression is invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Evaluates the node.
            </summary>
            <param name="TypeInfo">Type information of <paramref name="Object"/>.</param>
            <param name="Object">Object</param>
            <param name="Variables">Variables</param>
            <returns>Value</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Checks if a subexpression may contain matches in a given partition.
            </summary>
            <param name="Partition">Partition</param>
            <param name="TypeInfo">Type information</param>
            <param name="Variables">Search variables.</param>
            <returns>If matches may exist.</returns>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.NodeList.list">
            <summary>
            List of operands.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Op">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Op1">Operand 1</param>
            <param name="Op2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.#ctor(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            Base class of all expression nodes.
            </summary>
            <param name="Ops">List of operands</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.CreateInstance(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="List">List of operands</param>
            <returns>New instance of the node.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.Copy">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.GetEnumerator">
            <summary>
            <see cref="T:System.Collections.Generic.IEnumerator`1"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.Add(Clayster.Library.Data.Expressions.Node)">
            <summary>
            Adds an operand to the operator.
            </summary>
            <param name="Node">Operand to add.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.NodeList.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.NodeList.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.NodeList.Count">
            <summary>
            Number of operands maintained by the operator.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.NodeList.Item(System.Int32)">
            <summary>
            Zero based index operator for operand access.
            </summary>
            <param name="Index">Zero based index.</param>
            <returns>Operand</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            List of And operators.
            </summary>
            <param name="Op">First operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            List of And operators.
            </summary>
            <param name="Op1">Operand 1</param>
            <param name="Op2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.#ctor(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            List of And operators.
            </summary>
            <param name="Ops">List of operands</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.CreateInstance(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.NodeList.CreateInstance(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ands.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.Ands.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryNode">
            <summary>
            Base class of all binary expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.UnaryNode">
            <summary>
            Base class of all unary expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.UnaryNode.op">
            <summary>
            Operand
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class of all unary expression nodes.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            Creates a new instance of the unary node.
            </summary>
            <param name="Op">Operand</param>
            <returns>New instance of the node.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryNode.Copy">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Copy"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator">
            <summary>
            SQL Operator
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator">
            <summary>
            SQL Operator
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator">
            <summary>
            SQL Operator
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryNode.Operand">
            <summary>
            Operand
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryNode.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.MySqlRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Renders a single SQL comparison
            </summary>
            <param name="Sql">SQL Output</param>
            <param name="Op1">Left operand</param>
            <param name="Op2">Right operand</param>
            <param name="ArrayMode">If in array mode (i.e. Op2 is an array).</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.SQLiteServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Renders a single SQL comparison
            </summary>
            <param name="Sql">SQL Output</param>
            <param name="Op1">Left operand</param>
            <param name="Op2">Right operand</param>
            <param name="ArrayMode">If in array mode (i.e. Op2 is an array).</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.MsSqlServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            Renders a single SQL comparison
            </summary>
            <param name="Sql">SQL Output</param>
            <param name="Op1">Left operand</param>
            <param name="Op2">Right operand</param>
            <param name="ArrayMode">If in array mode (i.e. Op2 is an array).</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            Checks if an operator is compatible with the given type.
            </summary>
            <param name="Type">Type</param>
            <returns>If the operator is compatible with <paramref name="Type"/> or not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.BinaryNode.op2">
            <summary>
            Second operand
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class of all binary expression nodes.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.ForAll(Clayster.Library.Data.Expressions.NodeDelegate,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Creates a new instance of the binary node.
            </summary>
            <param name="Op1">Operand 1</param>
            <param name="Op2">Operand 2</param>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.Copy">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Copy"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)">
            <summary>
            Checks if the operator is true for two constant values.
            </summary>
            <param name="LeftOperand">Left operand</param>
            <param name="RightOperand">Right operand</param>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryNode.Operand2">
            <summary>
            Second (right) operand
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryNode.SupportsArrays">
            <summary>
            If the binary operator supports arrays.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryNode.AllInArrayMustBeTrue">
            <summary>
            If all elements in an array must compare to true, for the complete operator to be true or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo">
            <summary>
            Equality operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Comparison">
            <summary>
            Base class of all comparison expression nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Comparison.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class of all comparison expression nodes.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Creates a new instance of the commuted version of the comparison node.
            </summary>
            <example>
            The commuter version of op1 &lt; op2 is op1 >= op2
            </example>
            <param name="Op1">Operand 1</param>
            <param name="Op2">Operand 2</param>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Comparison.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Comparison.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.Comparison.Parameter">
            <summary>
            Returns a reference to the parameter node. Any parameter nodes should be stored in the
            first operand.
            </summary>
            <exception cref="T:Clayster.Library.Data.DBInputException">If the first operand is not a parameter node.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.MySqlRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.MySqlRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.SQLiteServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.SQLiteServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.MsSqlServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.MsSqlServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Equality operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.SupportsArrays">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.BinaryNode.SupportsArrays"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.EqualTo.AllInArrayMustBeTrue">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.BinaryNode.AllInArrayMustBeTrue"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan">
            <summary>
            Greater Than operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Greater Than operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThan.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo">
            <summary>
            Greater Than or Equal To operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Greater Than or Equal To operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.GreaterThanOrEqualTo.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan">
            <summary>
            Lesser Than operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Lesser Than operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThan.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo">
            <summary>
            Lesser Than or Equal To operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Lesser Than or Equal To operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.LesserThanOrEqualTo.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.Like">
            <summary>
            LIKE operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            LIKE operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.Matches(System.String,System.String)">
            <summary>
            Searches for <paramref name="SearchFor"/> in <paramref name="SearchIn"/>. 
            <paramref name="SearchFor"/> may contain wildcards in the form of asterisks (*).
            </summary>
            <param name="SearchIn">Search for occurrences of <paramref name="SearchFor"/> in this string.</param>
            <param name="SearchFor">Search for this string. May contain wildcards in the form of asterisks (*).</param>
            <returns>true if <paramref name="SearchFor"/> is found in <paramref name="SearchIn"/>.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.Like.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.Like.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.Like.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.Like.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.Like.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo">
            <summary>
            Not Equal To operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.MySqlRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.MySqlRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.SQLiteServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.SQLiteServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.MsSqlServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.MsSqlServerRenderComparison(System.Text.StringBuilder,System.String,System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            Not Equal To operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.SupportsArrays">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.BinaryNode.SupportsArrays"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotEqualTo.AllInArrayMustBeTrue">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.BinaryNode.AllInArrayMustBeTrue"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.BinaryOperators.NotLike">
            <summary>
            NOT LIKE operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            NOT LIKE operator.
            </summary>
            <param name="Operand1">Operand 1</param>
            <param name="Operand2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Comparison.CreateInstanceCommuted(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.IsTrue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.IsTrue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.BinaryNode.CheckOperatorCompatible(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.BinaryOperators.NotLike.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.BooleanConstant">
            <summary>
            Boolean valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constant`1">
            <summary>
            Base class for all constant nodes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constant`1.#ctor(`0)">
            <summary>
            Base class for all constant nodes.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constant`1.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constant`1.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constant`1.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constant`1.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.Constant`1.Value">
            <summary>
            Constant value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.#ctor(System.Boolean)">
            <summary>
            Boolean valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.BooleanConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.CharacterConstant">
            <summary>
            Character valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.#ctor(System.Char)">
            <summary>
            Character valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.CharacterConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.DateTimeConstant">
            <summary>
            DateTime valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.#ctor(System.DateTime)">
            <summary>
            DateTime valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DateTimeConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.DoubleConstant">
            <summary>
            Double valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.#ctor(System.Double)">
            <summary>
            Double valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.DoubleConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.IntegerConstant">
            <summary>
            Integer valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.#ctor(System.Int64)">
            <summary>
            Integer valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.IntegerConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.StringConstant">
            <summary>
            String valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.#ctor(System.String)">
            <summary>
            String valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.StringConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant">
            <summary>
            TimeSpan valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.#ctor(System.TimeSpan)">
            <summary>
            TimeSpan valued constant.
            </summary>
            <param name="Value">Constant value</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Constants.TimeSpanConstant.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.BlobDataType">
            <summary>
            Blob value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BlobDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BlobDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BlobDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BlobDataType.#ctor">
            <summary>
            Blob value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BlobDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType">
            <summary>
            Boolean value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType.#ctor">
            <summary>
            Boolean value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.BooleanDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType">
            <summary>
            Character value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType.#ctor">
            <summary>
            Character value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.CharacterDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType">
            <summary>
            DateTime value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.MySqlConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.SQLiteServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.MsSqlServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.#ctor">
            <summary>
            DateTime value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DateTimeDataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType">
            <summary>
            Double value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.MySqlConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.SQLiteServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.MsSqlServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerConvertFromSql(System.Text.StringBuilder,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.DataTypes.DataType@,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.#ctor">
            <summary>
            Double value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.DoubleDataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.EnumDataType">
            <summary>
            Enumeration value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.EnumDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.EnumDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.EnumDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.EnumDataType.#ctor">
            <summary>
            Enumeration value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.EnumDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType">
            <summary>
            Integer value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.#ctor(System.Int64,System.Int64)">
            <summary>
            Integer value
            </summary>
            <param name="Min">Smallest allowed value in range.</param>
            <param name="Max">Largest allowed value in rage.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.CanBeConvertedFrom(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.Min">
            <summary>
            Minimum value of compatible integers.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.IntegerDataType.Max">
            <summary>
            Maximum value of compatible integers.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType">
            <summary>
            Object value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType.#ctor">
            <summary>
            Object value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.ObjectDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.StringDataType">
            <summary>
            String value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.StringDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.StringDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.StringDataType.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            String value
            </summary>
            <param name="MinLength">Min length of strings.</param>
            <param name="MaxLength">Max length of strings.</param>
            <param name="IsLong">If the string is a long string.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.StringDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.MinLength">
            <summary>
            Minimum length of compatible strings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.MaxLength">
            <summary>
            Maximum length of compatible strings.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsEquality">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsEquality"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsGreaterThan">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsGreaterThan"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsGreaterThanOrEqualTo">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsGreaterThanOrEqualTo"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsLesserThan">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLesserThan"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsLesserThanOrEqualTo">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLesserThanOrEqualTo"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsLike">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsLike"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsNotEqualTo">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsNotEqualTo"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.DataTypes.StringDataType.SupportsNotLike">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.DataTypes.DataType.SupportsNotLike"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType">
            <summary>
            TimeSpan value
            </summary>
            <remarks>
            © Clayster, 2009-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType.MySqlDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MySqlDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.SQLiteServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.MsSqlServerDefaultValueToSql(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType.#ctor">
            <summary>
            TimeSpan value
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.DataTypes.TimeSpanDataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.DataTypes.DataType.IsCompatibleWith(Clayster.Library.Data.Expressions.DataTypes.DataType)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Ors">
            <summary>
            List of Or operators.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            List of Or operators.
            </summary>
            <param name="Op">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.#ctor(Clayster.Library.Data.Expressions.Node,Clayster.Library.Data.Expressions.Node)">
            <summary>
            List of Or operators.
            </summary>
            <param name="Op1">Operand 1</param>
            <param name="Op2">Operand 2</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.#ctor(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            List of Or operators.
            </summary>
            <param name="Ops">List of operands</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.CreateInstance(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.NodeList.CreateInstance(System.Collections.Generic.List{Clayster.Library.Data.Expressions.Node})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Ors.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.Ors.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Parameter">
            <summary>
            Parameter Node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Symbol">
            <summary>
            Base class for all symbols.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Symbol.#ctor(System.String)">
            <summary>
            Base class for all symbols.
            </summary>
            <param name="Name">Symbol</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Symbol.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Symbol.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Symbol.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.Symbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.#ctor(System.String)">
            <summary>
            Parameter Node.
            </summary>
            <param name="Name">Name of parameter</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Parameter.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.SearchExpression">
            <summary>
            Class handling Search Expressions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SearchExpression.Digits">
            <summary>
            Digits 0-9
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SearchExpression.LowerCaseLetters">
            <summary>
            Lower case letters in the English alphabet
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SearchExpression.UpperCaseLetters">
            <summary>
            Upper case letters in the English alhpabet
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SearchExpression.Alpha">
            <summary>
            Lower and Upper case letters in the English alphabet as well as the underscore character.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SearchExpression.AlphaNumeric">
            <summary>
            Lower and Upper case letters in the English alphabet as well as the underscore character and the digits 0-9.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.#ctor(System.String)">
            <summary>
            Class handling Search Expressions.
            </summary>
            <param name="Expression">Search expression as a string.</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.ToString">
            <summary>
            Converts the expression to a string.
            </summary>
            <returns>Expression as a string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.Equals(System.Object)">
            <summary>
            Checks if the expression is equal to another.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.GetHashCode">
            <summary>
            Hashcode of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.Copy">
            <summary>
            Makes a copy of the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.Normalize">
            <summary>
            Obsolete
            </summary>
            <returns>Same search expression.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.Parse(System.String)">
            <summary>
            Parses a string and returns an expression.
            </summary>
            <param name="Expression">Expression string.</param>
            <returns>Search expression</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.ParseNormalized(System.String)">
            <summary>
            Obsolete. Use Parse(Expression) instead.
            </summary>
            <param name="Expression">Expression string.</param>
            <returns>Search expression</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.ParseCached(System.String)">
            <summary>
            Parses a string and returns a normalized expression.
            Results are cached and reused on future calls to this
            method with the same expression.
            </summary>
            <param name="Expression">Expression string.</param>
            <returns>Search expression</returns>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.SearchExpression.ParseNormalizedCached(System.String)">
            <summary>
            Obsolete. Use ParseCached(Expression) instead.
            </summary>
            <param name="Expression">Expression string.</param>
            <returns>Search expression</returns>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.SearchExpression.Variables">
            <summary>
            Array of variables used by the expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.SearchExpression.Parameters">
            <summary>
            Array of parameter names used by the expression.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.SearchExpression.IsCompatibleSearchExpression">
            <summary>
            Checks if the expression can be used to build Search Condition XML.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.SearchExpression.Normalized">
            <summary>
            Obsolete. Allways returns false.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.UnaryComparison">
            <summary>
            Base class for all unary comparison operators.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            Base class for all unary comparison operators.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryComparison.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull">
            <summary>
            IS NOT NULL operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            IS NOT NULL operator.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNotNull.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.UnaryOperators.IsNull">
            <summary>
            IS NULL operator.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            IS NULL operator.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.IsNull.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.UnaryOperators.Not">
            <summary>
            String valued constant.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.#ctor(Clayster.Library.Data.Expressions.Node)">
            <summary>
            String valued constant.
            </summary>
            <param name="Operand">Operand</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.CreateInstance(Clayster.Library.Data.Expressions.Node)">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.UnaryNode.CreateInstance(Clayster.Library.Data.Expressions.Node)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.UnaryOperators.Not.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.Not.MySqlOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MySqlOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.Not.SQLiteServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.SQLiteServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.Not.MsSqlServerOperator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.MsSqlServerOperator"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Expressions.UnaryOperators.Not.Operator">
            <summary>
            <see cref="P:Clayster.Library.Data.Expressions.UnaryNode.Operator"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.Variable">
            <summary>
            Variable Node.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MySqlGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SQLiteServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.MsSqlServerGenerateSearchConditions(System.Text.StringBuilder,Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Expressions.DataTypes.DataType,Clayster.Library.Data.Expressions.Node,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.#ctor(System.String)">
            <summary>
            Variable Node.
            </summary>
            <param name="Name">Variable name</param>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.CreateInstance">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.CreateInstance"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.GetDataType(Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.Evaluate(Clayster.Library.Data.DBTypeInfo,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Expressions.Variable.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            <see cref="M:Clayster.Library.Data.Expressions.Node.SubResultInPartition(System.Int32,Clayster.Library.Data.DBTypeInfo,System.Collections.Generic.Dictionary{System.String,System.Object})"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MySQL.ISqlConnectionState">
            <summary>
            Interface for SQL Connection states. A connection state object maintains an SQL Connection, its
            transactions, synchronization objects, commands, etc.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Providers.IProviderConnectionState">
            <summary>
            Interface for a specific connection to a data provider.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.Recycle(System.Int32)">
            <summary>
            Recycles the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.BeginTransaction">
            <summary>
            Begins a new transaction. Transactions may be nested.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.CommitTransaction">
            <summary>
            Commits the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.RollbackTransaction">
            <summary>
            Rollbacks the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTransactionStackTraces">
            <summary>
            Stack Traces for locations where active transactions were created.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetOwnerId(System.String)">
            <summary>
            Gets the Owner ID for an Owner from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="Owner">Owner</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetFieldId(System.String,System.String)">
            <summary>
            Gets the Field ID for a Field from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.AddTypeId(System.String,System.String)">
            <summary>
            Adds a type to the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="TypeName">Type Name</param>
            <param name="XmlTypes">XML Type information.</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrCreated(System.Int32)">
            <summary>
            Increments the counter counting number of objects created.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrUpdated(System.Int32)">
            <summary>
            Increments the counter counting number of objects updated.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrLoaded(System.Int32)">
            <summary>
            Increments the counter counting number of objects loaded.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrDeleted(System.Int32)">
            <summary>
            Increments the counter counting number of objects deleted.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrSearches(System.Int32)">
            <summary>
            Increments the counter counting number of searches.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrCreated">
            <summary>
            Increments the counter counting number of objects created by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrUpdated">
            <summary>
            Increments the counter counting number of objects updated by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrLoaded">
            <summary>
            Increments the counter counting number of objects loaded by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrDeleted">
            <summary>
            Increments the counter counting number of objects deleted by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrSearches">
            <summary>
            Increments the counter counting number of searches by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.RecycleIfNotOpen(System.Int32)">
            <summary>
            If the connection is not open (or not otherwise OK), the connection gets recycled.
            </summary>
            <param name="Attempt">Attempt ordinal</param>
            <returns>true, if the connection is recycled, false if connection OK.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)">
            <summary>
            Saves an object.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to save</param>
            <param name="OwnerId">Owner of object</param>
            <param name="CreatedTimepoint">When the object was created.</param>
            <returns>Object ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>Timepoint when the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object and returns an XML-representation of the object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>XML representation of object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetEnumValue(System.String)">
            <summary>
            Gets the ID representing an enumerated value (or normalized string).
            </summary>
            <param name="NormalizedString">Enumeration or normalized string.</param>
            <returns>ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetEnumValues(System.String[])">
            <summary>
            Gets IDs for a set of enumerated values (or normalized strings).
            </summary>
            <param name="NormalizedStrings">Enumerated values or normalized strings.</param>
            <returns>IDs</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation and update timepoints for an object.
            </summary>
            <param name="TypeInfo">Object type information</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets Field Information for a specific field.
            
            NOTE: This method does not cache results.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypeByObject(System.Int64)">
            <summary>
            Gets the Type Name of an object, given its ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Type Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypeIdByName(System.String)">
            <summary>
            Gets the Type ID of a Type, given its name.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>Type ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)">
            <summary>
            Upgrades the type of an object.
            </summary>
            <param name="TypeInfo">Type information of object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="UpgradeToType">Upgrade to this type.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerOwner">
            <summary>
            Gets object statistics sorted per owner.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerOwnerType">
            <summary>
            Gets object statistics sorted per owner and type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerType">
            <summary>
            Gets object statistics sorted per type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetOwners">
            <summary>
            Gets a list of available owners.
            </summary>
            <returns>List of owners.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypes(System.Int32)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypes">
            <summary>
            Gets a list of available types.
            </summary>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetFields(System.Int32)">
            <summary>
            Gets a list of available fields.
            </summary>
            <returns>List of fields.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTables">
            <summary>
            Gets a list of available tables.
            </summary>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetViews">
            <summary>
            Gets a list of available views.
            </summary>
            <returns>List of views.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetStoredProcedures">
            <summary>
            Gets a list of available stored procedures.
            </summary>
            <returns>List of stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTableColumns(System.String)">
            <summary>
            Gets a list of available table columns.
            </summary>
            <returns>List of table columns.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetStoredProcedureParameters(System.String)">
            <summary>
            Gets a list of available parameters to stored procedures.
            </summary>
            <returns>List of parameters to stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the Owner ID of an object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetOwnerName(System.Int32)">
            <summary>
            Gets the name of an owner.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <returns>Owner Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProviderConnectionState.FindUpgradeObjectIDs(System.String)">
            <summary>
            Fins all objects of a given type for upgrade.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>List of (Object ID, Owner ID) pairs.</returns>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.Provider">
            <summary>
            Database provider.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.SynchObject">
            <summary>
            Synchronization object for the Connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.InTransaction">
            <summary>
            If the connection is inside a transaction or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrCreated">
            <summary>
            Number of objects created by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrUpdated">
            <summary>
            Number of objects updated by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrLoaded">
            <summary>
            Number of objects loaded by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrDeleted">
            <summary>
            Number of objects deleted by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrSearches">
            <summary>
            Number of searches through this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.ISqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.ISqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.ISqlConnectionState.Transaction">
            <summary>
            Current transaction object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider">
            <summary>
            Handles My SQL Server communication.
            </summary>
            <remarks>
            © Clayster, 2012-2015
            
            Author: Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Providers.Provider">
            <summary>
            Base class for object database providers.
            
            Note: It is only necessary for a provider to implement the interface
            <see cref="T:Clayster.Library.Data.Providers.IProvider"/>. This base class however handles many of the
            complexities of method polymorphism required by the interface, which
            makes deriving your provider class from this class easier than from
            the interface directly.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Providers.IProvider">
            <summary>
            Interface for object database provider clients.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.Flush">
            <summary>
            Saves any pending data.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.Initialize(System.Boolean)">
            <summary>
            Initializes the provider, after it has been created. Put initialization code here that
            requires the default provider to already have been created.
            </summary>
            <param name="Main">If the provider is the main provider of the system.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Type,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.Object,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetDatabaseProxy(System.String,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.HasInfo(System.Type)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="Type">Object to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.AssertCompatible(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.AssertCompatible(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.CheckCompatible(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.CheckCompatible(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.CheckCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns if the object is compatible with the object database
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetFieldId(System.String,System.String)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetTypeId(System.Type)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <returns>TypeId corresponding to the Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.SaveNewObject(System.Object[],System.Int32)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.SaveNewObject(System.Object,System.Int32)">
            <summary>
            Saves a new object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object,System.Int32)">
            <summary>
            Updates an object in the database. The object must have
            a parameter containing the Object Id.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object[],System.Int64[],System.Int32)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the objects.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object[],System.Int32)">
            <summary>
            Updates an array of objects in the database. The objects
            must contain fields containing the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObjectAsXml(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObjectAsXml(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValue(System.Enum)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValue(System.Enum,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValue(System.String)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValues(System.Enum[])">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValues(System.Enum[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValues(System.String[])">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Owner Id</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectCreationDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Object,System.Int32)">
            <summary>
            Deletes an object from the database. The object must
            contain its Object Id.
            </summary>
            <param name="o">Object to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Object[],System.Int32)">
            <summary>
            Deletes an array of objects from the database. The objects
            must contain their Object Ids
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database. The objects must
            contain their object ids.
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database. The object must contain
            its Object Id.
            </summary>
            <param name="o">Object to delete. Must contain its Object Id.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct strings
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct strings in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct integers
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct integers in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct integers in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct integers matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct enums
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct enums in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct enumvalues in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct enums matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct doubles
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique doubles in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct doubles in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct doubles matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct datetimes
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique datetimes in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct datetime in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of datetimes matching the search criteria.</returns>
            
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjectIDs(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjectIDs(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjects``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ObjectExists(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ObjectExists(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.Exists``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.Exists``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.Exists``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectsPerOwner(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves amount of objects per owner.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectsPerOwnerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per owner and type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectsPerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetOwners(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetTypes(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetTypes(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetFields(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="TypeId">Database Type ID</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetTableColumns(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given tablename for columns in the database
            </summary>
            <param name="TableName">Tablename to retrieve columns by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings matching the table name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetStoredProcedureParameters(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given stored procedure for parameters in the database
            </summary>
            <param name="StoredProcedure">Stored procedure name to retrieve parameters by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings (parameternames) matching the stored procedure name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetObjectOwnerId(System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetOwnerName(System.Int32)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.GetOwnerName(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.IProvider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProvider.HandlesProviderNames">
            <summary>
            Set of provider names the provider supports.
            
            NOTE: The provider is always supposed to support the FullName of the class as provider name.
            There's no need to return this name since it will be implicitly understood.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.IProvider.MainConnectionState">
            <summary>
            Gets the main connection state of the provider.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Providers.Provider.mainSynchObject">
            <summary>
            Main synchronization object. Used to synchronize access to
            <see cref="F:Clayster.Library.Data.Providers.Provider.mainConnection"/>.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Providers.Provider.mainConnection">
            <summary>
            Main connection to use, when an explicit connection is not specified.
            Should be synchronized using <see cref="F:Clayster.Library.Data.Providers.Provider.mainSynchObject"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.#ctor(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Base class for object database providers.
            
            Note: It is only necessary for a provider to implement the interface
            <see cref="T:Clayster.Library.Data.Providers.IProvider"/>. This base class however handles many of the
            complexities of method polymorphism required by the interface, which
            makes deriving your provider class from this class easier than from
            the interface directly.
            </summary>
            <param name="MainConnection">Main connection to use when none is explicitly
            specified.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Flush">
            <summary>
            Saves any pending data.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Initialize(System.Boolean)">
            <summary>
            Initializes the provider, after it has been created. Put initialization code here that
            requires the default provider to already have been created.
            </summary>
            <param name="Main">If the provider is the main provider of the system.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.HasInfo(System.Type)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="Type">Object to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AssertCompatible(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AssertCompatible(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.CheckCompatible(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.CheckCompatible(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.CheckCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns if the object is compatible with the object database
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Type,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.Object,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetDatabaseProxy(System.String,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetFieldId(System.String,System.String)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTypeId(System.Type)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <returns>TypeId corresponding to the Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.SaveNewObject(System.Object[],System.Int32)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.SaveNewObject(System.Object,System.Int32)">
            <summary>
            Saves a new object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object,System.Int32)">
            <summary>
            Updates an object in the database. The object must have
            a parameter containing the Object Id.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object[],System.Int64[],System.Int32)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the objects.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object[],System.Int32)">
            <summary>
            Updates an array of objects in the database. The objects
            must contain fields containing the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FieldsXml(System.Object,Clayster.Library.Data.DBTypeInfo,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int64)">
            <summary>
            Converts an object to XML.
            </summary>
            <param name="o">Object</param>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ConnectionState">Connection State</param>
            <param name="HasIntegers">If the object has integers.</param>
            <param name="HasShortStrings">If the object has short strings.</param>
            <param name="HasLongStrings">If the object has long strings.</param>
            <param name="HasDoubles">If the object has doubles.</param>
            <param name="HasDateTimes">If the object has DateTime's.</param>
            <param name="HasEnums">If the object has enumerations.</param>
            <param name="HasObjects">If the object has sub-objects.</param>
            <param name="HasBlobs">If the object has blobs.</param>
            <param name="IsCollection">If the object is a collection.</param>
            <param name="ObjectId">Object ID</param>
            <returns>XML string representation of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddIntegerFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds integer fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Integer fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddSubObjectFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Int32,System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Adds sub-object fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Sub-object fields.</param>
            <param name="OwnerId">Owner ID</param>
            <param name="o">Object.</param>
            <param name="ConnectionState">Connection state.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddCollectionItemFields(System.Text.StringBuilder,System.Collections.IEnumerable,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Adds collection items to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="o">Object.</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ConnectionState">Connection State</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddDoubleFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds double fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Double fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddTimeSpanFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds TimeSpan fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">TimeSpan fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddDateTimeFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds DateTime fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">DateTime fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddEnumFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds enumeration fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Enumeration fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddShortStringFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds short string fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Short string fields.</param>
            <param name="o">Object.</param>
            <param name="Clipped">If the strings should be clipped or not.</param>
            <param name="Normalized">If the strings should be normalized or not.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddEncryptedShortStringFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Adds encrypted short string fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Encrypted short string fields.</param>
            <param name="o">Object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="Clip">If the strings should be clipped or not.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddEncryptedLongStringFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Adds encrypted long string fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Encrypted long string fields.</param>
            <param name="o">Object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="Clip">If the strings should be clipped or not.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddLongStringFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds long string fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Long String fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddBlobFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds blob fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Blob fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddImageFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds image fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Image fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.AddStreamFields(System.Text.StringBuilder,System.Collections.Generic.SortedDictionary{System.String,Clayster.Library.Data.DBFieldInfo},System.Object)">
            <summary>
            Adds stream fields to the XML output.
            </summary>
            <param name="sb">XML Output.</param>
            <param name="List">Stream fields.</param>
            <param name="o">Object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObjectAsXml(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObjectAsXml(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValue(System.Enum)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValue(System.Enum,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValue(System.String)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValues(System.Enum[])">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValues(System.Enum[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValues(System.String[])">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Owner Id</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectCreationDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Object,System.Int32)">
            <summary>
            Deletes an object from the database. The object must
            contain its Object Id.
            </summary>
            <param name="o">Object to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Object[],System.Int32)">
            <summary>
            Deletes an array of objects from the database. The objects
            must contain their Object Ids
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database. The objects must
            contain their object ids.
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database. The object must contain
            its Object Id.
            </summary>
            <param name="o">Object to delete. Must contain its Object Id.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjects``1(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct strings
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct strings in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct integers
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct integers in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct integers in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct integers matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct enums
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct enums in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct enumvalues in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct enums matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct doubles
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique doubles in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct doubles in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct doubles matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct datetimes
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique datetimes in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct datetime in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of datetimes matching the search criteria.</returns>
            
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjectIDs(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjectIDs(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjects``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ObjectExists(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ObjectExists(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Exists``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Exists``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.Exists``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectsPerOwner(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves amount of objects per owner.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectsPerOwnerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per owner and type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectsPerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetOwners(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTypes(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTypes(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetFields(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="TypeId">Database Type ID</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTables(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets a list of available tables.
            </summary>
            <param name="ConnectionState">Connection state.</param>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetViews(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets a list of available views.
            </summary>
            <param name="ConnectionState">Connection state.</param>
            <returns>List of views.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetStoredProcedures(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets a list of stored procedures.
            </summary>
            <param name="ConnectionState">Connection state.</param>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetTableColumns(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given tablename for columns in the database
            </summary>
            <param name="TableName">Tablename to retrieve columns by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings matching the table name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetStoredProcedureParameters(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given stored procedure for parameters in the database
            </summary>
            <param name="StoredProcedure">Stored procedure name to retrieve parameters by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings (parameternames) matching the stored procedure name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetObjectOwnerId(System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetOwnerName(System.Int32)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.GetOwnerName(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.UpgradeType(System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Upgrades a type to the specified type
            </summary>
            <param name="Type">Type parameter describing what to upgrade to.</param>
            <param name="UpgradeType">Name of the type to upgrade.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Provider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="P:Clayster.Library.Data.Providers.Provider.HandlesProviderNames">
            <summary>
            Set of provider names the provider supports.
            
            NOTE: The provider is always supposed to support the FullName of the class as provider name.
            There's no need to return this name since it will be implicitly understood.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.Provider.MainConnectionState">
            <summary>
            Gets the main connection state of the provider.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.Provider.SubObjectsCanBeUpdated">
            <summary>
            If subjects can be updated (i.e. retains the same object ID and owner ID). If not, new objects are
            created each time the parent is updated.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Handles My SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
            <param name="CheckDatabase">Check if database needs updating.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.#ctor(System.String,System.String)">
            <summary>
            Handles My SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.#ctor(System.String)">
            <summary>
            Handles My SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.Initialize(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.Provider.Initialize(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.UpdateObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.UpdateObject(System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Object ID for the objects</param>
            <param name="OwnerId">The owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadObject(System.Int64,System.Int32,System.String)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DeleteObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database. The objects must
            contain their object ids.
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.SelfTest(System.Boolean,System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="IncludeEventLog">If the event log should be included or not.</param>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.BuildMySqlConnectionString(System.String,System.String,System.String)">
            <summary>
            Builds a My SQL connection string
            </summary>
            <param name="Server">Server Name</param>
            <param name="UserName">SQL User Name</param>
            <param name="Password">Password</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.BuildMySqlConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Builds a My SQL connection string
            </summary>
            <param name="Server">Server Name</param>
            <param name="Database">Database</param>
            <param name="UserName">SQL User Name</param>
            <param name="Password">Password</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.BuildMySqlConnectionString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a My SQL connection string
            </summary>
            <param name="Server">Server Name</param>
            <param name="Port">Port</param>
            <param name="Database">Database</param>
            <param name="UserName">SQL User Name</param>
            <param name="Password">Password</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.CreateDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.CreateDatabase(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Port">Port</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DatabaseExists(System.String,System.String,System.String,System.String)">
            <summary>
            Checks if a database exists.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Database">Name of database to check.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
            <returns>If the database exists or not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DatabaseExists(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Checks if a database exists.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Port">Port</param>
            <param name="Database">Name of database to check.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
            <returns>If the database exists or not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DropDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Drops an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Database">Name of database to drop.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.DropDatabase(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Drops an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Port">Port</param>
            <param name="Database">Name of database to drop.</param>
            <param name="Username">User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.TestDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Tests an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Database">Name of database.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.TestDatabase(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Tests an object database.
            </summary>
            <param name="ServerName">My SQL Server</param>
            <param name="Port">Port</param>
            <param name="Database">Name of database.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySQLServerProvider.ProviderName">
            <summary>
            Provider Name.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState">
            <summary>
            Class handling all state information relating to an MySQL Connection.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Recycle(System.Int32)">
            <summary>
            Recycles the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ExecuteScalar(System.String)">
            <summary>
            Executes SQL on the server that returns a single scalar response.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ExecuteNonQuery(System.String)">
            <summary>
            Executes SQL on the server that does not return data (or response is not interesting).
            </summary>
            <param name="Sql">SQL to execute.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ExecuteNonQuery(System.String,System.Int32)">
            <summary>
            Executes SQL on the server that does not return data (or response is not interesting).
            </summary>
            <param name="Sql">SQL to execute.</param>
            <param name="CommandTimeout">Command timeout, in seconds.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ReadArray``1(System.String)">
            <summary>
            Executes an SQL statement, and returns an array of items returned as a response.
            </summary>
            <typeparam name="T">Data Type of returned items.</typeparam>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ReadRecords(System.String,Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ParseRecord,System.Object[])">
            <summary>
            Executes SQL on the server, with custom parsing of the result.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <param name="Parser">Parser</param>
            <param name="Parameters">Parametrs to send to parser.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.BeginTransaction">
            <summary>
            Begins a new transaction. Transactions may be nested. The newly created transaction
            can be accessed through <see cref="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Transaction"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.CommitTransaction">
            <summary>
            Commits the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.RollbackTransaction">
            <summary>
            Rollbacks the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTransactionStackTraces">
            <summary>
            Stack Traces for locations where active transactions were created.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetOwnerId(System.String)">
            <summary>
            Gets the Owner ID for an Owner from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="Owner">Owner</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetFieldId(System.String,System.String)">
            <summary>
            Gets the Field ID for a Field from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.AddTypeId(System.String,System.String)">
            <summary>
            Adds a type to the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="TypeName">Type Name</param>
            <param name="XmlTypes">XML Type information.</param>
            <returns>Added type id</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)">
            <summary>
            Saves an object.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to save</param>
            <param name="OwnerId">Owner of object</param>
            <param name="CreatedTimepoint">When the object was created.</param>
            <returns>Object ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>Timepoint when the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets Field Information for a specific field.
            
            NOTE: This method does not cache results.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTypeByObject(System.Int64)">
            <summary>
            Gets the Type Name of an object, given its ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Type Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTypeIdByName(System.String)">
            <summary>
            Gets the Type ID of a Type, given its name.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>Type ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)">
            <summary>
            Upgrades the type of an object.
            </summary>
            <param name="TypeInfo">Type information of object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="UpgradeToType">Upgrade to this type.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object and returns an XML-representation of the object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>XML representation of object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetEnumValue(System.String)">
            <summary>
            Gets the ID representing an enumerated value (or normalized string).
            </summary>
            <param name="NormalizedString">Enumeration or normalized string.</param>
            <returns>ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetEnumValues(System.String[])">
            <summary>
            Gets IDs for a set of enumerated values (or normalized strings).
            </summary>
            <param name="NormalizedStrings">Enumerated values or normalized strings.</param>
            <returns>IDs</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation and update timepoints for an object.
            </summary>
            <param name="TypeInfo">Object type information</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetObjectsPerOwner">
            <summary>
            Gets object statistics sorted per owner.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetObjectsPerOwnerType">
            <summary>
            Gets object statistics sorted per owner and type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetObjectsPerType">
            <summary>
            Gets object statistics sorted per type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetOwners">
            <summary>
            Gets a list of available owners.
            </summary>
            <returns>List of owners.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTypes(System.Int32)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTypes">
            <summary>
            Gets a list of available types.
            </summary>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetFields(System.Int32)">
            <summary>
            Gets a list of available fields.
            </summary>
            <returns>List of fields.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTables">
            <summary>
            Gets a list of available tables.
            </summary>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetViews">
            <summary>
            Gets a list of available views.
            </summary>
            <returns>List of views.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetStoredProcedures">
            <summary>
            Gets a list of available stored procedures.
            </summary>
            <returns>List of stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetTableColumns(System.String)">
            <summary>
            Gets a list of available table columns.
            </summary>
            <returns>List of table columns.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetStoredProcedureParameters(System.String)">
            <summary>
            Gets a list of available parameters to stored procedures.
            </summary>
            <returns>List of parameters to stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the Owner ID of an object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.GetOwnerName(System.Int32)">
            <summary>
            Gets the name of an owner.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <returns>Owner Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.FindUpgradeObjectIDs(System.String)">
            <summary>
            Fins all objects of a given type for upgrade.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>List of (Object ID, Owner ID) pairs.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrCreated(System.Int32)">
            <summary>
            Increments the counter counting number of objects created.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrUpdated(System.Int32)">
            <summary>
            Increments the counter counting number of objects updated.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrLoaded(System.Int32)">
            <summary>
            Increments the counter counting number of objects loaded.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrDeleted(System.Int32)">
            <summary>
            Increments the counter counting number of objects deleted.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrSearches(System.Int32)">
            <summary>
            Increments the counter counting number of searches.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrCreated">
            <summary>
            Increments the counter counting number of objects created by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrUpdated">
            <summary>
            Increments the counter counting number of objects updated by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrLoaded">
            <summary>
            Increments the counter counting number of objects loaded by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrDeleted">
            <summary>
            Increments the counter counting number of objects deleted by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.IncNrSearches">
            <summary>
            Increments the counter counting number of searches by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.RecycleIfNotOpen(System.Int32)">
            <summary>
            If the connection is not open (or not otherwise OK), the connection gets recycled.
            </summary>
            <param name="Attempt">Attempt ordinal</param>
            <returns>true, if the connection is recycled, false if connection OK.</returns>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Provider">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.Provider"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection. All access to this connection must be thread safe, and synchronized
            by locking <see cref="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.SynchObject"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Transaction">
            <summary>
            Current SQL transaction.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.SynchObject">
            <summary>
            Synchronization object for the SQL Connection. All access to the SQL Connection <see cref="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.Connection"/>
            must be thread safe.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.InTransaction">
            <summary>
            If the connection is inside a transaction or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.NrCreated">
            <summary>
            Number of objects created by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.NrUpdated">
            <summary>
            Number of objects updated by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.NrLoaded">
            <summary>
            Number of objects loaded by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.NrDeleted">
            <summary>
            Number of objects deleted by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.NrSearches">
            <summary>
            Number of searches through this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MySQL.MySqlConnectionState.ParseRecord">
            <summary>
            Parser callback method
            </summary>
            <param name="Record">Record read</param>
            <param name="Parameters">Parameters</param>
        </member>
        <member name="T:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to a SQLite database file.
            The connection string should contain the connection string for the SQLite database.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Mikael Borgbrant
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.Providers.InMemory.InMemoryProvider">
            <summary>
            Handles an in-memory interface for the object database.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.firstModified">
            <summary>
            When the contents of the database was first modified (since last load or save)
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.lastModified">
            <summary>
            When the contents of the database was last modified (since last load or save)
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.#ctor(System.String,System.String)">
            <summary>
            Handles an in-memory interface for the object database.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.#ctor(System.String)">
            <summary>
            Handles an in-memory interface for the object database.
            </summary>
            <param name="ConnectionString">Connection String.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Initialize(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.Provider.Initialize(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Flush">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProvider.Flush"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.PersistanceTimerCallback(System.Object)">
            <summary>
            Persistance timer callback method. Is called every 5 seconds.
            </summary>
            <param name="State">Always null.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.HandleException(Clayster.Library.Data.Providers.InMemory.ExceptionDelegate,System.Exception)">
            <summary>
            Raises an exception event, if defined.
            </summary>
            <param name="Method">Event handler</param>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.HandleOnSaveException(System.Exception)">
            <summary>
            Raises the OnSave exception event.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.HandleOnLoadException(System.Exception)">
            <summary>
            Raises the OnLoad exception event.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Load">
            <summary>
            Loads any persisted data.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Save">
            <summary>
            Saves any data to be persisted.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SetModifiedLocked">
            <summary>
            Called when contents of the database has changed.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SelfTest(System.Boolean,System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="IncludeEventLog">If the event log should be included or not.</param>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Recycle(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.Recycle(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.BeginTransaction">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.BeginTransaction"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.CommitTransaction">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.CommitTransaction"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.RollbackTransaction">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.RollbackTransaction"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTransactionStackTraces">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTransactionStackTraces"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetOwnerId(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetOwnerId(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.AddTypeId(System.String,System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.AddTypeId(System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrCreated(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrCreated(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrUpdated(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrUpdated(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrLoaded(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrLoaded(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrDeleted(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrDeleted(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrSearches(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrSearches(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrCreated">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrCreated"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrUpdated">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrUpdated"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrLoaded">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrLoaded"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrDeleted">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrDeleted"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.IncNrSearches">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.IncNrSearches"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.RecycleIfNotOpen(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.RecycleIfNotOpen(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTypeByObject(System.Int64)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypeByObject(System.Int64)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTypeIdByName(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypeIdByName(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetObjectsPerOwner">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerOwner"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetObjectsPerOwnerType">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerOwnerType"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetObjectsPerType">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetObjectsPerType"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetOwners">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetOwners"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTypes(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypes(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTypes">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTypes"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetFields(System.Int32)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetFields(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTables">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTables"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetViews">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetViews"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetStoredProcedures">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetStoredProcedures"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetTableColumns(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetTableColumns(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.GetStoredProcedureParameters(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.GetStoredProcedureParameters(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.FindUpgradeObjectIDs(System.String)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.IProviderConnectionState.FindUpgradeObjectIDs(System.String)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="E:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.OnSaveException">
            <summary>
            Event raised whenever exceptions when persisting the database occurs.
            </summary>
        </member>
        <member name="E:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.OnLoadException">
            <summary>
            Event raised whenever exceptions when loading the database occurs.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.ConnectionString">
            <summary>
            Connection String.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Provider">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.Provider"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.SynchObject">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.SynchObject"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.InTransaction">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.InTransaction"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.NrCreated">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrCreated"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.NrUpdated">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrUpdated"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.NrLoaded">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrLoaded"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.NrDeleted">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrDeleted"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.NrSearches">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.NrSearches"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider.#ctor(System.String,System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to a SQLite database file.
            The connection string should contain the connection string for the SQLite database.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider.#ctor(System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to a SQLite database file.
            The connection string should contain the connection string for the SQLite database.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider.Save">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Save"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider.Load">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Load"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemorySQLiteProvider.Dispose">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Dispose"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.InMemory.InMemoryBinaryProvider">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to a binary file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryBinaryProvider.#ctor(System.String,System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to an XML file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryBinaryProvider.#ctor(System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to an XML file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryBinaryProvider.Save">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Save"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryBinaryProvider.Load">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Load"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.InMemory.ExceptionDelegate">
            <summary>
            Exception delegate. Used in exception events.
            </summary>
            <param name="ex">Exception object.</param>
        </member>
        <member name="T:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to an XML file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider.Namespace">
            <summary>
            Namespace for XML files saved by this object database provider.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider.#ctor(System.String,System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to an XML file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider.#ctor(System.String)">
            <summary>
            Handles an in-memory interface for the object database. Data is persisted to an XML file.
            The connection string should contain the file name of the file used for persistance.
            </summary>
            <param name="ConnectionString">File Name of the file used for persistance.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider.Save">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Save"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.InMemory.InMemoryXmlProvider.Load">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.InMemory.InMemoryProvider.Load"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.SQLiteServer.ISqlConnectionState">
            <summary>
            Interface for SQL Connection states. A connection state object maintains an SQL Connection, its
            transactions, synchronization objects, commands, etc.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.ISqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.ISqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.ISqlConnectionState.Transaction">
            <summary>
            Current transaction object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MsSqlServer.ISqlConnectionState">
            <summary>
            Interface for SQL Connection states. A connection state object maintains an SQL Connection, its
            transactions, synchronization objects, commands, etc.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.ISqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.ISqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.ISqlConnectionState.Transaction">
            <summary>
            Current transaction object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider">
            <summary>
            Handles Microsoft SQL Server communication.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Stellan Bergström, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Handles Microsoft SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
            <param name="CheckDatabase">Check if database needs updating.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.#ctor(System.String,System.String)">
            <summary>
            Handles Microsoft SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.#ctor(System.String)">
            <summary>
            Handles Microsoft SQL Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.Initialize(System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.Providers.Provider.Initialize(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.UpdateObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.UpdateObject(System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Object ID for the objects</param>
            <param name="OwnerId">The owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadObject(System.Int64,System.Int32,System.String)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DeleteObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database. The objects must
            contain their object ids.
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.SelfTest(System.Boolean,System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="IncludeEventLog">If the event log should be included or not.</param>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.CreateDatabase(System.String,System.String)">
            <summary>
            Creates an object database using NT integrated security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.CreateDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object database using SQL Server security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DatabaseExists(System.String,System.String)">
            <summary>
            Checks if a database exists, using NT integrated security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <returns>If the database exists or not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DatabaseExists(System.String,System.String,System.String,System.String)">
            <summary>
            Checks if a database exists, using SQL Server security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
            <returns>If the database exists or not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DropDatabase(System.String,System.String)">
            <summary>
            Drops an object database using NT integrated security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.DropDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Drops an object database using SQL Server security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.TestDatabase(System.String,System.String)">
            <summary>
            Tests an object database using NT integrated security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.TestDatabase(System.String,System.String,System.String,System.String)">
            <summary>
            Tests an object database using SQL Server security.
            </summary>
            <param name="ServerName">SQL Server</param>
            <param name="Database">Name of database to create.</param>
            <param name="Username">SQL Server User Name</param>
            <param name="Password">Password.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.ProviderName">
            <summary>
            Provider Name.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.MsSqlServerProvider.HandlesProviderNames">
            <summary>
            Set of provider names the provider supports.
            
            NOTE: The provider is always supposed to support the FullName of the class as provider name.
            There's no need to return this name since it will be implicitly understood.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.NoProvider">
            <summary>
            Provider assigned if a suitable provider is not found.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.NoProvider.#ctor">
            <summary>
            Provider assigned if a suitable provider is not found.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.NoProvider.#ctor(System.Exception)">
            <summary>
            Provider assigned if a suitable provider is not found.
            </summary>
            <param name="Exception">Exception causing the main provider to fail.</param>
        </member>
        <member name="T:Clayster.Library.Data.Providers.Providers">
            <summary>
            Handles all database providers.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Providers.GetDefaultProvider">
            <summary>
            Gets the default object database provider.
            </summary>
            <returns>Provider</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Providers.GetProvider(System.String,System.String)">
            <summary>
            Gets a object database provider.
            </summary>
            <returns>Provider</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Providers.RegisterProvider(Clayster.Library.Data.Providers.IProvider)">
            <summary>
            Registers a provider. The library will make sure providers are disposed properly
            when <see cref="M:Clayster.Library.Data.Providers.Providers.Terminate"/> is called.
            </summary>
            <param name="Provider">Provider to register.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.Providers.UnregisterProvider(Clayster.Library.Data.Providers.IProvider)">
            <summary>
            Unregisters a provider.
            </summary>
            <seealso cref="M:Clayster.Library.Data.Providers.Providers.RegisterProvider(Clayster.Library.Data.Providers.IProvider)"/>
            <param name="Provider">Provider to unregister.</param>
            <returns>If the provider was found and therefore unregistered.</returns>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState">
            <summary>
            Class handling all state information relating to an SQL Connection.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Stellan Bergström, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Recycle(System.Int32)">
            <summary>
            Recycles the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ExecuteScalar(System.String)">
            <summary>
            Executes SQL on the server that returns a single scalar response.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ExecuteNonQuery(System.String)">
            <summary>
            Executes SQL on the server that does not return data (or response is not interesting).
            </summary>
            <param name="Sql">SQL to execute.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ExecuteNonQuery(System.String,System.Int32)">
            <summary>
            Executes SQL on the server that does not return data (or response is not interesting).
            </summary>
            <param name="Sql">SQL to execute.</param>
            <param name="CommandTimeout">Command timeout, in seconds.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ReadArray``1(System.String)">
            <summary>
            Executes an SQL statement, and returns an array of items returned as a response.
            </summary>
            <typeparam name="T">Data Type of returned items.</typeparam>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ReadRecords(System.String,Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ParseRecord,System.Object[])">
            <summary>
            Executes SQL on the server, with custom parsing of the result.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <param name="Parser">Parser</param>
            <param name="Parameters">Parametrs to send to parser.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.BeginTransaction">
            <summary>
            Begins a new transaction. Transactions may be nested. The newly created transaction
            can be accessed through <see cref="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Transaction"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.CommitTransaction">
            <summary>
            Commits the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.RollbackTransaction">
            <summary>
            Rollbacks the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTransactionStackTraces">
            <summary>
            Stack Traces for locations where active transactions were created.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetOwnerId(System.String)">
            <summary>
            Gets the Owner ID for an Owner from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="Owner">Owner</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetFieldId(System.String,System.String)">
            <summary>
            Gets the Field ID for a Field from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.AddTypeId(System.String,System.String)">
            <summary>
            Adds a type to the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="TypeName">Type Name</param>
            <param name="XmlTypes">XML Type information.</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)">
            <summary>
            Saves an object.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to save</param>
            <param name="OwnerId">Owner of object</param>
            <param name="CreatedTimepoint">When the object was created.</param>
            <returns>Object ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>Timepoint when the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets Field Information for a specific field.
            
            NOTE: This method does not cache results.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTypeByObject(System.Int64)">
            <summary>
            Gets the Type Name of an object, given its ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Type Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTypeIdByName(System.String)">
            <summary>
            Gets the Type ID of a Type, given its name.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>Type ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)">
            <summary>
            Upgrades the type of an object.
            </summary>
            <param name="TypeInfo">Type information of object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="UpgradeToType">Upgrade to this type.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.SetupTypeParentId">
            <summary>
            Checks if the table objTypes should be modified with the new column 'ParentId'.
            If we add the column then FK_Parent_Child is created.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object and returns an XML-representation of the object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>XML representation of object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetEnumValue(System.String)">
            <summary>
            Gets the ID representing an enumerated value (or normalized string).
            </summary>
            <param name="NormalizedString">Enumeration or normalized string.</param>
            <returns>ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetEnumValues(System.String[])">
            <summary>
            Gets IDs for a set of enumerated values (or normalized strings).
            </summary>
            <param name="NormalizedStrings">Enumerated values or normalized strings.</param>
            <returns>IDs</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation and update timepoints for an object.
            </summary>
            <param name="TypeInfo">Object type information</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetObjectsPerOwner">
            <summary>
            Gets object statistics sorted per owner.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetObjectsPerOwnerType">
            <summary>
            Gets object statistics sorted per owner and type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetObjectsPerType">
            <summary>
            Gets object statistics sorted per type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetOwners">
            <summary>
            Gets a list of available owners.
            </summary>
            <returns>List of owners.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTypes(System.Int32)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTypes">
            <summary>
            Gets a list of available types.
            </summary>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetFields(System.Int32)">
            <summary>
            Gets a list of available fields.
            </summary>
            <returns>List of fields.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTables">
            <summary>
            Gets a list of available tables.
            </summary>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetViews">
            <summary>
            Gets a list of available views.
            </summary>
            <returns>List of views.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetStoredProcedures">
            <summary>
            Gets a list of available stored procedures.
            </summary>
            <returns>List of stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetTableColumns(System.String)">
            <summary>
            Gets a list of available table columns.
            </summary>
            <returns>List of table columns.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetStoredProcedureParameters(System.String)">
            <summary>
            Gets a list of available parameters to stored procedures.
            </summary>
            <returns>List of parameters to stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the Owner ID of an object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.GetOwnerName(System.Int32)">
            <summary>
            Gets the name of an owner.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <returns>Owner Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.FindUpgradeObjectIDs(System.String)">
            <summary>
            Fins all objects of a given type for upgrade.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>List of (Object ID, Owner ID) pairs.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrCreated(System.Int32)">
            <summary>
            Increments the counter counting number of objects created.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrUpdated(System.Int32)">
            <summary>
            Increments the counter counting number of objects updated.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrLoaded(System.Int32)">
            <summary>
            Increments the counter counting number of objects loaded.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrDeleted(System.Int32)">
            <summary>
            Increments the counter counting number of objects deleted.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrSearches(System.Int32)">
            <summary>
            Increments the counter counting number of searches.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrCreated">
            <summary>
            Increments the counter counting number of objects created by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrUpdated">
            <summary>
            Increments the counter counting number of objects updated by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrLoaded">
            <summary>
            Increments the counter counting number of objects loaded by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrDeleted">
            <summary>
            Increments the counter counting number of objects deleted by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.IncNrSearches">
            <summary>
            Increments the counter counting number of searches by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.RecycleIfNotOpen(System.Int32)">
            <summary>
            If the connection is not open (or not otherwise OK), the connection gets recycled.
            </summary>
            <param name="Attempt">Attempt ordinal</param>
            <returns>true, if the connection is recycled, false if connection OK.</returns>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Provider">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.Provider"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection. All access to this connection must be thread safe, and synchronized
            by locking <see cref="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.SynchObject"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Transaction">
            <summary>
            Current SQL transaction.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.SynchObject">
            <summary>
            Synchronization object for the SQL Connection. All access to the SQL Connection <see cref="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.Connection"/>
            must be thread safe.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.InTransaction">
            <summary>
            If the connection is inside a transaction or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.NrCreated">
            <summary>
            Number of objects created by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.NrUpdated">
            <summary>
            Number of objects updated by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.NrLoaded">
            <summary>
            Number of objects loaded by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.NrDeleted">
            <summary>
            Number of objects deleted by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.NrSearches">
            <summary>
            Number of searches through this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.MsSqlServer.SqlConnectionState.ParseRecord">
            <summary>
            Parser callback method
            </summary>
            <param name="Record">Record read</param>
            <param name="Parameters">Parameters</param>
        </member>
        <member name="T:Clayster.Library.Data.DatabaseOperation">
            <summary>
            Database operations. Used when logging temporary database errors.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.BulkSave">
            <summary>
            Bulk save objects
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Delete">
            <summary>
            Delete object
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.FindObjects">
            <summary>
            Find objects
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.FindUpgradeObjects">
            <summary>
            Find upgrade objects
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Load">
            <summary>
            Load object
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Save">
            <summary>
            Save object
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Search">
            <summary>
            Search
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Statistics">
            <summary>
            Statistical oepration
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.Update">
            <summary>
            Update object
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.UpdateType">
            <summary>
            Update object type
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.BulkUpdate">
            <summary>
            Bulk update objects
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DatabaseOperation.BulkDelete">
            <summary>
            Bulk delete objects
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.TemporaryDatabaseExceptionEventHandler">
            <summary>
            Delegate for temporary database exception events. These exceptions are caught and repressed
            as retries are made.
            </summary>
            <param name="ex">Exception caught.</param>
            <param name="TriesLeft">Tries left before escalating the error to a true exception.</param>
            <param name="Operation">Database operation performed</param>
            <param name="TypeName">Type name</param>
            <param name="Object">Object (acted upon)</param>
            <param name="Subject">Subject (acting upon)</param>
        </member>
        <member name="T:Clayster.Library.Data.ProgressEventHandler">
            <summary>
            Event handler for backup/restore progress messages. If the event handler throws an exception, that exception will
            abort the entire backup/restore procedure and exception will be propagaded to oroginal caller of the backup or restore
            method.
            </summary>
            <param name="Sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Data.ObjectErrorEventHandler">
            <summary>
            Event handler for backup/restore object error messages. If the event handler throws an exception, that exception will
            abort the entire backup/restore procedure and exception will be propagaded to oroginal caller of the backup or restore
            method.
            </summary>
            <param name="Sender">Sender of event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Clayster.Library.Data.DB">
            <summary>
            Class handling all database access.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Stellan Bergström, Olof Zandrén, Tina Beckman
            </remarks>
        </member>
        <member name="T:Clayster.Library.Data.IDataLayer">
            <summary>
            Generic interface for any SQL-based data layer.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher, Tina Beckman
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.IDataLayer.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.IDataLayer.GetSqlConnectionState(System.String)">
            <summary>
            Gets a SQL connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.IDataLayer.GetMySqlConnectionState(System.String)">
            <summary>
            Gets a SQL connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>		
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.MicrosoftSqlServerConnectionString">
            <summary>
            Connection string to use to connect to the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.ProviderName">
            <summary>
            Name of the provider handling the connection string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.HasMicrosoftSqlServerConnectionString">
            <summary>
            If a connection (string) to Microsoft SQL Server is available.
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.MySqlConnectionString">
            <summary>
            Connection string to use to connect to the My SQL database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.HasMySqlConnectionString">
            <summary>
            If a connection (string) to My SQL database is available.
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.ConnectionString">
            <summary>
            Connection string to use to connect to the server database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.IDataLayer.HasConnectionString">
            <summary>
            If a connection (string) to a server database is available (either Microsoft SQL, My SQL or other provider of database type requiring a connection string).
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DB.ShortStringClipLength">
            <summary>
            Maximum length of short strings.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DB.EncryptedShortStringClipLength">
            <summary>
            Maximum length of encrypted short strings.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DB.NormalizedStringMaxLength">
            <summary>
            Maximum length of short strings.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DB.BuildMicrosoftSqlServerConnectionString(System.String,System.String)">
            <summary>
            Builds a Microsoft SQL Server connection string using NT integrated security
            </summary>
            <param name="Server">Server Name</param>
            <param name="Database">Database</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.BuildMicrosoftSqlServerConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
            Builds a Microsoft SQL Server connection string SQL security
            </summary>
            <param name="Server">Server Name</param>
            <param name="Database">Database</param>
            <param name="UserName">SQL User Name</param>
            <param name="Password">Password</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.BuildMySqlConnectionString(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds a My SQL connection string
            </summary>
            <param name="Server">Server Name</param>
            <param name="Port">Port</param>
            <param name="Database">Database</param>
            <param name="UserName">SQL User Name</param>
            <param name="Password">Password</param>
            <returns>Connection String</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.BuildSQLiteConnectionString(System.String)">
            <summary>
            Builds a SQLite connection string.
            </summary>
            <param name="FileName">File name of database.</param>
            <returns>Connecction string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.Terminate">
            <summary>
            Terminates the object database. Call this method when closing the application, to make sure any cached data
            is saved properly.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DB.Flush">
            <summary>
            Saves any pending data in registered providers.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String,System.Boolean)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnection">If the proxy should use a dedicated connection or not.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Type,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.Object,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetDatabaseProxy(System.String,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.Clip(System.String,System.Int32)">
            <summary>
            Checks if a string is longer than a maximum length. If so, it clips the string 
            to the maximum length.
            </summary>
            <param name="s">String to check.</param>
            <param name="MaxLen">Maximum length.</param>
            <returns>Possibly clipped string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToString(System.Double)">
            <summary>
            Converts a number to a string.
            </summary>
            <param name="d">Number</param>
            <returns>String representation of the number.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ParseDouble(System.String)">
            <summary>
            Parses a double from a string.
            </summary>
            <param name="s">String representation of a double value.</param>
            <returns>Double</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToStringXml(System.DateTime)">
            <summary>
            Converts a DateTime to a string (XML Format).
            </summary>
            <param name="TP">Timepoint</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToStringXmlForSql(System.DateTime)">
            <summary>
            Converts a DateTime to a string (XML Format used by SQL, i.e. XML format but SQL date time limitations of max and min value).
            </summary>
            <param name="TP">Timepoint</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToStringSql(System.DateTime)">
            <summary>
            Converts a DateTime to a string (SQL Format).
            </summary>
            <param name="TP">Timepoint</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToStringMySql(System.DateTime)">
            <summary>
            Converts a DateTime to a string (My SQL Format).
            </summary>
            <param name="TP">Timepoint</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ToStringSQLite(System.DateTime)">
            <summary>
            Converts a DateTime to a string (SQLite Format).
            </summary>
            <param name="TP">Timepoint</param>
            <returns>String representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FromLongSQLite(System.Int64)">
            <summary>
            Converts a long (SQLite filetime) to a datetime.
            </summary>
            <param name="TP">Timepoint</param>
            <returns>Datetime representation</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ValidDateTime(System.DateTime)">
            <summary>
            Return a valid date time within database min and max values to use in database.
            </summary>
            <param name="TP">Timepoint</param>
            <returns>Valid timepoint to use in database</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ParseDateTime(System.String)">
            <summary>
            Parses a string to a DateTime (XML Format).
            </summary>
            <param name="s">String</param>
            <returns>DateTime</returns>
            <exception cref="T:Clayster.Library.Data.DBInputException">If the string does not follow the XML DateTime format.</exception>
        </member>
        <member name="M:Clayster.Library.Data.DB.TryParseDateTime(System.String,System.DateTime@)">
            <summary>
            Parses a string to a DateTime (XML Format).
            </summary>
            <param name="s">String</param>
            <param name="Result">DateTime</param>
            <returns>true iff the string could be parsed, false if not.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.CalcHash(System.String)">
            <summary>
            Calculates an MD5 Hash of a string value.
            </summary>
            <param name="s">String to calculate hash on.</param>
            <returns>MD5 Hash</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetFieldId(System.String,System.String)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetTypeId(System.Type)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <returns>TypeId corresponding to the Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.SaveNewObject(System.Object[],System.Int32)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.SaveNewObject(System.Object,System.Int32)">
            <summary>
            Saves a new object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object,System.Int32)">
            <summary>
            Updates an object in the database. The object must have
            a parameter containing the Object Id.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object[],System.Int64[],System.Int32)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the objects.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object[],System.Int32)">
            <summary>
            Updates an array of objects in the database. The objects
            must contain fields containing the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object[],System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an array of objects in the database. The objects must
            contain the Object IDs of the objects.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or
            <see cref="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type of object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObjectAsXml(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an array of objects from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObjectAsXml(System.Int64[],System.Int32)">
            <summary>
            Loads an array of objects from the database.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Array of loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValue(System.Enum)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValue(System.Enum,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of an enumeration value.
            </summary>
            <param name="EnumValue">Enumeration value</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the enumeration value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValue(System.String)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValues(System.Enum[])">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValues(System.Enum[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of enumeration values.
            </summary>
            <param name="EnumValues">Enumeration values</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the enumeration values.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValues(System.String[])">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)"/>, or instead.
            </summary>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectDates(System.Type,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Owner Id</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectCreationDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectUpdatedDate(System.Type,System.Int32,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Object,System.Int32)">
            <summary>
            Deletes an object from the database. The object must
            contain its Object Id.
            </summary>
            <param name="o">Object to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64[],System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64[],System.Int32)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Object[],System.Int32)">
            <summary>
            Deletes an array of objects from the database. The objects
            must contain their Object Ids
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectIds">Object IDs</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an array of objects from the database. The objects must
            contain their object ids.
            </summary>
            <param name="Objects">Objects to delete</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database. The object must contain
            its Object Id.
            </summary>
            <param name="o">Object to delete. Must contain its Object Id.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or
            <see cref="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(System.Type,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjectIDs(System.Int32,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjects``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjects``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindObjects``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct strings
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctStringValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct strings in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct integers
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct integers in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctIntegerValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct integers in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct integers matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct enums
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct enums in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctEnumValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct enumvalues in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct enums matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct doubles
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique doubles in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDoubleValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct doubles in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of distinct doubles matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type for distinct datetimes
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of unique datetimes in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDateTimeValues(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct datetime in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of datetimes matching the search criteria.</returns>
            
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctStringValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctIntegerValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctEnumValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDoubleValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>List of distinct strings in the database, given the specific type</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDistinctDateTimeValuesIncludingDescendants(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjectIDs(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjectIDs(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjects``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.FindDescendantObjects``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ObjectExists(System.Int32,System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ObjectExists(System.Int32,System.Type,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.Exists``1(System.Int32,System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.Exists``1(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.Exists``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectsPerOwner(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves amount of objects per owner.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectsPerOwnerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per owner and type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectsPerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per type.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetOwners(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetTypes(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the objects.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetTypes(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all types in database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetFields(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves all owners in database
            </summary>
            <param name="TypeId">Database Type ID</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetTableColumns(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given tablename for columns in the database
            </summary>
            <param name="TableName">Tablename to retrieve columns by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings matching the table name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetStoredProcedureParameters(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Searches the given stored procedure for parameters in the database
            </summary>
            <param name="StoredProcedure">Stored procedure name to retrieve parameters by</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Array of strings (parameternames) matching the stored procedure name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetObjectOwnerId(System.Int64,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the OwnerId by ObjectId
            </summary>
            <param name="ObjectId">Id of the object</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>OwnerId corresponding to the ObjectId.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetOwnerName(System.Int32)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetOwnerName(System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Owner name by Id
            </summary>
            <param name="OwnerId">Id of the owner</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Owner name corresponding to the id.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.GetTypeName(System.Type)">
            <summary>
            Returns the full type name of a type. In the cast of generic types, assembly and version information is removed
            from the generic parameters available in the type name.
            </summary>
            <param name="Type">Type</param>
            <returns>Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.WipeClean">
            <summary>
            Wipes the database clean.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DB.DoBackup(System.IO.Stream,Clayster.Library.Data.Providers.IProvider)">
            <summary>
            Performs a backup of an object database.
            </summary>
            <param name="Output">Output object database to this stream.</param>
            <param name="Provider">Provider of object database.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DoBackup(System.IO.Stream,Clayster.Library.Data.Providers.IProvider,Clayster.Library.Data.ProgressEventHandler,System.Object,System.Collections.Generic.List{System.String},System.Collections.Generic.SortedDictionary{System.String,System.Int64},System.Collections.Generic.SortedDictionary{System.String,System.Int64})">
            <summary>
            Performs a backup of an object database.
            </summary>
            <param name="Output">Output object database to this stream.</param>
            <param name="Provider">Provider of object database.</param>
            <param name="Callback">Optional callback method. Will be called to report status of operation. Can be null.</param>
            <param name="State">State object passed along to the <paramref name="Callback"/> method.</param>
            <param name="Errors">Any errors found during the backup process.</param>
            <param name="BackupStatistics">How many objects of each type was backed up.</param>
            <param name="TypesIgnored">What types was ignored in the backup, because a corresponding compatbile class
            was not found in memory. If the type did not use dedicated tables, the number of objects in the database
            corresponding to the type will be available in the value part corresponding to each key.</param>
        </member>
        <member name="M:Clayster.Library.Data.DB.DoRestore(System.IO.Stream,Clayster.Library.Data.Providers.IProvider,System.Text.StringBuilder)">
            <summary>
            Performs a restoration of an object database.
            </summary>
            <param name="Input">Input object database from this stream.</param>
            <param name="Provider">Provider of object database.</param>
            <param name="Errors">Any errors encountered in the process are output to this <see cref="T:System.Text.StringBuilder"/> object.</param>
        </member>
        <member name="E:Clayster.Library.Data.DB.OnTemporaryException">
            <summary>
            Event raised when temporary exceptions occur. These are caught, but repressed as
            retries are made. Only if all retries fail, 
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.MainProvider">
            <summary>
            Default database provider of the object database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.BackupConnectionString">
            <summary>
            Backup Connection String. Is used if a connection string cannot be found using the
            Configuration Manager. This is useful if you want to create console applications that
            provide connection information through arguments instead of a configuration file.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.BackupProviderName">
            <summary>
            Backup Provider Name. Is used if a connection string cannot be found using the
            Configuration Manager. This is useful if you want to create console applications that
            provide connection information through arguments instead of a configuration file.
            
            Default value is "System.Data.SqlClient".
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.MicrosoftSqlServerConnectionString">
            <summary>
            Returns the connection string for the current application to the database. Connection strings
            to a Microsoft SQL Server are only returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.MySqlConnectionString">
            <summary>
            Returns the connection string for the current application to the database. Connection strings
            to a My SQL database are only returned.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.ConnectionString">
            <summary>
            Returns the connection string for the current application to the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.ProviderName">
            <summary>
            Returns the name of the provider handling <see cref="P:Clayster.Library.Data.DB.ConnectionString"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.HasMicrosoftSqlServerConnectionString">
            <summary>
            If a connection (string) to Microsoft SQL Server is available.
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.HasMySqlConnectionString">
            <summary>
            If a connection (string) to My SQL database is available.
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DB.HasSqLiteConnectionString">
            <summary>
            If a connection (string) to SqLite database is available.
            
            NOTE: It doesn't say if the connection string works or not.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBCleanDBItem">
            <summary>
            Class handling clean db
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanDBItem.Owners">
            <summary>
            The number of owners retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanDBItem.Fields">
            <summary>
            The number of fields retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanDBItem.EnumValues">
            <summary>
            The number of enum values retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanDBItem.CleanedItems">
            <summary>
            The item id's retrieved.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBCleanedItem">
            <summary>
            Class handling cleaned items
            </summary>
            <remarks>
            © Clayster, 2008-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanedItem.Id">
            <summary>
            The id retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanedItem.Type">
            <summary>
            The item type retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBCleanedItem.Name">
            <summary>
            The itemnameretrieved.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBField">
            <summary>
            Class handling fields
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBField.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Class handling fields
            </summary>
            <param name="Id">Field ID</param>
            <param name="Name">Field Name</param>
            <param name="DataType">Field Data type</param>
            <param name="InternalDataType">The internal datatype (Integer, ShortString, LongString, Double, DateTime, Enum)</param>
        </member>
        <member name="P:Clayster.Library.Data.DBField.InternalDataType">
            <summary>
            The internal datatype (Integer, ShortString, LongString, Double, DateTime, Enum)
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBList`1">
            <summary>
            List containing dynamically loaded objects from the
            object database. The objects are only loaded into the list
            when actually referenced.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.#ctor(System.Int64[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            List containing dynamically loaded objects from the
            object database. The objects are only loaded into the list
            when actually referenced.
            </summary>
            <param name="ObjectIds">Array of Object IDs</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Sort(System.String[])">
            <summary>
            Sorts the collection of objects. The sort order is given by the parameters
            send to the method.
            </summary>
            <param name="Parameters">Sort parameters. These parameters have to contain a
            list of parameter names optionally suffixed by the strings " ASC", " ASCENDING",
            " DESC" or " DESCENDING" to mark sort order. These suffixes are optional and case insensitive.</param>
            <example>List.Sort("Field1", "Field2 DESC", "Field3 ASC");</example>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.ToArray">
            <summary>
            Converts the list to an array. All unloaded objects are loaded prior
            to creating the array.
            </summary>
            <returns>Array of objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.LoadAll">
            <summary>
            Loads all objects into the list.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.GetEarliestCreatedDeleteOthers">
            <summary>
            Gets the object in the list that was first created, and deletes all others.
            </summary>
            <returns>Earliest created object.</returns>
            <exception cref="T:Clayster.Library.Data.DBCompatibilityException">If the underlying class is not derived from <see cref="T:Clayster.Library.Data.DBObject"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.GetLastCreatedDeleteOthers">
            <summary>
            Gets the object in the list that was last created, and deletes all others.
            </summary>
            <returns>Last created object.</returns>
            <exception cref="T:Clayster.Library.Data.DBCompatibilityException">If the underlying class is not derived from <see cref="T:Clayster.Library.Data.DBObject"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.GetLastUpdatedDeleteOthers">
            <summary>
            Gets the object in the list that was last updated, and deletes all others.
            </summary>
            <returns>Last updated object.</returns>
            <exception cref="T:Clayster.Library.Data.DBCompatibilityException">If the underlying class is not derived from <see cref="T:Clayster.Library.Data.DBObject"/>.</exception>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.DeleteAll">
            <summary>
            Deletes all objects in the array.
            </summary>
            <returns>If any objects were deleted.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Dispose">
            <summary>
            Disposes of the list.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.IndexOf(`0)">
            <summary>
            Returns the index of an item. If the item is
            not found in the list, -1 is returned.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of the item in the list. If the item is
            not found in the list, -1 is returned.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Insert(System.Int32,`0)">
            <summary>
            DBList is read-only.
            </summary>
            <param name="index">Index to insert the item</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.RemoveAt(System.Int32)">
            <summary>
            DBList is read-only.
            </summary>
            <param name="index">Remove item at this index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Add(`0)">
            <summary>
            DBList is read-only.
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Clear">
            <summary>
            DBList is read-only.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Contains(`0)">
            <summary>
            If the object is contained in the list.
            </summary>
            <param name="item">object to search for.</param>
            <returns>True iff the object is found in the list.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Copy to this index.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.Remove(`0)">
            <summary>
            DBList is read-only.
            </summary>
            <param name="item">Item to remove</param>
            <returns>If the item was found and removed.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.ObjectIds">
            <summary>
            Returns an array of Object IDs of the objects in the list.
            Accessing this array instead of the objects may save time
            since the objects are not loaded into memory until they themselves
            are accessed through the index operator or enumerator.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.Item(System.Int32)">
            <summary>
            Gets the object at the given position.
            </summary>
            <param name="index">index of the object in the list.</param>
            <returns>Object at the given index.</returns>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.Count">
            <summary>
            Number of objects in the list.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.IsReadOnly">
            <summary>
            DBList is read-only.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBList`1.DBListEnumerator`1">
            <summary>
            Enumerator class for the DBList generic class.
            </summary>
            <typeparam name="T2">Base type used.</typeparam>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.DBListEnumerator`1.Dispose">
            <summary>
            Disposes of the enumerator object.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.DBListEnumerator`1.MoveNext">
            <summary>
            Moves to the next item in the list.
            </summary>
            <returns>True iff a new item is available.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBList`1.DBListEnumerator`1.Reset">
            <summary>
            Resets the enumerator object to the position before the
            first item in the list.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.DBListEnumerator`1.Current">
            <summary>
            Current object.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBList`1.DBListEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Current object.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBException">
            <summary>
            Base class of all Object Database exceptions.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBException.#ctor(System.String)">
            <summary>
            Base class of all Object Database exceptions.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.Data.DBException.#ctor(System.String,System.Exception)">
            <summary>
            Base class of all Object Database exceptions.
            </summary>
            <param name="Message">Exception message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="T:Clayster.Library.Data.DBTransactionException">
            <summary>
            Thrown if transaction handling is incorrect.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBTransactionException.#ctor(System.String)">
            <summary>
            Thrown if transaction handling is incorrect.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBTypeRecieveException">
            <summary>
            Thrown if no type is returned
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeRecieveException.#ctor(System.String)">
            <summary>
            Thrown if no type is returned
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBFieldLengthException">
            <summary>
            Thrown when the length of a field makes a type incompatible.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldLengthException.#ctor(System.String)">
            <summary>
            Thrown when the length of a field makes a type incompatible.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBNotFoundException">
            <summary>
            Thrown when an object is not found when one is expected.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBNotFoundException.#ctor(System.String)">
            <summary>
            Thrown when an object is not found when one is expected.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBOwnerException">
            <summary>
            Thrown when there's an owner mismatch.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBOwnerException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Thrown when there's an owner mismatch.
            </summary>
            <param name="Message">Exception message.</param>
            <param name="ObjectOwnerId">Object Owner ID.</param>
            <param name="DatabaseOwnerId">Database Owner ID</param>
        </member>
        <member name="P:Clayster.Library.Data.DBOwnerException.ObjectOwnerId">
            <summary>
            Object Owner ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBOwnerException.DatabaseOwnerId">
            <summary>
            Database Owner ID
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBTypeException">
            <summary>
            Thrown when there's an object type mismatch.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeException.#ctor(System.String)">
            <summary>
            Thrown when there's an object type mismatch.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.Data.DBTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Thrown when there's an object type mismatch.
            </summary>
            <param name="Message">Exception message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="T:Clayster.Library.Data.DBFieldException">
            <summary>
            Thrown when field errors are encountered in the object database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldException.#ctor(System.String)">
            <summary>
            Thrown when field errors are encountered in the object database.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBCompatibilityException">
            <summary>
            Thrown when an object is not compatible with the object database.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBCompatibilityException.#ctor(System.String)">
            <summary>
            Thrown when an object is not compatible with the object database.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBInputException">
            <summary>
            Thrown when input parameters are not correct.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBInputException.#ctor(System.String)">
            <summary>
            Thrown when input parameters are not correct.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="T:Clayster.Library.Data.DBExpressionException">
            <summary>
            Thrown when syntax errors in expressions are encountered.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBExpressionException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Thrown when syntax errors in expressions are encountered.
            </summary>
            <param name="Message">Error message.</param>
            <param name="Expression">Expression causing the error.</param>
            <param name="Position">Position in the expression where the error was found.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBExpressionException.Expression">
            <summary>
            Expression that caused the exception to be thrown.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBExpressionException.Position">
            <summary>
            Position into the expression where the error was found.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBEncryptionException">
            <summary>
            Thrown when encryption/decryption fails.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBEncryptionException.#ctor(System.String)">
            <summary>
            Thrown when encryption/decryption fails.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.Data.DBEncryptionException.#ctor(System.String,System.Exception)">
            <summary>
            Thrown when encryption/decryption fails.
            </summary>
            <param name="Message">Exception message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="T:Clayster.Library.Data.DBSqlException">
            <summary>
            Thrown when invalid SQL has been attempted to be executed.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBSqlException.#ctor(System.String,System.String)">
            <summary>
            Thrown when invalid SQL has been attempted to be executed.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Sql">SQL causing the exception.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBSqlException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Thrown when invalid SQL has been attempted to be executed.
            </summary>
            <param name="Message">Exception message</param>
            <param name="Sql">SQL causing the exception.</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="P:Clayster.Library.Data.DBSqlException.Sql">
            <summary>
            SQL causing the exception.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.ProtectedObjectException">
            <summary>
            Exception object thrown when protected objects are illegally accessed.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.ProtectedObjectException.#ctor(System.String)">
            <summary>
            Exception object thrown when protected objects are illegally accessed.
            </summary>
            <param name="Message">Exception message</param>
        </member>
        <member name="M:Clayster.Library.Data.ProtectedObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Exception object thrown when protected objects are illegally accessed.
            </summary>
            <param name="Message">Exception message</param>
            <param name="InnerException">Inner Exception</param>
        </member>
        <member name="T:Clayster.Library.Data.DBFieldInfo">
            <summary>
            Base class for fields and properties in database classes.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="F:Clayster.Library.Data.DBFieldInfo.parameterName">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DBFieldInfo.parameterFullName">
            <summary>
            Full name of the parameter.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.DBFieldInfo.parameterType">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.Init(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Initializes the object and its properties.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.GetValue(System.Object)">
            <summary>
            Gets the value of the field or property.
            </summary>
            <param name="o">Object</param>
            <returns>value</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the field or property.
            </summary>
            <param name="o">Object</param>
            <param name="Value">Value</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets an array of custom attributes set for the field or property.
            </summary>
            <param name="Type">Type of object</param>
            <param name="Inherit">Include inherited attributes</param>
            <returns>Array of attributes</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue">
            <summary>
            Checks if the field has any default value.
            </summary>
            <returns>true if the field has any default value.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.Int64)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.TimeSpan)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.Double)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.DateTime)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.String)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.HasDefaultValue(System.Object)">
            <summary>
            Checks if the default value of the field or property is equal to the provided value.
            </summary>
            <param name="Value">Value to check</param>
            <returns>true if <paramref name="Value">Value</paramref> is equal to
            the default value of the field or property.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.GetDefaultValue">
            <summary>
            Gets the default value of the field or property if one exists. null is returned otherwise.
            </summary>
            <returns>Default value or null in none exists.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfo.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.Name">
            <summary>
            Field or property name
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.FullName">
            <summary>
            Full name of the field or property
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.Type">
            <summary>
            Field or property type
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.FieldId">
            <summary>
            Database Field ID
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsByte">
            <summary>
            If it is a byte
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsInt16">
            <summary>
            If it is an Int16
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsInt32">
            <summary>
            If it is an Int32
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsInt64">
            <summary>
            If it is an Int64
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsChar">
            <summary>
            If it is a Char
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsBoolean">
            <summary>
            If it is a Boolean
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsDateTime">
            <summary>
            If it is a DateTime
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsTimeSpan">
            <summary>
            If it is a TimeSpan
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsSingle">
            <summary>
            If it is a Single
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsDouble">
            <summary>
            If it is a Double
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsEnum">
            <summary>
            If it is an Enum
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsObject">
            <summary>
            If it is an object
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsString">
            <summary>
            If it is a String
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsLongString">
            <summary>
            If it is a Long String
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsShortString">
            <summary>
            If it is a Short String
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsNormalizedString">
            <summary>
            If it is a Normalized String
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsBlob">
            <summary>
            If it is a Blob (Binary Large OBject)
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsCollection">
            <summary>
            If it is a collection of objects.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsImage">
            <summary>
            If it is an image
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsStream">
            <summary>
            If it is a stream.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsXmlDocument">
            <summary>
            If it is an Xml Document
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsObsolete">
            <summary>
            True iff the field or property has been marked as obsolete.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsEncryptedShortString">
            <summary>
            True iff the field or property has been marked for encryption, and is a short string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsEncryptedLongString">
            <summary>
            True iff the field or property has been marked for encryption, and is a long string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsEncryptedString">
            <summary>
            True iff the field or property has been marked for encryption, and is a short or long string.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.IsClipped">
            <summary>
            True iff the field or property has been marked for clipping.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.MaxLength">
            <summary>
            Maximum length of field (if available), 0 otherwise.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBFieldInfo.DedicatedIndex">
            <summary>
            If the property has a dedicated index or not. Only workds for classes with dedicated tables.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBFieldInfoField">
            <summary>
            Class containing information about a field in a class.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.#ctor(System.Reflection.FieldInfo,Clayster.Library.Data.DBDefaultAttribute,System.Boolean,System.Boolean)">
            <summary>
            Class containing information about a field in a class.
            </summary>
            <param name="FieldInfo">Field Information</param>
            <param name="DefaultValue">Default value attribute</param>
            <param name="IsObsolete">If marked as obsolete (true) or not (false)</param>
            <param name="DedicatedIndex">If the property has a dedicated index or not. Only workds for 
            classes with dedicated tables.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.#ctor(System.Reflection.FieldInfo,Clayster.Library.Data.DBDefaultAttribute,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean,System.Boolean)">
            <summary>
            Class containing information about a field in a class.
            </summary>
            <param name="FieldInfo">Field Information</param>
            <param name="DefaultValue">Default value attribute</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="IsObsolete">If marked as obsolete (true) or not (false)</param>
            <param name="DedicatedIndex">If the property has a dedicated index or not. Only workds for 
            classes with dedicated tables.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.Init(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.Init(Clayster.Library.Data.Providers.IProviderConnectionState)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.GetValue(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.GetValue(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.SetValue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.SetValue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoField.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBFieldInfoProperty">
            <summary>
            Class containing information about a property in a class.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.#ctor(System.Reflection.PropertyInfo,Clayster.Library.Data.DBDefaultAttribute,System.Boolean,System.Boolean)">
            <summary>
            Class containing information about a property in a class.
            </summary>
            <param name="PropertyInfo">Property information</param>
            <param name="DefaultValue">Default value attribute</param>
            <param name="IsObsolete">If marked as obsolete (true) or not (false)</param>
            <param name="DedicatedIndex">If the property has a dedicated index or not. Only workds for 
            classes with dedicated tables.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.#ctor(System.Reflection.PropertyInfo,Clayster.Library.Data.DBDefaultAttribute,Clayster.Library.Data.Providers.IProviderConnectionState,System.Boolean,System.Boolean)">
            <summary>
            Class containing information about a property in a class.
            </summary>
            <param name="PropertyInfo">Property information</param>
            <param name="DefaultValue">Default value attribute</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="IsObsolete">If marked as obsolete (true) or not (false)</param>
            <param name="DedicatedIndex">If the property has a dedicated index or not. Only workds for 
            classes with dedicated tables.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.Init(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.Init(Clayster.Library.Data.Providers.IProviderConnectionState)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.GetValue(System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.GetValue(System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.SetValue(System.Object,System.Object)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.SetValue(System.Object,System.Object)"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBFieldInfoProperty.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            <see cref="M:Clayster.Library.Data.DBFieldInfo.GetCustomAttributes(System.Type,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBObject">
            <summary>
            Base class for database objects. It is not mandatory to use
            this base class to be able to store objects in the database.
            However, some methods and fields on the object makes it easier
            to use if derived from this class or any of its descendants.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.#ctor">
            <summary>
            Base class for database objects. It is not mandatory to use
            this base class to be able to store objects in the database.
            However, some methods and fields on the object makes it easier
            to use if derived from this class or any of its descendants.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.#ctor(System.Int32)">
            <summary>
            Base class for database objects. It is not mandatory to use
            this base class to be able to store objects in the database.
            However, some methods and fields on the object makes it easier
            to use if derived from this class or any of its descendants.
            </summary>
            <param name="OwnerId">Owner of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.#ctor(Clayster.Library.Data.ObjectDatabase)">
            <summary>
            Base class for database objects. It is not mandatory to use
            this base class to be able to store objects in the database.
            However, some methods and fields on the object makes it easier
            to use if derived from this class or any of its descendants.
            </summary>
            <param name="db">Owner of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.ValidateObject">
            <summary>
            Is called before the object is persisted. Enter code here
            to make sure the object is valid before persisting it. If
            error are encountered an exception is thrown.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.OnLoaded(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Method called after the object has been loaded. Clear the modified status flag.
            </summary>
            <param name="ConnectionState">Connection State used to load the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.SaveNew">
            <summary>
            Saves the object as a new object in the database.
            The Owner ID of the object has to be specified first.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.SaveNew(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves the object as a new object in the database.
            The Owner ID of the object has to be specified first.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.Update">
            <summary>
            Updates the object in the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.Update(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates the object in the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.UpdateIfModified">
            <summary>
            Updates the object in the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.UpdateIfModified(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates the object in the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.Delete">
            <summary>
            Delete the object from the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.Delete(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Delete the object from the database. It has to have its
            Object ID and Owner ID fields set first. If the object
            has been loaded from the database or previously saved as 
            new objects, these fields are automatically set.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.SetOwner(Clayster.Library.Data.ObjectDatabase)">
            <summary>
            Sets the owner of the object.
            </summary>
            <param name="db">Object database object for the application.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.ReloadIfNewerExists">
            <summary>
            Reloads the object if a newer version exists on the server.
            </summary>
            <returns>True iff the object was reloaded.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.ReloadIfNewerExists(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Reloads the object if a newer version exists on the server.
            </summary>
            <returns>True iff the object was reloaded.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.ReloadIfNewerExists(System.DateTime)">
            <summary>
            Reloads the object if a newer version exists on the server.
            </summary>
            <param name="OnlyIfLastCheckedBefore">Only performes a database check,
            if the last time the object was loaded or refreshed was prior to this value.</param>
            <returns>True iff the object was reloaded.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.ReloadIfNewerExists(Clayster.Library.Data.Providers.IProviderConnectionState,System.DateTime)">
            <summary>
            Reloads the object if a newer version exists on the server.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="OnlyIfLastCheckedBefore">Only performes a database check,
            if the last time the object was loaded or refreshed was prior to this value.</param>
            <returns>True iff the object was reloaded.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBObject.RestoreDatabaseInformation(System.Int32,System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            This method can be used by object caches to restore database information to a database object.
            </summary>
            <param name="OwnerID">Owner ID</param>
            <param name="ObjectID">Object ID</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
            <param name="Modified">If the object has been modified since loaded from the database.</param>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.ObjectId">
            <summary>
            Object ID of the object in the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.OwnerId">
            <summary>
            Owner ID of the object in the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.Modified">
            <summary>
            If the object contains unsaved data.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.Deleted">
            <summary>
            If the object has been deleted by a call to <see cref="M:Clayster.Library.Data.DBObject.Delete"/> or
            <see cref="M:Clayster.Library.Data.DBObject.Delete(Clayster.Library.Data.Providers.IProviderConnectionState)"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.Created">
            <summary>
            When the object was created in the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.Updated">
            <summary>
            When the object was last updated in the database.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObject.LastCheck">
            <summary>
            Last time the object was loaded or refreshed from the database.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBObjectStatistics">
            <summary>
            Class handling statistics for objects.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="P:Clayster.Library.Data.DBObjectStatistics.Owner">
            <summary>
            The owner retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObjectStatistics.OwnerId">
            <summary>
            The owner id retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObjectStatistics.Type">
            <summary>
            The type retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObjectStatistics.TypeId">
            <summary>
            The type id retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBObjectStatistics.ObjectAmount">
            <summary>
            The number of objects in the database (by owner/type).
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBOwner">
            <summary>
            Class handling an owner
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBOwner.#ctor(System.Int32,System.String)">
            <summary>
            Class handling an owner
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.DBOwner.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBOwner.Id">
            <summary>
            The id retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBOwner.Name">
            <summary>
            The name retrieved.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBStatistics">
            <summary>
            Class handling all database access.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBStatistics.op_Addition(Clayster.Library.Data.DBStatistics,Clayster.Library.Data.DBStatistics)">
            <summary>
            Adds two database statistics structures.
            </summary>
            <param name="S1">Statistics structure 1</param>
            <param name="S2">Statistics structure 2</param>
            <returns>Sum of the two structures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBStatistics.op_Subtraction(Clayster.Library.Data.DBStatistics,Clayster.Library.Data.DBStatistics)">
            <summary>
            Subtracts two database statistics structures from each other.
            </summary>
            <param name="S1">Statistics structure 1</param>
            <param name="S2">Statistics structure 2</param>
            <returns>The difference of the two structures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.DBStatistics.ToString">
            <summary>
            Returns a string with all statistics presented.
            </summary>
            <returns>String with all statistics presented.</returns>
        </member>
        <member name="P:Clayster.Library.Data.DBStatistics.NrCreated">
            <summary>
            Numbers of objects created in the database since the application
            was loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBStatistics.NrUpdated">
            <summary>
            Numbers of objects updated in the database since the application
            was loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBStatistics.NrLoaded">
            <summary>
            Numbers of objects loaded from the database since the application
            was loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBStatistics.NrDeleted">
            <summary>
            Numbers of objects deleted from the database since the application
            was loaded.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBStatistics.NrSearches">
            <summary>
            Numbers of searches made to the database since the application
            was loaded.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.DBType">
            <summary>
            Class handling a type
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.DBType.#ctor(System.Int32,System.String)">
            <summary>
            Class handling a type
            </summary>
            <param name="Id">Type ID</param>
            <param name="Type">Type name</param>
        </member>
        <member name="M:Clayster.Library.Data.DBType.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Class handling a type
            </summary>
            <param name="Id">Type ID</param>
            <param name="Type">Type name</param>
            <param name="Compatible">If the type is compatible with the object database or not.</param>
        </member>
        <member name="M:Clayster.Library.Data.DBType.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBType.Id">
            <summary>
            The id retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBType.Type">
            <summary>
            The type retrieved.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.DBType.Compatible">
            <summary>
            Shows if the type is compatible with the system
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.NodeDelegate">
            <summary>
            Search Expression Node delegate.
            </summary>
            <param name="Node">Search expression node.</param>
            <param name="Level">Depth of the node in the search expression.</param>
            <returns>true if the process should continue, false otherwise.</returns>
        </member>
        <member name="T:Clayster.Library.Data.Expressions.SubExpressionResult">
            <summary>
            Subexpression result enumeration
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SubExpressionResult.TrueForAll">
            <summary>
            If all results match the subexpression in the current subset (partition).
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SubExpressionResult.TrueForSome">
            <summary>
            If some results match the subexpression in the current subset (partition).
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SubExpressionResult.Unknown">
            <summary>
            If result is unknown.
            </summary>
        </member>
        <member name="F:Clayster.Library.Data.Expressions.SubExpressionResult.FalseForAll">
            <summary>
            If all results fail the subexpression in the current subset (partition).
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.ObjectDatabase">
            <summary>
            Proxy class tunneling all database access commands to the static class.
            Each application has its own proxy class making sure objects between
            applications are keps separated.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.BeginTransaction">
            <summary>
            Starts a transaction. Nested transactions are supported.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.CommitTransaction">
            <summary>
            Commits a transaction. Nested transactions are supported.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.RollbackTransaction">
            <summary>
            Rolls back a transaction. Nested transactions are supported.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetInfo(System.Type)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetCompatibleInfo(System.String)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.HasInfo(System.Type)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="Type">Object to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetInfo(System.String)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.AssertCompatible(System.Object)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.AssertCompatible(System.Type)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.AssertCompatible(System.String)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.CheckCompatible(System.Object)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="o">Object to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.CheckCompatible(System.Type)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="Type">Type to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.CheckCompatible(System.String)">
            <summary>
            Returns if the object is compatible with the object database
            </summary>
            <param name="TypeName">Type to check</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.SaveNewObject(System.Object)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.SaveNewObject(System.Object[])">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.UpdateObject(System.Object,System.Int64)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.UpdateObject(System.Object)">
            <summary>
            Updates an object in the database. The object must contain
            its Object ID.
            </summary>
            <param name="o">Object to update.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.UpdateObject(System.Object[],System.Int64[])">
            <summary>
            Updates an array of objects in the database.
            </summary>
            <param name="o">Objects to update.</param>
            <param name="ObjectId">Database IDs of the objects.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.UpdateObject(System.Object[])">
            <summary>
            Updates an array of objects in the database. The objects must
            contain their own Object ID fields.
            </summary>
            <param name="o">Objects to update.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Int64)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Type,System.Int64)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Int64[])">
            <summary>
            Loads an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[])"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Type,System.Int64[])"/>, or instead.
            </summary>
            <param name="ObjectId">Ids of the objects.</param>
            <returns>Loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64[])">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Ids of the objects.</param>
            <returns>Loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Type,System.Int64)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="Type">Type parameter describing what to upgrade to.</param>
            <param name="ObjectId">Id of the object.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObject(System.Type,System.Int64[])">
            <summary>
            Loads an array of objects from the database.
            </summary>
            <param name="Type">Type parameter describing what to upgrade to.</param>
            <param name="ObjectId">Ids of the objects.</param>
            <returns>Loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObjectAsXml(System.Int64[])">
            <summary>
            Loads an array of objects from the database, and returns the information in XML format.
            Works even if the objects are obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the objects.</param>
            <returns>Loaded objects in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.LoadObjectAsXml(System.Int64)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Ids of the objects.</param>
            <returns>Loaded objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectDates(System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int64,System.DateTime@,System.DateTime@)"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectDates(System.Type,System.Int64,System.DateTime@,System.DateTime@)"/>, or instead.
            </summary>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectCreationDate(System.Int64)">
            <summary>
            Gets the creation date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectCreationDate(System.Type,System.Int64)"/>, or instead.
            </summary>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectUpdatedDate(System.Int64)">
            <summary>
            Gets the last update date for an object.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.GetObjectUpdatedDate(System.Type,System.Int64)"/>, or instead.
            </summary>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type Information</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectCreationDate(Clayster.Library.Data.DBTypeInfo,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="TypeInfo">Type Information</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectUpdatedDate(Clayster.Library.Data.DBTypeInfo,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="TypeInfo">Type Information</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectDates(System.Type,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectCreationDate(System.Type,System.Int64)">
            <summary>
            Gets the creation date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The creation date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectUpdatedDate(System.Type,System.Int64)">
            <summary>
            Gets the last update date for an object.
            </summary>
            <param name="Type">Type of object.</param>
            <param name="ObjectId">Object Id</param>
            <returns>The last update date of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Int64)">
            <summary>
            Deletes an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64)"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Type,System.Int64)"/>, or instead.
            </summary>
            <param name="ObjectId">Object ID</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Type,System.Int64)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object ID</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Object)">
            <summary>
            Deletes an object from the database. The object must
            contain its Object Id.
            </summary>
            <param name="Object">Object</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Int64[])">
            <summary>
            Deletes an array of objects from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[])"/>, or
            <see cref="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Type,System.Int64[])"/>, or instead.
            </summary>
            <param name="ObjectId">Object IDs</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64[])">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object IDs</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Type,System.Int64[])">
            <summary>
            Deletes an array of objects from the database.
            </summary>
            <param name="Type">Type of object to delete.</param>
            <param name="ObjectId">Object IDs</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.DeleteObject(System.Object[])">
            <summary>
            Deletes an array of objects from the database. The objects
            must contain their own Object Ids.
            </summary>
            <param name="Objects">Objects</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjectIDs(System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjectIDs(System.Type)">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjectIDs(System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1(System.String,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1(Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1(System.Int32,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1(System.Int32)">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindObjects``1(System.Int32,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValues(System.Type,System.String)">
            <summary>
            Returns distinct string values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValues(System.String,System.String)">
            <summary>
            Returns distinct string values
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValues(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Returns distinct string values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValues(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Returns distinct string values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValues(System.Type,System.String)">
            <summary>
            Searches the given type for distinct integers
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValues(System.String,System.String)">
            <summary>
            Searches the given type for distinct integers
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValues(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Returns distinct integer values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return integers of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValues(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Returns distinct integer values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return integers of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValues(System.Type,System.String)">
            <summary>
            Searches the given type for distinct enum-values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValues(System.String,System.String)">
            <summary>
            Searches the given type for distinct enum-values
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValues(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Returns distinct enum values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return enums of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValues(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Returns distinct enum values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return enum of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValues(System.String,System.String)">
            <summary>
            Searches the given type for distinct double-values
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValues(System.Type,System.String)">
            <summary>
            Searches the given type for distinct double-values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValues(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Returns distinct integer values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return doubles of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValues(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Returns distinct integer values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return doubles of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValues(System.String,System.String)">
            <summary>
            Searches the given type for distinct datetime-values
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValues(System.Type,System.String)">
            <summary>
            Searches the given type for distinct datetime-values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValues(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Returns distinct datetime values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return datetimes of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValues(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Returns distinct datetime values
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of datetimes fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctValues``1(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctValues``1(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctValues``1(System.Type,System.String)">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctValues``1(System.String,System.String)">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjectIDs(System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjectIDs(System.Type)">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjectIDs(System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjects``1(System.String,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjects``1">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDescendantObjects``1(Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database descendant from the specified T and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValuesIncludingDescendants(System.Type,System.String)">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValuesIncludingDescendants(System.String,System.String)">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValuesIncludingDescendants(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctStringValuesIncludingDescendants(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct strings in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValuesIncludingDescendants(System.Type,System.String)">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValuesIncludingDescendants(System.String,System.String)">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValuesIncludingDescendants(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctIntegerValuesIncludingDescendants(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct integers in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValuesIncludingDescendants(System.Type,System.String)">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValuesIncludingDescendants(System.String,System.String)">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValuesIncludingDescendants(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctEnumValuesIncludingDescendants(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct enum values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValuesIncludingDescendants(System.Type,System.String)">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValuesIncludingDescendants(System.String,System.String)">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValuesIncludingDescendants(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDoubleValuesIncludingDescendants(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct double values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValuesIncludingDescendants(System.Type,System.String)">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValuesIncludingDescendants(System.String,System.String)">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="TypeName">Name of the type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValuesIncludingDescendants(System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="Exp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.FindDistinctDateTimeValuesIncludingDescendants(System.Type,System.String,System.String,System.Object[])">
            <summary>
            Searches the given type and descendants for distinct datetime values in the object database
            
            NOTE: This method does not work for objects in dedicated tables.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve values from</param>
            <param name="SearchExp">Limiting search expression. Only return strings of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.CleanDb">
            <summary>
            Cleans the database of data not used
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectsPerOwner">
            <summary>
            Retrieves objectamount per owner
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectsPerOwnerType">
            <summary>
            Retrieves objectamount per owner and type
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetObjectsPerType">
            <summary>
            Retrieves objectamount per type
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists(System.Type,System.String,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists(System.Type)">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists(System.Type,Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists``1(System.String,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists``1">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Exists``1(Clayster.Library.Data.Expressions.SearchExpression,System.Object[])">
            <summary>
            Searches for objects in the object database and returns true or false depending on if they where found.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetOwners">
            <summary>
            Retrieves all owners in the database
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetTypes">
            <summary>
            Retrieves all types in the database by owner id
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.GetFields(System.Int32)">
            <summary>
            Retrieves all fields by type in the database
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.ObjectDatabase.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.ObjectDatabase.ConnectionState">
            <summary>
            Connection State of the object database proxy.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.ObjectDatabase.Provider">
            <summary>
            Database provider of the object database proxy.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.ObjectDatabase.OwnerId">
            <summary>
            The Owner ID assigned to the database proxy.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.ObjectDatabase.SynchObject">
            <summary>
            Object used for synchronization.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState">
            <summary>
            Class handling all state information relating to a SQLite Connection.
            
            NOTE: The Connection State object performs actual communication with the
            database back-end. No caching is done here. For optimized access to the 
            database, use a Provider object (or Object Database proxy), since these
            perform caching.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Mikael Borgbrant, Olof Zandrén
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Init">
            <summary>
            Inits the database
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.WipeClean">
            <summary>
            Clears the database en reinits the tables.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Recycle(System.Int32)">
            <summary>
            Recycles the connection.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ExecuteScalar(System.String)">
            <summary>
            Executes SQL on the server that returns a single scalar response.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ExecuteNonQuery(System.String)">
            <summary>
            Executes SQL on the server that does not return data (or response is not interesting).
            </summary>
            <param name="Sql">SQL to execute.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ReadArray``1(System.String)">
            <summary>
            Executes an SQL statement, and returns an array of items returned as a response.
            </summary>
            <typeparam name="T">Data Type of returned items.</typeparam>
            <param name="Sql">SQL to execute.</param>
            <returns>Response</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ReadRecords(System.String,Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ParseRecord,System.Object[])">
            <summary>
            Executes SQL on the server, with custom parsing of the result.
            </summary>
            <param name="Sql">SQL to execute.</param>
            <param name="Parser">Parser</param>
            <param name="Parameters">Parametrs to send to parser.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTransactions">
            <summary>
            Returns an array of open (nested) transactions.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.BeginTransaction">
            <summary>
            Begins a new transaction. Transactions may be nested. The newly created transaction
            can be accessed through <see cref="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Transaction"/>.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.CommitTransaction">
            <summary>
            Commits the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.RollbackTransaction">
            <summary>
            Rollbacks the current (nested) transaction.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTransactionStackTraces">
            <summary>
            Stack Traces for locations where active transactions were created.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetOwnerId(System.String)">
            <summary>
            Gets the Owner ID for an Owner from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="Owner">Owner</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetFieldId(System.String,System.String)">
            <summary>
            Gets the Field ID for a Field from the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.AddTypeId(System.String,System.String)">
            <summary>
            Adds a type to the database. Caches are ignored. Should only
            be used by callers that cache results.
            </summary>
            <param name="TypeName">Type Name</param>
            <param name="XmlTypes">XML Type information.</param>
            <returns>Field ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.SaveObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int32,System.DateTime@)">
            <summary>
            Saves an object.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to save</param>
            <param name="OwnerId">Owner of object</param>
            <param name="CreatedTimepoint">When the object was created.</param>
            <returns>Object ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ImportObject(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.DBImportObject,System.Int32)">
            <summary>
            Imports an object.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ImportObject">Object to import</param>
            <param name="OwnerId">Owner of object</param>		
            <returns>Object ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.UpdateObject(Clayster.Library.Data.DBTypeInfo,System.Object,System.Int64,System.Int32)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>Timepoint when the object was updated.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,System.Object,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type information.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <param name="LoadInto">Object to load the information into</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetField(System.Int32,System.String@,System.String@)">
            <summary>
            Gets Field Information for a specific field.
            
            NOTE: This method does not cache results.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Field Name</param>
            <param name="FieldTypeName">Field Type Name</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTypeByObject(System.Int64)">
            <summary>
            Gets the Type Name of an object, given its ID.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Type Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTypeIdByName(System.String)">
            <summary>
            Gets the Type ID of a Type, given its name.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>Type ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.UpdateObjectType(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Type)">
            <summary>
            Upgrades the type of an object.
            </summary>
            <param name="TypeInfo">Type information of object.</param>
            <param name="ObjectId">Object ID</param>
            <param name="UpgradeToType">Upgrade to this type.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.LoadObjectAsXml(System.Int64,System.Int32)">
            <summary>
            Loads an object and returns an XML-representation of the object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
            <returns>XML representation of object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetEnumValue(System.String)">
            <summary>
            Gets the ID representing an enumerated value (or normalized string).
            </summary>
            <param name="NormalizedString">Enumeration or normalized string.</param>
            <returns>ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetEnumValues(System.String[])">
            <summary>
            Gets IDs for a set of enumerated values (or normalized strings).
            </summary>
            <param name="NormalizedStrings">Enumerated values or normalized strings.</param>
            <returns>IDs</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@)">
            <summary>
            Gets the creation and update timepoints for an object.
            </summary>
            <param name="TypeInfo">Object type information</param>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID</param>
            <param name="Created">When the object was created.</param>
            <param name="Updated">When the object was last updated.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">Owner ID</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetObjectsPerOwner">
            <summary>
            Gets object statistics sorted per owner.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetObjectsPerOwnerType">
            <summary>
            Gets object statistics sorted per owner and type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetObjectsPerType">
            <summary>
            Gets object statistics sorted per type.
            </summary>
            <returns>Statistics</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetOwners">
            <summary>
            Gets a list of available owners.
            </summary>
            <returns>List of owners.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTypes(System.Int32)">
            <summary>
            Retrieves all types in database that are used by a specific owner and are not dedicated.
            </summary>
            <param name="OwnerId">The owner ID of the object.</param>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTypes">
            <summary>
            Gets a list of available types.
            </summary>
            <returns>List of types.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetFields(System.Int32)">
            <summary>
            Gets a list of available fields.
            </summary>
            <returns>List of fields.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTables">
            <summary>
            Gets a list of available tables.
            </summary>
            <returns>List of tables.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetViews">
            <summary>
            Gets a list of available views.
            </summary>
            <returns>List of views.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetStoredProcedures">
            <summary>
            Gets a list of available stored procedures.
            </summary>
            <returns>List of stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetTableColumns(System.String)">
            <summary>
            Gets a list of available table columns.
            </summary>
            <returns>List of table columns.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetStoredProcedureParameters(System.String)">
            <summary>
            Gets a list of available parameters to stored procedures.
            </summary>
            <returns>List of parameters to stored procedures.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetObjectOwnerId(System.Int64)">
            <summary>
            Gets the Owner ID of an object.
            </summary>
            <param name="ObjectId">Object ID</param>
            <returns>Owner ID</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.GetOwnerName(System.Int32)">
            <summary>
            Gets the name of an owner.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <returns>Owner Name</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.FindUpgradeObjectIDs(System.String)">
            <summary>
            Fins all objects of a given type for upgrade.
            </summary>
            <param name="TypeName">Type Name</param>
            <returns>List of (Object ID, Owner ID) pairs.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrCreated(System.Int32)">
            <summary>
            Increments the counter counting number of objects created.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrUpdated(System.Int32)">
            <summary>
            Increments the counter counting number of objects updated.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrLoaded(System.Int32)">
            <summary>
            Increments the counter counting number of objects loaded.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrDeleted(System.Int32)">
            <summary>
            Increments the counter counting number of objects deleted.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrSearches(System.Int32)">
            <summary>
            Increments the counter counting number of searches.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
            <param name="Nr">Number</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrCreated">
            <summary>
            Increments the counter counting number of objects created by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrUpdated">
            <summary>
            Increments the counter counting number of objects updated by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrLoaded">
            <summary>
            Increments the counter counting number of objects loaded by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrDeleted">
            <summary>
            Increments the counter counting number of objects deleted by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.IncNrSearches">
            <summary>
            Increments the counter counting number of searches by one.
            
            NOTE: Incrementing counters should only be done while the state is locked.
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.RecycleIfNotOpen(System.Int32)">
            <summary>
            If the connection is not open (or not otherwise OK), the connection gets recycled.
            </summary>
            <param name="Attempt">Attempt ordinal</param>
            <returns>true, if the connection is recycled, false if connection OK.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.CheckIfTableExist(System.String)">
            <summary>
            Check if table excists.
            </summary>
            <param name="name">Table name</param>
            <returns>If table exists or not</returns>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Provider">
            <summary>
            <see cref="P:Clayster.Library.Data.Providers.IProviderConnectionState.Provider"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Connection">
            <summary>
            Gets an open SQL Connection. All access to this connection must be thread safe, and synchronized
            by locking <see cref="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.SynchObject"/>.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Transaction">
            <summary>
            Current SQL transaction.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.SynchObject">
            <summary>
            Synchronization object for the SQL Connection. All access to the SQL Connection <see cref="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.Connection"/>
            must be thread safe.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.InTransaction">
            <summary>
            If the connection is inside a transaction or not.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.NrCreated">
            <summary>
            Number of objects created by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.NrUpdated">
            <summary>
            Number of objects updated by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.NrLoaded">
            <summary>
            Number of objects loaded by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.NrDeleted">
            <summary>
            Number of objects deleted by this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.NrSearches">
            <summary>
            Number of searches through this connection state.
            
            NOTE: Object should be locked while fetching counters.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Providers.SQLiteServer.SqlConnectionState.ParseRecord">
            <summary>
            Parser callback method
            </summary>
            <param name="Record">Record read</param>
            <param name="Parameters">Parameters</param>
        </member>
        <member name="T:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider">
            <summary>
            Handles SQLite Server communication.
            </summary>
            <remarks>
            © Clayster, 2010-2015
            
            Author: Mikael Borgbrant, Olof Zandrén, Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Handles SQLite Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
            <param name="CheckDatabase">Check if database needs updating.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.#ctor(System.String,System.String)">
            <summary>
            Handles SQLite Server communication.
            </summary>
            <param name="ConnectionString">Connection String.</param>
            <param name="ProviderName">Provider Name.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.BuildSQLiteConnectionString(System.String)">
            <summary>
            Builds a SQLite connection string.
            </summary>
            <param name="FileName">File name of database.</param>
            <returns>Connecction string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetConnectionState(System.String)">
            <summary>
            Gets a connection state object given its name. If none is found, a new connection is
            created, and the connection state object for that connection is returned.
            </summary>
            <param name="ConnectionName">Name of the connection.</param>
            <returns>Connection state object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetInfo(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="Type">Object to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetCompatibleInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object class to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.HasInfo(System.String)">
            <summary>
            Checks if the type is stored in the memory cache.
            </summary>
            <param name="TypeName">Name of object type to check</param>
            <returns>true iff the type is stored in the cache.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetInfo(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets information regarding a type and its object database compatibility.
            </summary>
            <param name="TypeFullName">Full Name of Object type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>DB Object Database information record</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.AssertCompatible(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Makes sure the object is compatible with the object database.
            </summary>
            <param name="TypeName">Type to check</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <exception cref="T:Clayster.Library.Data.DBException">Thrown if the object is not compatible.</exception>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetCachedTypes">
            <summary>
            Returns an array of all type information available at the time of the methoc call.
            
            NOTE: Types are dynamically added to the cache, as they are requested/accessed by the
            object database.
            </summary>
            <returns>Array of cached type information available at the time of the call.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetDatabaseProxy(System.String,Clayster.Library.Data.Providers.IProviderConnectionState,System.String)">
            <summary>
            Returns a Object Database Proxy object that can be used by the 
            owner to access the object database safely.
            </summary>
            <param name="Owner">Owner of the objects to access.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="DedicatedConnectionName">The name of the dedicated connection assigned to the proxy.</param>
            <returns>Object Database proxy</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ClearCache">
            <summary>
            Clears all caches
            </summary>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetFieldId(System.String,System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the FieldId corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldName">Name of field</param>
            <param name="FieldTypeName">Type of field</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>FieldId corresponding to the Field Name and Field Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetTypeId(System.Type,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the TypeId corresponding to a Type Name.
            </summary>
            <param name="Type">Type</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>TypeId corresponding to the Type Name and Type Type Name.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.SaveNewObject(System.Object[],System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an array of objects to the database.
            </summary>
            <param name="o">Objects to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>An array of IDs of the objects.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.SaveNewObject(System.Object,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Saves an object to the database.
            </summary>
            <param name="o">Object to save.</param>
            <param name="OwnerId">Owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the object.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.UpdateObject(System.Object,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Updates an object in the database.
            </summary>
            <param name="o">Object to update.</param>
            <param name="ObjectId">Database ID of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadObject(System.Int64,System.Int32,System.String)">
            <summary>
            Loads an object from the database.
            
            NOTE: This method only works for objects without dedicated tables. If you want to 
            use objects of a class using a dedicated table, call
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32)"/>, or
            <see cref="M:Clayster.Library.Data.Providers.Provider.LoadObject(System.Type,System.Int64,System.Int32)"/>, or instead.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object,System.Type,System.String)">
            <summary>
            Loads an object from the database.
            </summary>
            <param name="TypeInfo">Type Information for the object to be loaded.</param>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="LoadInto">Object to receive field and property data.</param>
            <param name="UpgradeType">If not null, upgrades the object to the specified object type.</param>
            <param name="FullNameForEncryption">Full name of type used for encryption of data (can be other than type of result object if upgrade of objects)</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadObjectAsXml(System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads an object from the database, and returns the information in XML format.
            Works even if the object is obsolete or removed.
            </summary>
            <param name="ObjectId">Id of the object.</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>Loaded object in XML format</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetEnumValue(System.String,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the ID of a normalized string.
            </summary>
            <param name="NormalizedString">Normalized string.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>ID of the string.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetEnumValues(System.String[],Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the IDs of an array of normalized strings.
            </summary>
            <param name="NormalizedStrings">Normalized strings.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <returns>IDs of the strings.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetObjectDates(Clayster.Library.Data.DBTypeInfo,System.Int32,System.Int64,System.DateTime@,System.DateTime@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the creation date and last update date for an object.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="OwnerId">Id of the owner of the object.</param>
            <param name="ObjectId">Object Id</param>
            <param name="Created">Output parameter for when the object was created.</param>
            <param name="Updated">Output parameter for when the object was last updated.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetField(System.Int32,System.String@,System.String@,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Gets the Field corresponding to a pair of Field Name and Field Type Name strings.
            </summary>
            <param name="FieldId">Field ID</param>
            <param name="FieldName">Name of field will be output to this variable.</param>
            <param name="FieldTypeName">Type of the field will be output to this variable.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.DeleteObject(Clayster.Library.Data.DBTypeInfo,System.Int64,System.Int32,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Deletes an object from the database.
            </summary>
            <param name="TypeInfo">Type information. Leave as null if type unknown.</param>
            <param name="ObjectId">Object ID</param>
            <param name="OwnerId">The owner ID of the object.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindObjectIDs(System.Int32,System.Nullable{System.Int32},System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="TypeName">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindObjects``1(System.Int32,System.Nullable{System.Int32},Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database and loads them.
            </summary>
            <typeparam name="T">Type parameter describing what types of objects to load.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="MaxCount">Optional limit of the maximum number of objects to return.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of objects of type T of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindDistinctValues``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database.
            </summary>
            <typeparam name="T">type of the values of <paramref name="ParameterName"/>.</typeparam>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindDistinctValuesIncludingDescendants``1(System.Int32,System.Type,System.String,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for distinct values in the object database, from objects of a specific type, including
            descendant objects.
            
            NOTE: This method does not work for objects in dedicated tables, when dedicated tables are implemented.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="ParameterName">Name of the parameter to retrieve</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of disinct strings matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.FindDescendantObjectIDs(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database that descendant from the specified Type (including specified Type)
            
            NOTE: This method does not work for objects in dedicated tables, when dedicated tables are implemeted.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>Array of IDs of objects matching the search criteria.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ObjectExists(System.Int32,System.Type,Clayster.Library.Data.Expressions.SearchExpression,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Searches for objects in the object database.
            </summary>
            <param name="OwnerId">Owner ID of the objects.</param>
            <param name="Type">Type of objects to search for.</param>
            <param name="SearchExpression">Limiting search expression. Only return
            IDs of objects fullfilling these requirements.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
            <param name="Parameters">Additional parameters of the search expression. 
            The first parameter will be given the variable %0%, the second %1%, etc.</param>
            <returns>True or false, depending on if the object was found</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.GetStatistics">
            <summary>
            Gets statistics on server performace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.CleanDb(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Cleans the database of data not used
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.SelfTest(System.String@)">
            <summary>
            Performs a self test on the object database.
            </summary>
            <param name="Error">Any errors found</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.CheckDedicatedTable(Clayster.Library.Data.DBTypeInfo,Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Checks the existance and compliance of the dedicated table.
            </summary>
            <param name="TypeInfo">Type information</param>
            <param name="ConnectionState">Connection state object, handling the connection over which
            database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadAllObjects(System.Int32,System.Type,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="Type">Type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadAllObjects(System.Int32,System.String,Clayster.Library.Data.Providers.IObjectSink,Clayster.Library.Data.Providers.IProviderConnectionState,System.Object[])">
            <summary>
            Loads all objects of a specific type from a specific owner and sends the objects to an object sink. Each request
            may result in multiple calls to the object sink.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="TypeName">Name of type</param>
            <param name="Destination">Destination object sink.</param>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Parameters">Parmeters to pass on to the object sink when objects are reported.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.WipeClean(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Wipes the database clean.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ImportOwners(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBOwner})">
            <summary>
            Imports a set of owners to the database. Each owner has to have an Owner ID and Owner Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Owners">Set of owners to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ImportTypes(Clayster.Library.Data.Providers.IProviderConnectionState,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBType})">
            <summary>
            Imports a set of types to the database. Each type has to have a Type ID and Type Name specified.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Types">Set of types to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ImportObjects(Clayster.Library.Data.Providers.IProviderConnectionState,System.Int32,System.Collections.Generic.IEnumerable{Clayster.Library.Data.DBImportObject})">
            <summary>
            Imports a set of objects to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="OwnerId">Owner ID of objects to import.</param>
            <param name="Objects">Set of objects to import.</param>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.LoadAllFieldDefinitions(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Loads all field definitions available in the object database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <returns>Array of available field definitions.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Providers.SQLiteServer.SQLiteServerProvider.ImportFields(Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.DBImportField[])">
            <summary>
            Imports a set of fields to the database.
            </summary>
            <param name="ConnectionState">Connection state object, handling the connection over which database access is to be performed.</param>
            <param name="Fields">Set of fields to import.</param>
        </member>
        <member name="T:Clayster.Library.Data.SaveObjects">
            <summary>
            Class that saves sets of objects to a stream.
            </summary>
            <remarks>
            © Clayster, 2013-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.SaveObjects.#ctor(System.IO.Stream,Clayster.Library.Data.Providers.IProvider,Clayster.Library.Data.Providers.IProviderConnectionState,Clayster.Library.Data.ProgressEventHandler,Clayster.Library.Data.ObjectErrorEventHandler,System.Object)">
            <summary>
            Class that saves sets of objects to a stream.
            </summary>
            <param name="Output">Output</param>
            <param name="Provider">Object database provider</param>
            <param name="ConnectionState">Connection state object</param>
            <param name="Callback">Optional callback method used to report progress. Can be null.</param>
            <param name="ErrorCallback">Optional callback method called when errors are encountered.</param>
            <param name="State">State object passed along to the callback method.</param>
        </member>
        <member name="M:Clayster.Library.Data.SaveObjects.ObjectsReceived(System.Int32,Clayster.Library.Data.DBImportObject[],System.Object[])">
            <summary>
            Is called when a set of objects have been received or loaded.
            </summary>
            <param name="OwnerId">Owner ID of objects reported.</param>
            <param name="Objects">Set of objects with corresponding Object IDs, created and updated timepoints.</param>
            <param name="Parameters">Parameters sent to the original object database request.</param>
        </member>
        <member name="M:Clayster.Library.Data.SaveObjects.ReportProgressMessage(System.String)">
            <summary>
            Reports a progress message.
            </summary>
            <param name="Msg"></param>
        </member>
        <member name="M:Clayster.Library.Data.SaveObjects.ObjectError(System.Int32,System.Int64,Clayster.Library.Data.DBTypeInfo,System.Exception,System.Object[])">
            <summary>
            Called whenever an object could not be loaded.
            </summary>
            <param name="OwnerId">Owner ID</param>
            <param name="ObjectId">Object ID of object.</param>
            <param name="TypeInfo">Information about the type that was attempted to be loaded.</param>
            <param name="ex">Error thrown during load attempt.</param>
            <param name="Parameters">Parameters sent to the original object database request.</param>
        </member>
        <member name="P:Clayster.Library.Data.SaveObjects.NrOwners">
            <summary>
            Number of owners reported.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.SaveObjects.NrObjects">
            <summary>
            Number of objects reported.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Statistics.ObjectStatistics">
            <summary>
            ObjectStatistics description object.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Stellan Bergström
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            ObjectStatistics constructor
            </summary>
            <param name="owner">Owner</param>
            <param name="type">Type</param>
            <param name="objectamount">Object amount</param>
            <param name="ownerid">Owner Id</param>
            <param name="typeid">TypeId</param>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerOwner">
            <summary>
            Retrieves objectamount per owner
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerOwner(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per owner
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerOwnerType">
            <summary>
            Retrieves objectamount per owner and type
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerOwnerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per owner and type
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerType">
            <summary>
            Retrieves objectamount per type
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.GetObjectsPerType(Clayster.Library.Data.Providers.IProviderConnectionState)">
            <summary>
            Retrieves objectamount per type
            </summary>
            <returns>List of ObjectStatistics.</returns>
        </member>
        <member name="F:Clayster.Library.Data.Statistics.ObjectStatistics.OwnerComparison">
            <summary>
            Owner comparsion
            </summary>
            <returns>Array of ObjectStatistics objects</returns>
        </member>
        <member name="F:Clayster.Library.Data.Statistics.ObjectStatistics.OwnerTypeComparison">
            <summary>
            Owner/type comparsion
            </summary>
            <returns>Array of ObjectStatistics objects</returns>
        </member>
        <member name="F:Clayster.Library.Data.Statistics.ObjectStatistics.TypeComparison">
            <summary>
            Type comparsion
            </summary>
            <returns>Array of ObjectStatistics objects</returns>
        </member>
        <member name="F:Clayster.Library.Data.Statistics.ObjectStatistics.TypeOwnerComparison">
            <summary>
            Type/owner comparsion
            </summary>
            <returns>Array of ObjectStatistics objects</returns>
        </member>
        <member name="F:Clayster.Library.Data.Statistics.ObjectStatistics.ObjectAmountComparison">
            <summary>
            Object amount comparsion
            </summary>
            <returns>Array of ObjectStatistics objects</returns>
        </member>
        <member name="M:Clayster.Library.Data.Statistics.ObjectStatistics.CompareTo(Clayster.Library.Data.Statistics.ObjectStatistics)">
            <summary>
            Override of ICompareable.CompareTo
            </summary>
            <param name="os">ObjectStatistics object</param>
            <returns>Integer</returns>
        </member>
        <member name="P:Clayster.Library.Data.Statistics.ObjectStatistics.OwnerId">
            <summary>
            OwnerId.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Statistics.ObjectStatistics.Owner">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Statistics.ObjectStatistics.TypeId">
            <summary>
            TypeId.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Statistics.ObjectStatistics.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Statistics.ObjectStatistics.ObjectAmount">
            <summary>
            ObjectAmount.
            </summary>
        </member>
        <member name="T:Clayster.Library.Data.Triplet`3">
            <summary>
            Generic class containing three values.
            </summary>
            <remarks>
            © Clayster, 2007-2015
            
            Author: Peter Waher
            </remarks>
        </member>
        <member name="M:Clayster.Library.Data.Triplet`3.#ctor(`0,`1,`2)">
            <summary>
            Generic class containing three values.
            </summary>
            <param name="Value1">First value.</param>
            <param name="Value2">Second value.</param>
            <param name="Value3">Third value.</param>
        </member>
        <member name="M:Clayster.Library.Data.Triplet`3.ToString">
            <summary>
            <see cref="M:System.Object.ToString"/>
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Triplet`3.Value1">
            <summary>
            First value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Triplet`3.Value2">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="P:Clayster.Library.Data.Triplet`3.Value3">
            <summary>
            Third value.
            </summary>
        </member>
    </members>
</doc>
